<html>
    <head>
    	<script language="cache" runat="server">d HEAD1^WSP999</script>
        <link rel="stylesheet" href="assets/styles/jxDashboardSuccessB2B.css">
    </head>
    <body onload="jInitMe()">
        <div id="wrapper">
            <div class="bg-wrapper">
                <div class="bg3">
                    <img src="./assets/images/bg3.png">
                </div>
            </div>
            <div class="content">
                <div class="main-field">
                    <i class="fa fa-bars mobile-active nav-toggle" style="color: #ffffff;" onclick="openMobileNav(event)"></i>
                    <img class="logo mobile-active" src="./assets/images/Jonda X Logo White Pink.png" alt="Jonda Health">
                    <div class="title">
                    	<h2>Transaction Success Rate</h2>
                    	<button class="back-btn" onclick="window.frameElement.src='jxDashboard.csp'"><img src="./assets/images/leftArrow.png" alt="Arrow"> Back</button>
                    </div>
                    <div class="stats">
                        <div class="overview-stat stat-block">
                            <div class="block-title">
                                <h4>Overview</h4>
                                <img src="./assets/images/optionHorizontal.png" alt="Option" onclick="togglePopup(event)">
                            </div>
                            <div class="dropdowns">
                                <div class="dropdown">
                                    <button id="time-select-btn" onclick="toggleTimeSelect()">All Time <img src="./assets/images/dropDrownWhite.png" alt="Dropdown"></button>
                                    <div id="time-select" class="collapse-field">
                                        <div class="collapse">
                                            <div class="item">
                                                <div class="round">
                                                    <input name="time" id="R1" type="radio" value="All Time" checked onclick="getAllTimeChart()">
                                                    <label for="R1"></label>
                                                </div>
                                                <p>All Time</p>
                                            </div>
                                            <div class="item">
                                                <div class="round">
                                                    <input name="time" id="R2" type="radio" value="Selected Range" onclick="toggleMonthSelector()">
                                                    <label for="R2"></label>
                                                </div>
                                                <p>Select Range</p>
                                            </div>
                                            <button onclick="closeTimeSelect()">Confirm</button>
                                        </div>
                                    </div>
                                </div>
                                <div class="dropdown">
                                    <button id="temp-select-btn" onclick="toggleTempSelect()">All Templates <img src="./assets/images/dropDrownWhite.png" alt="Dropdown"></button>
                                    <div id="temp-select" class="collapse-field">
                                        <div class="collapse">
                                            <div class="item">
                                                <div class="round">
                                                    <input name="temp" id="C1" type="checkbox" checked onclick="uncheckOthers()" value="All Templates">
                                                    <label for="C1"></label>
                                                </div>
                                                <p>All Templates</p>
                                            </div>
                                            <script language="cache" runat="server">
                                            	d WriteTemplates^jxDashboardSuccess
                                            </script>
                                            <button onclick="closeTempSelect()">Confirm</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="block-content">
                                <div class="stat">
                                    <p class="num"></p>
                                    <p>Average successful <br> transactions</p>
                                </div>
                                <div class="chart">
                                    <div class="sm-active"></div>
                                    <div class="col-small">
                                        <canvas id="success-chart-tick"></canvas>
                                    </div>
                                    <div class="col-large" onscroll="handleScroll(event)">
                                        <div class="box">
                                            <canvas id="success-chart"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="failure-stat stat-block">
                            <div class="block-title">
                                <h4>Transaction Failure Details</h4>
                                <img src="./assets/images/optionHorizontal.png" alt="Option" onclick="togglePopup(event)">
                            </div>
                            <p class='no-data'>You don't have any fail transactions yet!</p>
                            <div class="block-content">
                                <div class="result-table">
                                    <div class="table-border"></div>
                                    <div class="table-container">
                                        <table class="table table-striped">
                                            <thead>
                                                <tr>
                                                    <th>Date</th>
                                                    <th>Transaction No.</th>
                                                    <th>Template Type</th>
                                                    <th>Error Details</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                            <script language="cache" runat="server">
                                            	d WriteErrors^jxDashboardSuccess
                                            </script>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                </div>
            </div>
            <div id="popup1" class="popup inactive">
                <div class="popup-dialog">
                    <button class="download-btn" onclick="downloadCSV()">Download CSV file</button>
                    <button class="cancel-btn" onclick="removePopup()">Cancel</button>
                </div>
            </div>

            <div id="popup2" class="popup inactive">
                <div class="popup-dialog">
                    <img class="close-btn" src="./assets/images/cross.png" alt="Close" onclick="removePopup2()">
                    <h4>Select Range</h4>
                    <div class="from-date date-selector">
                        <p>From</p>
                        <div class="from-month">
                            <button id="from-month-btn" class="date-collapse" onclick="toggleMenu(event)">March <img src="./assets/images/dropDownSharp.png" alt=""></button>
                            <div class="collapse-data month-collapse">
                                <ul>
                                    <li onclick="changeDate(event,'from-month')">January</li>
                                    <li onclick="changeDate(event,'from-month')">February</li>
                                    <li onclick="changeDate(event,'from-month')">March</li>
                                    <li onclick="changeDate(event,'from-month')">April</li>
                                    <li onclick="changeDate(event,'from-month')">May</li>
                                    <li onclick="changeDate(event,'from-month')">June</li>
                                    <li onclick="changeDate(event,'from-month')">July</li>
                                    <li onclick="changeDate(event,'from-month')">August</li>
                                    <li onclick="changeDate(event,'from-month')">September</li>
                                    <li onclick="changeDate(event,'from-month')">October</li>
                                    <li onclick="changeDate(event,'from-month')">November</li>
                                    <li onclick="changeDate(event,'from-month')">December</li>
                                </ul>
                            </div>
                        </div>
                        <div class="from-year">
                            <button id="from-year-btn" class="date-collapse" onclick="toggleMenu(event)">2023 <img src="./assets/images/dropDownSharp.png" alt=""></button>
                            <div class="collapse-data year-collapse">
                                <ul>
                                    <li onclick="changeDate(event,'from-year')">2023</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="to-date date-selector">
                        <p>To</p>
                        <div class="to-month">
                            <button id="to-month-btn" class="date-collapse" onclick="toggleMenu(event)">July <img src="./assets/images/dropDownSharp.png" alt=""></button>
                            <div class="collapse-data month-collapse">
                                <ul>
                                    <li onclick="changeDate(event,'to-month')">January</li>
                                    <li onclick="changeDate(event,'to-month')">February</li>
                                    <li onclick="changeDate(event,'to-month')">March</li>
                                    <li onclick="changeDate(event,'to-month')">April</li>
                                    <li onclick="changeDate(event,'to-month')">May</li>
                                    <li onclick="changeDate(event,'to-month')">June</li>
                                    <li onclick="changeDate(event,'to-month')">July</li>
                                    <li onclick="changeDate(event,'to-month')">August</li>
                                    <li onclick="changeDate(event,'to-month')">September</li>
                                    <li onclick="changeDate(event,'to-month')">October</li>
                                    <li onclick="changeDate(event,'to-month')">November</li>
                                    <li onclick="changeDate(event,'to-month')">December</li>
                                </ul>
                            </div>
                        </div>
                        <div class="to-year">
                            <button id="to-year-btn" class="date-collapse" onclick="toggleMenu(event)">2023 <img src="./assets/images/dropDownSharp.png" alt=""></button>
                            <div class="collapse-data year-collapse">
                                <ul>
                                    <li onclick="changeDate(event,'to-year')">2023</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <button class="ok-btn" onclick="changeChartBasedOnTime()">Okay</button>
                    <div id="error-text">This is the error text</div>
                </div>
            </div>
        <script>
            var resizefunc = [];
        </script>
        <!-- jQuery  -->
		<script language="cache" runat="server">
			d jQueryCore^WSP999
		</script>
    </body>
    <script type="text/javascript">
    C1=self.C1;C2=self.C2;C3=self.C3;C4=self.C4;C5=self.C5;C6=self.C6;
        const tableContainer = document.getElementsByClassName("table-container")[0];
        const tableBorder = document.getElementsByClassName("table-border")[0];
        const popup = document.getElementById("popup1");
        const popup2 = document.getElementById("popup2");
        const popupDialog = document.getElementsByClassName("popup-dialog")[0];
        const timeSelect = document.getElementById("time-select");
        const tempSelect = document.getElementById("temp-select");
        const tempSelectBtn = document.getElementById("temp-select-btn");
        const timeSelectBtn = document.getElementById("time-select-btn");
        const colorArr = ["#586D93","#4DCEC9","#F39CBB","#E63876","#ADAFC1"]
        const dropdownText = " <img src='./assets/images/dropDrownWhite.png' alt='Dropdown'>";
        const dropdownSharpText = " <img src='./assets/images/dropDownSharp.png' alt=''>";
        let initialTimeSelection;
        let labels = [];
        let premadeChart =[];
        const dataset=[];
        let prevFMonth;
        let prevFYear; 
        let prevTMonth; 
        let prevTYear;
        let curDate=new Date();
        let startDate;
        let curStatblock;
        let failCount = 0;
        
		window.onload = jInitMe;
  		document.onmousemove = parent.resetTimer;
  		document.onmousedown = parent.resetTimer; // touchscreen presses
  		document.ontouchstart = parent.resetTimer;
  		//document.onclick = parent.resetTimer; // touchpad clicks
  		document.onkeypress = parent.resetTimer;
  		document.addEventListener('scroll', parent.resetTimer, true);
        
        const checkScrollbar = ()=>{
            if(tableContainer.scrollHeight > tableContainer.clientHeight){
                if(window.innerWidth > 600)
                    tableBorder.style.width = "calc(100% - 1.5vw + 1px)";
                else
                    tableBorder.style.width = "calc(100% - 1.5vw + 3px)";
            }
            
            else{
                if(window.innerWidth > 600)
                    tableBorder.style.width = "calc(100% - 0.8vw + 1.5px)";
                else
                    tableBorder.style.width = "calc(100% - 0.8vw  + 3px)";
            }
        }
    	function jInitMe(){
	    	parent.resetTimer();
	    	#server(..cInitMe())#;
	    	if(curDate.getMonth()-startDate.getMonth()<3){
		    	startDate.setMonth(curDate.getMonth()-4);
	    	}
	    	getAllTimeChart();
	    	prevFMonth=startDate.getMonth()+1;
	    	prevFYear=startDate.getFullYear();
	    	prevTMonth=curDate.getMonth()+1;
	    	prevTYear=curDate.getFullYear();
		    if(failCount==0){
			    document.querySelector(".no-data").style.display="flex";
		    }
		    else{
			    document.querySelector(".failure-stat .block-content").classList.add("active");
			    document.querySelector(".failure-stat .block-title img").classList.add("active");
		    }
        checkScrollbar();
    	}
    	function toggleTimeSelect(){
            initialTimeSelection=document.querySelector('input[name="time"]:checked');  
            setTimeout(()=>{
                timeSelect.classList.toggle("active");
            },100)
        }
        function toggleTempSelect(){
            setTimeout(()=>{
                tempSelect.classList.toggle("active");
            },100)
        }
        function toggleMonthSelector(){
            setTimeout(()=>{
                popup2.classList.toggle("inactive");
            },100);
        }
        function changeData(e){
            let dropDown = document.querySelector(".drop-down");
            let dropDownBtn = document.querySelector(".drop-down button");
            dropDownBtn.innerHTML= e.target.innerHTML + "&nbsp;&nbsp;<img src='./assets/images/dropDown.png' alt='DropDown'>";
            dropDown.classList.remove("active");
        }
        function togglePopup(e){
            if(popup.classList.contains("inactive")){
                curStatblock = e.target.closest(".stat-block");
                let position=e.target.getBoundingClientRect();
                popupDialog.style.top=position.y + 10 + "px";
                popupDialog.style.left="calc(" +position.right + "px - 25vw)" ;
            }
            setTimeout(()=>{
                popup.classList.toggle("inactive");
            },100);
        }
        function removePopup(){
            popup.classList.add("inactive");
        }
        function removePopup2(){
	        initialTimeSelection.checked=true;
            popup2.classList.add("inactive");
        }
        function closeTempSelect(){
            let checkedCount = $("#temp-select input:checkbox:checked").length;
            if(checkedCount == 1){
                tempSelectBtn.innerHTML = $("#temp-select input:checkbox:checked")[0].value + dropdownText;
            }
            else if(checkedCount == 0){
	            tempSelectBtn.innerHTML = "None Selected"+dropdownText;
            }
            else{
                tempSelectBtn.innerHTML = "Multiple"+dropdownText;
            }
            tempSelect.classList.remove("active");
        }
        function closeTimeSelect(){
            timeSelectBtn.innerHTML =  $("#time-select input:radio:checked")[0].value + dropdownText;
            timeSelect.classList.remove("active");
        }
        function uncheckOthers(){
            let temp=document.querySelectorAll("[name='temp']")
            for(var i=1;i<temp.length;i++){
	            	temp[i].checked=false;
	       	}
            dataset.splice(0,dataset.length);
            if(C1.checked){
	            console.log(premadeChart);
            	dataset.push(...premadeChart);
            }
            successChart.update();
        }
        function toggleMenu(e){
            document.getElementById("error-text").style.display="none";
            if(document.querySelector(".collapse-data.active")!=null){
                if(e.target.nextElementSibling!=document.querySelector(".collapse-data.active")){
                    document.querySelector(".collapse-data.active").classList.remove("active");
                }
            }
            setTimeout(()=>{
                e.target.nextElementSibling.classList.toggle("active");
            },100)
        }
        function getMonthNumberFromName(monthName) {
            return new Date(`${monthName} 1, 2022`).getMonth() + 1;
        }
        function changeDate(event,type){
            const fromMonth = document.getElementById("from-month-btn").innerHTML.split(" ")[0];
            const toMonth = document.getElementById("to-month-btn").innerHTML.split(" ")[0];
            const fromYear = parseInt(document.getElementById("from-year-btn").innerHTML.split(" ")[0]);
            const toYear = parseInt(document.getElementById("to-year-btn").innerHTML.split(" ")[0]);
            const date = new Date();
            const curMonth = date.getMonth()+1;
            const curYear = date.getFullYear();
            const errorText  =document.getElementById("error-text");
            let allowChange = true;
            switch(type){
                case "from-month":{
                    if(fromYear==toYear){
                        if(getMonthNumberFromName(event.target.innerHTML) > getMonthNumberFromName(toMonth)){
                            errorText.innerHTML="The selected month should be less than the end date";
                            allowChange=false;
                        }
                    }
                    break;
                }
                case "to-month":{
                    if(fromYear==toYear){
                        if(getMonthNumberFromName(event.target.innerHTML) < getMonthNumberFromName(fromMonth)){
                            errorText.innerHTML="The selected month should be greater than the start date";
                            allowChange=false;
                        }
                    }
                    if(toYear==curYear){
	                    if(getMonthNumberFromName(event.target.innerHTML)>curMonth){
		                    errorText.innerHTML="The selected month should not be greater than the current date";
	                    	allowChange=false;
	                    }
                    }
                    break;
                }
                case "from-year":{
                    if(parseInt(event.target.innerHTML)>toYear){
                        errorText.innerHTML="The selected year should be less than the end date";
                        allowChange=false;
                    }
                    break;
                }
                case "to-year":{
                    if(parseInt(event.target.innerHTML)<fromYear){
                        errorText.innerHTML="The selected year should be greater than start date";
                        allowChange=false;
                    }
                    break;
                }
            }
            if(allowChange){
                document.getElementById(type+"-btn").innerHTML = event.target.innerHTML + dropdownSharpText;
            }
            else{
                errorText.style.display="block";
            }
            event.target.closest(".collapse-data").classList.remove("active");
        }
        function addChart(e){
	        let allCheck=true;
            if(C1.checked){
                dataset.splice(0,dataset.length);
                C1.checked=false;
            }
            if(e.target.checked){
	            dataset.push(premadeChart[premadeChart.findIndex(elem=>elem.label==e.target.value)]);
            }
            else{
                dataset.splice(dataset.findIndex((elem)=>elem.label==e.target.value),1);
            }
            let temp=document.querySelectorAll("[name='temp']")
            for(var i=1;i<temp.length;i++){
	            if(!temp[i].checked){
		            allCheck=false;
	            }
            }
            if(allCheck){
	            temp[0].checked=true;
	            for(var i=1;i<temp.length;i++){
	            	temp[i].checked=false;
	            }
            }
            successChart.update();
        }
        function changeChartBasedOnTime(){
	        const fromMonth = getMonthNumberFromName(document.getElementById("from-month-btn").innerHTML.split(" ")[0]);
            const toMonth = getMonthNumberFromName(document.getElementById("to-month-btn").innerHTML.split(" ")[0]);
            const fromYear = document.getElementById("from-year-btn").innerHTML.split(" ")[0];
            const toYear = document.getElementById("to-year-btn").innerHTML.split(" ")[0];
            initialTimeSelection = document.querySelector('input[name="time"]:checked')  
            popup2.classList.add("inactive");
            if(prevFMonth!=fromMonth || prevTMonth!=toMonth || prevFYear!=fromYear || prevTYear!=toYear){
            	#server(..cChangeChartBasedOnTime(fromMonth,fromYear,toMonth,toYear))#
            	resizeChart();
           		prevFMonth = fromMonth;
            	prevTMonth = toMonth;
            	prevFYear = fromYear;
            	prevTYear = toYear;
            }
        }
        function getAllTimeChart(){
	        #server(..cChangeChartBasedOnTime(startDate.getMonth()+1,startDate.getFullYear(),curDate.getMonth()+1,curDate.getFullYear()))#
            resizeChart();
        }
        function changeSelection(){
            initialTimeSelection = document.querySelector('input[name="time"]:checked')  
        }
        function handleScroll(e){
	        if(e.target.scrollLeft>10){
		        document.querySelector(".col-small").style.display="block";
	        }
	        else{
		        document.querySelector(".col-small").style.display="none";
	        }
        }
        function downloadCSV(){
            if(curStatblock.className.split(" ")[0] == "overview-stat"){
                const data = {
                    headers:["Template Name",...Object.values(labels)],
                    values:dataset.map(row=>({
                        label:row.label,
                        result:row.data
                    }))
                }
                const csvData = csvmaker(data);
                download(csvData);
            }
            else{
                let table = document.querySelector("table");
                const data ={
                    headers:[],
                    values:[]
                }
                for(const row of table.rows){
                    let valObj = {label:"",result:[]};
                    let count = 0;
                    for(const cell of row.cells){
                        if(cell.nodeName=="TH"){
                            data.headers.push(cell.innerHTML);
                        }
                        else{
	                        if(count==3){
                            	valObj.result.push("\""+cell.innerHTML.replaceAll("\"","")+"\"");
	                        }
	                        else{
                            	valObj.result.push(cell.innerHTML);
	                        }
	                        count++;
                        }
                    }
                    if(row.firstElementChild.nodeName!="TH"){
                        data.values.push(valObj);
                    }
                }
                const csvData = csvmaker(data);
                download(csvData);
            }
            removePopup();
        }
        const csvmaker = function (data) {
            csvRows = [];
            const headers = Object.values(data.headers).join(",");
            csvRows.push(headers);
            for(const row of data.values){
                if(row.label!=""){
                    const values = [row.label,...Object.values(row.result)];
                    csvRows.push(values.join(","));
                }
                else{
                    const values = Object.values(row.result);
                    csvRows.push(values.join(","));
                }
            }

            // Returning the array joining with new line
            return csvRows.join('\n')
        }
        const download = function (data) {
            const blob = new Blob([data], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob)
            const a = document.createElement('a')
            a.setAttribute('href', url)
  			a.setAttribute('download', 'SuccessRateStatistics.csv');
            a.click()
        }
      // setup
      Chart.defaults.font.family = "Montserrat";
      const data = {
        labels:labels,
        datasets: dataset
        };
      const config = {
        type: 'line',
        data: data,
        options:{
            maintainAspectRatio:false,
            clip:false,
            layout:{
                padding:{
                    top:10,
                    bottom:10,
                }
            },
            scales:{
                y:{
                    min:0,
                    max:100,
                    border:{
                        display:true,
                        width:2,
                        color:"#9B9B9B",
                        dash:function(context){
                            if(context.tick.value%25==0){
                                return [2,2];
                            }
                            else{
                                return [];
                            }
                        }
                    },
                    ticks:{
                        stepSize: 50,
                        callback: (t, i) => (t!=0?t+"%":t),
                        color:"#405470",
                        font:{
                            weight:500,
                        }
                    },
                    grid:{
                        lineWidth:2,
                        color:"#9B9B9B",
                        tickColor:"white"
                    },
                },
                x:{
                    border:{
                        display:true,
                        width:2,
                        color:"#9B9B9B",
                    },
                    grid:{
                        lineWidth:1,
                        color:"#9B9B9B",
                        tickColor:"white"
                    },
                    ticks:{
                        color:"#405470",
                        font:{
                            weight:500,
                        },
                    },
                }
            },
          plugins: {
            legend: {
              display: false,
            },
            tooltip:{
	            callbacks:{
		            label: function(context) {
                        let label = context.dataset.label || '';

                        if (label) {
                            label += ': ';
                        }
                        if (context.parsed.y !== null) {
                            label += Math.ceil(context.parsed.y)+"%";
                        }
                        return label;
                    }
	            }
            }
        }
        }
        };
        
      const successChart = new Chart(document.getElementById("success-chart"),config);

      const data2 = {
        labels,
        datasets: [{
            data:[0,5,23,30,20],
            borderColor: 'transparent',
            backgroundColor: 'tranparent',
            radius:0
        }]
        };
      const config2 = {
        type: 'line',
        data: data2,
        options:{
            maintainAspectRatio:false,
            scales:{
                y:{
                    min:0,
                    max:100,
                    ticks:{
                        stepSize: 50,
                        callback: (t, i) => (t!=0?t+"% ":t +" "),
                        color:"#405470",
                        font:{
                            weight:500,
                        },
                    },
                    afterFit: (ctx)=>{
                        ctx.width= 40
                    },
                    grid:{
                        drawTicks:false
                    },
                    border:{
                        display:true,
                        width:4,
                        color:"#9B9B9B",
                    }
                },
                x:{
                    ticks:{
                        display:false
                    },
                    grid:{
                        drawTicks:false
                    }
                }
            },
          plugins: {
            legend: {
              display: false,
            },
        }
        }
        };
        
      const successChart2 = new Chart(document.getElementById("success-chart-tick"),config2);
      function resizeChart(){
	      const box = document.querySelector(".box");
	      const barLength = successChart.data.labels.length;
	      if(barLength >5){
		      const chartWidth = 100 + (barLength - 5) * 20;
		      box.style.width = chartWidth+"%";
			  document.querySelector(".col-small").style.marginBottom="27px";
		  }
		  else{
		      box.style.width = "100%";
			  document.querySelector(".col-small").style.display="none";
		  }
      }
        document.addEventListener("click",(e)=>{
            if(e.target.closest(".popup-dialog") == null){
                popup.classList.add("inactive");
                popup2.classList.add("inactive");
            }
            let dropDown = e.target.closest(".drop-down.active");
            if(dropDown == null){
                $(".drop-down.active").removeClass("active");
            } 
            if(e.target.closest("#time-select") == null && e.target.closest("#time-select-btn") == null && e.target.closest(".popup-dialog") == null){
                timeSelect.classList.remove("active");
            }
            if(e.target.closest("#temp-select") == null && e.target.closest("#temp-select-btn") == null){
                tempSelect.classList.remove("active");
            }
            if(e.target.closest(".collapse-data.active") == null && e.target.closest(".date-collapse")==null && document.querySelector(".collapse-data.active")!=null){
                document.querySelector(".collapse-data.active").classList.remove("active");
            }
        })
    </script>
    <script language="cache" method="cInitMe">
    	d InitMe^jxDashboardSuccess
    </script>
    <script language="cache" method="cChangeChartBasedOnTime" arguments="d1:%String,d2:%String,d3:%String,d4:%String">
    	d ChangeChartBasedOnTime^jxDashboardSuccess
    </script>
</html>

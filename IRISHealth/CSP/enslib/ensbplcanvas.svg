<?xml version="1.0" ?>
<!--
	ensbplcanvas.svg
	Copyright (c) 2003, InterSystems Corp.
	ALL RIGHTS RESERVED

	SVG Editor Canvas for BPL editor
	
	Note: this file is obsolete:
	this content is now served dynamically by CSPX.EnsBPLSVG.cls
-->

<svg 
	xmlns="http://www.w3.org/2000/svg"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	id="main" 
	width="2000" height="2000" 
	viewBox="0 0 2000 2000" 
	onload="Initialize()" 
	zoomAndPan="disable" 
	onmousedown="svgMouseDown(evt)"> 

<style type="text/css"><![CDATA[

text, tspan {
  pointer-events : none;
  font-size : 17;
  font-family : ms mincho,verdana,arial;
}
.canvas {
  fill: #FFFFFF;
  stroke: gray;
  stroke-width: 1;
}
  
.DiagramLabel {
  fill : #EEEEEE;
  stroke : black;
  stroke-width : 2;
  filter: url(#dropShadow);
}

.LevelLabel {
  fill : #EEEEEE;
  stroke : black;
  stroke-width : 2;
  filter: url(#dropShadow);
}

.LevelLabelSelected {
  fill : yellow;
  stroke : black;
  stroke-width : 2;
  filter: url(#dropShadow);
}

.BPLShape {
  fill : white;
  stroke : blue;
  stroke-width : 2;
  fill-opacity : 1.0;
  stroke-linejoin : round;
  filter: url(#dropShadow);
}

.BPLShapeSelected {
  fill : yellow;
  stroke : green;
  stroke-width : 3;
  fill-opacity : 1.0;
  stroke-linejoin : round;
  filter: url(#dropShadow);
}

.BPLShapeDisabled {
  fill : silver;
  stroke : gray;
  stroke-width : 2;
  fill-opacity : 1.0;
  stroke-linejoin : round;
  filter: url(#dropShadow);
}

.BPLShapeDisabledSelected {
  fill : yellow;
  stroke : gray;
  stroke-width : 3;
  fill-opacity : 1.0;
  stroke-linejoin : round;
  stroke-dasharray: 4,4;
  filter: url(#dropShadow);
}

.BPLShapeMoving {
  fill : none;
  stroke : green;
  stroke-width : 1;
  fill-opacity : 1.0;
}

.BPLShapeInvalid {
  fill : white;
  stroke : red;
  stroke-width : 3;
  fill-opacity : 1.0;
  stroke-linejoin : round;
  filter: url(#dropShadow);
}

.BPLShapeInvalidSelected {
  fill : yellow;
  stroke : red;
  stroke-width : 3;
  fill-opacity : 1.0;
  stroke-linejoin : round;
  filter: url(#dropShadow);
}

.BPLShapeDeleted {
  fill : red;
  stroke : yellow;
  stroke-width : 2;
  fill-opacity : 0.9;
}

.BPLShapeMatching {
  fill : #CCFFCC;
  stroke : purple;
  stroke-width : 3;
  fill-opacity : 1.0;
  stroke-linejoin : round;
  filter: url(#dropShadow);
}

/* outer shape for End event */
.BPLEventEnd {
  fill : white;
  stroke : blue;
  stroke-width : 4;
  fill-opacity : 1.0;
  filter: url(#dropShadow);
}

/* outer shape for start event */
.BPLEventStart {
  fill : white;
  stroke : blue;
  stroke-width : 2;
  fill-opacity : 1.0;
  filter: url(#dropShadow);
}

/* for intermediate events */
.BPLEvent {
  fill : white;
  stroke : blue;
  stroke-width : 2;
  fill-opacity : 1.0;
  filter: url(#dropShadow);
}

.BPLEventInner {
  fill : none;
  stroke : blue;
  stroke-width : 1;
}

.BPLEventIcon {
  fill : none;
  stroke : blue;
  stroke-width : 1;
  opacity : 0.5;
}

.BPLActivityIcon {
  fill : none;
  stroke : blue;
  stroke-width : 1;
  opacity : 0.6;
  stroke-linejoin: round;
  stroke-linecap: round;
}

.BPLActivityIconText {
  pointer-events: none;
  font-size: 12;
  fill: blue;
  font-style: italic;
  opacity: 0.6;
  }

.BPLConnector {
  stroke : blue;
  stroke-width : 3;
  stroke-linejoin : round;
  opacity: 0.5;
  fill: none;
  }

.BPLConnectorDisabled {
  stroke : gray;
  stroke-width : 3;
  stroke-linejoin : round;
  stroke-dasharray: 4,4;
  opacity: 0.5;
  fill: none;
  }

.BPLConnectorSelected {
  stroke : green;
  stroke-width : 6;
  stroke-linejoin : round;
  fill: none;
  }

.BPLConnectorSelectedDisabled {
  stroke : green;
  stroke-width : 6;
  stroke-linejoin : round;
  stroke-dasharray: 4,4;
  fill: none;
  }

.OutputHandleOff {
  stroke : gray;
  stroke-width : 1;
  fill: white;
  }

.OutputHandleOn {
  stroke : blue;
  stroke-width : 1;
  fill: yellow;
  }
  
.OutputHandleAccept {
  stroke : blue;
  stroke-width : 2;
  fill: green;
  }

.HandleOver {
  stroke : gray;
  stroke-width : 1;
  fill: green;
  }
  
.HandleOut {
  stroke : gray;
  stroke-width : 1;
  fill: white;
  }
  
.HandleClick {
  stroke : yellow;
  stroke-width : 1;
  fill: blue;
  }

.InputHandleOff {
  stroke : gray;
  stroke-width : 1;
  fill: white;
  }

.InputHandleOn {
  stroke : blue;
  stroke-width : 1;
  fill: yellow;
  }

.InputHandleAccept {
  stroke : blue;
  stroke-width : 2;
  fill: green;
  }

.AnnotationLine {
  stroke : green;
  stroke-width : 1;
  stroke-linejoin: round;
  stroke-linecap: round;
  fill: none;
  }

.box {
  fill : yellow;
  stroke : black;
  stroke-width : 2;
  }

.border {
  fill : lightgreen;
  visibility : hidden;
  }

.data {
  visibility : hidden; }
  
.ShapeName {
  pointer-events : none;
  font-size : 14;
 }

.LabelLine {
	stroke: #000000;
	stroke-width: 1;
}

.LabelTitle {
  pointer-events : none;
  font-size : 24;
}

.LabelName {
  pointer-events : none;
  font-size : 20;
}

.LabelAnnotation {
  pointer-events : none;
  font-size : 12;
}

.LabelTime {
  pointer-events : none;
  font-size : 12;
}

.LevelActivityType {
  pointer-events : none;
  font-size : 12;
}

.LevelActivityName {
  pointer-events : none;
  font-size : 20;
}

.ConnectorText {
  pointer-events : none;
  font-size : 15;
  fill: blue;
  baseline-shift: 3;
  font-weight: bold;
  opacity: 0.5;
}

.ConnectorTextSelected {
  pointer-events : none;
  font-size : 15;
  fill: green;
  baseline-shift: 4;
  font-weight: bold;
}

.ModelTextPath {
	visibility: hidden;
}

.AnnotationText {
  pointer-events : none;
  font-size : 16;
}

.ActivityType {
  pointer-events : none;
  fill: blue;
  font-size : 12;
}

.RubberBand {
  stroke : black;
  fill: none;
  stroke-width : 3;
  stroke-opacity : 0.5;
  stroke-linejoin : round;
}

.tooltipBalloon {
  stroke : gray;
  fill: url(#balloon);
  stroke-width : 1;
  stroke-opacity : 0.5;
  filter: url(#dropShadow);
}

.tooltipText {
  pointer-events : none;
  fill: blue;
  font-size : 12;
  font-family : tahoma,verdana;
  clip-path: url(#clipPath_balloon);
  }
]]></style>

<!-- scripts -->

<script type="text/ecmascript" xlink:href="ensxml.js"/>
<script type="text/ecmascript" xlink:href="ensbpl.js"/>
<script type="text/ecmascript" xlink:href="ensbplshapes.js"/>

<script language="text/javascript">
<![CDATA[

var readOnlyFlag = false;

function canvas_setReadOnly(flag) 
{
	if (flag) {
		// read only menu
		// replace context menu
		var newMenuRoot = parseXML(printNode(document.getElementById('StaticMenu')), contextMenu);
		contextMenu.replaceChild( newMenuRoot, contextMenu.firstChild );
	}
	else {
		// normal menu
		// replace context menu
		var newMenuRoot = parseXML(printNode(document.getElementById('CanvasMenu')), contextMenu);
		contextMenu.replaceChild( newMenuRoot, contextMenu.firstChild );
	}
	
	readOnlyFlag = flag;
}

function Initialize()
{
	var ro = false;
	
	// find results div/ test for readonly
	var results = self.document.getElementById("results");
	if (results && results.innerHTML == 'readonly') {
		ro = true;
	}
	
	// set up menu
	canvas_setReadOnly(ro);

	// now create diagram
	createBPLDiagram();
	
	// set up canvas API functions...
	var canvas = document.getElementById("canvas");
	
	// interface to allow HTML to call SVG...
	// note SVG does not seem to allow setting of more than 3 properties!
	canvas.invokeOperation = canvas_invokeOperation;

	if (!canvas.invokeOperation) {
		alert("Canvas not initialized");
	}
	
	// select the diagram for the inspector
	selectItem(null,false);

	// find loading div in outer html
	var loadingDiv = self.document.getElementById("loading");
	if (loadingDiv) {
		loadingDiv.style.display = 'none';
	}
	
	setZoom(getCookie('bplzoom',100));
}

// called from context menu
function renameItem()
{
	var prop = "Name";
	var val = canvas_getProperty(prop);
	
	val = prompt("Name: ",val);

	if (val != null) {
		canvas_setProperty(prop, val);
	}
}

// called from context menu
function editAnnotation()
{
	var prop = "Annotation";
	var val = canvas_getProperty(prop);
	
	val = prompt("Annotation: ",val);
	
	if (val != null) {
		canvas_setProperty(prop, val);
	}
}

// toggle annotation
function showAnnotation()
{
	var state = canvas_showAnnotation();
	
	setMenuItemOption("checked","menu_annotation", null, state);
}

// toggle smartConnection
function toggleSmartConnect()
{
	smartConnect = !smartConnect;
	setMenuItemOption("checked","menu_smartconnect", null, smartConnect);
}

// toggle autoArrange
function toggleAutoArrange()
{
	autoArrange = !autoArrange;
	setMenuItemOption("checked","menu_autoarrange", null, autoArrange);
	
	if (autoArrange) {
		canvas_arrangeShapes();
	}
}

// set the option for the given menu item
function setMenuItemOption(pOption, pItemId, pSubMenuId, value)
{
	var menuItems = contextMenu.childNodes.item(0).childNodes;
	var tItem;
      
	for (i = 0; i != menuItems.length - 1; i++) {
		if (menuItems.item(i).nodeType == 1) {
			tItem = menuItems.item(i);
			if (!pSubMenuId) {
				// top-level menu item
				if (tItem.getAttribute('id') == pItemId) {
					tItem.setAttribute(pOption,value ? 'yes' : 'no');
				}
			}
            else if ((tItem.nodeName == 'menu') && (tItem.getAttribute('id') == pSubMenuId)) {
				// submenu

				// loop over items in submenu
				var submenuItems = tItem.childNodes;
               
				for (j = 0; j != submenuItems.length - 1; j++) {
					tSubItem = submenuItems.item(j)
					if (tSubItem.nodeType == 1) {
						if (tSubItem.getAttribute('id') == pItemId) {
							tSubItem.setAttribute(pOption,value ? 'yes' : 'no');
						}
					}
				}
			}
		}
	}
}

var currZoom = 0;

// Set the zoom level
function setZoom(zoom)
{	
	if (zoom == currZoom) return;
	
	var oldzoom = currZoom;
	currZoom = zoom;

	var main = document.getElementById("main");
	var width = main.getAttribute("width");
	var height = main.getAttribute("height");
	
	var embed = self.document.getElementById("SVGEmbed");
	if (embed) {
		embed.height = 0.75 * height * (zoom / 100);
		embed.width = 0.75 * width * (zoom / 100);
	}
 
 	// update context menu
 	if (oldzoom == 0) {
	 	oldzoom = 100;
 	}
	setMenuItemOption("checked","menu_zoom_" + oldzoom, "menu_zoom", false);
 	setMenuItemOption("checked","menu_zoom_" + zoom, "menu_zoom", true);

 	self.document.cookie = 'bplzoom=' + currZoom;
 	
 	// notify studio
 	canvas_setResultsDiv("ZOOM",currZoom);
}

function getCookie(name,def)
{
	var value = def; // default value
	var cookies = self.document.cookie;
	var pos = cookies.indexOf(name + '=');
	if (pos != -1) {
		var start = pos + 1 + name.length;
		var end = cookies.indexOf(';',start);
		if (end == -1) end = cookies.length;
		var value = unescape(cookies.substring(start,end));
	}

	return value;
}

function svgMouseDown(evt)
{
	// trap right click to prevent context
	// menu during operations
	if (evt.button != 0) {
		if (currOperation) {
			evt.preventDefault();
		}
	}
}

]]>
</script>

<!-- defs -->
<defs>

<!-- context menu -->

<menu id="CanvasMenu" xmlns="http://mynamepsace.com/" >
    <header>BPL Editor Menu</header>
    <menu>
      <header>Add Activity</header>
      <item onactivate="canvas_createShape('alert');">Alert</item>
      <item onactivate="canvas_createShape('assign');">Assign</item>
      <item onactivate="canvas_createShape('break');">Break</item>
      <item onactivate="canvas_createShape('call');">Call</item>
      <item onactivate="canvas_createShape('code');">Code</item>
      <item onactivate="canvas_createShape('continue');">Continue</item>
      <item onactivate="canvas_createShape('delay');">Delay</item>
      <item onactivate="canvas_createShape('empty');">Empty</item>
      <item onactivate="canvas_createShape('reply');">Reply</item>
      <!--<item onactivate="canvas_createShape('receive');">Receive</item>-->
      <item onactivate="canvas_createShape('rule');">Rule</item>
      <item onactivate="canvas_createShape('sql');">SQL</item>
      <item onactivate="canvas_createShape('sync');">Sync</item>
      <item onactivate="canvas_createShape('trace');">Trace</item>
      <item onactivate="canvas_createShape('transform');">Transform</item>
	  <separator/>
      <item onactivate="canvas_createShape('foreach');">ForEach</item>
      <item onactivate="canvas_createShape('while');">While</item>
      <item onactivate="canvas_createShape('until');">Until</item>
	  <separator/>
      <item onactivate="canvas_createShape('flow');">Flow</item>
      <item onactivate="canvas_createShape('join');">Join</item>
      <item onactivate="canvas_createShape('sequence');">Sequence</item>
	  <separator/>
      <item onactivate="canvas_createShape('if');">If</item>
      <item onactivate="canvas_createShape('switch');">Switch</item>
    </menu>
    <menu id="menu_zoom">
	 <header>Zoom</header>
	 <item id="menu_zoom_33" onactivate="setZoom(33);">33%</item>
	 <item id="menu_zoom_50" onactivate="setZoom(50);">50%</item>
	 <item id="menu_zoom_75" onactivate="setZoom(75);">75%</item>
	 <item id="menu_zoom_88" onactivate="setZoom(88);">88%</item>
	 <item checked="yes" id="menu_zoom_100" onactivate="setZoom(100);">100%</item>
	 <item id="menu_zoom_110" onactivate="setZoom(110);">110%</item>
	 <item id="menu_zoom_125" onactivate="setZoom(125);">125%</item>
	 <item id="menu_zoom_150" onactivate="setZoom(150);">150%</item>
	 <item id="menu_zoom_200" onactivate="setZoom(200);">200%</item>
	 <item id="menu_zoom_500" onactivate="setZoom(500);">500%</item>
    </menu>
    <separator/>
    <item id="menu_undo" onactivate="canvas_undo()">Undo</item>
    <item id="menu_selectAll" onactivate="canvas_selectAll()">Select All</item>
    <separator/>
    <item id="menu_cut" onactivate="canvas_cutItem()">Cut</item>
    <item id="menu_copy" onactivate="canvas_copyItem()">Copy</item>
    <item enabled="no" id="menu_paste" onactivate="canvas_pasteItem()">Paste</item>
    <item id="menu_delete" onactivate="canvas_deleteItem()">Delete</item>
    <separator/>
    <item checked="yes"  id="menu_annotation" onactivate="showAnnotation()">Show Annotation</item>
    <item checked="yes"  id="menu_smartconnect" onactivate="toggleSmartConnect()">Smart Connections</item>
    <separator/>
    <item onactivate="canvas_arrangeShapes()">Arrange Layout</item>
    <item checked="no"  id="menu_autoarrange" onactivate="toggleAutoArrange()">Auto Arrange</item>
    <item id="menu_validate" onactivate="canvas_validateItem()">Validate Activity</item>
    <separator/>

    <menu id="menu_group">
	 <header>Group Elements</header>
	 <item id="menu_makeGroupSequence" onactivate="canvas_makeGroup('sequence')">As Sequence</item>
	 <item id="menu_makeGroupForEach" onactivate="canvas_makeGroup('foreach')">As ForEach loop</item>
	 <item id="menu_makeGroupUntil" onactivate="canvas_makeGroup('until')">As Until loop</item>
	 <item id="menu_makeGroupWhile" onactivate="canvas_makeGroup('while')">As While loop</item>
    </menu>

    <item enabled="no" id="menu_drillDown" onactivate="canvas_drillDown()">Drill Down</item>
    <item enabled="no" id="menu_drillUp" onactivate="canvas_drillUp()">Drill Up</item>
    <separator/>
	<item action="Find" id="Find">Find...</item>
	<item action="FindAgain" id="FindAgain">Find Again</item>
    <separator/>
	<item action="OriginalView" id="OriginalView">Original View</item>
    <item action="About">A&amp;bout SVG Viewer...</item>
</menu>

<!-- menu for read-only mode -->
<menu id="StaticMenu" xmlns="http://mynamepsace.com/">
    <header>BPL Editor Menu</header>
    <menu id="menu_zoom">
	 <header>Zoom</header>
	 <item id="menu_zoom_33" onactivate="setZoom(33);">33%</item>
	 <item id="menu_zoom_50" onactivate="setZoom(50);">50%</item>
	 <item id="menu_zoom_75" onactivate="setZoom(75);">75%</item>
	 <item id="menu_zoom_88" onactivate="setZoom(88);">88%</item>
	 <item checked="yes" id="menu_zoom_100" onactivate="setZoom(100);">100%</item>
	 <item id="menu_zoom_110" onactivate="setZoom(110);">110%</item>
	 <item id="menu_zoom_125" onactivate="setZoom(125);">125%</item>
	 <item id="menu_zoom_150" onactivate="setZoom(150);">150%</item>
	 <item id="menu_zoom_200" onactivate="setZoom(200);">200%</item>
	 <item id="menu_zoom_500" onactivate="setZoom(500);">500%</item>
    </menu>
    <item checked="yes" id="menu_annotation" onactivate="showAnnotation()">Show Annotation</item>
    <separator/>
    <item onactivate="canvas_arrangeShapes()">Arrange Layout</item>
    <item id="menu_validate" onactivate="canvas_validateItem()">Validate Activity</item>
    <separator/>
    <item enabled="no" id="menu_rulesEditor" onactivate="canvas_rulesEditor()">Rules Editor</item>
    <separator/>
    <item enabled="no" id="menu_drillDown" onactivate="canvas_drillDown()">Drill Down</item>
    <item enabled="no" id="menu_drillUp" onactivate="canvas_drillUp()">Drill Up</item>
    <separator/>
	<item action="Find" id="Find">Find...</item>
	<item action="FindAgain" id="FindAgain">Find Again</item>
    <separator/>
	<item action="OriginalView" id="OriginalView">Original View</item>
    <item action="About">A&amp;bout SVG Viewer...</item>
</menu>

<path id="ModelPath" d="M300 300, L 320 300" style="stroke:green; stroke-width:4; fill:none;" />

<!-- clip paths for various shapes -->

<clipPath id="clipPath_label">
<rect x="0" y="0" width="440" height="200" class="DiagramLabel" />
</clipPath>

<clipPath id="clipPath_level">
<rect x="0" y="0" width="275" height="40" class="DiagramLabel" />
</clipPath>

<clipPath id="clipPath_event">
<circle cx="0" cy="0" r="27" class="BPLShape" />
</clipPath>

<clipPath id="clipPath_decision">
<polygon points="-100,0 0,-30 100,0 0,30 -100,0" class="BPLShape" />
</clipPath>

<clipPath id="clipPath_activity">
<rect x="-120" y="-25" width="238" height="50" rx="15" class="BPLShape" />
</clipPath>

<clipPath id="clipPath_balloon">
<rect x="0" y="0" width="250" height="50" />
</clipPath>

<!-- filters -->
<filter id="dropShadow" x="-2%" y="-2%" height="120%" width="120%">
<feGaussianBlur in="SourceAlpha" stdDeviation="3" />
<feOffset dx="4px" dy="4px" result="offsetBlur" />
<feMerge>
	<feMergeNode in="offsetBlur"/>
	<feMergeNode in="SourceGraphic"/>
</feMerge>
</filter>

<!-- gradients -->
<linearGradient id="balloon" x1="0%" y1="0%" x2="0%" y2="100%">
<stop offset="0%" style="stop-color:yellow" />
<stop offset="50%" style="stop-color:yellow" />
<stop offset="100%" style="stop-color:red" />
</linearGradient>

</defs>

<!-- elements -->

<!-- canvas -->
<svg id="canvasSVG" x="0" y="0" width="100%" height="100%">
<g	id="canvas"
	onmousemove="canvasMouseMove(evt);"
	onmouseup="canvasMouseUp(evt);"
	onmousedown="canvasMouseDown(evt);"
	onmouseover="canvasMouseOver(evt);"
	onmouseout="canvasMouseOut(evt);"
	onkeypress="canvasKeyPress(evt);"
>
<rect id="canvasRect" class="canvas" width="100%" height="100%"/>

<text id="ModelTextPath" class="ModelTextPath" ><textPath xlink:href="#ModelPath">Model</textPath></text>

</g>

<!-- tooltip -->
<g id="tooltip" visibility="hidden" >
<path class="tooltipBalloon" d="M 0 0, L 250 0, 250 40, 310 60, 240 50, 0 50 z" />	
<text class="tooltipText" id="tooltipText" x="5" y="10" />
</g>

</svg>

</svg>

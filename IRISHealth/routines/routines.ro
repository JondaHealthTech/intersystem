IRIS for Windows^MAC^routine output by %apiRTN^^~Format=IRIS.S~^UTF8
%RO on 11 Apr 2025 08:43:44AM
AMI^MAC^^67152,16277.0901984^0
AMI	; Artificial Machine Intelligence for Blood Results ;call from 	cShowResults.mac
	q	; disable for now
	n x,i,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,ValidR2,ValidR3,ValidR4,ValidR5
	f i=1:1:10 s @("r"_i)=""
	s ValidR2=0,ValidR3=0,ValidR4=0,ValidR5=0
	f i=1:1:$l(arr1,Q) s @("r"_i)=$p(arr1,Q,i)
R2	; value
	i r2="" s IsError=1 q
	s r2=$zconvert(r2,"l")
	i r2="nil"!(r2="na")!(r2="n/a")!(r2="pending")!(r2="invalid")!(r2="positive")!(r2="negative") g R3
	i $e(r2,1,2)="<=" s r2=$p(r2,"<=",2),r2=$replace(r2," ",""),r2=+r2
	i $e(r2,1,2)=">=" s r2=$p(r2,">=",2),r2=$replace(r2," ",""),r2=+r2
	i $e(r2,1,1)="<" s r2=$p(r2,"<",2),r2=$replace(r2," ",""),r2=+r2-0.01
	i $e(r2,1,1)=">" s r2=$p(r2,">",2),r2=$replace(r2," ",""),r2=+r2+0.01
	/*
	i $e(r3,1,2)="<=" s r3=$p(r3,"<=",2),r3=$replace(r3," ",""),r3=+r3
	i $e(r3,1,2)=">=" s r3=$p(r3,">=",2),r3=$replace(r3," ",""),r3=+r3
	i $e(r3,1,1)="<" s r3=$p(r3,"<",2),r3=$replace(r3," ",""),r3=+r3-0.01
	i $e(r3,1,1)=">" s r3=$p(r3,">",2),r3=$replace(r3," ",""),r3=+r3+0.01
.
	i $e(r4,1,2)="<=" s r4=$p(r4,"<=",2),r4=$replace(r4," ",""),r4=+r4
	i $e(r4,1,2)=">=" s r4=$p(r4,">=",2),r4=$replace(r4," ",""),r4=+r4
	i $e(r4,1,1)="<" s r4=$p(r4,"<",2),r4=$replace(r4," ",""),r4=+r4-0.01
	i $e(r4,1,1)=">" s r4=$p(r4,">",2),r4=$replace(r4," ",""),r4=+r4+0.01
	*/
	&sql(SELECT ISNUMERIC(:r2),ISNUMERIC(:r3),ISNUMERIC(:r4),ISNUMERIC(:r5) INTO ValidR2,ValidR3,ValidR4,ValidR5)
	i ValidR2+ValidR3+ValidR4+ValidR5=4 s r2=r3,r3=r4,r4=r5,r5=r6,r6=r7,r7=r8,r8=r9,r9=r10,r10="" g R2	; r2, r3 & r4 are numbers, take only r3
	&sql(SELECT ISNUMERIC(:r2) INTO ValidR2)
	i 'ValidR2 s r2=r3,r3=r4,r4=r5,r5=r6,r6=r7,r7=r8,r8=r9,r9=r10,r10="" g R2
.
R3	; unit of measurement
	s ValidR3=0
	&sql(SELECT ID INTO ValidR3 FROM SIUnit WHERE Name=:r3 OR SIName=:r3)
	i ValidR3>0 g R4
	
	&sql(SELECT ID INTO ValidR3 FROM SIUnit WHERE Name=:r4 OR SIName=:r4)
	i ValidR3>0 d  g R4
	. s x=r3
	. s r3=r4
	. s r4=x
	
	&sql(SELECT ID INTO ValidR3 FROM SIUnit WHERE Name=:r5 OR SIName=:r5)
	i ValidR3>0 d  g R4
	. s x=r3
	. s r3=r5
	. s r5=r4
	. s r4=x
.
R4	; range #1
	s ValidR4=0
	i r4="" g R5
	i r4="nil"!(r4="na")!(r4="invalid")!(r4="positive")!(r4="negative")!(r4["up to") g R5
	i $e(r4,1,2)="<=" g R5
	i $e(r4,1,2)=">=" g R5
	i $e(r4,1,1)="<" g R5
	i $e(r4,1,1)=">" g R5
.
	/*
	i $e(r4,1,2)="<=" s r4=$p(r4,"<=",2),r4=$replace(r4," ",""),r4=+r4
	i $e(r4,1,2)=">=" s r4=$p(r4,">=",2),r4=$replace(r4," ",""),r4=+r4
	i $e(r4,1,1)="<" s r4=$p(r4,"<",2),r4=$replace(r4," ",""),r4=+r4-0.01
	i $e(r4,1,1)=">" s r4=$p(r4,">",2),r4=$replace(r4," ",""),r4=+r4+0.01
	*/
	&sql(SELECT ISNUMERIC(:r4) INTO ValidR4)
	i 'ValidR4 s r4=""
.
R5	; range #2
	s ValidR5=0
	i r5="" g END
	i r5="nil"!(r5="na")!(r5="pending")!(r5="invalid")!(r5="positive")!(r5="negative")!(r5["up to") g END
	i $e(r5,1,2)="<=" g END
	i $e(r5,1,2)=">=" g END
	i $e(r5,1,1)="<" g END
	i $e(r5,1,1)=">" g END
	/*
	i $e(r5,1,2)="<=" s r5=$p(r5,"<=",2),r5=$replace(r5," ",""),r5=+r5
	i $e(r5,1,2)=">=" s r5=$p(r5,">=",2),r5=$replace(r5," ",""),r5=+r5
	i $e(r5,1,1)="<" s r5=$p(r5,"<",2),r5=$replace(r5," ",""),r5=+r5-0.01
	i $e(r5,1,1)=">" s r5=$p(r5,">",2),r5=$replace(r5," ",""),r5=+r5+0.01
	*/
	&sql(SELECT ISNUMERIC(:r5) INTO ValidR5)
	i 'ValidR5 s r5=""
.
END	
	i rule=4,((r3_r4_r5)="") s IsError=1 q 
	s arr1=r1_Q_r2_Q_r3_Q_r4_Q_r5_Q_r6_Q_r7_Q_r8_Q_r9_Q_r10
	q
.

AutoMail^MAC^^67271,39578.4571198^0
AutoMail
SendReviewMail		//Send mail to reviewers notifying LIVE processed files await 
	
		// Set the recipient email address for review notifications
		s EmailAddress="review@jonda.io"
		#include %occOptions		// necessary options for interoperability support
		#include %occStatus			// status codes for handling error conditions and other status responses
		
		// Set Mailjet credentials
		s ServerName="in.mailjet.com"		// Mailjet SMTP server name
		s UserName="28369fa0193b502ebe79ec07fd49d144"
		s Password="b4003f71afd71de76728485a3d6d42b5"
		
		// Initialize the SMTP server settings for sending emails
		s mailserver=##class(%Net.SMTP).%New()
		s mailserver.port="587"
		set auth=##class(%Net.Authenticator).%New() ; use default authentication list
		set auth.UserName=UserName
		set auth.Password=Password
		set mailserver.authenticator=auth
		s mailserver.smtpserver=ServerName
		
		// Create and configure the email message
		s mail=##class(%Net.MailMessage).%New()
		s mail.From="notifications@jonda.health"
		do mail.To.Clear()
		do mail.To.Insert(EmailAddress)
		; Calling Connect
		set mail.Subject="LIVE JondaX files for review"
		set mail.Charset="iso-8859-1"
		set mail.ContentType="text/html"
		
		// Count the number of records requiring review
		s count=0 &sql(SELECT count(ID) INTO :count FROM Record WHERE IsNull(ReviewedDate,'')='' AND BucketName!='Ad-hoc' AND Status='In-Process' AND IsNull(ReviewedBy,'')='')
		
		// Create and send the email message
		s dt=$zdatetime($h,4,,4),dt=$p(dt,".",1)
		set status=mail.TextData.Write("<html><body>A new file has been uploaded on "_dt_".<br><br>Please review it at <a href='https://www.jondax.eu/csp/jondax/clogin.csp'>https://www.jondax.eu/csp/jondax/clogin.csp</a><br><br>There are "_count_" files in total for review.<br><br>This is an automated message. Do no reply to this message.</body></html>")
		set status=mailserver.Send(mail)
		
		// Log records in ^Automail global
		s dt=$h
		s ^Automail(dt)=status
		s ^Automail(dt,"Subject")="LIVE JondaX files for review"
		s ^Automail(dt,"To")=EmailAddress
 q
 
SendFailedLoginAttempts	;not used, in cLogin.mac 
	n EmailAddress,ServerName,UserName,Password,mailserver,auth,mail,dt,status
	s EmailAddress="notifications@jonda.health"
	;s EmailAddress="review@jonda.zendesk.com"
	
	;s x=$FIND(EmailAddress,"@")
	;i (EmailAddress'="" && x'=0){ 
		#include %occOptions
		#include %occStatus
		s ServerName="in.mailjet.com"
		s UserName="28369fa0193b502ebe79ec07fd49d144"
		s Password="b4003f71afd71de76728485a3d6d42b5"
		s mailserver=##class(%Net.SMTP).%New()
		s mailserver.port="587"
		set auth=##class(%Net.Authenticator).%New() ; use default authentication list
		set auth.UserName=UserName
		set auth.Password=Password
		set mailserver.authenticator=auth
		s mailserver.smtpserver=ServerName
		s mail=##class(%Net.MailMessage).%New()
		s mail.From="notifications@jonda.health"
		do mail.To.Clear()
		do mail.To.Insert(EmailAddress)
		; Calling Connect
.
		set mail.Subject="ALERT: Failed Login Attempts"
		set mail.Charset="iso-8859-1"
		set mail.ContentType="text/html"
		s dt=$zdatetime($h,4,,4),dt=$p(dt,".",1)
		set status=mail.TextData.Write("<html><body>5 consequtive failed logins detected on "_dt_" using the email "_$g(d1)_".")
		set status=mailserver.Send(mail)
		s dt=$h
		s ^Automail(dt)=status
		s ^Automail(dt,"Subject")="ALERT: Failed Login Attempts"
		s ^Automail(dt,"To")=EmailAddress
		;w "Staus: "_status,!!
		;h 2
	;}
 q
SendFailedAdminLoginAttempts	;not used, in cLogin.mac
	n EmailAddress,ServerName,UserName,Password,mailserver,auth,mail,dt,status
	s EmailAddress="notifications@jonda.health"
	;s EmailAddress="review@jonda.zendesk.com"
	
	;s x=$FIND(EmailAddress,"@")
	;i (EmailAddress'="" && x'=0){ 
		#include %occOptions
		#include %occStatus
		s ServerName="in.mailjet.com"
		s UserName="28369fa0193b502ebe79ec07fd49d144"
		s Password="b4003f71afd71de76728485a3d6d42b5"
		s mailserver=##class(%Net.SMTP).%New()
		s mailserver.port="587"
		set auth=##class(%Net.Authenticator).%New() ; use default authentication list
		set auth.UserName=UserName
		set auth.Password=Password
		set mailserver.authenticator=auth
		s mailserver.smtpserver=ServerName
		s mail=##class(%Net.MailMessage).%New()
		s mail.From="notifications@jonda.health"
		do mail.To.Clear()
		do mail.To.Insert(EmailAddress)
		; Calling Connect
.
		set mail.Subject="ALERT: ADMIN Failed Login Attempts"
		set mail.Charset="iso-8859-1"
		set mail.ContentType="text/html"
		s dt=$zdatetime($h,4,,4),dt=$p(dt,".",1)
		set status=mail.TextData.Write("<html><body>3 consequtive failed ADMIN logins detected on "_dt_" using the email "_$g(d1)_".")
		set status=mailserver.Send(mail)
		s dt=$h
		s ^Automail(dt)=status
		s ^Automail(dt,"Subject")="ALERT: ADMIN Failed Login Attempts"
		s ^Automail(dt,"To")=EmailAddress
		;w "Staus: "_status,!!
		;h 2
	;}
 q
SendAdminSuccessLogin	;not used, in cLogin.mac
	n EmailAddress,ServerName,UserName,Password,mailserver,auth,mail,dt,status
	s EmailAddress="notifications@jonda.health"
	;s EmailAddress="review@jonda.zendesk.com"
	
	;s x=$FIND(EmailAddress,"@")
	;i (EmailAddress'="" && x'=0){ 
		#include %occOptions
		#include %occStatus
		s ServerName="in.mailjet.com"
		s UserName="28369fa0193b502ebe79ec07fd49d144"
		s Password="b4003f71afd71de76728485a3d6d42b5"
		s mailserver=##class(%Net.SMTP).%New()
		s mailserver.port="587"
		set auth=##class(%Net.Authenticator).%New() ; use default authentication list
		set auth.UserName=UserName
		set auth.Password=Password
		set mailserver.authenticator=auth
		s mailserver.smtpserver=ServerName
		s mail=##class(%Net.MailMessage).%New()
		s mail.From="notifications@jonda.health"
		do mail.To.Clear()
		do mail.To.Insert(d1)
		; Calling Connect
.
		set mail.Subject="ALERT: ADMIN Success Login"
		set mail.Charset="iso-8859-1"
		set mail.ContentType="text/html"
		s dt=$zdatetime($h,4,,4),dt=$p(dt,".",1)
		set status=mail.TextData.Write("<html><body>FYI: Your account was logged into the ADMIN at "_dt_".<p>If you did not log in, please inform Jonda Support</body></html>")
		set status=mailserver.Send(mail)
		s dt=$h
		s ^Automail(dt)=status
		s ^Automail(dt,"Subject")="ALERT: ADMIN Success Login"
		s ^Automail(dt,"To")=EmailAddress
		;w "Staus: "_status,!!
		;h 2
	;}
 q
.
SendFailedLLM(rid,error)	
	n EmailAddress,ServerName,UserName,Password,mailserver,auth,mail,dt,status
	s EmailAddress="notifications@jonda.health"
	
	;s x=$FIND(EmailAddress,"@")
	;i (EmailAddress'="" && x'=0){ 
		#include %occOptions
		#include %occStatus
		s ServerName="in.mailjet.com"
		s UserName="28369fa0193b502ebe79ec07fd49d144"
		s Password="b4003f71afd71de76728485a3d6d42b5"
		s mailserver=##class(%Net.SMTP).%New()
		s mailserver.port="587"
		set auth=##class(%Net.Authenticator).%New() ; use default authentication list
		set auth.UserName=UserName
		set auth.Password=Password
		set mailserver.authenticator=auth
		s mailserver.smtpserver=ServerName
		s mail=##class(%Net.MailMessage).%New()
		s mail.From="notifications@jonda.health"
		do mail.To.Clear()
		do mail.To.Insert(EmailAddress)
		; Calling Connect
.
		set mail.Subject="ALERT: Gemini Failed"
		set mail.Charset="iso-8859-1"
		set mail.ContentType="text/html"
		s dt=$zdatetime($h,4,,4),dt=$p(dt,".",1)
		set status=mail.TextData.Write("<html><body></body>Claude failed on record id "_rid_", error: "_error_"</html>")
		set status=mailserver.Send(mail)
		s dt=$h
		s ^Automail(dt)=status
		s ^Automail(dt,"Subject")="ALERT: Gemini Failed"
		s ^Automail(dt,"To")=EmailAddress
		;w "Staus: "_status,!!
		;h 2
	;}
 q
 
	/// Below here for Trial 
LoginMail(valid) 	// Mailing login records of users
.
	if valid=1 s desc="[User ID] = "_d1_" logged into the trial system successfully. Time ["_dt_"]."
	if valid=0 s desc="[User ID] = "_d1_" failed logging into trial system. Time ["_dt_"]."
	s EmailAddress="notifications@jonda.health"
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	set mail.Subject="JondaX Trial Log"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	s status=mail.TextData.Write(desc)	
	s status=mail.TextData.Write($char(13,10))
	set status=mailserver.Send(mail)
	q
.
SendReviewMailTrial		//Send mail to reviewers notifying Trial processed files await 
	s EmailAddress="review@jonda.io"
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	; Calling Connect
.
	set mail.Subject="LIVE JondaX Trial files for review"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
.
	s count=0 &sql(SELECT count(ID) INTO :count FROM Record WHERE IsNull(ReviewedDate,'')='' AND IsTrial=1 AND Status='In-Process' AND IsNull(ReviewedBy,'')='')
	s dt=$zdatetime($h,4,,4),dt=$p(dt,".",1)
	set status=mail.TextData.Write("<html><body>A new file has been uploaded on "_dt_".<br><br>Please review it at <a href='https://www.jondax.eu/csp/jondax/clogin.csp'>https://www.jondax.eu/csp/jondax/clogin.csp</a><br><br>There are "_count_" files in total for review.<br><br>This is an automated message. Do no reply to this message.</body></html>")
	set status=mailserver.Send(mail)
	s dt=$h
	s ^Automail(dt)=status
	s ^Automail(dt,"Subject")="LIVE JondaX Trial files for review"
	s ^Automail(dt,"To")=EmailAddress
 q 
VerifyByEmail	;Trial	// Mail for verification in new account creation process
	;d INIT^CSP999
	s EmailAddress=d1
	s FName=""
	s EmailAddress=$zconvert(EmailAddress,"l")
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	set mail.Subject="JondaX Trial Verification"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	// Create vrification code
	s vCode=$random(99999)
	while $l(vCode)<5 {s vCode=$random(99999)} 	// Make sure code contains 5 digits
	s ^TrialUser(EmailAddress,"vCode")=vCode
	
	&sql(SELECT ContactPerson INTO :FName FROM MX.Record WHERE UserId=:EmailAddress)
	s mailMsg="<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'><html><head><link href='https://fonts.googleapis.com' rel='preconnect'><link crossorigin='' href='https://fonts.gstatic.com' rel='preconnect'><link href='https://fonts.googleapis.com/css2?family=Montserrat:wght@200&amp;display=swap' rel='stylesheet'></head><body style='background-color: #FFFFFF;font-family: 'Montserrat', sans-serif; margin: 0px'><div align='center' style='background-color: #FFFFFF;'><div align='left' style='width: 500px'><br><div align='right'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/logo.png' style='width:130px'></div><br><br><div align='center'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/Verifyemail1.png' style='width:300px'></div><div align='center' style='font-size: 18pt'>Verify your email address</div><br><br>Hi "_FName_", <br><br>Verifying your email address is simple! Please use the code below and you’ll be on your way with your JondaX Trial profile.<br><br><br><div align='center'><div style='font-size: 50pt'>"_vCode_"</div></div><br><br><br><div style='background-color: #F2F2F2; width: 100%; padding: 15px; color: white; border-radius: 15px;'><table cellpadding='5px' style='width: 100%'><tr><td style='color:#000000'>If you didn&#39;t make this request or have any questions, please contact us via mail at <a href='mailto:partnerships@jonda.health'>partnerships@jonda.health</a> </td></tr></table></div><br><br><br></div><div align='center' style='background-color:#405470; width: 600px; padding: 15px; color: white; border-radius: 15px 15px 0px 0px;'><a href='https://www.jonda.health/' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/chain.png' style='width:40px;margin:0 4px 0 4px;'></a><a href='https://www.youtube.com/@JondaHealth' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/Youtube.png' style='width:40px;margin:0 4px 0 4px;'></a><a href='https://sg.linkedin.com/company/jonda-health' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/LinkedIn.png' style='width:40px;margin:0 4px 0 4px;'></a><br><br><div style='font-size: 10pt'>You're receiving this email because you have a Jonda X Trial profile. This email is not a marketing or promotional email. That is why this email does not contain an unsubscribe link. You will receive this email even if you have unsubscribed from Jonda Health's marketing emails.<br><br>Copyright &copy; 2024 Jonda Health</div></div></div></body></html>"
	s status=mail.TextData.Write(mailMsg)
	s status=mail.TextData.Write($char(13,10))
	set status=mailserver.Send(mail)
	q
AccCredentials(mail) ;Trial	from client portal// Send user account credentials
	s EmailAddress=mail
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	; Calling Connect
	&sql(SELECT ContactPerson,Password INTO :FName,:Password FROM MX."User" WHERE UserID=:EmailAddress)
	set mail.Subject="JondaX Trial Account Created"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	
	s dt=$zdatetime($h,4,,4),dt=$p(dt,".",1)
	set status=mail.TextData.Write("<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'><html><head><link href='https://fonts.googleapis.com' rel='preconnect'><link crossorigin='' href='https://fonts.gstatic.com' rel='preconnect'><link href='https://fonts.googleapis.com/css2?family=Montserrat:wght@200&amp;display=swap' rel='stylesheet'></head><body style='background-color: #FFFFFF;font-family: ' Montserrat', sans-serif; margin: 0px'><div align='center' style='background-color: #FFFFFF;'><div align='left' style='width: 500px'><br><div align='right'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/logo.png' style='width:130px'></div><br><br>Hi "_FName_", <br><br>Welcome to JondaX, our versatile, low-code health data transformation engine. JondaX harnesses AI processing capabilities and partners it with human expertise to produce quality and reliable results. <br><br>Here are your login details:<br><br><div  style='background-color: #F2F2F2; width: 100%; padding: 15px; color:#405470 ; border-radius: 15px;'><b style='color:#405470;'>Username: "_EmailAddress_"</b><br><br><b style='color:#405470;'>Password: "_Password_"</b><br></div><br>Ready to access your Trial Profile? Login by clicking the button below. <br><br><div align='center'><a href='https://www.jondax.eu/csp/jondax/jxLogin.csp' style='text-decoration:none;'><button type='button' style='padding:0.5vw 1vw; color:white; width:150px; height:30px; font-size:14px; background: #405470; border-radius: 15px; border: none;'>Continue To Login</button></a></div><br><div align='left' >Please note that you will be prompted to reset your password the first time you log in.<br><br>If you have any questions or need assistance, feel free to reach out. We’re here to help.<br><br>Happy exploring!<br><br>Best regards,<br><br><b style='color:#405470;'>Kuben Vather</b><br></div><br><div   style='background-color: #F2F2F2; width: 100%; padding: 15px; color:black ; border-radius: 15px;'>If you did not make this request or have any questions, please contact us at partnerships@jonda.health</div></div><br><div align='center' style='background-color:#405470; width: 600px; padding: 15px; color: white; border-radius: 15px 15px 0px 0px;'><a href='https://www.jonda.health/' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/chain.png' style='width:40px;margin:0 4px 0 4px;'></a><a href='https://www.youtube.com/@JondaHealth' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/Youtube.png' style='width:40px;margin:0 4px 0 4px;'></a><a href='https://sg.linkedin.com/company/jonda-health' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/LinkedIn.png' style='width:40px;margin:0 4px 0 4px;'></a><br><br><div style='font-size: 10pt'>You're receiving this email because you have a Jonda X Trial profile. This email is not a marketing or promotional email. That is why this email does not contain an unsubscribe link. You will receive this email even if you have unsubscribed from Jonda Health's marketing emails. <br><br>Copyright &copy; 2024 Jonda Health</div></div></div></body></html>")
	set status=mailserver.Send(mail)
	s dt=$h
	s ^Automail(dt)=status
	s ^Automail(dt,"Subject")="JondaX Trial Account is created"
	s ^Automail(dt,"To")=EmailAddress
 q
 
AccCredentialsTrial(mail) ;Trial portal// Send user account credentials
	s EmailAddress=mail
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	; Calling Connect
	&sql(SELECT ContactPerson,Password INTO :FName,:Password FROM MX."User" WHERE UserID=:EmailAddress)
	set mail.Subject="JondaX Trial Account Created"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	
	s dt=$zdatetime($h,4,,4),dt=$p(dt,".",1)
	set status=mail.TextData.Write("<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'><html><head><link href='https://fonts.googleapis.com' rel='preconnect'><link crossorigin='' href='https://fonts.gstatic.com' rel='preconnect'><link href='https://fonts.googleapis.com/css2?family=Montserrat:wght@200&amp;display=swap' rel='stylesheet'></head><body style='background-color: #FFFFFF;font-family: ' Montserrat', sans-serif; margin: 0px'><div align='center' style='background-color: #FFFFFF;'><div align='left' style='width: 500px'><br><div align='right'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/logo.png' style='width:130px'></div><br><br>Hi "_FName_", <br><br>Welcome to JondaX, our versatile, low-code health data transformation engine. JondaX harnesses AI processing capabilities and partners it with human expertise to produce quality and reliable results. <br><br>Here are your login details:<br><br><div  style='background-color: #F2F2F2; width: 100%; padding: 15px; color:#405470 ; border-radius: 15px;'><b style='color:#405470;'>Username: "_EmailAddress_"</b><br><br><b style='color:#405470;'>Password: "_Password_"</b><br></div><br>Ready to access your Trial Profile? Login by clicking the button below. <br><br><div align='center'><a href='https://www.jondax.eu/csp/jondax/trialLogin.csp' style='text-decoration:none;'><button type='button' style='padding:0.5vw 1vw; color:white; width:150px; height:30px; font-size:14px; background: #405470; border-radius: 15px; border: none;'>Continue To Login</button></a></div><br><div align='left' >Please note that you will be prompted to reset your password the first time you log in.<br><br>If you have any questions or need assistance, feel free to reach out. We’re here to help.<br><br>Happy exploring!<br><br>Best regards,<br><br><b style='color:#405470;'>Kuben Vather</b><br></div><br><div   style='background-color: #F2F2F2; width: 100%; padding: 15px; color:black ; border-radius: 15px;'>If you did not make this request or have any questions, please contact us at partnerships@jonda.health</div></div><br><div align='center' style='background-color:#405470; width: 600px; padding: 15px; color: white; border-radius: 15px 15px 0px 0px;'><a href='https://www.jonda.health/' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/chain.png' style='width:40px;margin:0 4px 0 4px;'></a><a href='https://www.youtube.com/@JondaHealth' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/Youtube.png' style='width:40px;margin:0 4px 0 4px;'></a><a href='https://sg.linkedin.com/company/jonda-health' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/LinkedIn.png' style='width:40px;margin:0 4px 0 4px;'></a><br><br><div style='font-size: 10pt'>You're receiving this email because you have a Jonda X Trial profile. This email is not a marketing or promotional email. That is why this email does not contain an unsubscribe link. You will receive this email even if you have unsubscribed from Jonda Health's marketing emails. <br><br>Copyright &copy; 2024 Jonda Health</div></div></div></body></html>")
	set status=mailserver.Send(mail)
	s dt=$h
	s ^Automail(dt)=status
	s ^Automail(dt,"Subject")="JondaX Trial Account is created"
	s ^Automail(dt,"To")=EmailAddress
 q	
AccCreation(mail,FName) ;Trial	// Notify user account created
	s EmailAddress=mail
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	; Calling Connect
.
	set mail.Subject="JondaX Trial Account Created"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	
	s dt=$zdatetime($h,4,,4),dt=$p(dt,".",1)
	set status=mail.TextData.Write("<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'><html><head><link href='https://fonts.googleapis.com' rel='preconnect'><link crossorigin='' href='https://fonts.gstatic.com' rel='preconnect'><link href='https://fonts.googleapis.com/css2?family=Montserrat:wght@200&amp;display=swap' rel='stylesheet'></head><body style='background-color: #FFFFFF;font-family: 'Montserrat', sans-serif; margin: 0px'><div align='center' style='background-color: #FFFFFF;'><div align='left' style='width: 500px'><br><div align='right'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/logo.png' style='width:130px'></div><br><br>Hi "_FName_", <br><br>Welcome to JondaX, our versatile, low-code health data transformation engine. JondaX harnesses AI processing capabilities and partners it with human expertise to produce quality and reliable results. <br><br>Ready to access your Trial Profile? Login by clicking the button below. <br><br><div align='center'><a href='https://www.jondax.eu/csp/jondax/trialLogin.csp' style='text-decoration:none;'><button type='button' style='padding:0.5vw 1vw; color:white; width:150px; height:30px; font-size:14px; background: #405470; border-radius: 15px; border: none;'>Continue To Login</button></a></div><br><div align='left'>Know more about JondaX by watching the video below.</div><br><br><br><div style='background-color: #F2F2F2; width: 100%; padding: 15px; color: white; border-radius: 15px;'><table cellpadding='5px' style='width: 100%'><tr><td rowspan='2' style='color:#000000'><a href='https://www.youtube.com/watch?v=hechNcxL2Es'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/YTplayback.png' style='width:220px;margin:0 4px 0 4px;'></a></td><td style='color:white;'>Introducing JondaX</td></tr><tr><td><a href='https://www.youtube.com/watch?v=hechNcxL2Es' style='text-decoration:none;'><button type='button' style='padding:0.5vw 1vw; color:white; width:150px; height:30px; font-size:14px; background: #405470; border-radius: 15px; border: none;'>Watch Here</button></a></td></tr></table></div><br><div align='left'>If you have any questions, please contact us via email at <a href='mailto:partnerships@jonda.health'>partnerships@jonda.health</a></div></div><br><div align='center' style='background-color:#405470; width: 600px; padding: 15px; color: white; border-radius: 15px 15px 0px 0px;'><a href='https://www.jonda.health/' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/chain.png' style='width:40px;margin:0 4px 0 4px;'></a><a href='https://www.youtube.com/@JondaHealth' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/Youtube.png' style='width:40px;margin:0 4px 0 4px;'></a><a href='https://sg.linkedin.com/company/jonda-health' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/LinkedIn.png' style='width:40px;margin:0 4px 0 4px;'></a><br><br><div style='font-size: 10pt'>You're receiving this email because you have a Jonda X Trial profile. This email is not a marketing or promotional email. That is why this email does not contain an unsubscribe link. You will receive this email even if you have unsubscribed from Jonda Health's marketing emails.<br><br>Copyright &copy; 2024 Jonda Health</div></div></div></body></html>")
	set status=mailserver.Send(mail)
	s dt=$h
	s ^Automail(dt)=status
	s ^Automail(dt,"Subject")="JondaX Trial is created"
	s ^Automail(dt,"To")=EmailAddress
 q
 
TimeOutMail(mail) ;Trial	// Notify user account is locked for 15 Minutes
	s EmailAddress=mail
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health" 
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	; Calling Connect
.
	set mail.Subject="JondaX Trial Account Has Been Locked"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	s FName=""
	&sql(SELECT ContactPerson INTO :FName FROM MX."User" WHERE UserID=:EmailAddress)
	s dt=$zdatetime($h,4,,4),dt=$p(dt,".",1)
	set status=mail.TextData.Write("<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'><html><head><link href='https://fonts.googleapis.com' rel='preconnect'><link crossorigin='' href='https://fonts.gstatic.com' rel='preconnect'><link href='https://fonts.googleapis.com/css2?family=Montserrat:wght@200&amp;display=swap' rel='stylesheet'></head><body style='background-color: #FFFFFF;font-family: 'Montserrat', sans-serif; margin: 0px'><div align='center' style='background-color: #FFFFFF;'><div align='left' style='width: 500px'><br><div align='right'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/logo.png' style='width:130px'></div><br><br><br><br>Hi "_FName_", <br><br><div>There have been several unsuccessful login attempts to your Jonda account. To keep your account safe, logging in will be disabled for the next 5 minutes.</div><br><br><br><div style='background-color: #F2F2F2; width: 100%; padding: 15px; color: white; border-radius: 15px;'><table cellpadding='5px' style='width: 100%'><tr><td style='color:#000000'>If you didn&#39;t make this request or have any questions, please contact us via mail at <a href='mailto:partnerships@jonda.health'>partnerships@jonda.health</a> </td></tr></table></div><br><br><br></div><div align='center' style='background-color:#405470; width: 600px; padding: 15px; color: white; border-radius: 15px 15px 0px 0px;'>      <img src='https://www.jondax.eu/csp/jondax/assets/images/trial/chain.png' style='width:40px;margin:0 4px 0 4px;' onclick='window.open('https://www.jonda.health/')'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/Youtube.png' style='width:40px;margin:0 4px 0 4px;' onclick='window.open('https://www.youtube.com/@JondaHealth')'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/LinkedIn.png' style='width:40px;margin:0 4px 0 4px;' onclick='window.open('https://sg.linkedin.com/company/jonda-health')'><br><br><div style='font-size: 10pt'>You're receiving this email because you have a Jonda X Trial profile. This email is not a marketing or promotional email. That is why this email does not contain an unsubscribe link. You will receive this email even if you have unsubscribed from Jonda Health's marketing emails.<br><br>Copyright &copy; 2024 Jonda Health </div></div></div></body></html>")
	set status=mailserver.Send(mail)
	s dt=$h
	s ^Automail(dt)=status
	s ^Automail(dt,"Subject")="JondaX Trial Account Has Been Locked"
	s ^Automail(dt,"To")=EmailAddress
 q
 
FileFailed(mail) ;Trial	// Notify users file processing failed
	s EmailAddress=mail
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	; Calling Connect
.
	set mail.Subject="JondaX Trial Files Has Been Processed"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	s FName=""
	&sql(SELECT ContactPerson INTO :FName FROM MX."User" WHERE UserID=:EmailAddress)
	s dt=$zdatetime($h,4,,4),dt=$p(dt,".",1)
	set status=mail.TextData.Write("<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'><html><head><link href='https://fonts.googleapis.com' rel='preconnect'><link crossorigin='' href='https://fonts.gstatic.com' rel='preconnect'><link href='https://fonts.googleapis.com/css2?family=Montserrat:wght@200&amp;display=swap' rel='stylesheet'></head><body style='background-color: #FFFFFF;font-family: 'Montserrat', sans-serif; margin: 0px'><div align='center' style='background-color: #FFFFFF;'><div align='left' style='width: 500px'><br><div align='right'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/logo.png' style='width:130px'></div><br><br><div align='center'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/FileProcessed.png' style='width:300px'></div><br><br>Hi "_FName_", <br><br>We're sorry to inform you that we were unable to process your file(s) due to an issue. To view the issue(s), click on the button below.:<br><br><br><div align='center'><div align='center'><a href='https://www.jondax.eu/csp/jondax/trialLogin.csp' style='text-decoration:none;'><button type='button' style='padding:0.5vw 1vw; color:white; width:220px; height:40px; font-size:14px; background: #405470; border-radius: 15px; border: none;'>View transformation issues</button></a></div></div><br><br><br><div style='background-color: #F2F2F2; width: 100%; padding: 15px; color: white; border-radius: 15px;'><table cellpadding='5px' style='width: 100%'><tr><td style='color:#000000'>If you didn&#39;t make this request or have any questions, please contact us viemail at <a href='mailto:partnerships@jonda.health'>partnerships@jonda.health</a> </td></tr></table></div><br><br><br></div><div align='center' style='background-color:#405470; width: 600px; padding: 15px; color: white; border-radius: 15px 15px 0px 0px;'><a href='https://www.jonda.health/' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/chain.png' style='width:40px;margin:0 4px 0 4px;'></a><a href='https://www.youtube.com/@JondaHealth' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/Youtube.png' style='width:40px;margin:0 4px 0 4px;'></a><a href='https://sg.linkedin.com/company/jonda-health' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/LinkedIn.png' style='width:40px;margin:0 4px 0 4px;'></a><br><br><div style='font-size: 10pt'>You're receiving this email because you have a Jonda X Trial profile. This email is not a marketing or promotional email. That is why this email does not contain an unsubscribe link. You will receive this email even if you have unsubscribed from Jonda Health's marketing emails.<br><br>Copyright &copy; 2024 Jonda Health</div></div></div></body></html>")
	set status=mailserver.Send(mail)
	s dt=$h
	s ^Automail(dt)=status
	s ^Automail(dt,"Subject")="JondaX Trial Files Has Been Processed"
	s ^Automail(dt,"To")=EmailAddress
 q 
FileSuccess(mail) ;Trial	// Notify file processing success
	s EmailAddress=mail
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	; Calling Connect
.
	set mail.Subject="JondaX Trial Files Has Been Processed"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	s FName=""
	&sql(SELECT ContactPerson INTO :FName FROM MX."User" WHERE UserID=:EmailAddress)
	s dt=$zdatetime($h,4,,4),dt=$p(dt,".",1)
	set status=mail.TextData.Write("<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'><html><head><link href='https://fonts.googleapis.com' rel='preconnect'><link crossorigin='' href='https://fonts.gstatic.com' rel='preconnect'><link href='https://fonts.googleapis.com/css2?family=Montserrat:wght@200&amp;display=swap' rel='stylesheet'></head><body style='background-color: #FFFFFF;font-family: 'Montserrat', sans-serif; margin: 0px'><div align='center' style='background-color: #FFFFFF;'><div align='left' style='width: 500px'><br><div align='right'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/logo.png' style='width:130px'></div><br><br><div align='center'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/FileProcessed.png' style='width:300px'></div><div align='center' style='font-size: 18pt;font-weight:500;'>Your file(s) are ready</div><br><br>Hi "_FName_", <br><br>JondaX has finished processing your file(s). To view your file(s), click on the button below:<br><br><br><div align='center'><div align='center'><a href='https://www.jondax.eu/csp/jondax/trialLogin.csp' style='text-decoration:none;'><button type='button' style='padding:0.5vw 1vw; color:white; width:150px; height:30px; font-size:14px; background: #405470; border-radius: 15px; border: none;'>View Files</button></a></div></div><br><br><br><div style='background-color: #F2F2F2; width: 100%; padding: 15px; color: white; border-radius: 15px;'><table cellpadding='5px' style='width: 100%'><tr><td style='color:#000000'>If you didn&#39;t make this request or have any questions, please contact us viemail at <a href='mailto:partnerships@jonda.health'>partnerships@jonda.health</a> </td></tr></table></div><br><br><br></div><div align='center' style='background-color:#405470; width: 600px; padding: 15px; color: white; border-radius: 15px 15px 0px 0px;'><a href='https://www.jonda.health/' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/chain.png' style='width:40px;margin:0 4px 0 4px;'></a><a href='https://www.youtube.com/@JondaHealth' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/Youtube.png' style='width:40px;margin:0 4px 0 4px;'></a><a href='https://sg.linkedin.com/company/jonda-health' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/LinkedIn.png' style='width:40px;margin:0 4px 0 4px;'></a><br><br><div style='font-size: 10pt'>You're receiving this email because you have a Jonda X Trial profile. This email is not a marketing or promotional email. That is why this email does not contain an unsubscribe link. You will receive this email even if you have unsubscribed from Jonda Health's marketing emails.<br><br>Copyright &copy; 2024 Jonda Health</div></div></div></body></html>")
	set status=mailserver.Send(mail)
	s dt=$h
	s ^Automail(dt)=status
	s ^Automail(dt,"Subject")="JondaX Trial Files Has Been Processed"
	s ^Automail(dt,"To")=EmailAddress
 q
 
ResetPassword	;Trial	// Send verification code for resetting password
	;d INIT^CSP999
	s EmailAddress=d1
	s EmailAddress=$zconvert(EmailAddress,"l")
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ;use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	set mail.Subject="JondaX Trial Reset Password"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	s AuthNum=$random(999999)
	while $l(AuthNum)<6{s AuthNum=$random(999999)}
	s ^TrialUser(EmailAddress,"ResetPswd")=AuthNum
	s FName=""
	&sql(SELECT ContactPerson INTO :FName FROM MX."User" WHERE UserID=:EmailAddress)
	
	s MailMsg="<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'><html><head><link href='https://fonts.googleapis.com' rel='preconnect'><link crossorigin='' href='https://fonts.gstatic.com' rel='preconnect'><link href='https://fonts.googleapis.com/css2?family=Montserrat:wght@200&amp;display=swap' rel='stylesheet'></head><body style='background-color: #FFFFFF;font-family: 'Montserrat', sans-serif; margin: 0px'><div align='center' style='background-color: #FFFFFF;'><div align='left' style='width: 500px'><br><div align='right'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/logo.png' style='width:130px'></div><br><br><div align='center'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/resetPwd1.png' style='width:300px'></div><div align='center' style='font-size: 18pt'>Reset your password</div><br><br>Hi "_FName_", <br><br>We&#39;re sorry to hear that you forgot your password! Don&#39;t worry, it happens to all of us at some point. To reset your password, please use the confirmation code below to complete the process. <br><br><br><div align='center'><div style='font-size: 50pt'>"_AuthNum_"</div></div><br><br><br><div style='background-color: #F2F2F2; width: 100%; padding: 15px; color: white; border-radius: 15px;'><table cellpadding='5px' style='width: 100%'><tr><td style='color:#000000'>If you didn&#39;t make this request or have any questions, please contact us via mail at <a href='mailto:partnerships@jonda.health'>partnerships@jonda.health</a> </td></tr></table></div><br><br><br></div><div align='center' style='background-color:#405470; width: 600px; padding: 15px; color: white; border-radius: 15px 15px 0px 0px;'>      <img src='https://www.jondax.eu/csp/jondax/assets/images/trial/chain.png' style='width:40px;margin:0 4px 0 4px;' onclick='window.open('https://www.jonda.health/')'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/Youtube.png' style='width:40px;margin:0 4px 0 4px;' onclick='window.open('https://www.youtube.com/@JondaHealth')'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/LinkedIn.png' style='width:40px;margin:0 4px 0 4px;' onclick='window.open('https://sg.linkedin.com/company/jonda-health')'><br><br><div style='font-size: 10pt'>You're receiving this email because you have a Jonda X Trial profile. This email is not a marketing or promotional email. That is why this email does not contain an unsubscribe link. You will receive this email even if you have unsubscribed from Jonda Health's marketing emails.<br><br>Copyright &copy; 2024 Jonda Health </div></div></div></body></html>"
	s status=mail.TextData.Write(MailMsg)	
	s status=mail.TextData.Write($char(13,10))
	set status=mailserver.Send(mail)
	s dt=$h
	s ^TrialAutomail(dt)=status
	s ^TrialAutomail(dt,"Subject")="LIST: JondaX Trial USER RESET PASSWORD"
	s ^TrialAutomail(dt,"To")=EmailAddress
	&js<window.open("trialResetPassword2.csp","_self")>
	q
	
ResetSuccessful(d1) ;Trial	// Notify user reset password success
	s EmailAddress=d1
	s EmailAddress=$zconvert(EmailAddress,"l")
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ;use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
.
	set mail.Subject="JondaX Trial password has been changed"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
.
	s FName=""
	&sql(SELECT ContactPerson INTO :FName FROM MX."User" WHERE UserID=:EmailAddress)
	
	s MailMsg="<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'><html><head><link href='https://fonts.googleapis.com' rel='preconnect'><link crossorigin='' href='https://fonts.gstatic.com' rel='preconnect'><link href='https://fonts.googleapis.com/css2?family=Montserrat:wght@200&amp;display=swap' rel='stylesheet'></head><body style='background-color: #FFFFFF;font-family: 'Montserrat', sans-serif; margin: 0px'><div align='center' style='background-color: #FFFFFF;'><div align='left' style='width: 500px'><br><div align='right'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/logo.png' style='width:130px'></div><br><br><div align='center'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/resetPwd2.png' style='width:300px'></div><div align='center' style='font-size: 18pt'>Password successfully changed</div><br><br>Hi "_FName_", <br><br><div align='center'>You have successfully changed your password. </div><br><br><br><div style='background-color: #F2F2F2; width: 100%; padding: 15px; color: white; border-radius: 15px;'><table cellpadding='5px' style='width: 100%'><tr><td style='color:#000000'>If you didn&#39;t make this request or have any questions, please contact us via mail at <a href='mailto:partnerships@jonda.health'>partnerships@jonda.health</a> </td></tr></table></div><br><br><br></div><div align='center' style='background-color:#405470; width: 600px; padding: 15px; color: white; border-radius: 15px 15px 0px 0px;'>      <img src='https://www.jondax.eu/csp/jondax/assets/images/trial/chain.png' style='width:40px;margin:0 4px 0 4px;' onclick='window.open('https://www.jonda.health/')'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/Youtube.png' style='width:40px;margin:0 4px 0 4px;' onclick='window.open('https://www.youtube.com/@JondaHealth')'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/LinkedIn.png' style='width:40px;margin:0 4px 0 4px;' onclick='window.open('https://sg.linkedin.com/company/jonda-health')'><br><br><div style='font-size: 10pt'>You're receiving this email because you have a Jonda X Trial profile. This email is not a marketing or promotional email. That is why this email does not contain an unsubscribe link. You will receive this email even if you have unsubscribed from Jonda Health's marketing emails.<br><br>Copyright &copy; 2024 Jonda Health </div></div></div></body></html>"
	d mail.TextData.Write(MailMsg)
	set status=mailserver.Send(mail)
	
	s dt=$h
	s ^Automail(dt)=status
	s ^Automail(dt,"Subject")="LIST: JondaX Trial USER RESET PASSWORD"
	s ^Automail(dt,"To")=EmailAddress
	
	q

CSP999^MAC^^67199,19959.5775756^0
CSP999
INIT	; called by programs without access to %session.Data
	s Q=$c(1)
	s:$g(^INST("ZDATE"))="" ^INST("ZDATE")=4
	s ZDATE=^INST("ZDATE")
	q
INIT1	; called by programs using %session.Data
	s Q=$c(1)
	s SId=$g(%session.Data("SessionId"))
	s UserID=$g(%session.Data("UserID"))
	s:$g(^INST("ZDATE"))="" ^INST("ZDATE")=4
	s ZDATE=^INST("ZDATE")
	
	d Security1
	q
Security1
	; Checks for various security breaches
	q
	d INIT1^CSP999
	q:$g(^INST("Sec"))=0 	; disabled for testing
	s MySecurityBreach=0
	s CSPPage=$p(%request.URL,"/",$l(%request.URL,"/"))
	s UserID=$g(%session.Data("UserID"))
	i UserID="" s MySecurityBreach=1,Desc="Attempt to illegally enter CSP page "_CSPPage_" by "_UserID d SecurityResponse q
	&sql(SELECT ID INTO :UserID FROM MX."User" WHERE ID=:UserID)
	i $g(%session.Data("SessionId"))'=%session.SessionId s MySecurityBreach=1,Desc="Attempt to illegally enter CSP page "_CSPPage_" by "_UserID d SecurityResponse q
	s Count=0
	q
	
	; below not used
	/*
	s MEN=$g(%session.Data("MenuID"))
	i '$d(^MEN(MEN)) s MySecurityBreach=1,Desc="Attempt to illegally enter CSP page "_CSPPage_" by "_UserID d SecurityResponse q
	s SName="",MySecurityBreach=1
SecurityA
	s SName=$o(^MEN(MEN,SName)) 
	i SName="",MySecurityBreach=1 s Desc="Attempt to illegally enter CSP page "_CSPPage_" by "_UserID d SecurityResponse q
	i SName="" q
	s n1=""
SecurityB
	s n1=$o(^MEN(MEN,SName,n1)) g:n1="" SecurityA
	s x=$g(^MEN(MEN,SName,n1))
	i $p(x,Q,4)=CSPPage s MySecurityBreach=0 q
	g SecurityB
Security1
	; non menu related security check
	q:$g(^INST("Sec"))'=1 
	i $g(%session.Data("SessionId"))'=%session.SessionId s MySecurityBreach=1,Desc="Attempt to illegally enter with invalid sessionID by "_UserID d SecurityResponse q
	q
	*/
SecurityResponse
	s %response.Redirect="cLockDown.csp"	; disable IP Address
	d Breach^CSPLog("Security","Security Breach",Desc,10)
	; disable MAC Address
	; kill the session
	; send response of possible breach with IP Address, MAC Address
	q
HEAD	; populates the csp page header with standard stuff
	w "<meta content='en-us' http-equiv='Content-Language'>",!
	w "<meta content='text/html; charset=utf-8' http-equiv='Content-Type'>",!
	w "<link rel='icon' href='Images/favicon.ico' type='image/x-icon'> ",!
	w "<link rel='shortcut icon' href='Images/favicon.ico' type='image/x-icon'>",!
	;w "<script type='text/javascript' src='js/dom-drag.js'></script>",!
	q
HEAD1
	; populates the csp page header with standard stuff for JondaX
	s:'$d(^INST("jxJONDA","TITLE")) ^INST("jxJONDA","TITLE")="JondaX"
	s:'$d(^INST("jxJONDA","AUTHOR")) ^INST("jxJONDA","AUTHOR")="Jonda Health"
	s:'$d(^INST("jxJONDA","DESCRIPTION")) ^INST("jxJONDA","DESCRIPTION")="JondaX"
	
	w "<meta charset='utf-8'>",!
	w "<meta name='viewport' content='width=device-width, initial-scale=1.0'>",!
	w "<meta name='description' content='",^INST("jxJONDA","DESCRIPTION"),"'>",!
	w "<meta name='author' content='",^INST("jxJONDA","AUTHOR"),"'>",!
	w "<link rel='shortcut icon' href='assets/images/favicon.ico'>",!
	w "<title>",^INST("jxJONDA","TITLE"),"</title>",!
	w "<link href='assets/css/bootstrap.min.css' rel='stylesheet' type='text/css'>",!
	w "<link href='assets/css/core.css' rel='stylesheet' type='text/css'>",!
	w "<link href='assets/css/components.css' rel='stylesheet' type='text/css'>",!
	w "<link href='assets/css/icons.css' rel='stylesheet' type='text/css'>",!
	w "<link href='assets/css/pages.css' rel='stylesheet' type='text/css'>",!
	w "<link href='assets/css/responsive.css' rel='stylesheet' type='text/css'>",!
	w "<link rel='stylesheet' href='assets/styles/cJonda.css'>",!
	w "<script src='assets/js/modernizr.min.js'></script>",!
	q
jQueryCore
	w "<script src='assets/js/jquery.min.js'></script>"
	w "<script src='assets/js/bootstrap.min.js'></script>"
	w "<script src='assets/js/detect.js'></script>"
	w "<script src='assets/js/fastclick.js'></script>"
	w "<script src='assets/js/jquery.slimscroll.js'></script>"
	w "<script src='assets/js/jquery.blockUI.js'></script>"
	w "<script src='assets/js/waves.js'></script>"
	w "<script src='assets/js/wow.min.js'></script>"
	w "<script src='assets/js/jquery.nicescroll.js'></script>"
	w "<script src='assets/js/jquery.scrollTo.min.js'></script>"
	w "<script src='assets/js/jquery.core.js'></script>"
	w "<script src='assets/js/jquery.app.js'></script>"
	w "<script src='assets/js/chart.umd.js'></script>"
	q
T2C(Val,MaxRow)		; TEXTAREA to CACHE
	; Converts a TEXTAREA formatted string into an array
	; returns the array x
	n i,ii
	k x
	s Val=$tr(Val,$c(13,10),"\n")
	f i=MaxRow:-1:1 q:$p(Val,"\n",i)'=""	; check for last row
	s i=i+1 f ii=1:1:i s x(ii)=$p(Val,"\n",ii)
	q 
H2C(Val)	; HTML to CACHE
	s x=##class(%CSP.Page).UnescapeHTML(Val)
	q x
C2H(Val)	; CACHE to HTML
	s x=##class(%CSP.Page).EscapeHTML(Val)
	q x
C2J(Val)	; CACHE to JAVASCRIPT
	s x=##class(%CSP.Page).QuoteJS(Val)
	s x=$e(x,2,$l(x)-1)	; strip beginning and ending "'" characters
	q x
GIF2PNG	; Convert GIF to PNG
	
	q
HEIF2PNG	; Convert HEIF to PNG
	
	q
WEBP2PNG	; Convert WEBP to PNG
	
	q
AVIF2PNG	; Convert AVIF to PNG
	
	q
ATTNAME()		; Internal Name Generator for Attachments & Photos
	n iname
	n yr
	n y1
	n mth
	n m1
	n x
	s x=$zdate($h,ZDATE,,4),yr=$p(x,"/",3),y1=$c($e(yr,3,4)+55)		; 2010 = year "0" ("A")
	s mth=$p(x,"/",2),m1=$c(mth+65)
	s iname=$g(^INST("Attachments",yr,mth))+1,^INST("Attachments",yr,mth)=iname
	s iname=y1_m1_$e("000000",1,6-$l(iname))_iname
	q iname
MOVEFILE(fdir,tdir,fnam)
	; Moves a file from 1 location to another
	; fdir format = d:\intersystems\cache\csp\bb\upload
	; tdir format = d:\intersystems\cache\csp\bb\attachments\contacts
	; fnam format = photo.jpg
	n x,i,ndir
	; check if the directory exists
	s x=$zu(140,4,tdir)
	i x'=0 d
	. ; create the directories
	. s ndir=""
	. f i=1:1:$l(tdir,"\") d
	.. s ndir=ndir_$p(tdir,"\",i)
	.. s x=$zu(140,9,ndir)
	.. i i'=$l(tdir,"\") s ndir=ndir_"\"
	; move the file
	s x=$zu(140,6,fdir_"\"_fnam,tdir_"\"_fnam)
	q x
GetSIUnit(testname)	; Get SIUnit for a DiagnosticTest
	n x
	s x=""
	&sql(SELECT SIUnit INTO :x FROM DiagnosticTest WHERE SIName=:testname)
	q x 
U2U(testname,value,fromunit,tounit)	; calculate Unit To Unit
	n x1,x2,x3,x4,val
	s (x1,x2,x3,x4,val,prefix)=""
	s val=""
	i fromunit=tounit q value
	s prefix=$e(value,1,1) i prefix=0!(+prefix'=0) s prefix=""
	s value=$replace($replace($replace(value,"<",""),">","")," ","")
	; get SI Name
	s x1=$$GetSIName^WSP999(testname) i x1="" q ""
	; get SI Unit
	s x2=$$GetSIUnit^WSP999(x1)
	; get fromunit to SIUnit conversion value
	&sql(SELECT Value INTO :x3 FROM SIUnitConversion WHERE DiagnosticTest=:x1 AND ToUnit=:fromunit)
	&sql(SELECT Value INTO :x4 FROM SIUnitConversion WHERE DiagnosticTest=:x1 AND ToUnit=:tounit)
	i +x4'=0 s val=$fn((value*x3/x4),,10)
	i val'="" s val=$fn(val,,2)
	;s val=prefix_val
	q val
.

DEMOgetPII^MAC^^66931,28481.5885818^0
getPII(response)
	s ^martin("gpii")="1"
	w !,"Getting Personal Identifiable Information...."
	;s response=$replace(response,"'","""")
    Set json = $classmethod("%DynamicArray", "%FromJSON", response)
    do getTest //(json,namesArray)
    q
    return 1
.
getTest//(json,names)
	//set reportDate=["DATE","DATE REQUESTED","DATE RECEIVED","COLLECTION DATE","REPORT DATE","DATE OF REPORT","DATE OF VISIT","VISIT DATE","DATE:","DATE REQUESTED:","DATE RECEIVED:","COLLECTION DATE:","REPORT DATE:","DATE OF REPORT:","DATE OF VISIT:","VISIT DATE:"]
	set DataBlock =0
	set censorB=[]
	set date=[]
	set flag=0
	s match=""
	
	set blocks= json.Blocks
	Set count = blocks.%Size()
    For i = 0:1:(count-1) 
    {	
		Set block = blocks.%Get(i)
    	set text = block.%Get("Text")
    	Set Geometry = block.Geometry
		set boundingBox = Geometry.%Get("BoundingBox")
	    if block.%Get("BlockType")="LINE" 
		{
			         		
     		&sql(SELECT Name into :match FROM MX.DiagnosticTest where Name=:text or SIName=:text)
         	if match'="" 
         	{
	         	
         		set flag=flag+1  //w flag,!
         		set ^mBBoxDemo("lastBB") = boundingBox.%ToJSON()
         	}
         
         	//&sql(SELECT Name into :name FROM MX.DiagnosticTest where Name=(:text))
         	//w name,!
	         	
	 		if flag <1
			{
				;w !,"PII : ", text
				do censorB.%Push(boundingBox.%ToJSON())
				set ^mBBoxDemo("PII")=censorB.%ToJSON()
				do cleanDate(text)
				;w !,"Date is : ",x								
				set ^mBBoxDemo("Date")=date.%ToJSON()
.
			}
	         		
		}
    }
    
    if '$d(^mBBoxDemo("lastBB"))	s ^mBBoxDemo("lastBB")="[]"
    //if '$d(^mBBoxDemoDemo("PII"))	s ^mBBoxDemo("PII")="[]"
	return 1
.
cleanDate(text)
	set x=text
	s dFlag = 0
	i x[":" d
	. s x=$p(x,":",2)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	d getDate
	
	if dFlag = 0 d
	. s x=text
	. d getDate
	
	q	
getDate(text)
	/*
	set x=text
	s dFlag = 0
	i x[":" d
	. s x=$p(x,":",2) 
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)	
	
	if $find(x,": ") 
	{
.
	set x=$extract(x,$find(x,": "), *) //for "Collection Date: 24 November, 2021" , ": 24 November, 2021" 
	}
	elseif $find(x,":")
	{
		 set x=$extract(x,$find(x,":"), *) //for "Collection Date:24 November, 2021" , ":24 November, 2021" 	  *Haemoglobin}
		}	
	*/
	
	for dft=1:1:9 
		{
			if $zdateh(x,dft,,2,,,,,"0") s dFlag=1 do date.%Push(boundingBox.%ToJSON()) q //w dft," 2",! q
			if $zdateh(x,dft,,4,,,,,"0") s dFlag=1 do date.%Push(boundingBox.%ToJSON()) q
		}
	if dFlag quit
	
	for dft=15:1:21 
		{
			if $zdateh(x,dft,,2,,,,,"0") s dFlag=1 do date.%Push(boundingBox.%ToJSON()) q
			if $zdateh(x,dft,,4,,,,,"0") s dFlag=1 do date.%Push(boundingBox.%ToJSON()) q	
		}
	if dFlag quit
	
	if $zdateh(x,13,,2,,,,,"0") do date.%Push(boundingBox.%ToJSON()) q
	if $zdateh(x,13,,4,,,,,"0") do date.%Push(boundingBox.%ToJSON()) q 
		
	quit
  

DW1^MAC^^66906,18412.2711178^0
DW1	
	q
UpdateBiomarkers
	; update eGFR to all templates
	#import MX
	s dt=$zdate($h,3,,4)
	s bk="JONDAFFR2",st=5
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDATESTING/-",st=5
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORT-SHARED-QA/437BFF17-269D-494B-8C28-912BB141848B",st=6
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORT-SHARED-QA/4D82078C-CCBB-4BC5-8C69-D803EEAE5D83"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORT-SHARED-QA/B1EE6502-6A1F-41C7-B70C-A7CD32706C7E"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORT-SHARED-QA/B3954D8F-CC75-4C40-A286-A9ED6DF01A02_QA"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORT-SHARED-QA/CDCE52AA-380D-46AF-96E6-716C98BB95B7"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORT-SHARED-QA/D21B07E1-4C8E-4004-8D09-DBB7C3A9CB68"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-DEV-EUC1-V1/437BFF17-269D-494B-8C28-912BB141848B"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-DEV-EUC1-V1/4D82078C-CCBB-4BC5-8C69-D803EEAE5D83"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-DEV-EUC1-V1/B1EE6502-6A1F-41C7-B70C-A7CD32706C7E"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-DEV-EUC1-V1/CDCE52AA-380D-46AF-96E6-716C98BB95B7"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-DEV-EUC1-V1/D21B07E1-4C8E-4004-8D09-DBB7C3A9CB68"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-PROD-EUC1-V1/AC21A65A-6EB2-4D5D-82D8-B747B6196D2E"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-PROD-EUC1-V1/C5D06C60-BA65-4D82-9EA8-C52280EFAC14"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-PROD-EUC1-V1/D92C738A-E94E-4913-BE05-13344694BB91"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-PROD-EUC1-V1/FABC45F3-4E6D-4F3F-B1B2-25FCCE74309A"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-QA-EUC1-V1/12C383D2-1F96-4D73-81EA-CCC020B9C745"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-QA-EUC1-V1/7BD379E8-2925-4213-9C07-1B6091166969"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-QA-EUC1-V1/B3954D8F-CC75-4C40-A286-A9ED6DF01A02"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-QA-EUC1-V1/C8033AB8-DBF7-471B-9998-0FD45D15BBC4"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-QA-EUC1-V1/EA294873-8157-400B-B265-80B122BAFE4D"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-STAGE-EUC1-V1/224053D4-A964-4633-8AC4-BCC00EC0A743"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-STAGE-EUC1-V1/256A24F6-FB3D-4A26-B592-964EFC1BC342"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-STAGE-EUC1-V1/26160FE8-884D-4BDC-A5DF-1CDDA88633E8"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-STAGE-EUC1-V1/2F4400AB-EC2D-483F-BF70-7F0774FAF952"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-STAGE-EUC1-V1/7E2D40FA-0B71-4BD9-A80C-E6F651AFD6CF"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	s bk="JONDA-REPORTS-STAGE-EUC1-V1/DD4C73F2-AE77-4613-A1BD-DAD6750C059E"
	&sql(INSERT INTO Template (BucketName,CreatedDate,ModifiedDate,Setting,Name,DiagnosticTest,UnitName) VALUES (:bk,:dt,:dt,:st,'eGFR','eGFR','mL/min/1.73 m2'))
	q
Manual	; update SI Units from MX.SIUnitConversion
	#import MX
	&sql(INSERT INTO SIUnitConversion (DiagnosticTest,FromUnit,ToUnit,Value) VALUES('IGF-1','nmol/L','nmol/L',0.7649))
	&sql(INSERT INTO SIUnitConversion (DiagnosticTest,FromUnit,ToUnit,Value) VALUES('IGF-1','nmol/L','ng/mL',0.1))
	&sql(INSERT INTO SIUnitConversion (DiagnosticTest,FromUnit,ToUnit,Value) VALUES('IGF-1','nmol/L','ug/L',0.1))
	&sql(INSERT INTO SIUnitConversion (DiagnosticTest,FromUnit,ToUnit,Value) VALUES('IGF-1','nmol/L','ug/dL',1.0))
	&sql(INSERT INTO SIUnitConversion (DiagnosticTest,FromUnit,ToUnit,Value) VALUES('IGF-1','nmol/L','ug/100mL',1.0))
	&sql(INSERT INTO SIUnitConversion (DiagnosticTest,FromUnit,ToUnit,Value) VALUES('IGF-1','nmol/L','ug%',1.0))
	q
	#import MX
	w "Starting...",!
	&sql(DECLARE C1 CURSOR FOR
		SELECT FromUnit,ToUnit
		INTO :d1,:d2
		FROM SIUnitConversion
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	s n=0
	WHILE SQLCODE=0{
		s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:d1 OR SIName=:d1)
		i x'="" &sql(INSERT INTO SIUnit (Description,Name,SIName) VALUES ('xxx',:d1,:d1)) w d1,!
		i x="" w "From Unit:",d1,!
		s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:d2 OR SIName=:d2)
		i x'="" &sql(INSERT INTO SIUnit (Description,Name,SIName) VALUES ('xxx',:d2,:d2)) w d2,!
		i x="" w "To Unit:",d2,!
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	q

DW10^MAC^^66829,31162.2631533^0
DW10
	#import MX
	s fnam="C:\data_transform\AI\NM000065.csv"
	;&sql(DELETE FROM ResultBloodTest_Tests WHERE ResultBloodTest->Record=1221)
	k ^content
	s c=","
	s n=1
	s $ztrap="End^DW10"
	o fnam:"rs"
A
	u fnam r rec
	s rec=$replace(rec,"""","")
	i $p(rec,c,1)="" g A
	i $p(rec,c,2)="" g A
	i ($p(rec,c,3)_$p(rec,c,4)_$p(rec,c,5)_$p(rec,c,6))="" g A
	s rec=$replace(rec,"< ","<")
	s rec=$replace(rec,"> ",">")
	s ^content("Original",n)=rec
	f i=1:1:10 s @("d"_i)=$p(rec,c,i) i $e(@("d"_i),$l(@("d"_i)))=" " s @("d"_i)=$e(@("d"_i),1,$l(@("d"_i))-1)
	s d3=$replace(d3," ","-")
	s d3=$replace(d3," - ","-")
	i d3["-" d
	. s d3a=$p(d3,"-",1),d3a=$replace(d3a," ","")
	. s d3b=$p(d3,"-",2),d3b=$replace(d3b," ","")
	e  i d3[" " d
	. s d3a=$p(d3," ",1),d3a=$replace(d3a," ","")
	. s d3b=$p(d3," ",2),d3b=$replace(d3b," ","")
	s ^content("Clean",n)=d1_c_d2_c_d4_c_d3a_c_d3b
	;&sql(INSERT INTO ResultBloodTest_Tests (element_key,ResultBloodTest,Tests_TestName,Tests_Result,Tests_SIUnit,Tests_LowRange,Tests_HighRange)
	;	VALUES (:n,895,:d1,:d2,:d4,:d3a,:d3b)
	;)
	;u 0 w SQLCODE,!
	s n=n+1
	g A
End
	u 0
	i $zerror'["<ENDOFFILE>" w $zerror,!
	e  w "Done!",!
	c fnam
	q

DW11^MAC^^66828,37968.0659343^0
DW11
CleanCSV(fnam)
	;s fnam=csvName
	new content,n,rec,i
    #import MX
    ;Set fnam="D:\#Data\#aws\Textract\LT1\LT1all.txt"
    //Set fnam="D:\#Data\#aws\Textract\NL93\NL93.txt"
    Kill content
    Set n=1
    w fnam,!
    Set $ztrap="Ztrap^DW11"
    set content =""
.
    Open fnam:"rs"
CleanCSV1
   // Read records from the file
    Use fnam Read rec
    If rec="" Goto CleanCSV1
    s Q=$c(9)
    ; TODO: put quotation marks for each $p
    f i=1:1:$l(rec,Q) i $p(rec,Q,i)'["""" s $p(rec,Q,i)=""""_$p(rec,Q,i)_""""
    If $Piece(rec,Q,1)="" Goto CleanCSV1  ; no test name
    If ($Piece(rec,Q,2)="")&($Piece(rec,Q,3)="") Goto CleanCSV1  ; no result
    If ($Piece(rec,Q,3)="")&($Piece(rec,Q,4)="")&($Piece(rec,Q,5)="")&($Piece(rec,Q,6)="") Goto CleanCSV1  ;
    ;if $piece(rec,",",2)=" Total " s rec=$replace(rec, " Total ,","") // labcorp "Total"
    ;if ($find($Piece(rec,",",2)," ")) s $Piece(rec,",",2)=$REPLACE($Piece(rec,",",2), " ", ",",,1) //randox"result"
    Set content(n)=rec
    ;Set content = content_rec_$C(13,10)
    //Set content = content_rec _ ","
    Set n=n+1
    Goto CleanCSV1
Ztrap
	s $ztrap=""
    use 0
	close fnam
	; overwrite the original CSV file with content(n)
	o fnam:"wns"
	f i=1:1:$o(content(""),-1) u fnam w $replace(content(i),Q,","),!
	c fnam
 
	q 

DW12^MAC^^66877,16310.4314786^0
DW12
	#import MX
	;d INIT^WSP999
	s FName="OC000059"
	s FName=$zconvert(FName,"l")
	s tmpname=FName
	
	s fext="png"
	; check file extension
	s allowedext="*bmp*pdf*heic*png*jpg*jpeg*gif*webp*hl7*xml*json*ttl*"
	i allowedext'[("*"_fext_"*") s ^jxAltUpload(FName)=0 q
	s dt=$zdatetime($h,3,1)
	
	s ^jxAltUpload(FName)=tmpname
	s ^jxAltUpload(FName,"Uploaded")=$h
	s %dev="C:\InterSystems\Cache\JondaX\Elfie\ad-hoc\OC000059.png"
	s x=$zf(-1,"aws s3 cp "_%dev_" s3://jondaffr2/ && exit")
	s %dev=$replace(%dev,"\","/")
	s upload=0
	s upload=##class(python.s3Utils).uploadFile("default",%dev,"jondaffr2","")
	q:upload=0
	s jobid=""
	s jobid=##class(python.textractUtils).SDTDTables(%dev)	; textract tables
	q:jobid=""
	s csv=0
	s %dev1="c:\intersystems\cache\jondax\elfie\ad-hoc\"_tmpname
	s csv=##class(python.textractUtils).GenerateCSVFromJobID(jobid,%dev1)
	;h 10
	d CleanCSV^utilAWS(%dev1_".csv")
	q:csv=0
	s rid="0"
	d ##class(python.Claude).AiCompletion($replace(%dev1,"\","/")_".csv",0)
	q

DW13^MAC^^66884,22014.7266421^0
DW13	; import umlaut characters
	s fnam="c:\intersystems\umlaut.txt"
	s Q=$c(9)	; tab
	k ^UMLAUT
	o fnam:"rs"
A	u fnam r rec
	f i=1:1:3 s @("r"_i)=$p(rec,Q,i)
	s ^UMLAUT(r1)=r2_Q_r3
	g A

DW14^MAC^^66917,23974.4035636^0
DW14
.
	s d1="Cortisol Free",d2="ug/dL"
	&SQL(INSERT INTO SIUnitConversion(DiagnosticTest,FromUnit,ToUnit,Value) VALUES (:d1,:d2,'ng/mL',1))
	&SQL(INSERT INTO SIUnitConversion(DiagnosticTest,FromUnit,ToUnit,Value) VALUES (:d1,:d2,'nmol/L',0.3625))
	&SQL(INSERT INTO SIUnitConversion(DiagnosticTest,FromUnit,ToUnit,Value) VALUES (:d1,:d2,'ug%',10))
	&SQL(INSERT INTO SIUnitConversion(DiagnosticTest,FromUnit,ToUnit,Value) VALUES (:d1,:d2,'ug/100mL',10))
	&SQL(INSERT INTO SIUnitConversion(DiagnosticTest,FromUnit,ToUnit,Value) VALUES (:d1,:d2,'ug/dL',10))
	&SQL(INSERT INTO SIUnitConversion(DiagnosticTest,FromUnit,ToUnit,Value) VALUES (:d1,:d2,'ug/L',1))
	w "Done!"
	/*
	&SQL(INSERT INTO SIUnitConversion(DiagnosticTest,FromUnit,ToUnit,Value) VALUES ('Small LDL Cholesterol','mmol/L','mg%',1))
.
	&SQL(INSERT INTO SIUnitConversion(DiagnosticTest,FromUnit,ToUnit,Value) VALUES ('Small LDL Cholesterol','mmol/L','mg/100mL',1))
	&SQL(INSERT INTO SIUnitConversion(DiagnosticTest,FromUnit,ToUnit,Value) VALUES ('Small LDL Cholesterol','mmol/L','mg/dL',1))
	&SQL(INSERT INTO SIUnitConversion(DiagnosticTest,FromUnit,ToUnit,Value) VALUES ('Small LDL Cholesterol','mmol/L','mg/L',0.1))
	&SQL(INSERT INTO SIUnitConversion(DiagnosticTest,FromUnit,ToUnit,Value) VALUES ('Small LDL Cholesterol','mmol/L','mmol/L',38.665))
	&SQL(INSERT INTO SIUnitConversion(DiagnosticTest,FromUnit,ToUnit,Value) VALUES ('Small LDL Cholesterol','mmol/L','ug/mL',0.1))
	&SQL(INSERT INTO SIUnitConversion(DiagnosticTest,FromUnit,ToUnit,Value) VALUES ('Small LDL Cholesterol','mmol/L','umol/L',0.038665))
	*/
	q
	; test
	s obj=##class(MX.Record).%OpenId(1332)
	s str="Parkway Laboratory Services Ltd ParkwayHealth Medical Director Dr Yu Chia-Wen Carmen MA Cantab, MBBChir, MD MRCP, FRCPath FAMS Laboratory www.parkwaylab.com.sg COMPANY REG NO 198302251E Dr Sheila Vasoo Sushilan Patient: The Arthritis & Rheumatology Clinic Date Received: 07/06/2021 38 Irrawaddy Road ID: G5375083X Request ID: 24624287 #07-45 Gender: Female Enc. Comments: N/A DOB: 07/11/1981 Mt E Novena Specialist Centre MRN: Clinical Singapore 329563 Accession No: n/a Ref: BIOCHEMISTRY RENAL KIDNEY"
	w str,!
	f i=1:1:$l(str," ") d
	. s x=$p(str," ",i)
	. f dft=1:1:9 i $zdateh(x,dft,,2,,,,,"0") w x,!
	. f dft=1:1:9 i $zdateh(x,dft,,4,,,,,"0") w x,!
	. i $zdateh(x,13,,2,,,,,"0") w x,!
	. i $zdateh(x,13,,4,,,,,"0") w x,!
	. f dft=15:1:21 i $zdateh(x,dft,,2,,,,,"0") w x,!
	. f dft=15:1:21 i $zdateh(x,dft,,4,,,,,"0") w x,!
	q

DW15^MAC^^66894,21308.0548099^0
DW15	; check MX.DiagnosticTest.Name for UMLAUT characters and convert
	#import MX
	s Q=$c(9)
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID,SIName,Name
		INTO :r1,:r2,:r3
		FROM DiagnosticTest
		ORDER BY SIName
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	WHILE SQLCODE=0{
		s err=0
		f i=1:1:$o(^UMLAUT(""),-1) s rec=^(i),umlaut=$p(rec,Q,1) i r3[umlaut w r1," - ",r3," : ",$p(rec,Q,2),!
		;f i=1:1:$o(^UMLAUT(""),-1) s rec=^(i),umlaut=$p(rec,Q,1) i (r3[umlaut) d
		;. s r3=$replace(r3,$p(rec,Q,1),$p(rec,Q,2))	
		;. s err=1
		;i err=1 &sql(UPDATE DiagnosticTest SET Name=:r3 WHERE ID=:r1)
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	

DW16^MAC^^66903,32078.5368369^0
DW16	; testing ResultBloodTest_Tests
	#import MX
	&sql(DECLARE C1 CURSOR FOR
		SELECT Distinct Tests_TestName,Tests_Result,Tests_SIUnit,Tests_LowRange,Tests_HighRange
		INTO :r1,:r2,:r3,:r4,:r5
		FROM ResultBloodTest_Tests
	)
	&sql(OPEN C1)
	k ^DW
	&sql(FETCH C1)
	WHILE SQLCODE=0{
		s r2=""
		&sql(SELECT ID,SIName INTO :r2a,:r2 FROM DiagnosticTest WHERE Name=:r1 OR SIName=:r1 AND IsNull(DeletedDate,'')<>'')
		i r2'="" s ^DW("SI",r2)="" 	;s ^DW(r2,r2a)=""
		i r2="" s ^DW("X",r1)=""
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	
	

DW17^MAC^^66925,23988.9235267^0
DW17	; check DiagnosticTest.SIName vs SIUnitConversion.DiagnosticTest
	#import MX
	&sql(DECLARE C1 CURSOR FOR
		SELECT SIName 
		INTO :r1
		FROM DiagnosticTest
		WHERE IsNull(ApprovedDate,'')<>''
		AND IsNull(DeletedDate,'')<>''
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	k DW
	WHILE SQLCODE=0{
		s DW(r1)=""
		&sql(FETCH C1)	
	}
	&sql(CLOSE C1)	
	s r1=""
A	s r1=$o(DW(r1)) q:r1=""
	s x=""
	&sql(SELECT ID INTO :x FROM SIUnitConversion WHERE DiagnosticTest=:r1)
	i x="" w r1,!	
	
	
	g A	
	
	
	

DW18^MAC^^66966,25126.1581367^0
DW18	; copy siunitconversion from one to another
	#import MX
	&sql(DECLARE C1 CURSOR FOR
		SELECT DiagnosticTest,FromUnit,ToUnit,Value
		INTO :r1,:r2,:r3,:r4
		FROM SIUnitConversion
		WHERE DiagnosticTest='Vitamin B12'
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	s nm="Holotranscobalamin"
	WHILE SQLCODE=0{
		&sql(INSERT INTO SIUnitConversion (DiagnosticTest,FromUnit,ToUnit,Value) VALUES (:nm,:r2,:r3,:r4))
		w SQLCODE,!
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	
.
.
.

DW2^MAC^^66910,22569.4347905^0
DW2
	; test
	s d1="Hemoglobin@1"
	s IsMatch=0
	WHILE IsMatch=0&($l(d1)'=0){
		s r1="" &sql(SELECT ID INTO :r1 FROM DiagnosticTest WHERE Name=:d1 OR SIName=:d1)
		i r1'="" s IsMatch=1 w r1,!		
		s d1=$e(d1,1,$l(d1)-1)
	}
	q
	; clear trailing spaces from DiagnosticTest
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID,Name,SIName,SIUnit 
		INTO :r0,:r1,:r2,:r3
		FROM DiagnosticTest
		ORDER BY SIName	
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	WHILE SQLCODE=0{
		i $e(r1,$l(r1))=" " s r1=$e(r1,1,$l(r1)-1) &sql(UPDATE DiagnosticTest SET Name=:r1 WHERE ID=:r0) w "opps",!
		i $e(r2,$l(r2))=" " s r2=$e(r2,1,$l(r2)-1) &sql(UPDATE DiagnosticTest SET SIName=:r2 WHERE ID=:r0) w "opps",!
		i $e(r3,$l(r3))=" " s r3=$e(r3,1,$l(r3)-1) &sql(UPDATE DiagnosticTest SET SIUnit=:r3 WHERE ID=:r0) w "opps",!
		/*
		i $e(r1,$l(r1))=" " w r0_" : r1 ",r1,!
		i $e(r2,$l(r2))=" " w r0_" : r2 ",r2,!
		i $e(r3,$l(r3))=" " w r0_" : r3 ",r3,!
		*/
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	
	q
	; Import Templates
	#import MX
	s Q=","
	s %dev="C:\InterSystems\Cache\JondaX\BiolyticaTemplates\QA\ea2-template.csv"
	o %dev:"RS"
	s BucketName="jonda-reports-qa-euc1-v1/ea294873-8157-400b-b265-80b122bafe4d",setting=6
A	s cnt=0
	u %dev r rec
	s r1=$p(rec,Q,1)
	s r2=$p(rec,Q,2)	
	;s r3=$p(rec,Q,3)
	s r3=""
	s (x1,x2)="" &sql(SELECT ID INTO :x1 FROM DiagnosticTest WHERE SIName=:r3)
	&sql(INSERT INTO "Template" (Setting,BucketName,Name,UnitName,DiagnosticTest) VALUES (:setting,:BucketName,:r1,:r2,:r3))
	g A
	
	
	
	

DW3^MAC^^66707,28510.5308748^0
DW3
	q
	#import MX
	s Q=$c(9)
	s %dev="c:\intersystems\NewTestNames.txt"
	o %dev:"RS"
	u %dev r rec	; header
A	s cnt=0
	u %dev r rec
	f i=1:1:7 s @("r"_i)=$replace($p(rec,Q,i),"""","")
	s (x1,x2)="" &sql(SELECT ID INTO :x1 FROM DiagnosticTest WHERE SIName=:r2)
	;i x1="" u 0 w "Test Name ",r2," does not exist",!
	i x1="" &sql(INSERT INTO DiagnosticTest (Name,SIName,SIUnit,Type,Rule,"Language") VALUES (:r2,:r2,:r5,5,4,:r7))
.
	s (x1,x2)="" &sql(SELECT ID INTO :x1 FROM DiagnosticTest WHERE Name=:r1)
	;i x1="" u 0 w "Test Name ",r2," does not exist",!
	i x1="" &sql(INSERT INTO DiagnosticTest (Name,SIName,SIUnit,Type,Rule,"Language") VALUES (:r1,:r2,:r5,5,4,:r7))
.
	&sql(SELECT ID INTO :x2 FROM SIUnit WHERE SIName=:r5)
	;i x2="" u 0 w "SIUnit ",r5," does not exist",!
	g A
	
	
	
	

DW4^MAC^^66988,25408.7490552^0
DW4
	ZN "jondax"
	s ^DW=$h
	q
	f id=1712:1:1719 d
	. s obj=##class(MX.SIUnitConversion).%OpenId(id)
	. s obj1=##class(MX.SIUnitConversion).%New()
	. s obj1.DiagnosticTest="MCH Concentration"
	. s obj1.FromUnit=obj.FromUnit
	. s obj1.ToUnit=obj.ToUnit
	. s obj1.Value=obj.Value
	. d obj1.%Save()
	. s obj1=""
	q

DW5^MAC^^66778,10451.5110407^0
DW5	; Import and Match Template to JXNames
	q
Start
	d INIT^CSP999
	#import MX 
	; IMPORTANT: Back up MX.TemplateI and MX.TemplateD before running this program!
	&sql(DELETE FROM Template WHERE Setting=5)
	s Q=$c(9)	; tab
	s cnt=0
	s %dev="c:\intersystems\book2.txt"	; NOTE: use TAB delimited to avoid the comma problem with CSV
	s $ztrap="EndImport^DW5"
	o %dev
Import
	u %dev r rec
	s dt=$zdate($h,3,,4)
	s d1=$p(rec,Q,1),d2=$p(rec,Q,2)
	; strip out quotation marks
	s d1=$replace(d1,"""","")
	;s d2=$replace(d2,"""","")
.
	g:d1="" Import
	&sql(INSERT INTO "Template" (BucketName,CreatedDate,DiagnosticTest,Name,Setting,UnitName) VALUES ('jondaffr2',:dt,'',:d1,5,:d2))
	u 0 w d1," ",SQLCODE,!
	s cnt=cnt+1
	g Import
EndImport
	c %dev
	s $ztrap=""
	u 0 w $ZERROR,!,cnt," records processed",!
	
	
	
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID,Name
		INTO :r1,:r2
		FROM Template
		WHERE IsNull(DiagnosticTest,'')='' AND Setting=5
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	; strip brackets
	s r2=$replace(r2,"(percent)","(%)")
	s r2=$replace($replace(r2,"(",""),")","")
	w #
	w r2,!
	WHILE SQLCODE=0{
		s r2a=""
		&sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE SIName=:r2)	
		i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
.
		i r2a="" d
		. &sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE Name=:r2)	
		. i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
.
		i r2a="" d
		. &sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE SIName %STARTSWITH :r2 )	
		. i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
	
		i r2a="" d
		. &sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE Name %STARTSWITH :r2 )	
		. i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
.
		i r2a="" d
		. &sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE :r2 %STARTSWITH SIName )	
		. i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
	
		i r2a="" d
		. &sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE :r2 %STARTSWITH Name )	
		. i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
.
		; still no matches... try again using only brackets
.
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	
	; still no matches... try again using only brackets
.
	&sql(DECLARE C2 CURSOR FOR
		SELECT ID,Name
		INTO :r1,:r2
		FROM Template
		WHERE IsNull(DiagnosticTest,'')='' AND Name['('
	)
	&sql(OPEN C2)
	&sql(FETCH C2)
	; strip brackets
	s r2=$p($p(r2,"(",2),")",1)
	w "round 2",!
	w r2,!	
	WHILE SQLCODE=0{
		s r2a=""
		&sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE SIName=:r2)	
		i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
.
		i r2a="" d
		. &sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE Name=:r2)	
		. i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
.
		i r2a="" d
		. &sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE SIName %STARTSWITH :r2 )	
		. i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
	
		i r2a="" d
		. &sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE Name %STARTSWITH :r2 )	
		. i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
.
.
				
		; still NO match... get creative!
		i r2a="" d
		. &sql(select SIName INTO :r2a FROM DiagnosticTest WHERE REPLACE(REPLACE(REPLACE(SIName,'(',''),')',''),'-',' ')=:r2)
.
		i r2a="" d
		. &sql(select SIName INTO :r2a FROM DiagnosticTest WHERE REPLACE(REPLACE(REPLACE(Name,'(',''),')',''),'-',' ')=:r2)
		&sql(FETCH C2)
	}
	&sql(CLOSE C2)	
	

DW6^MAC^^66758,37222.6835947^0
DW6	; check for DiagnosticTest in SIUnitConversion <> JXName
	#import MX
	&sql(DECLARE C1 CURSOR FOR
		SELECT DiagnosticTest
		INTO :r1
		FROM SIUnitConversion		
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	k arr
	WHILE SQLCODE=0{
		s arr(r1)=""
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	w #
	s x=""
A	s x=$o(arr(x)) q:x=""
	s r1="" &sql(SELECT COUNT(ID) INTO :r1 FROM DiagnosticTest WHERE SIName=:x)
	i +r1>0 g A
	s r1="" &sql(SELECT COUNT(ID) INTO :r1 FROM DiagnosticTest WHERE Name=:x)
	i +r1>0 d  g A
	. &sql(SELECT SIName INTO :r1 FROM DiagnosticTest WHERE Name=:x)
	. &sql(UPDATE SIUnitConversion SET DiagnosticTest=:r1 WHERE DiagnosticTest=:x)
	w x,!
	g A
B
	#import MX
	&sql(DECLARE C2 CURSOR FOR
		SELECT FromUnit,ToUnit,Value
		INTO :r1,:r2,:r3
		FROM SIUnitConversion
		WHERE DiagnosticTest='PSA'
	)
	&sql(OPEN C2)
	&sql(FETCH C2)
.
	&sql(FETCH C2)
	WHILE SQLCODE=0{
		&sql(INSERT INTO SIUnitConversion (DiagnosticTest,FromUnit,ToUnit,Value) VALUES ('PSA Free',:r1,:r2,:r3))
		&sql(FETCH C2)
	}
	&sql(CLOSE C2)
	

DW7^MAC^^66792,34674.0671808^0
DW7
	#import MX
	&sql(DECLARE C1 CURSOR FOR
		SELECT BucketName,Setting->ServerName
		INTO :r1,:r2
		FROM Template
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	WHILE SQLCODE=0{
		s r1a=$p(r1,"/",1),r1b=$p(r1,"/",2)
		s dir="c:\intersystems\cache\jondax\"_r2_"\"_r1a_"\"_r1b
		;w ##class(%File).CreateDirectoryChain(dir),!
		w dir,!
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	
	q

DW8^MAC^^66823,11995.0472558^0
DW8
	#import MX
	d INIT^CSP999
	s bk="jonda-reports-prod-euc1-v1/fabc45f3-4e6d-4f3f-b1b2-25fcce74309a"
	&sql(DELETE FROM Template WHERE BucketName='JONDAFFR2')
	&sql(DECLARE C1 CURSOR FOR
		SELECT BucketName,CreatedDate,DeletedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName 
		INTO :r1,:r2,:r3,:r4,:r5,:r6,:r7,:r8
		FROM Template
		WHERE BucketName=:bk
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	WHILE SQLCODE=0{
		&sql(INSERT INTO Template (BucketName,CreatedDate,DeletedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName)
			VALUES ('JONDAFFR2',:r2,:r3,:r4,:r5,:r6,5,:r8)
		)
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	
	
	
	

DW9^MAC^^66842,39226.4885904^0
DW9
	; fix double spaces in Template
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID,DiagnosticTest,Name
		INTO :r1,:r2,:r3
		FROM Template
		WHERE Name['  '
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	s n=0
	
	WHILE SQLCODE=0{
		;s r2a=$p(r3," (Abs)",1)_" #"
		s r3a=$replace(r3,"  "," ")
		&sql(UPDATE Template SET Name=:r3a WHERE ID=:r1)
		&sql(FETCH C1)	
		w r1," ",r3," - ",SQLCODE,!
		s n=n+1
	}
	&sql(CLOSE C1)
	w n," records changed",!

DemoRedacting^MAC^^67135,19062.107805^0
  ;For Admin Portal testing, not working , called by DEMOdepiiUpload.csp
Save	
	#import MX
	d INIT^WSP999
	s tmpname=$$ATTNAME^WSP999
	s FName=%request.Data("FName",1)
	s FName=$zconvert(FName,"l")
	k ^jxRedactUpload(FName)
	k %session.Data("jxUploadRecord")
	
	s fext=$p(FName,".",$l(FName,".")),fext=$zconvert(fext,"l")
	; check file extension
	s allowedext="*bmp*pdf*heic*png*jpg*jpeg*gif*webp*hl7*xml*json*ttl*"
	i allowedext'[("*"_fext_"*") s ^jxRedactUpload(FName)=0 q
	s dt=$zdatetime($h,3,1)
	
  	new bytes
.
    s fsize=%request.MimeData("fileupload",1).Size	
	i +fsize=0 s ^jxRedactUpload(FName)=0 q	; no file uploaded
	
	s stream=##class(%Stream.FileBinary).%New()
	s x=""
	while 1{
		s bytes=%request.MimeData("fileupload",1).Read(.a)
		;s bytes=%request.MimeData("fileupload",1).Read(fsize)
		d stream.Write(bytes)
		quit:%request.MimeData("fileupload",1).AtEnd
		s x=x+bytes
	}
	d stream.%Save()
	; test to see if file extension matches content
	i fext="hl7" d IsHL7 q
	i fext="xml"!(fext="json")!(fext="ttl") d IsFHIR q
	s ^jxRedactUpload(FName)=tmpname
	s ^jxRedactUpload(FName,"Uploaded")=$h
	s %session.Data("jxRedactUploadRecord")=FName
	s %session.Data("jxRedactUploadRecord","fext")=fext
	s %dev="C:\InterSystems\Cache\JondaX\jondaffr2\redact\documents\"_FName
	o %dev:"wns" u %dev
	s status=stream.OutputToDevice()
	c %dev
	d redacting
.
	q
	
InitMe
	d INIT^WSP999
	k %session.Data("jLoadSubscriptions")
	k %session.Data("jxAltTransform")
	q
.
IsHL7	
	q
	o %dev:"ws"
	u %dev r x
	i x'["MSH"
	c %dev
	q
IsFHIR
	
	q	
redacting
	k ^done
	k ^martin,^mBBoxDemo,^boxArray
	s outputsDir="C:\InterSystems\Cache\CSP\jondax\redactDemo\"
	s docDir="C:\InterSystems\Cache\JondaX\jondaffr2\redact\documents\"
	
	;s fExt=  $PIECE(FName, ".", $LENGTH(FName, "."))
	s i=1
	s FName=%session.Data("jxRedactUploadRecord")
	s fExt=%session.Data("jxRedactUploadRecord","fext")
	s filename=$PIECE(FName, ".", 1)
	;s %session.Data("jxRedactRecord")=FName
	;s %session.Data("jxRedactRecord","fext")=fExt
	s ^jxRedact(FName)=FName
	s ^jxRedact(FName,"Uploaded")=$h
.
	w !,!,"Redaction Started....."
	s ext=$zconvert(fExt,"U")
	if (ext="PDF") d PDF 
	if (ext'="PDF") d IMAGE
	
PDF		
	d ##class(%File).CreateDirectory(outputsDir_filename)  ;outputPath
	; split PDF into per-page png
	;d ##class(python.pdfhandler).pdf2png(docDir_filename_"."_fExt,docDir_filename_"\"_filename)
	s cmd="win2pdfd pdf2png """_docDir_filename_"."_fExt_""" """_outputsDir_"\"_filename_"\"_filename_".png"" 0"
	s x=$zf(-1,cmd_" && exit")
		
	set dir = ##class(%File).NormalizeDirectory(outputsDir_filename_"\")
	
	set file=$ZSEARCH(dir_"*.png")
	While file'="" {
			;Write !,"File found: ", file, !
.
			d deskew		
			s ^martin("json1",i)= ##class(python.DemoDePii).analyzeImg(file)
			;d ##class("python.DemoDePii").Redacting(^martin("json1",i),file)
			Set file = $ZSEARCH("")
			s i=+1
			/* for analysis_document 
			s buc=$zf(-1,"aws s3 cp """_file_""" "_textractBucket_" && exit")
			s ^M("1","buc")=buc
			s ^M("1","file")=filename_"."_i_".png"
			s jID = ##class(python.DemoDePii).SDTDForms(filename_"."_i_".png")
			s ^M=jID 
			s ^M("1","file")=file
			d ##class(python.DemoDePii).GenerateCSVFromJobID(jID,file,"")  //(jID,docDir_filename,fExt)
			*/
		}
	
	if i=1
	{
		Set cmd = "win2pdfd png2pdf """_dir_filename_".png"" """_outputsDir_filename_"-redacted.pdf"" "
		s y=$zf(-1,cmd_" && exit")
		
	} 
	
	if i'=1 d ##class(python.pdfhandler).DePiipng2pdf(dir,outputsDir_filename_"-redacted."_fExt,filename)
	;s ^done=1
	w !,!, "File is Redacted!",!
	d ##class(%File).RemoveDirectoryTree(dir)
	;d ##class(%File).Delete(outputsDir_filename_"-redacted."_fExt)
	i ^martin("json1",i)'["An error occurred:" s ^done=1
	else  s ^done=0
	q
				
IMAGE
	s file = docDir_filename_"."_fExt
	if (ext="WEBP")!(ext="HEIC")!(ext="AVIF"){ ; change format to png
		s cmd="mogrify -format png "_file
		s x=$zf(-1,cmd_" && exit")	
		d ##class(%File).Delete(file)
		s fExt = "png"
		s %session.Data("jxRedactUploadRecord","fext")= fExt
		&sql(Update MX.Redact SET fExt=:fExt WHERE id=:rid)	
		s file = docDir_filename_"."_fExt
		}		
	s output= outputsDir_filename_"-redacted."_fExt
	d deskew
	Set cmd = "move """_file_""" """_output_""" "
	Set x = $zf(-1, cmd_" && exit")
	;s ^done= ##class(python.DemoDePii).analyzeImg(outputPath_filename_"-redacted."_fExt)
	s ^martin("doc")=output
	s ^martin("json1")= ##class(python.DemoDePii).analyzeImg(output)
	;s jsonTxt=^martin("json1")
	;d ##class("python.DemoDePii").Redacting(^martin("test"),output)
	w !,!, "File is Redacted!",!
	;s ^done=1
	;d ##class(%File).Delete(output)
.
	;d ##class(python.DemoDePii).GenerateCSVFromJobID(jID,docDir_filename,fExt)
	//s jID = ##class(python.DemoDePii).SDTDForms(filename_"."_fExt)
	//d ##class(python.DemoDePii).GenerateCSVFromJobID(jID,docDir_filename_"."_fExt)
	i ^martin("json1")'["An error occurred:" s ^done=1
	else  s ^done=0
	q
	
	
.
deskew
	s scale=100
	s cmd="convert """_file_""" -deskew 40% """_file_""""
	s x=$zf(-1,cmd_" && exit")
	s fsize=##class(%File).GetFileSize(file)
	i fsize>9999999 d		; 10Mb limit for AWS
	. s scale=$p(100-(fsize/99999999*100),".",1)-1
	. s cmd="convert "_file_" -scale "_scale_"% -deskew 40% "_file
	. s x=$zf(-1,cmd_" && exit")
.
	q
	
ConvertResults ;use in DEMODePii.csp
	
	s Fext=%session.Data("jxRedactUploadRecord","fext")
	s x=$PIECE(%session.Data("jxRedactUploadRecord"), ".", 1)_"-redacted"
	s orgFileName=%session.Data("jxRedactUploadRecord","fext")
	;s x="../redactDemo/"_x
	&js<fileName='#(x)#',formalFileExt = '#(orgFileName)#', fExt='#(Fext)#'> 
	q	

MAI^MAC^^66676,29822.1107347^0
MAI	; Medication AI
	d INIT^CSP999
	n rec
	n obj
	;n OCR
	s OCR=""
	s obj=##class(MX.Record).%OpenId(rid)
	f recno=1:1:obj.OCR.Count() {
		s rec=obj.OCR.GetAt(recno)
		s rec=$zconvert(rec,"U")
		;d MedName
		s OCR=OCR_$s(OCR'="":" ",1:"")_rec
		;s ^DW(recno)=rec		; for testing A^MAI
		s (id,r1,r2)=""
		&sql(SELECT TOP 1 ID INTO :id FROM MX.Medication WHERE :rec[UPPER(Name) OR :rec[UPPER(Formulation))
		;i id'="" &js<alert("#(id)#")>
		i id'="" s TestType("Medication")=id
	}
	s obj=""
	/*
	i '$d(TestType("Medication")) s (x1,x2,x3)="" f i=1:1:$l(OCR," ") d
	. s x=$p(OCR," ",i)
	. i x1="" &sql(SELECT TOP 1 Name INTO :x1 FROM MX.Medication WHERE UPPER(Name)[:x)
	. i x1="" &sql(SELECT TOP 1 Formulation INTO :x1 FROM MX.Medication WHERE UPPER(Formulation)[:x)
	. i x1'="" &sql(SELECT TOP 1 ID INTO :x2 FROM  MX.Medication WHERE UPPER(FORM)[:x AND (UPPER(Name)[:x1)OR(UPPER(Formulation)[:x1))
	. i x2'="" s TestType("Medication")=x2 w "Ok!",x2,!
	*/
	q:'$d(TestType("Medication"))	; not medication
	d MedName
	d Dose
	d GetDate
	d GetQty
	d GetPrecautions
	d GetIndications
	d GetCompletion
	s d1=$o(medication("")) q:d1=""		; name
	s d1a=medication(d1)
	s d2=$g(medication(d1,"Form"))
	s d3=$g(medication(d1,"Strength"))
	s d4=$g(medication(d1,"TotalQty"))
	s d5=$g(medication(d1,"PrescribedDate"))
	s d6=$g(medication(d1,"ExpiryDate"))
	s d7=$g(medication(d1,"Indications"))
	s d9=$g(medication(d1,"Dose"))
	s d8=$g(medication(d1,"DoseMethod"))
	s d10=$g(medication(d1,"Form"))
	s d11=$g(medication(d1,"DoseFrequency"))
	s d12=""
	i $g(medication(f3,"CompletionDate"))'="" s d12=medication(f3,"CompletionDate")-d5
	s d13=$g(medication(d1,"DoseCondition"))
	;s d5=$g(medication(d1,"Contraindications"))
	;s d6=$g(medication(d1,"Formulation"))
	&sql(INSERT INTO ResultMedication
		(Record,Name,Form,Strength,TotalQty,PrescribedDate,ExpiryDate,IndicationsStated,
		DoseQty,DoseMethod,DoseForm,DoseFrequency,DoseDuration,DoseCondition)
		VALUES (:rid,:d1a,:d2,:d3,:d4,:d5,:d6,:d7,
			:d8,:d9,:d10,:d11,:d12,:d13
		)
	)
	s TestType("Medication")=""
	s dt=$zdatetime($h,3)
	&sql(UPDATE Record SET ReviewedDate=:dt,ReviewedBy=1,Type='Medication' WHERE ID=:rid)
	q
A	; for local testing. set the OCR to ^DW
	d INIT^CSP999
	n rec
	s OCR=""
	k medication		;MedName,Qty,Strength,Dose,Form,IssueDate,ExpiryDate
	f recno=$o(^DW("")):1:$o(^DW(""),-1) d
	. s rec=^DW(recno)
	. s rec=$ZCONVERT(rec,"U")
	. s OCR=OCR_$s(OCR'="":" ",1:"")_rec
	. ;s (MedName,Qty,Strength,Dose,Form,IssueDate,ExpiryDate)=""
	. 
	d MedName
	s xcoord=""
	d Dose
	d GetDate	
	d GetQty
	d GetPrecautions
	d GetIndications
	d GetCompletion
	q
MedName		; Med Name, Strength, Form
	s (r1,r2,r3,r4,r5,r6,r7)=""
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID,UPPER(Form),UPPER(Formulation),UPPER(Name),UPPER(Strength),Indication,ContraIndication
		INTO :r1,:r2,:r3,:r4,:r5,:r6,:r7
		FROM MX.Medication
		WHERE (:OCR[UPPER(Name) OR :OCR[UPPER(Formulation)) AND (:OCR[UPPER(Form))
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	s n=0
	
	WHILE SQLCODE=0{
		s n=n+1
		; Name
		s medication(r3)=r1
.
		; Form
		i OCR'[r2 s medication(r3,"Form")=r2
		s r2=$replace(r2," ","")
		i OCR'[r2 s medication(r3,"Form")=r2
.
		; Strength
		i OCR[r5 s medication(r3,"Strength")=r5
		s r5=$replace(r5," ","")
		i OCR[r5 s medication(r3,"Strength")=r5
		
		s medication(r3,"Indications")=r6
		s medication(r3,"ContraIndications")=r7
		s medication(r3,"Formulation")=r3_" "_r4
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	q:n>0	; medication found
	; medication not found
	; query again but with less conditions?
	
	q	
Dose
	; dosage take directions inject
	s f3=$o(medication("")) q:f3=""
	i ((OCR["DOSAGE")!(OCR["TAKE")!(OCR["DRINK")!(OCR["DIRECTIONS")!(OCR["INJECT")!(OCR["USAGE")!(OCR["USE")!(OCR["APPLY")!(OCR["RUB")!(OCR["DISOLVE")) g Dose1
	s medication(f3,"Dose")="" q
Dose1
	i OCR["DOSAGE" s rec0="",rec1=$p(OCR,"DOSAGE",1),rec2=$p(OCR,"DOSAGE",2) g Dose2
	i OCR["TAKE" s rec0="Take",rec1=$p(OCR,"TAKE",1),rec2=$p(OCR,"TAKE",2) g Dose2
	i OCR["DRINK" s rec0="Drink",rec1=$p(OCR,"DRINK",1),rec2=$p(OCR,"DRINK",2) g Dose2
	i OCR["DIRECTIONS" s rec0="",rec1=$p(OCR,"DIRECTIONS",1),rec2=$p(OCR,"DIRECTIONS",2) g Dose2
	i OCR["INJECT" s rec0="Inject",rec1=$p(OCR,"INJECT",1),rec2=$p(OCR,"INJECT",2) g Dose2
	i OCR["USAGE" s rec0="",rec1=$p(OCR,"USAGE",1),rec2=$p(OCR,"USAGE",2) g Dose2
	i OCR["USE" s rec0="Use",rec1=$p(OCR,"USE",1),rec2=$p(OCR,"USE",2) g Dose2
	i OCR["APPLY" s rec0="Apply",rec1=$p(OCR,"APPLY",1),rec2=$p(OCR,"APPLY",2) g Dose2
	i OCR["RUB" s rec0="Rub",rec1=$p(OCR,"RUB",1),rec2=$p(OCR,"RUB",2) g Dose2
	i OCR["DISOLVE" s rec0="Disolve",rec1=$p(OCR,"DISOLVE",1),rec2=$p(OCR,"DISOLVE",2) g Dose2
	; check if other formats without keywords
	; e.g.: 1 TABLET 3 TIMES A DAY CONSUME WITH/IMMEDIATELY AFTER MEAL
	;i OCR[(("
	s medication(f3,"Dose")="" q
Dose2
	i $e(rec2,1,1)=" " s rec2=$e(rec2,2,999)
	i $e(rec2,1,1)=":" s rec2=$e(rec2,2,999)
	i $e(rec2,1,1)=" " s rec2=$e(rec2,2,999)
	
	s medication(f3,"Dose")=rec0_$s(rec0'="":" ",1:"")_$p(rec2," ",1)		;_" "_$p(rec2," ",2,6)
	s medication(f3,"DoseMethod")=rec0
	; get Dose Frequency
	s freq=""
		; convert letters to numbers
		;s x=$$WORD2NUM^MAI(rec2)
		; get frequency
		i 
		
	;
	s medication(f3,"DoseFrequency")=$p(rec2," ",3,6)
	
	s medication(f3,"DoseCondition")=""
	s x=$p(rec2," ",7,11)
.
	i x["BEFORE " s medication(f3,"DoseCondition")=$p(x,"BEFORE",1)_"BEFORE "_$p($p(x,"BEFORE ",2)," ",1)
	i x["AFTER " s medication(f3,"DoseCondition")=$p(x,"AFTER",1)_"AFTER "_$p($p(x,"AFTER ",2)," ",1)
	i x["AS NEEDED"!x["AS REQUIRED" s medication(f3,"DoseCondition")=$p(x," ",1,2)
	i x["IN THE" s medication(f3,"DoseCondition")=x
	
	i rec2["TO BE COMPLETED" s medication(f3,"DoseCondition")=medication(f3,"DoseCondition")_$s(medication(f3,"DoseCondition")'="":".",1:"")_" TO BE COMPLETED"
	i rec2["TO BE FINISHED" s medication(f3,"DoseCondition")=medication(f3,"DoseCondition")_$s(medication(f3,"DoseCondition")'="":".",1:"")_" TO BE FINISHED"
	q
GetDate	; Issued & Expiry Dates
	; pattern match formats
	s dt=""
	; dd/mm/yyyy
	s ddmmyyyy="\d\d/\d\d/\d\d\d\d"
	s x=$locate(OCR,ddmmyyyy,,,dt) 
	i dt'="" d GetDate1
	; dd mmm yyyy
	s ddmmmyyyy="\d\d \w\w\w \d\d\d\d"
	s x=$locate(OCR,ddmmmyyyy,,,dt) 
	i dt'="" d GetDate1
	; mmm yyyy
	s mmmyyyy="\w\w\w \d\d\d\d"
	s x=$locate(OCR,mmmyyyy,,,dt) 
	i dt'="" d GetDate1
	
	; dd/mm/yy
	s ddmmyy="\d\d/\d\d/\d\d"
	s x=$locate(OCR,ddmmyy,,,dt) 
	i dt'="" d GetDate1
	; dd mmm yy
	s ddmmmyy="\d\d \w\w\w \d\d"
	s x=$locate(OCR,ddmmmyy,,,dt) 
	i dt'="" d GetDate1	
	; mmm yy
	s mmmyy="\w\w\w \d\d"
	s x=$locate(OCR,mmmyy,,,dt) 
	i dt'="" d GetDate1
	q
GetDate1
	s f3=$o(medication("")) q:f3=""
	; validate if dt is a valid date
	s dt=$replace(dt,"-","/")
	; cater for 2 digit year?
	s dth=""
	i $zdateh(dt,5,,4,,,,,"")="",$zdateh(dt,15,,4,,,,,"")="" q
	s dth=$zdateh(dt,15,,4,,,,,"")
	i dth="" s dth=$zdateh(dt,5,,4,,,,,"")
	; end validate
	s temp=$e(OCR,1,x),temp1=$p(temp," ",$l(temp," ")-3,$l(temp," "))
	i temp1["EXPIRY"!(temp1["EXP") s medication(f3,"ExpiryDate")=dth q		;$zdate(dth,3,,4) q
	s medication(f3,"PrescribedDate")=dth		;$zdate(dth,3,,4)
	q
GetDateNext	; Issued & Expiry Dates
	/*
	; NOT USED
	; pattern match formats
	s dt=""
	; dd/mm/yyyy
	s ddmmyyyy="\d\d/\d\d/\d\d\d\d"
	s x=$locate(OCR,ddmmyyyy,xcoord,,dt) 
	i dt'="" g GetDate1
	; dd mmm yyyy
	s ddmmmyyyy="\d\d \w\w\w \d\d\d\d"
	s x=$locate(OCR,ddmmmyyyy,xcoord,,dt) 
	i dt'="" g GetDate1
	; mmm yyyy
	s mmmyyyy="\w\w\w \d\d\d\d"
	s x=$locate(OCR,mmmyyyy,xcoord,,dt) 
	i dt'="" g GetDate1
	
	; dd/mm/yy
	s ddmmyy="\d\d/\d\d/\d\d"
	s x=$locate(OCR,ddmmyy,xcoord,,dt) 
	i dt'="" g GetDate1
	; dd mmm yy
	s ddmmmyy="\d\d \w\w\w \d\d"
	s x=$locate(OCR,ddmmmyy,xcoord,,dt) 
	i dt'="" g GetDate1	
	; mmm yy
	s mmmyy="\w\w\w \d\d"
	s x=$locate(OCR,mmmyy,xcoord,,dt) 
	i dt'="" g GetDate1
	*/
	q
GetQty
	s f3=$o(medication("")) q:f3=""
	s medication(f3,"TotalQty")=""
	q:OCR'["TOTAL"
	s x=$p(OCR,"TOTAL",2) q:x=""
	s x=$p(x," ",1) q:+x=0
	s medication(f3,"TotalQty")=x
	q
GetPrecautions
	q
GetIndications
	q
GetCompletion
	s f3=$o(medication("")) q:f3=""
	s medication(f3,"CompletionDate")=""
	s dt1=$g(medication(f3,"ExpiryDate"))
	i dt1'="" s medication(f3,"CompletionDate")=dt1
	s dt2=$g(medication(f3,"PrescribedDate")) q:dt2=""
	s dose=$g(medication(f3,"Dose")) q:dose=""
	s tot=$g(medication(f3,"TotalQty")) q:tot=""
	
	s freq=$g(medication(f3,"DoseFrequency")) q:freq=""
	; get factor
	/*
	; TODO: determine if its daily or other period
	s factor=1
	i freq[(("BI-")!(freq["TWICE")!(freq["2X")!(freq["2 X")!(freq["BD")!(freq["B.D")) s factor=2
	i freq[(("TRI-")!(freq["THRICE")!(freq["3X")!(freq["3 X")!(freq["TD")!(freq["T.D")) s factor=3
	i freq["MONTHLY" s factor=1/30 g GetCompletedEnd
	i freq["WEEKLY" s factor=1/7 g GetCompletedEnd
	i freq["DAILY" s factor=1 g GetCompletedEnd
	*/
GetCompletionEnd	
	s freq=+freq
	; completion date = dt2 + ((dose * freq) / tot) OR dt1, whichever is greater
	s x=(dt2+((dose*freq)/tot))
	i x["." s x=$p(x,".",1)+1	; decimals
	i x>dt1 s medication(f3,"CompletionDate")=x
	q
WORD2NUM(Val)
	/*
	n str
	n i
	s x=""
	i Val["NINETY" s x=90+$s(Val["ONE ":1,Val["TWO ":2,Val["THREE ":3,Val["FOUR ":4,Val["FIVE ":5,Val["SIX ":6,Val["SEVEN ":7,Val["EIGHT ":8,Val["NINE ":9,1:0) q
	i Val["EIGHTY" s x=80+$s(Val["ONE ":1,Val["TWO ":2,Val["THREE ":3,Val["FOUR ":4,Val["FIVE ":5,Val["SIX ":6,Val["SEVEN ":7,Val["EIGHT ":8,Val["NINE ":9,1:0) q
	i Val["SEVENTY" s x=70+$s(Val["ONE ":1,Val["TWO ":2,Val["THREE ":3,Val["FOUR ":4,Val["FIVE ":5,Val["SIX ":6,Val["SEVEN ":7,Val["EIGHT ":8,Val["NINE ":9,1:0) q
	i Val["SIXTY" s x=60+$s(Val["ONE ":1,Val["TWO ":2,Val["THREE ":3,Val["FOUR ":4,Val["FIVE ":5,Val["SIX ":6,Val["SEVEN ":7,Val["EIGHT ":8,Val["NINE ":9,1:0) q
	i Val["FIFTY" s x=50+$s(Val["ONE ":1,Val["TWO ":2,Val["THREE ":3,Val["FOUR ":4,Val["FIVE ":5,Val["SIX ":6,Val["SEVEN ":7,Val["EIGHT ":8,Val["NINE ":9,1:0) q
	i Val["FOURTY" s x=40+$s(Val["ONE ":1,Val["TWO ":2,Val["THREE ":3,Val["FOUR ":4,Val["FIVE ":5,Val["SIX ":6,Val["SEVEN ":7,Val["EIGHT ":8,Val["NINE ":9,1:0) q 
	i Val["THIRTY" s x=30+$s(Val["ONE ":1,Val["TWO ":2,Val["THREE ":3,Val["FOUR ":4,Val["FIVE ":5,Val["SIX ":6,Val["SEVEN ":7,Val["EIGHT ":8,Val["NINE ":9,1:0) q
	i Val["TWENTY" s x=20+$s(Val["ONE ":1,Val["TWO ":2,Val["THREE ":3,Val["FOUR ":4,Val["FIVE ":5,Val["SIX ":6,Val["SEVEN ":7,Val["EIGHT ":8,Val["NINE ":9,1:0) q
	s str="*ONE*TWO*THREE*FOUR*FIVE*SIX*SEVEN*EIGHT*NINE*TEN*"
	f i=1:1:10 i Val[$p(str,"*",i) s x=i q
	s str="*ELEVEN*TWELVE*THIRTEEN*FOURTEEN*FIFTEEN*SIXTEEN*SEVENTEEN*EIGHTTEEN*NINETEEN*"
	f i=11:1:19 i Val[$p(str,"*",i) s x=i q
	q x
	*/
.
.
.

MX.jxAWSBGa^MAC^^66655,56308.0131389^0
jxAWSBGa		; 20th Dec 2021
	#import MX
	d INIT^CSP999
	w #,"--- DO NOT CLOSE THIS WINDOW ---",!
	;s k1=""
BG1	;w "BG1",!
	;s k1=$o(^UPLOAD(k1)) 
	s rid=""
	&sql(SELECT TOP 1 ID INTO :rid FROM Record WHERE IsNull(ProcessedDate,'')='' AND OrgFile<>'' ORDER BY CreatedDate)
	i rid="" h 10 g BG1
	&sql(SELECT Profile,Profile->UserID,TempFile,fExt,Profile->CompanyName INTO :pid,:k1,:d2,:ext,:CompanyName FROM Record WHERE ID=:rid)
	w $zdatetime($h,3,,4),!
	s ProcessCount=0
	;b
	;i k1="" h 20 g BG1
	;s d2=""
BG2	;w "BG2",!
	;s d2=$o(^UPLOAD(k1,d2))
	;g:d2="" BG1
	;i $g(^UPLOAD(k1,d2))'="" g BG2	; processed
	w "Processing ",d2,!
	
	;s ext=$zconvert(^UPLOAD(k1,d2,"fExt"),"U") 
	;i ext="PDF" d ^cAWSBGPDF w !,"--- DO NOT CLOSE THIS WINDOW ---",! g BG1
	s ext=$zconvert(ext,"U")
	i ext="PDF" d ^cAWSBGPDF w !,"--- DO NOT CLOSE THIS WINDOW ---",! g BG1
	i ext="MP3" q
	i ext="MP4" q
	
	; convert iPhone HEIC, Android AVIF/WebP & all files to png
	; and set limit to less than 5mb
	i (ext="HEIC")!(ext="AVIF")!(ext="WEBP") d
	. ;this doesn't work	;s cmd="mogrify -resize 50% -format png c:\intersystems\cache\jondax\"_CompanyName_"\"_d2_"."_ext
	. s cmd="mogrify -format png c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext
	. s x=$zf(-1,cmd_" && exit")
	. s ext="PNG"
	. ; set non-standard images to png in MX.Record
	. ; set OrgFile,fExt,BinaryData
	. ;&sql()
	
	; check for oversized files
	s scale=100
	s x=##class(%File).GetFileSize("c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext)
	i x>9999999 d		; 10Mb limit for AWS
	. s x=x-1	; to be sure
	. s scale=$p(100-(x/99999999*100),".",1)-1
	. w ?3,"File size too large: ",x,"   Scaling by ",scale,"%",!
	s cmd="convert c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext_" -scale "_scale_"% -deskew 40% c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_".png"
	s x=$zf(-1,cmd_" && exit")
	s ext="PNG"
	; run this twice to be sure
	s x=##class(%File).GetFileSize("c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext)
	i x>9999999 d		; 10Mb limit for AWS
	. s x=x-1	; to be sure
	. s scale=$p(100-(x/99999999*100),".",1)-1
	. w ?3,"File size too large: ",x,"   Scaling by ",scale,"%",!
	. s cmd="convert c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext_" -scale "_scale_"% -deskew 40% c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_".png"
	. s x=$zf(-1,cmd_" && exit")
	. s x=##class(%File).GetFileSize("c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext)
	. w ?3,"New File Size: ",x,!
	; Uploading file
	d UploadToS3
	h 10
	d ##class(%File).Delete(d2_"."_ext)
.
	; Decyphering text
Decypher1
	s fileid=$p($h,",",1)_$p($h,",",2)
	d SDTD
Decypher2	i '##class(%File).Exists("c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_fileid_".txt") h 5 g Decypher2	
ReadJobID
	s ProcessCount=ProcessCount+1
	i ProcessCount>11 g EndReadResult
	w ?3,"ReadJobID..."
	s $ZERROR=""
	s $ztrap="EndReadJobID^jxAWSBGa"
	s fnam="c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_fileid_".txt"
	o fnam u fnam
	k arr
	s i=0
ReadJobID1
	u fnam r x
	s i=i+1
	s arr(i)=x
	g ReadJobID1
	
EndReadJobID
	s $ztrap=""
	i $ZERROR'="",$ZERROR'["ENDOFFILE" u 0 w "ERROR: ",$ZERROR,!
	c fnam
	
	w ?3,"EndJobID..."
	s jobid=$p($g(arr(2)),"""",4)
	i jobid="" h 5 g ReadJobID
	; cleanup
	d ##class(%File).Delete(fnam)
	s readtries=0
EndReadJobID1
	s $ztrap=""
	d GDTD
ReadResult
	w ?3,!,"ReadResult..."	
	s fnam="c:\intersystems\cache\jondax\"_CompanyName_"\bucket\results\"_d2_".txt"
	s readtries=readtries+1
	i readtries>10 g EndReadResult
	i '##class(%File).Exists(fnam) h 5 g EndReadJobID1
	o fnam u fnam
	s $ZERROR=""
	s $ztrap="EndReadResult^jxAWSBGa"
	k arr
	s (text,top,left,blocktype,confidence,page)=""
	;s i=0
ReadResult1
	u fnam r x
	i x["INVALID_IMAGE_TYPE" s dt=$zdatetime($h,3) &sql(UPDATE Record SET ProcessedDate=:dt,Type='Invalid Image',ReviewedBy=1,ReviewedDate=:dt WHERE ID=:rid) g BG1
	; TODO: add error log
	i x["IN_PROGRESS" d  g EndReadJobID1
	. c fnam 
	. u 0 w "   ",fnam," IN PROGRESS...",! 
	. s $ztrap="" 
	. d ##class(%File).Delete(fnam)
	. h 10 
	i x="" c fnam s $ztrap="" h 2 g EndReadJobID1
	i x["""BlockType"": " s blocktype=$p(x,"""BlockType"": ",2)
	i x["""Confidence"": " s confidence=$p(x,"""Confidence"": ",2)
	i x["""Page"": " s page=$p(x,"""Page"": ",2)
	i x["""Text"": " s text=$p(x,"""Text"": ",2),text=$e(text,1,$l(text)-1)
	i x["""Left"": " s left=$p(x,"""Left"": ",2),left=$e(left,1,$l(left)-1)
	i x["""Top"": " s top=$p(x,"""Top"": ",2),top=$e(top,1,$l(top)-1)
	i x["""Page"": " d
	. i text'="" d
	.. ;i +confidence<59 s text="",left="",top="" q
	.. s text=$replace(text,"""","")
	.. s text=$replace(text,"(","")
	.. s text=$replace(text,")","")
	.. i text="" s text="",left="",top="" q
	.. s blocktype=$zconvert($replace(blocktype,"""",""),"l")
	.. i blocktype'="line," q
	.. ;u 0 w !,text
	.. s obj=##class(MX.Record).%OpenId(rid)
	.. d obj.OCR.Insert(text)
	.. d obj.%Save()
	.. s obj=""
	.. ;s i=i+1
	.. ;s gbl="^"_d2_"("_i_")"
	.. ;s @(gbl)=text
	.. s (text,top,left,blocktype,confidence,page)=""
	g ReadResult1
	
EndReadResult
	s $ztrap=""
	c fnam
	w !
	; DO ^DW3 PROCESSING
	;s ^UPLOAD(k1,d2)=$h
	s dt=$zdatetime($h,3)
	&sql(UPDATE Record SET ProcessedDate=:dt WHERE ID=:rid)
	d ^cAWSBGSave
	; clean up
	s str="aws s3 rm s3://jondaffr/"_d2_".png"
	s x=$zf(-1,str_" && exit")	
	d ##class(%File).Delete(fnam)
	d ##class(%File).Delete("c:\intersystems\cache\jondax\"_CompanyName_"\bucket\upload\"_d2_".png")
	w !,"--- DO NOT CLOSE THIS WINDOW ---",!
	g BG1
	
	
	
	
	
	
EndReadResult1
	w "  EndReadResult1..."
	k arr
	s $ztrap="ProcessResult^cAWSBGa"
	s tempfile="c:\intersystems\cache\jonda\results\"_d2_".txt"
	o tempfile
	f i=1:1 u tempfile r x s file="^"_d2_"("_i_")",@(file)=x
.
ProcessResult
	s $ztrap="" c tempfile
	w "  ProcessResult..."
	s text="",top="",left="",prevtop=""
	s tempfile="c:\intersystems\cache\jonda\results\"_d2_".0sv"
	o tempfile:"(NWS)"
	s i=""
ProcessResult1
	s i=$o(arr(i)) i i="" k arr c tempfile g ShowResult 			;q:i=""
	i arr(i)["""Text"":" s text=$replace($p(arr(i),": ",2),"""","") i text="" s text=$replace($p(arr(i),": ",3),"""","")
	; strip ending comma and replace with $c(0)
	i arr(i)["""Text"":",text'="" s text=$e(text,1,$l(text)-1)_Q
	i arr(i)["""Left"":" s left=$e($p(arr(i),": ",2),1,5)
	i arr(i)["""Top"":" s top=$j($e($p(arr(i),": ",2),1,5),0,2) d
	. q:text=""
	. ;u tempfile w "Prev: ",prevtop," Top: ",top,"  Left: ",$j(left,0,2),"  ",text
	. i top'=prevtop s prevtop=top w !
	. u tempfile w text
	. i prevtop="" s prevtop=top
	. s text="",left="",top=""
	g ProcessResult1	
ShowResult
	w "ShowResult: ",d2_"."_ext,!
	;s ^UPLOAD(k1,d2)=$h
	g BG2
	
UploadToS3	; Upload file to AWS S3 jonda bucket
	w "   UploadToS3: ",d2_"."_ext,!
	s file="c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext
	s x=$zf(-1,"aws s3 cp "_file_" s3://jondaffr/ && exit")
	q
SDTD	; Start Document Text Detection
	w "   Start Document Text Detection: ",d2_"."_ext,!
	s str="aws textract start-document-text-detection --document ""{\""S3Object\"":{\""Bucket\"":\""jondaffr\"",\""Name\"":\"""_d2_"."_ext_"\""}}"" > c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_fileid_".txt"
	s x=$zf(-1,str_" && exit")
	q
GDTD	; Get Document Text Detection
	w "   Get Document Text Detection: ",!
	s str="aws textract get-document-text-detection --job-id """_jobid_""" > C:\InterSystems\Cache\Jondax\"_CompanyName_"\bucket\results\"_d2_".txt"
	s x=$zf(-1,str_" && exit")
	q
GNXT	; Get Next Token
	w "   Get Next Token: ",!
	s str="aws textract get-document-text-detection --job-id """_jobid_""" -- next-token """_tokenid_""" > C:\InterSystems\Cache\Jondax\"_CompanyName_"\bucket\results\"_tokenid_".txt"
	s x=$zf(-1,str_" && exit")
	q
.

MgetPII^MAC^^66885,57097.6868637^0
getPII(response)
    set namesArray=[]
    Set json = $classmethod("%DynamicArray", "%FromJSON", response)
    /*
    Set resultSet = ##class(%SQL.Statement).%ExecDirect(,"SELECT Name FROM MX.DiagnosticTest")
    WHILE resultSet.%Next() {
        Set nameValue = resultSet.Name
        Do namesArray.%Push(nameValue)
    }*/
    do getTest //(json,namesArray)
    return 1
.
getTest//(json,names)
	kill ^mBBox,^boxArray
	//set reportDate=["DATE","DATE REQUESTED","DATE RECEIVED","COLLECTION DATE","REPORT DATE","DATE OF REPORT","DATE OF VISIT","VISIT DATE","DATE:","DATE REQUESTED:","DATE RECEIVED:","COLLECTION DATE:","REPORT DATE:","DATE OF REPORT:","DATE OF VISIT:","VISIT DATE:"]
	set DataBlock =0
	set censorB=[]
	set date=[]
	set flag=0
	
	set blocks= json.Blocks
	Set count = blocks.%Size()
	
    For i = 0:1:(count-1) 
    {	
		Set block = blocks.%Get(i)
    	set text = block.%Get("Text")
    	Set Geometry = block.Geometry
		set boundingBox = Geometry.%Get("BoundingBox")
		
	    if block.%Get("BlockType")="LINE" 
		{	
			//w "Block",!
			For j = 0:1:namesArray.%Size() 
         	{	}
         		//w text ,":",namesArray.%Get(j),!
	         	//if text=namesArray.%Get(j)
         		&sql(SELECT Name into :match FROM MX.DiagnosticTest where Name=:text or SIName=:text)
         		//&js<console.log("text is ",#(text)#)>
	         	if match'="" //if text=namesArray.%Get(j)	         	
	         	{
		         	
	         		set flag=flag+1  //w flag,!
	         		set ^mBBox("lastBB") = boundingBox.%ToJSON()
	         	}
	         //}
	         	//&sql(SELECT Name into :name FROM MX.DiagnosticTest where Name=(:text))
	         	//w name,!
	         	
	 		if flag <1
			{
				do censorB.%Push(boundingBox.%ToJSON())
				set ^mBBox("PII")=censorB.%ToJSON()
				do getDate(text)								
				set ^mBBox("Date")=date.%ToJSON()
.
			}
	         		
		}
    }
    if '$d(^mBBox("lastBB"))	s ^mBBox("lastBB")="[]"
	return 1
	
getDate(text)
	set x=text
	s dFlag = 0
	
	if $find(x,": ") set x=$extract(x,$find(x,": "), *)	//for "Collection Date: 24 November, 2021" , ": 24 November, 2021" 
	if $find(x,":") set x=$extract(x,$find(x,":"), *) //for "Collection Date:24 November, 2021" , ":24 November, 2021" 	  *Haemoglobin
	
	for dft=1:1:9 
		{
			if $zdateh(x,dft,,2,,,,,"0") s dFlag=1 do date.%Push(boundingBox.%ToJSON()) q //w dft," 2",! q
			if $zdateh(x,dft,,4,,,,,"0") s dFlag=1 do date.%Push(boundingBox.%ToJSON()) q
		}
	if dFlag quit
	
	for dft=15:1:21 
		{
			if $zdateh(x,dft,,2,,,,,"0") s dFlag=1 do date.%Push(boundingBox.%ToJSON()) q
			if $zdateh(x,dft,,4,,,,,"0") s dFlag=1 do date.%Push(boundingBox.%ToJSON()) q	
		}
	if dFlag quit
	
	if $zdateh(x,13,,2,,,,,"0") do date.%Push(boundingBox.%ToJSON()) q
	if $zdateh(x,13,,4,,,,,"0") do date.%Push(boundingBox.%ToJSON()) q 
		
	quit
	
	    

StripChar^MAC^^66137,46354.162567^0
StripChar
	#import MX
	s Q=$c(1)
	new i
	new r1
	g A
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID 
		INTO :rid
		FROM Record
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	WHILE SQLCODE=0{
		d A
		s obj=##class(MX.Record).%OpenId(rid)
		f i=1:1:$l(r1,Q) d
		. s text=$p(r1,Q,i)
		. d obj.OCR2.Insert(text)
		. d obj.%Save()
		s obj=""
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	q
A
	s r1=arr1
	;s obj=##class(MX.Record).%OpenId(rid)
	;f i=1:1:obj.OCR.Count() s r1=r1_$s(r1'="":Q,1:"")_obj.OCR.GetAt(i)
	;s obj=""
	; strip "-"
	s r1=$replace(r1," - ","-")
	s r1=$replace(r1,"- ","-")
	s r1=$replace(r1," -","-")		; what about "something -10"?
	; strip "."
	s r1=$replace(r1," . ",".")
	s r1=$replace(r1,". ",".")
	s r1=$replace(r1," .",".")
	
	; strip !"#$&'()*+,
	f i=33:1:44 i i'=37 s r1=$replace(r1,$c(i),"")
	; strip ":"
	s r1=$replace(r1,$c(59),"")
	; strip ";"
	s r1=$replace(r1,$c(59),"")
	; strip "?"
	s r1=$replace(r1,$c(63),"")
	; strip "@"
	s r1=$replace(r1,$c(64),"")
	; strip "["
	s r1=$replace(r1,$c(91),"")
	; strip "\"
	s r1=$replace(r1,$c(92),"")
	; strip "}"
	s r1=$replace(r1,$c(93),"")
	; strip "_"
	s r1=$replace(r1,$c(95),"")
	; strip "`"
	s r1=$replace(r1,$c(96),"")
	; strip {|}~
	f i=123:1:126 s r1=$replace(r1,$c(i),"")
	; strip other non english characters
	f i=161:1:2236 s r1=$replace(r1,$c(i),"")
	s arr1=r1
	q
	
	
	
		

WSP999^MAC^^67306,25309.6582074^0
WSP999	; Web-app System Routines
INIT	
	s Q=$c(1)
	
	s SId=$g(%session.Data("SessionId"))
	s UserID=$g(%session.Data("UserID"))
	s UserName=$g(%session.Data("UserName"))
	s:$g(^INST("ZDATE"))="" ^INST("ZDATE")=4
	s ZDATE=^INST("ZDATE")
	
	d SECURITY1
	q
INIT1
	s Q=$c(1)
	s:$g(^INST("ZDATE"))="" ^INST("ZDATE")=4
	s ZDATE=^INST("ZDATE")
	q
.
HEAD1
	s:'$d(^INST("jxJONDA","TITLE")) ^INST("jxJONDA","TITLE")="JondaX"
	s:'$d(^INST("jxJONDA","AUTHOR")) ^INST("jxJONDA","AUTHOR")="Jonda Health"
	s:'$d(^INST("jxJONDA","DESCRIPTION")) ^INST("jxJONDA","DESCRIPTION")="JondaX"
	
	w "<meta charset='utf-8'>",!
	w "<meta name='viewport' content='width=device-width, initial-scale=1.0'>",!
	w "<meta name='description' content='",^INST("jxJONDA","DESCRIPTION"),"'>",!
	w "<meta name='author' content='",^INST("jxJONDA","AUTHOR"),"'>",!
	w "<link rel='shortcut icon' href='assets/images/favicon.ico'>",!
	w "<title>",^INST("jxJONDA","TITLE"),"</title>",!
	w "<link href='assets/css/bootstrap.min.css' rel='stylesheet' type='text/css'>",!
	w "<link href='assets/css/core.css' rel='stylesheet' type='text/css'>",!
	w "<link href='assets/css/components.css' rel='stylesheet' type='text/css'>",!
	w "<link href='assets/css/icons.css' rel='stylesheet' type='text/css'>",!
	w "<link href='assets/css/pages.css' rel='stylesheet' type='text/css'>",!
	w "<link href='assets/css/responsive.css' rel='stylesheet' type='text/css'>",!
	w "<link rel='stylesheet' href='assets/styles/jxJonda.css'>",!
	w "<script src='assets/js/modernizr.min.js'></script>",!
	q
HEADTRIAL
	s:'$d(^INST("jxJONDA","TITLE")) ^INST("jxJONDA","TITLE")="JondaX Trial"
	s:'$d(^INST("jxJONDA","AUTHOR")) ^INST("jxJONDA","AUTHOR")="Jonda Health"
	s:'$d(^INST("jxJONDA","DESCRIPTION")) ^INST("jxJONDA","DESCRIPTION")="JondaX"
	
	w "<meta charset='utf-8'>",!
	w "<meta name='viewport' content='width=device-width, initial-scale=1.0'>",!
	w "<meta name='description' content='",^INST("jxJONDA","DESCRIPTION"),"'>",!
	w "<meta name='author' content='",^INST("jxJONDA","AUTHOR"),"'>",!
	w "<link rel='shortcut icon' href='assets/images/favicon.ico'>",!
	w "<title>",^INST("jxJONDA","TITLE"),"</title>",!
	w "<link href='assets/css/bootstrap.min.css' rel='stylesheet' type='text/css'>",!
	w "<link href='assets/css/core.css' rel='stylesheet' type='text/css'>",!
	w "<link href='assets/css/components.css' rel='stylesheet' type='text/css'>",!
	w "<link href='assets/css/icons.css' rel='stylesheet' type='text/css'>",!
	w "<link href='assets/css/pages.css' rel='stylesheet' type='text/css'>",!
	w "<link href='assets/css/responsive.css' rel='stylesheet' type='text/css'>",!
	w "<link rel='stylesheet' href='assets/styles/jxJonda.css'>",!
	w "<link rel='stylesheet' href='assets/styles/trialFooter.css'>",!
	w "<script src='assets/js/modernizr.min.js'></script>",!
	q
jQueryCore
	w "<script src='assets/js/jquery.min.js'></script>"
	w "<script src='assets/js/bootstrap.min.js'></script>"
	w "<script src='assets/js/detect.js'></script>"
	w "<script src='assets/js/fastclick.js'></script>"
	w "<script src='assets/js/jquery.slimscroll.js'></script>"
	w "<script src='assets/js/jquery.blockUI.js'></script>"
	w "<script src='assets/js/waves.js'></script>"
	w "<script src='assets/js/wow.min.js'></script>"
	w "<script src='assets/js/jquery.nicescroll.js'></script>"
	w "<script src='assets/js/jquery.scrollTo.min.js'></script>"
	w "<script src='assets/js/jquery.core.js'></script>"
	w "<script src='assets/js/jquery.app.js'></script>"
	w "<script src='assets/js/chart.umd.js'></script>"
	q
SECURITY1
	; Checks for various security breaches
	
	d INIT1^WSP999
	
	//q:+$g(^INST("wJONDA","Sec"))=0 	; disabled for testing
	s MySecurityBreach=0
	s CSPPage=$p(%request.URL,"/",$l(%request.URL,"/"))
	s UserID=$g(%session.Data("UserID"))
	
	//check if validated
	s Verified=""
	&sql(SELECT Verified INTO :Verified FROM MX."User" WHERE ID=:UserID)
	
	i UserID="" s MySecurityBreach=1,Desc="Attempt to illegally enter CSP page "_CSPPage_" by "_UserID d SecurityResponse q
	;i Verified="" s MySecurityBreach=1,Desc="Attempt to illegally enter CSP page "_CSPPage_" by "_UserID d SecurityResponse q
	
	&sql(SELECT ID INTO :UserID FROM MX."User" WHERE ID=:UserID)
	i $g(%session.Data("SessionId"))'=%session.SessionId s MySecurityBreach=1,Desc="Attempt to illegally enter CSP page "_CSPPage_" by "_UserID d SecurityResponse q
	s Count=0
	q
	
SecurityResponse
	//s %response.Redirect="wLogin.csp"	; disable IP Address
	
	&js<window.open('wLockDown.csp','_self')>
	;d Breach^WSPLog("Security","Security Breach",Desc,10)
	; disable MAC Address
	; kill the session
	; send response of possible breach with IP Address, MAC Address
	q
T2C(Val,MaxRow)		; TEXTAREA to CACHE
	; Converts a TEXTAREA formatted string into an array
	; returns the array x
	n i,ii,x
	k x
	s Val=$tr(Val,$c(13,10),"\n")
	f i=MaxRow:-1:1 q:$p(Val,"\n",i)'=""	; check for last row
	s i=i+1 f ii=1:1:i s x(ii)=$p(Val,"\n",ii)
	q 
H2C(Val)	; HTML to CACHE
	n x
	s x=##class(%CSP.Page).UnescapeHTML(Val)
	q x
C2H(Val)	; CACHE to HTML	
	n x
	s x=##class(%CSP.Page).EscapeHTML(Val)
	q x
C2J(Val)	; CACHE to JAVASCRIPT
	n x
	s x=##class(%CSP.Page).QuoteJS(Val)
	s x=$e(x,2,$l(x)-1)	; strip beginning and ending "'" characters
	q x
GIF2PNG	; Convert GIF to PNG
	
	q
HEIF2PNG	; Convert HEIF to PNG
	
	q
WEBP2PNG	; Convert WEBP to PNG
	
	q
AVIF2PNG	; Convert AVIF to PNG
	
	q
ATTNAME()		; Internal Name Generator for Attachments & Photos
	n iname
	n yr
	n y1
	n mth
	n m1 
	n x	
	n ZDATE
	s ZDATE=^INST("ZDATE")
	s x=$zdate($h,ZDATE,,4),yr=$p(x,"/",3),y1=$c($e(yr,3,4)+55)		; 2010 = year "0" ("A")
	s mth=$p(x,"/",2),m1=$c(mth+65)
	s iname=$g(^INST("Attachments",yr,mth))+1,^INST("Attachments",yr,mth)=iname
	s iname=y1_m1_$e("000000",1,6-$l(iname))_iname
	q iname
MOVEFILE(fdir,tdir,fnam)
	; Moves a file from 1 location to another
	; fdir format = d:\intersystems\cache\csp\bb\upload
	; tdir format = d:\intersystems\cache\csp\bb\attachments\contacts
	; fnam format = photo.jpg
	n x,i,ndir
	; check if the directory exists
	s x=$zu(140,4,tdir)
	i x'=0 d
	. ; create the directories
	. s ndir=""
	. f i=1:1:$l(tdir,"\") d
	.. s ndir=ndir_$p(tdir,"\",i)
	.. s x=$zu(140,9,ndir)
	.. i i'=$l(tdir,"\") s ndir=ndir_"\"
	; move the file
	s x=$zu(140,6,fdir_"\"_fnam,tdir_"\"_fnam)
	q x
GetSIName(testname)	; Get SI Name for a DiagnosticTest
	n x
	s x=""
	&sql(SELECT SIName INTO :x FROM DiagnosticTest WHERE SIName=:testname AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
	i x'="" q x
	&sql(SELECT SIName INTO :x FROM DiagnosticTest WHERE Name=:testname AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
	i x'="" q x
	/*
	i testname[" #" s x1=$replace(testname," #","#") &sql(SELECT SIName INTO :x FROM DiagnosticTest WHERE SIName=:x1) 
	i x'="" q x
	i testname[" #" s x1=$replace(testname," #","#") &sql(SELECT SIName INTO :x FROM DiagnosticTest WHERE Name=:x1) 
	i x'="" q x
	i testname[" %" s x1=$replace(testname," %","%") &sql(SELECT SIName INTO :x FROM DiagnosticTest WHERE SIName=:x1) 
	i x'="" q x
	i testname[" %" s x1=$replace(testname," %","%") &sql(SELECT SIName INTO :x FROM DiagnosticTest WHERE Name=:x1) 
	i x'="" q x
	*/
	
	q x
GetSIUnit(testname)	; Get SIUnit for a DiagnosticTest
	n x
	s x=""
	&sql(SELECT SIUnit INTO :x FROM DiagnosticTest WHERE SIName=:testname)
	q x 
GetJXUnit(unitname)
	n x
	s x=""
	&sql(SELECT SIName INTO :x FROM SIUnit WHERE (Name=:unitname OR SIName=:unitname)
		AND ApprovedDate IS NOT NULL AND (ModifiedDate<=ApprovedDate OR ModifiedDate IS NULL)
		AND DeletedDate IS NULL)
	q x 
.
.
TwoValue(testname,value,fromunit,tounit)
	// Extract and Calculate each value and concat with "-" again
	n num1,num2,low,high
	s low=$p(value,"-",1)
	s high=$p(value,"-",2)
	s num1=$$U2U(testname,low,fromunit,tounit)
	s num2=$$U2U(testname,high,fromunit,tounit)
	q num1_"-"_num2	
	
CheckValue(value)
	; prefixs&postfixes
	s IsNum=0
	i '$isvalidnum(value){
		i value["<=" s IsNum=1
		i value[">=" s IsNum=1
		i value["<" s IsNum=1
		i value[">" s IsNum=1
		
		i $f(value,"++")'=0 ! $f(value,"--")'=0 s IsNum=0 q IsNum
		
		//Do not reorder this If
		if value["+",$f(value,"+")=$l(value)+1 {s IsNum=1}
		if value["+",$f(value,"+")=2, $l(value)'=1 { s IsNum=1}
		else {s IsNum=0}
		
		if value["-"
		{	s pos =$f(value,"-") 
			i pos=2, $l(value)=1 {s IsNum=0 q IsNum}
			i pos=2 {s prefix="-",value=$replace(value,"-",""),IsNum=1 }	//prefix "-"
			elseif pos=($l(value)+1){ s IsNum=1 }  //postfix "-"
			else 
				{	
					s low=$p(value,"-",1)
					s high=$p(value,"-",2)
					i $isvalidnum(low), $isvalidnum(high) s IsNum=1
					}
		}
	}
	else {s IsNum=1}
 q IsNum
 		
U2U(testname,value,fromunit,tounit)	; calculate Unit To Unit
	
	n x1,x2,x3,x4,val,prefix,postfix
	s (x1,x2,x3,x4,val,postfix,prefix)=""
	s val="" 
	i value="" q value
	i fromunit="" q value
	i tounit="" q value
	s fromunit=$zstrip(fromunit, "<>W")
	s tounit=$zstrip(tounit, "<>W")
	i value[":" , $zconvert(fromunit,"l")["titer",fromunit=tounit q prefix_value
	
	; prefixs&postfixes
	i value["<=" s prefix="<=",value=$replace(value,"<=","")
	i value[">=" s prefix=">=",value=$replace(value,">=","")
	i value["<" s prefix="<",value=$replace(value,"<","")
	i value[">" s prefix=">",value=$replace(value,">","")
	
	i value["+",$f(value,"+")=2 s prefix="+",value=$replace(value,"+","")
	i value["+",$f(value,"+")=$l(value)+1 s postfix="+",value=$replace(value,"+","")
	
	if value["-"
	{	s pos =$f(value,"-") 
		i pos=2 {s prefix="-",value=$replace(value,"-","")}	//prefix "-"
		elseif pos=($l(value)+1){ s postfix="-",value=$replace(value,"-","") }  //postfix "-"
		else 
			{	//for two values eg. 1-5
				s result=$$TwoValue(testname,value,fromunit,tounit)
				q result
				}
	}
	; END of prefixs&postfixes
	i $number(value)="" q "ERROR CONVERTING"
	i $zconvert(fromunit,"l")=$zconvert(tounit,"l") q prefix_$fn(value,,2)_postfix
	
	;i fromunit["/",tounit["/" s val=$$prefix(value,fromunit,tounit) 
	;if val'="" q prefix_$fn(val,,2) 
	
	; branch for Lipoprotein A
	if $zconvert(testname,"l")="lipoprotein a",$zconvert(fromunit,"l")="g/l",$zconvert(tounit,"l")="nmol/l" set value=$fn(((value*100)*2.5),,2) quit prefix_value_postfix
	if $zconvert(testname,"l")="lipoprotein a",$zconvert(fromunit,"l")="mg/dl",$zconvert(tounit,"l")="nmol/l" set value=$fn((value*2.4),,2) quit prefix_value_postfix
	; branch for HbA1c
	if $zconvert(testname,"l")="hba1c",$zconvert(fromunit,"l")="mmol/mol",$zconvert(tounit,"l")="%" set value=$fn(((value/10.929)+2.15),,2) q prefix_value_postfix
	; get SI Name
	s x1=$$GetSIName^WSP999(testname) i x1="" q ""
	;s x1=$$GetSIName^WSP999(testname) i x1="" q ""
	if x1["#",fromunit="%" s x1=$p(x1," ",1)
	s testname=x1
	if x1="Cholesterol (non HDL) Total" s testname="Cholesterol Total"
	
	; get SI Unit - fromunit
	s x2=""
	s x2=$$GetJXUnit^WSP999(fromunit)
	i x2'="" s fromunit=x2 
	i x2="" q "ERROR CONVERTING"
	; get JXUnit
	if ($E(fromunit,1,2)=10){
		s fromunit=$$GetJXUnit^WSP999(fromunit)
	}
	; get JXUnit - tounit
	s x1=""
	s x1=$$GetJXUnit^WSP999(tounit)
	i x1'="" s tounit=x1
	i x1="" q "ERROR CONVERTING"
	; same unit
	i $zconvert(fromunit,"l")=$zconvert(tounit,"l") q prefix_$fn(value,,2)_postfix
	; same unit, different prefix
	i fromunit["/",tounit["/" s val=$$prefix(value,fromunit,tounit) 
	if val'="" q prefix_$fn(val,,2)_postfix
	;b:$g(dw)=1
	if testname["Calcium"  s testname="Calcium"
	;;s testing1=testname_fromunit_tounit  ;for testing
	; get fromunit to SIUnit conversion value
	&sql(SELECT Value INTO :x3 FROM SIUnitConversion WHERE DiagnosticTest=:testname AND ToUnit=:fromunit)
	&sql(SELECT Value INTO :x4 FROM SIUnitConversion WHERE DiagnosticTest=:testname AND ToUnit=:tounit)
	;b:$g(DW)=1
	i +x4'=0 s val=$fn((value*x3/x4),,4) ;Update round off from 10 to 4, 23Nov24
	i val'="" s val=$fn(val,,2)
	i +val=0,+value'=0 q "ERROR CONVERTING"
	q prefix_val_postfix
		
xU2U(testname,value,fromunit,tounit)	; calculate Unit To Unit
	
	n x1,x2,x3,x4,val
	s (x1,x2,x3,x4,val,prefix)=""
	s val="" s testing=""
	i value="" q value
	i fromunit="" q value
	i tounit="" q value
	s fromunit=$zstrip(fromunit, "<>W")
	s tounit=$zstrip(tounit, "<>W")
	
	i value[":" , $zconvert(fromunit,"l")["titer",fromunit=tounit q prefix_value
	; prefixes
	i value["<=" s prefix="<=",value=$replace(value,"<=","")
	i value[">=" s prefix=">=",value=$replace(value,">=","")
	i value["<" s prefix="<",value=$replace(value,"<","")
	i value[">" s prefix=">",value=$replace(value,">","")
	i value["+" s prefix="+",value=$replace(value,"+","")
	i value["-",$f(value,"-")=2 s prefix="-",value=$replace(value,"-","")
	
	i $number(value)="" q "ERROR CONVERTING"
	i $zconvert(fromunit,"l")=$zconvert(tounit,"l") q prefix_$fn(value,,2)
	
	;i fromunit["/",tounit["/" s val=$$prefix(value,fromunit,tounit) 
	;if val'="" q prefix_$fn(val,,2) 
	
	; branch for Lipoprotein A
	if $zconvert(testname,"l")="lipoprotein a",$zconvert(fromunit,"l")="g/l",$zconvert(tounit,"l")="nmol/l" set value=$fn(((value*100)*2.5),,2) quit prefix_value
	if $zconvert(testname,"l")="lipoprotein a",$zconvert(fromunit,"l")="mg/dl",$zconvert(tounit,"l")="nmol/l" set value=$fn((value*2.4),,2) quit prefix_value
	; branch for HbA1c
	if $zconvert(testname,"l")="hba1c",$zconvert(fromunit,"l")="mmol/mol",$zconvert(tounit,"l")="%" set value=$fn(((value/10.929)+2.15),,2) q prefix_value
	; branch for Globulin
	;if $zconvert(testname,"l")="globulin",$zconvert(fromunit,"l")="g/l",$zconvert(tounit,"l")="g/dl" set value=$fn(((value*1)/10),,2) q value
	; branch for IgA
	;if $zconvert(testname,"l")="iga",$zconvert(fromunit,"l")="g/l",$zconvert(tounit,"l")="g/dl" set value=$fn(((value*1)/10),,2) q value
	;if $zconvert(testname,"l")="igm",$zconvert(fromunit,"l")="g/l",$zconvert(tounit,"l")="g/dl" set value=$fn(((value*1)/10),,2) q value
	;if $zconvert(testname,"l")="igg",$zconvert(fromunit,"l")="g/l",$zconvert(tounit,"l")="g/dl" set value=$fn(((value*1)/10),,2) q value
	
	;s prefix=$e(value,1,1) i prefix=0!(+prefix'=0) s prefix=""
	;s value=$replace($replace($replace(value,"<",""),">","")," ","")
	; get SI Name
	s x1=$$GetSIName^WSP999(testname) i x1="" q ""
	;s x1=$$GetSIName^WSP999(testname) i x1="" q ""
	if x1["#",fromunit="%" s x1=$p(x1," ",1)
	s testname=x1
	if x1="Cholesterol (non HDL) Total" s testname="Cholesterol Total"
	
	; get SI Unit - fromunit
	s x2=""
	s x2=$$GetJXUnit^WSP999(fromunit)
	i x2'="" s fromunit=x2 
	i x2="" q "ERROR CONVERTING"
	; get JXUnit
	if ($E(fromunit,1,2)=10){
		s fromunit=$$GetJXUnit^WSP999(fromunit)
	}
	; get JXUnit - tounit
	s x1=""
	s x1=$$GetJXUnit^WSP999(tounit)
	i x1'="" s tounit=x1
	i x1="" q "ERROR CONVERTING"
	; same unit
	i $zconvert(fromunit,"l")=$zconvert(tounit,"l") q prefix_$fn(value,,2)
	; same unit, different prefix
	i fromunit["/",tounit["/" s val=$$prefix(value,fromunit,tounit) 
	if val'="" q prefix_$fn(val,,2) 
	;b:$g(dw)=1
	if testname["Calcium"  s testname="Calcium"
	;;s testing1=testname_fromunit_tounit  ;for testing
	; get fromunit to SIUnit conversion value
	&sql(SELECT Value INTO :x3 FROM SIUnitConversion WHERE DiagnosticTest=:testname AND ToUnit=:fromunit)
	&sql(SELECT Value INTO :x4 FROM SIUnitConversion WHERE DiagnosticTest=:testname AND ToUnit=:tounit)
	;b:$g(DW)=1
	i +x4'=0 s val=$fn((value*x3/x4),,4) ;Update round off from 10 to 4, 23Nov24
	i val'="" s val=$fn(val,,2)
	i +val=0,+value'=0 q "ERROR CONVERTING"
	q prefix_val
.
APLOGVISIT
	q
AveRes(name,value,unit,type)
	q ""
	;new n,list,UB,LB,avg,SD
	; type="Result, Hi, Lo"
	s list=[],n=0,i=0
	s name=$$GetSIName^WSP999(name) ; get all matching names
	S TSQL=3
	S TSQL(1)="SELECT Name"
	S TSQL(2)=" FROM MX.DiagnosticTest WHERE SIName='"_name_"'"
	;;S TSQL(1)="SELECT SIName"
	;;S TSQL(2)=" FROM MX.DiagnosticTest WHERE Name='"_name_"'"
	S TSQL(3)=""		;" ORDER BY "_SortBy
	s myquery=TSQL(1)_TSQL(2)_TSQL(3)
	SET tStatement = ##class(%ResultSet.SQL).%Prepare(myquery,.err,"")
	;s ^martin("ts")=tStatement
	s xTSQL(1)="SELECT TOP 50 Tests_TestName,Tests_Result,Tests_SIUnit "
	s xTSQL(2)="FROM MX.ResultBloodTest_Tests "
	s xTSQL(3)=""
	s xTSQL(4)=" ORDER BY ResultBloodTest ASC"
	WHILE tStatement.%Next() {
			s x1=tStatement."Name"
			s xTSQL(3)=xTSQL(3)_$s(xTSQL(3)'="":" OR ",1:"")_"Tests_TestName='"_x1_"'"
     	}
    if (tStatement.%SQLCODE < 0)  quit "SQLCODE : "_tStatement.%SQLCODE_", "_tStatement.%Message
		
    s xTSQL(3)="WHERE "_xTSQL(3)
    s newquery=xTSQL(1)_xTSQL(2)_xTSQL(3)_xTSQL(4)
    SET tStatement = ##class(%ResultSet.SQL).%Prepare(newquery,.err,"")
    WHILE tStatement.%Next() {
	    s ^l1(n,"name")=tStatement."Tests_TestName"
		s ^l1(n,"result")=tStatement."Tests_Result" 
		s ^l1(n,"unit")=tStatement."Tests_SIUnit"
		if tStatement."Tests_Result"=0!$FNUMBER(tStatement."Tests_Result")=1 d
		.d list.%Push(tStatement."Tests_Result") s i=i+1	;w i_" ; "_list.%Get(i),!
		;else {w "not a number : "_tStatement."Tests_Result" ,!} 
		s n=n+1
    }
    d getSD
	s LB=avg-SD, UB=avg+SD
	if value'< LB,value'> UB q 1
	else  q 0
	q ""
AveRes1(name, value, unit)
	;new r1,r2,r3,n,list,UB,LB,name,unit,avg,SD
	s n=1
	s list=[]
	&sql(DECLARE C0 CURSOR FOR
		SELECT TOP 100 Tests_TestName,Tests_Result,Tests_SIUnit,AVG(Tests_Result)
		INTO :r1,:r2,:r3,:r4
		FROM MX.ResultBloodTest_Tests
		WHERE Tests_TestName=:name AND Tests_SIUnit=:unit
		ORDER BY ResultBloodTest DESC
	)
	&sql(OPEN C0)
	&sql(FETCH C0)
	WHILE SQLCODE=0{
		
		if r2=0!$fnumber(r2)=1  , r2'>(r4+5), r2'<(r4-5)
		{	
			;w r2,", ",r4,!
			s l1(n,"name")=r1
			s l1(n,"result")=r2
			s l1(n,"unit")=r3
			d list.%Push(r2)
			s n=n+1
		}
		&sql(FETCH C0)
	}
	&sql(CLOSE C0)
	d getSD
	i SD>avg s tor=0.35 s LB=avg*(1-tor), UB=avg*(1+tor)
	e  s LB=avg-SD, UB=avg+SD
	if value'< LB,value'> UB q 1
	else  q 0
	q ""
	
AveLo(name, value, unit)
	;new r1,r2,r3,n
	s n=1, list=[]
	&sql(DECLARE C1 CURSOR FOR
		SELECT Tests_TestName,Tests_LowRange,Tests_SIUnit
		INTO :r1,:r2,:r3
		FROM ResultBloodTest_Tests
		WHERE Tests_TestName=:name AND Tests_SIUnit=:unit
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	WHILE SQLCODE=0{
		s l2(n,"name")=r1
		s l2(n,"result")=r2
		s l3(n,"unit")=r3
		d list.%Push(r2)
		s n=n+1
		
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	d getSD
	s LB=avg-SD, UB=avg+SD
	if value'< LB,value'> UB w "correct"
	else  w "need to check!"	
.
AveHi(name, value, unit)
	;new r1,r2,r3,n
	s n=1
	&sql(DECLARE C2 CURSOR FOR
		SELECT Tests_TestName,Tests_HighRange,Tests_SIUnit
		INTO :r1,:r2,:r3
		FROM ResultBloodTest_Tests
		WHERE Tests_TestName=:name AND Tests_SIUnit=:unit
	)
	&sql(OPEN C2)
	&sql(FETCH C2)
	WHILE SQLCODE=0{
		s l3(n,"name")=r1
		s l3(n,"result")=r2
		s l3(n,"unit")=r3
		d list.%Push(r2)
		s n=n+1
		
		&sql(FETCH C2)
	}
	&sql(CLOSE C2)
	d getSD
	s LB=avg-SD, UB=avg+SD
	if value'< LB,value'> UB w "correct"
	else  w "need to check!"
.
getSD
	s sum=0,avg=0
	set sumSquared = 0,SumSqr=0
	s count=list.%Size()
	for i=0:1:(count-1) {
		s sum=sum+list.%Get(i)
		s SumSqr=SumSqr+(list.%Get(i) * list.%Get(i))
		}
	s avg= sum/count
	
	Set variance = (SumSqr / count) - (avg * avg)
    Set SD = $S(variance>0:$zsqr(variance), 1:0) // Handle case where variance is zero
    	
	/*
	s avg= sum/count
    for i=0:1:(count-1) {
        set deviation = list.%Get(i) - avg
        set sumSquared = sumSquared + (deviation * deviation)
    }
    set variance = sumSquared / (count-1)
    set SD = $zsqr(variance)	
    */
    q 
    
    
prefix(value,fromUnit,toUnit)
	s baseUnit="",baseUnit1=""
	s (result,tPrefix,tPrefix1,fPrefix,fPrefix1)=""
	i fromUnit["IU/" {}
	elseif fromUnit["U/" {s fromUnit=$replace(fromUnit,"U/","IU/")}
	i toUnit["IU/" {}
	elseif toUnit["U/" {s toUnit=$replace(toUnit,"U/","IU/")}
	
	if fromUnit["/",toUnit["/" {
		;finding upper units' prefixes
		set i=$f(fromUnit,"/")-2, j=$f(toUnit,"/")-2
		while i'=0,j'=0 {
			;w $e(fromUnit,i),!,$e(toUnit,j),!
			i $e(fromUnit,i)=$e(toUnit,j) s baseUnit=$e(fromUnit,i)_baseUnit ;w "baseUnit is: "_baseUnit,! ;w "fromUnit: "_i_","_$e(fromUnit,i)_", toUnit: "_j_","_$e(toUnit,j),!
			e  q
			s i=i-1, j=j-1	
		}
		;w "UPPER PART:",!	
		s fPrefix=$p(fromUnit,baseUnit,"1")  ;i fPrefix'="" w "fromUnit has prefix: "_fPrefix_", pos: ",i,!
		s tPrefix=$p(toUnit,baseUnit,"1") ;i tPrefix'="" w "toUnit has prefix: "_tPrefix_", pos: ",j,!
		
		;finding under units' prefixes
		s i=$l(fromUnit),j=$l(toUnit)
		s fIndex= $f(fromUnit, "/")-1,tIndex=$f(toUnit, "/")-1
		;w fIndex_", "_tIndex,!
		;w i_", "_j,!
		
		while i>fIndex,j>tIndex {
			
			;w $e(fromUnit,i),i,!,$e(toUnit,j),j,!
			i $e(fromUnit,i)=$e(toUnit,j) s baseUnit1=$e(fromUnit,i)_baseUnit1 ;w "under baseUnit is: "_baseUnit1,! ;w "fromUnit: "_i_","_$e(fromUnit,i)_", toUnit: "_j_","_$e(toUnit,j),!
			e  q
			
			s i=i-1 s j=j-1	
		}
		;w !,"Lower PART:",!
		s fPrefix1=$p($p(fromUnit,"/",2),baseUnit1,"1") ;if fPrefix1'="" w "fromUnit has prefix: "_fPrefix1_", pos: ",i,!
		s tPrefix1=$p($p(toUnit,"/",2),baseUnit1,"1") ;if tPrefix1'=""  w "toUnit has prefix: "_tPrefix1_", pos: ",j,!
	    ;w "BaseUnit is :"_baseUnit_"/"_baseUnit1,!
		
		if baseUnit'="" ,baseUnit1'="" d 
		.d prefixConversion 
		.s result=value*FinalFactor 
		
	}
	q result
prefixConversion	
	#import MX
	;s (fromU,toU,fromL,toL)=1
	;upper
	&sql(SELECT Factor INTO :fromU FROM UnitPrefix WHERE %EXACT(Prefix)=:fPrefix)
	&sql(SELECT Factor INTO :toU FROM UnitPrefix WHERE %EXACT(Prefix)=:tPrefix)
	if fromU="" s fromU=1
	if toU="" s toU=1
	s uFactor= fromU/toU
	;w fPrefix_" to "_tPrefix_"="_fromU_"/"_toU_"= "_uFactor,!
	;Lower
	&sql(SELECT Factor INTO :fromL FROM UnitPrefix WHERE %EXACT(Prefix)=:fPrefix1)
	&sql(SELECT Factor INTO :toL FROM UnitPrefix WHERE %EXACT(Prefix)=:tPrefix1)
	if fromL="" s fromL=1
	if toL="" s toL=1
	s LFactor= fromL/toL
	;w fPrefix1_" to "_tPrefix1_"="_fromL_"/"_toL_"= "_LFactor,!
	
	s FinalFactor= uFactor/LFactor ;w FinalFactor,!
	q     
	
	
	
	
	
	
U2U01(testname,value,fromunit,tounit)	; calculate Unit To Unit
	
	;n x1,x2,x3,x4,val,prefix,postfix
	s (x1,x2,x3,x4,val,postfix,prefix)=""
	s val="" 
	i value="" q value
	i fromunit="" q value
	i tounit="" q value
	s fromunit=$zstrip(fromunit, "<>W")
	s tounit=$zstrip(tounit, "<>W")
	i value[":" , $zconvert(fromunit,"l")["titer",fromunit=tounit q prefix_value
	
	; prefixs&postfixes
	i value["<=" s prefix="<=",value=$replace(value,"<=","")
	i value[">=" s prefix=">=",value=$replace(value,">=","")
	i value["<" s prefix="<",value=$replace(value,"<","")
	i value[">" s prefix=">",value=$replace(value,">","")
	
	i value["+",$f(value,"+")=2 s prefix="+",value=$replace(value,"+","")
	i value["+",$f(value,"+")=$l(value)+1 s postfix="+",value=$replace(value,"+","")
	
	if value["-"
	{	s pos =$f(value,"-") 
		i pos=2 {s prefix="-",value=$replace(value,"-","")}	//prefix "-"
		elseif pos=($l(value)+1){ s postfix="-",value=$replace(value,"-","") }  //postfix "-"
		else 
			{	//for two values eg. 1-5
				s result=$$TwoValue(testname,value,fromunit,tounit)
				q result
				}
	}
	; END of prefixs&postfixes
	i $number(value)="" q "ERROR CONVERTING"
	i $zconvert(fromunit,"l")=$zconvert(tounit,"l") q prefix_$fn(value,,2)_postfix
	
	;i fromunit["/",tounit["/" s val=$$prefix(value,fromunit,tounit) 
	;if val'="" q prefix_$fn(val,,2) 
	
	; branch for Lipoprotein A
	if $zconvert(testname,"l")="lipoprotein a",$zconvert(fromunit,"l")="g/l",$zconvert(tounit,"l")="nmol/l" set value=$fn(((value*100)*2.5),,2) quit prefix_value_postfix
	if $zconvert(testname,"l")="lipoprotein a",$zconvert(fromunit,"l")="mg/dl",$zconvert(tounit,"l")="nmol/l" set value=$fn((value*2.4),,2) quit prefix_value_postfix
	; branch for HbA1c
	if $zconvert(testname,"l")="hba1c",$zconvert(fromunit,"l")="mmol/mol",$zconvert(tounit,"l")="%" set value=$fn(((value/10.929)+2.15),,2) q prefix_value_postfix
	; get SI Name
	s x1=$$GetSIName^WSP999(testname) i x1="" q ""
	;s x1=$$GetSIName^WSP999(testname) i x1="" q ""
	if x1["#",fromunit="%" s x1=$p(x1," ",1)
	s testname=x1
	if x1="Cholesterol (non HDL) Total" s testname="Cholesterol Total"
	
	; get SI Unit - fromunit
	s x2=""
	s x2=$$GetJXUnit^WSP999(fromunit)
	i x2'="" s fromunit=x2 
	i x2="" q "ERROR CONVERTING"
	; get JXUnit
	if ($E(fromunit,1,2)=10){
		s fromunit=$$GetJXUnit^WSP999(fromunit)
	}
	; get JXUnit - tounit
	s x1=""
	s x1=$$GetJXUnit^WSP999(tounit) w "x1 is:",tounit,".",!
	i x1'="" s tounit=x1
	i x1="" q "ERROR CONVERTING"
	; same unit
	i $zconvert(fromunit,"l")=$zconvert(tounit,"l") q prefix_$fn(value,,2)_postfix
	; same unit, different prefix
	w value,",",fromunit,",",tounit,!
	i fromunit["/",tounit["/" s val=$$prefix^WSP999(value,fromunit,tounit) w val,"value",!
	if val'="" q prefix_$fn(val,,2)_postfix
	;b:$g(dw)=1
	if testname["Calcium"  s testname="Calcium"
	;;s testing1=testname_fromunit_tounit  ;for testing
	; get fromunit to SIUnit conversion value
	;w testname," , ",fromunit," , ",tounit,!
	&sql(SELECT Value INTO :x3 FROM SIUnitConversion WHERE DiagnosticTest=:testname AND ToUnit=:fromunit)
	&sql(SELECT Value INTO :x4 FROM SIUnitConversion WHERE DiagnosticTest=:testname AND ToUnit=:tounit)
	;b:$g(DW)=1
	w x3," , ",x4,!
	i +x4'=0 s val=$fn((value*x3/x4),,4) ;Update round off from 10 to 4, 23Nov24
	i val'="" s val=$fn(val,,2)
	i +val=0,+value'=0 q "ERROR CONVERTING"
	q prefix_val_postfix

bgRenewSubscription^MAC^^67157,27296.1965807^0
bgRenewSubscription2	// Renew client's subscription automatically 
	#import MX
	; Set today's date(dd,mm,yy) in different variables
	s dth=+$h,dt=$zdate(dth,3,,4),yy=$p(dt,"-",1),mm=$p(dt,"-",2),dd=$p(dt,"-",3)
	w dth,!
	
	; Select subscriptions active on today's date
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID,StartDate,EndDate,Type,RemainingOCRUnit,RemainingTransformationUnit,RemainingRedactionUnit,
		Subscription->OCRUnit,Subscription->TransformationUnit,Subscription->RedactionUnit
		INTO :r1,:r2,:r3,:r4,:r5,:r6,
		:r7,:r8,:r9,:r10
		FROM MX.Subscription
		WHERE StartDate<=:dth AND EndDate>=:dth
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	
	; Loop through each subscription while there are records to process
	WHILE SQLCODE=0{
		w "sdate"_$zdate(r2)_" edate "_ $zdate(r3),!
		w "Type"_r4,!
		s renewdth=""
		 
		; Parse subscription start date
		s sdth=r2,sdt=$zdate(r2,4,,4),sdd=$p(sdt,"/",1),smm=$p(sdt,"/",2),syy=$p(sdt,"/",3)
		
		; test if valid (for leap year) updated by Talen 5/21/2024
		i $zdateh((sdd_"/"_mm_"/"_yy),4,,4,,,,,"error")="error" d
		. s sdd=sdd+1 i $zdateh((sdd_"/"_mm_"/"_yy),4,,4,,,,,"error")="error" d
		.. s sdd="01" 
		.. i mm+1>12 s mm="01",yy=yy+1 e  s mm=mm+1		; Update month and year if needed
		.. s renewdth=$zdateh((sdd_"/"_mm_"/"_yy),4,,4)
		.. w renewdth,!
		
		; Check if today matches subscription renewal day
		i dd=sdd d
		. i mm+1>12 s mm="01",yy=yy+1 e  s mm=mm+1 		 ; Roll over month and year if needed
		. s renewdth=$zdateh((sdd_"/"_mm_"/"_yy),4,,4)	 ; Set renewal date
		w renewdth,! ; Updating/ updated by Talen 5/21/2024
		
		; Store leftover transformation or redaction units if renewal is today
		i r4="Transformation",renewdth=dth s ^bgRenewSub(r1,"Transformation")=r8_", "_r9
		i r4="Redaction",renewdth=dth s ^bgRenewSub(r1,"Redaction")=r10
		
		; update subscription in the database on renewal date
		;i r4="Transformation",renewdth=dth &sql(UPDATE "Subscription" SET RemainingOCRUnit=:r8,RemainingTransformationUnit=:r9 WHERE ID=:r1)
		;i r4="Redaction",renewdth=dth &sql(UPDATE "Subscription" SET RemainingRedactionUnit=:r10 WHERE ID=:r1)
		
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	q
	
	

bgRenewSubscription2^MAC^^67222,6584.6347687^0
bgRenewSubscription2	// Scheduled Task, Renew client's subscription automatically 
	#import MX
	; Set today's date(dd,mm,yy) in different variables
	s dth=+$h,dt=$zdate(dth,3,,4),yy=$p(dt,"-",1),mm=$p(dt,"-",2),dd=$p(dt,"-",3)
	w "+$h: ",dth,!,!
	
	; Select subscriptions active on today's date
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID,StartDate,EndDate,Type,RemainingOCRUnit,RemainingTransformationUnit,RemainingRedactionUnit,
		Subscription->OCRUnit,Subscription->TransformationUnit,Subscription->RedactionUnit,Profile
		INTO :r1,:r2,:r3,:r4,:r5,:r6,
		:r7,:r8,:r9,:r10,:r11
		FROM MX.Subscription
		WHERE StartDate<=:dth AND EndDate>=:dth AND ISNULL(CancelRequest,'')=''
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	
	; Loop through each subscription while there are records to process
	WHILE SQLCODE=0{
		w !,"sdate "_$zdate(r2)_" edate "_ $zdate(r3),!
		w "Type: "_r4_", User ID:",r11,!
		s renewdth=""
		 
		; Parse subscription start date
		s sdth=r2,sdt=$zdate(r2,4,,4),sdd=$p(sdt,"/",1),smm=$p(sdt,"/",2),syy=$p(sdt,"/",3)
		
		; test if valid (for leap year) updated by Talen 5/21/2024
		i $zdateh((sdd_"/"_mm_"/"_yy),4,,4,,,,,"error")="error" d
		. s sdd=sdd+1 i $zdateh((sdd_"/"_mm_"/"_yy),4,,4,,,,,"error")="error" d
		.. s sdd="01" 
		.. i mm+1>12 s mm="01",yy=yy+1 e  s mm=mm+1		; Update month and year if needed
		.. s renewdth=$zdateh((sdd_"/"_mm_"/"_yy),4,,4)
		.. w "Leap year-new renewal date: ",renewdth,!
		
		; Check if today matches subscription renewal day
		w dd,", ",sdd,!
		i dd=sdd d
		. i mm+1>12 s mm="01",yy=yy+1 e  s mm=mm+1 		 ; Roll over month and year if needed
		. s renewdth=$zdateh((sdd_"/"_mm_"/"_yy),4,,4)	 ; Set renewal date
		. w "Renewal date: ", renewdth,! ; Updating/ updated by Talen 5/21/2024
		
		; Store leftover transformation or redaction units if renewal is today
		i r4="Transformation",renewdth=dth s ^bgRenewSub(r1,"Transformation")=r8_", "_r9_", "_$zdate(renewdth,3)
		i r4="Redaction",renewdth=dth s ^bgRenewSub(r1,"Redaction")=r10_", "_$zdate(renewdth,3)
		
		; update subscription in the database on renewal date
		i r4="Transformation",renewdth=dth &sql(UPDATE "Subscription" SET RemainingOCRUnit=:r8,RemainingTransformationUnit=:r9 WHERE ID=:r1)
		i r4="Redaction",renewdth=dth &sql(UPDATE "Subscription" SET RemainingRedactionUnit=:r10 WHERE ID=:r1)
		
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	q
	
	

boboAWS^MAC^^66650,63025.1001481^0
S3List
	s cmd = "aws s3 ls"
	s dir = "C:\TestFolder\S3\Logs\log.txt"
.
	;set status = $ZF(-100,"/SHELL/STDOUT="""_dir_"""","aws","s3","cp","s3://jondaffr/condition.png","s3://jondaffr2/")
	;set status = $ZF(-100,"/SHELL/STDOUT="""_dir_"""","aws","s3","ls")
	;zw status
	;q
	
	;s pCmdArgs = $LISTBUILD("aws","s3","ls")
	
	;s tSC = ##class(%Net.Remote.Utility).RunCommandViaCPIPE(pCmdArgs, .pDevice, .pOutput, "s3")
	
	;zw pCmdArgs
	;w !
	;zw pDevice
	;w !
	;close pDevice
.
	s tSC = ##class(%Net.Remote.Utility).RunCommandViaZF("aws", dir, .pOutput, 5, 0, .pRetCode, "s3")
.
	zw tSC
	w !
	zw pOutput
	q
		
	s tSC = ##class(%Net.Remote.Utility).RunCommandViaCPIPE(cmd, .pDevice, .pOutput)
	zw tSC
	w !,"------",!
	zw pDevice
	w !,"------",!
	zw pOutput
	
	
	q
	
	
PDF2PNG
	s fname = "C:\TestFolder\PDFHANDLER\TEST.pdf"
	s outputDir = "C:\TestFolder\PDFHANDLER\temp_pngs\"
	s status = ##class(python.pdfhandler).pdf2png(fname, outputDir)
	zw status
	q
.
PNG2PDF
	s inputDir = "C:\TestFolder\PDFHANDLER\temp_pngs\"
	s outputFileName = "C:\TestFolder\PDFHANDLER\generated_pdfs\generated_1.pdf"
	s status = ##class(python.pdfhandler).png2pdf(inputDir, outputFileName)
	zw status
	q

boboBioErrorHandler^MAC^^66660,45824.692904^0
cAWSOCR	; pass in Record ID (rid) and get OCR text
GetDateType	; Date and Type of Record
	n test
	s ReportDate=""
	k TestType
	s obj=##class(MX.Record).%OpenId(rid)
	q:$g(obj)=""
	f recno=1:1:obj.OCR.Count() {
		w !
		s rec=obj.OCR.GetAt(recno)
		s rec=$zconvert(rec,"U")
		w "rec: ", rec, !
		
		; DATE
		;i "*DISCHARGE DATE*ADMISSION DATE*DATE RECEIVED*COLLECTION DATE*REPORT DATE*DATE OF REPORT*DATE OF VISIT*VISIT DATE*ADMITTED ON*"[("*"_rec_"*") {
		i ((ReportDate="")&(rec["DATE")&(rec'["BIRTH"))!((ReportDate="")&(rec["COLLECTED")&(rec["REPORTED")){
			w "you are in if",!
			s ReportDate=$replace(ReportDate," ","")
			w "1 ReportDate: ",ReportDate,!
			s ReportDate=$p(rec,":",2) 
			w "2 ReportDate: ",ReportDate,!
			i ReportDate="" s ReportDate=obj.OCR.GetAt(recno+1) w "3 if ReportDate: ",ReportDate,! i ReportDate[":" s ReportDate=$p(ReportDate,":",2) 
			w "3 ReportDate: ",ReportDate,!
			i ReportDate="" s ReportDate=obj.OCR.GetAt(recno+2) w "4 if ReportDate: ",ReportDate,! i ReportDate[":" s ReportDate=$p(ReportDate,":",2)
			w "4 ReportDate: ",ReportDate,!
			i $e(ReportDate,1,1)=" " {w "ReportDate in if: ",ReportDate,! s ReportDate=$e(ReportDate,2,999) w "ReportDate in if (after): ",ReportDate,!	}
			s ReportDate=$replace(ReportDate,","," ")
			w "5 ReportDate: ",ReportDate,!
			;i +ReportDate=0 q
			s x=$zdateh(ReportDate,15,,,,,,,-1)	w "first x: ",x,!				; dd-mm-yyyy
			
			i x=-1 s x=$zdateh(ReportDate,6,,,,,,,-1) w "second x: ",x,!		; mm-dd-yyyy
			
			; check for year (sliding scale)
			/*
			i +x>1 {
					s nowdt=$h
					s nowyr=$zdateh("01/01/"_$p($zdate($h,4,,4),"/",3),4,,4)
					i x<nowdt
			}
			*/
			; end check for year
			i +x>1 {w "year x:",x,! s ReportDate=x,obj.ReportDate=ReportDate d obj.%Save()}
		} else {w "skipped if",!}
		
		; BELOW DOES NOT WORK 08.03.22-DW
		; TYPE: CHECK MX.DiagnosticType
		;i obj.Type'="" d  g SkipTestType
		;. s x=obj.Type f iii=1:1 d  q:x1=""
		;.. s x1=$p(x,", ",iii) q:x1=""
		;.. s TestType(x1)=""
.
		s x=$zconvert(rec,"U")
		w "x BEFORE: ",x, ! 
		s x=$replace(x,"("," "),x=$replace(x,")"," "),x=$replace(x,":"," "),x=$replace(x,"-"," "),x=$replace(x,"*"," ")
		w "x AFTER: ",x,!
		;;; TAKE ONLY COMPLETE WORDS
		s (id,r1,r2)=""
		&sql(SELECT ID,ResultType,Name INTO :id,:r1,:r2 FROM DiagnosticType WHERE :x[UPPER(Name))
		; check if space before 
		i id'="" d
		. w "id: ",id,!
		. w "r1: ",r1,!
		. w "r2: ",r2,!
		. s r2=$zconvert(r2,"U")
		. s err=0
		. s x1=$p(x,r2,1)
		. w "x1: ",x1,!
		. i $l(x1)>0,($e(x1,$l(x1),$l(x1))'=" ") s err=1
		. ; check if space after
		. s x1=$p(x,r2,2)
		. w "x1 after p: ",x1
		. i $l(x1)>0,($e(x1,1,1)'=" ") s err=1
		. i err=0,id'="" s TestType(r1)=""
		
		; TYPE: CHECK DiagnosticTest->Type->Name
		s (id,r1,r2)=""
		&sql(SELECT ID,Type->ResultType,Type->Name,SIName INTO :id,:r1,:r2,:r3 FROM DiagnosticTest WHERE :x[UPPER(DiagnosticTest.Name))
		; check if space before 
		i id'="" d
		. w "2. id: ",id,!
		. w r1,"  ",r2,"  ",r3,!
		. s TestType(r1)=""
	}
	;q //added for testing
SkipTestType
	s test1=""
	;i '$d(TestType) d ^MAI ; Medication AI 
.
	; if not BLOOD TEST, set to auto-reviewed
	;i '$d(TestType("Blood Test")),'$d(TestType("Medication")) d
	s dt=$zdatetime($h,3)
	
	//CHECK IF TYPE IS ALREADY ASSIGNED - JC 18-05-2023
	s GHRecID="",fExt=""
	&sql(SELECT Type,GHRecID,fExt INTO :PreType,:GHRecID,:fExt FROM MX.Record WHERE ID=:rid)
	
	
	i $o(TestType(""))="" d  s obj="" q
	. &sql(UPDATE Record SET ReviewedDate=:dt,ReviewedBy=1,Type='Other' WHERE ID=:rid)
.
	i $d(TestType) s x="" f ii=1:1 d  q:x=""
	. w "x TestType: ",x,!
	. s x=$o(TestType(x)) q:x=""
	. s test1=test1_$s(test1'="":", ",1:"")_x
	. w "test1: ",test1,!
	
	;i test1="" s test1="Other" 
	;i obj.Type="" s obj.Type=test1 d obj.%Save()
	s obj.Type=test1 d obj.%Save()
	s obj=""
	s r1="" &sql(SELECT ID INTO :r1 FROM ResultBloodTest WHERE Record->ID=:rid)
	
	// fExt
	s ^JC3=PreType
	i GHRecID'="",PreType="Radiology",fExt'="html" &sql(UPDATE Record SET Type=:PreType,ReviewedDate=:dt,ReviewedBy=1 WHERE ID=:rid)
	i GHRecID'="",PreType="Urinalisys" &sql(UPDATE Record SET Type=:PreType,ReviewedDate=:dt,ReviewedBy=1 WHERE ID=:rid)
	q
	
	w "THIS SHOULD NOT BE PRINTED",!
	
	q:ReportDate'=""
	s obj=##class(MX.Record).%OpenId(rid)
	f i=1:1:obj.OCR.Count() {
		s rec=obj.OCR.GetAt(i)
		s rec=$zconvert(rec,"U")
		; DATE
		i "*DATE*"[("*"_rec_"*") {
			s ReportDate=$p(rec,":",2)
			i ReportDate="" s ReportDate=obj.OCR.GetAt(i+1) i ReportDate[":" s ReportDate=$p(ReportDate,":",2)
			i ReportDate="" s ReportDate=obj.OCR.GetAt(i+2) i ReportDate[":" s ReportDate=$p(ReportDate,":",2)
			i $e(ReportDate,1,1)=" " s ReportDate=$e(ReportDate,2,999)	
			s ReportDate=$replace(ReportDate,","," ")
			i +ReportDate=0 q
			s x=$zdateh(ReportDate,15,,,,,,,-1)					; dd-mm-yyyy
			i x=-1 s x=$zdateh(ReportDate,6,,,,,,,-1)		; mm-dd-yyyy
			q:+x<1 
			s ReportDate=x
			w "report Date2: ", ReportDate,!
			s obj.ReportDate=ReportDate d obj.%Save()
		}
	}
	q

boboBioTemp^MAC^^66750,30428.4462247^0
getTime 
	s startdt = "31/03/2023"
	s s =  "01/"_$p(startdt,"/",2,*)
	s m = $p(startdt,"/",2)
	s y = $p(startdt,"/",*)
	if (m < 13){
		s m = m +1
		s e =  "01/"_m_"/"_y
	} else {
		s y = y +1
		s e =  "01/"_m_"/"_y
	}	
	w !,s
	w !,e
	s sh = $zdh(s,4)
	s eh = $zdh(e,4) - 1
	s noToAdd = eh - (sh-1)
	w !,noToAdd
	q
.
.
.
.
getJson
	s obj = ^OK
	w obj
	s iter = Obj."FormData".%GetIterator()
	while iter.%GetNext(.key, .value, .type ) {
		w !,key,"  ", value
	}
	q
	/*
	<script langauge="cache" method="cSaveRBTJson" arguments="rid, jsonStr:%String">
	;s userId = %session.Data("UserID")
	;s Obj = {}.%FromJSON(jsonStr)
	
	s iter = Obj."FormData".%GetIterator()
	
	while iter.%GetNext(.key, .value, .type ) {
	
		s testDate = value."testDate"
		s testName = value."testName"
		s testValue = value."testValue"
		s testUnit = value."testUnit"
		s testHiRange = value."testHiRange"
		s testLoRange = value."testLoRange"
		
		if ($L(testDate)>0){
			s formattedDate = $replace(testDate, "-","/")
			s testDateInternal = $zdate($zdateh(formattedDate,15,,,,,,,0),4) //dd/mm/yyyy
			if (testDateInternal = "31/12/1840"){
				s ^FormData(userId, rid, key, "testDate") = ""
			} else {s ^FormData(userId, rid, key, "testDate") = testDateInternal}
		} else { s ^FormData(userId, rid, key, "testDate") = ""}
		s ^FormData(userId, rid, key, "testName") = testName
		s ^FormData(userId, rid, key, "testValue") = testValue
		s ^FormData(userId, rid, key, "testUnit") = testUnit
		s ^FormData(userId, rid, key, "testHiRange") = testHiRange
		s ^FormData(userId, rid, key, "testLoRange") = testLoRange
	}
</script> 
	*/
	
testjson
	s objJson = "{""FormData"":[{""testName"":""w"",""testDate"":""a""},{""testName"":""w"",""testDate"":""n""}]}"
	s Obj = {}.%FromJSON(objJson)
	zw Obj
	
	s iter = Obj."FormData".%GetIterator()
	
	while iter.%GetNext(.key, .value, .type ) {
		w !,key, "   ", value
	}
	q
TEST
	s tRS2=##class(%ResultSet).%New("%Library.File:FileSet")
	s tStatus=tRS2.Execute("C:\TestFolder\S3\jx1\documents")
Step6ProcessImage	    
	if tRS2.Next(){
		;zw tRS2
		w !, tRS2.Get("Name")
		g Step6ProcessImage
	}
	q
.
jxBiolytica
.
	d INIT1^WSP999	; background task, so no %session or usernames
	#import MX
	;k buckets d GetBuckets	; get a list of Biolytica AWS buckets to process and set to array buckets
	q:'$d(buckets)
	s bk=""
.
SetGlobals
	
	s ^JX("JONDAX","BIOLYTICA","stageBucket") = "s3://jondaffr2/biolytica-staging/"
	s ^JX("JONDAX","BIOLYTICA","inProgressBucket") = "s3://jondaffr2/biolytica-inprogress/"
	s ^JX("JONDAX","BIOLYTICA","failureBucket") = "s3://jondaffr2/biolytica-failure/"
	
	s ^JX("JONDAX","JONDA","ocrBucketName") = "jondaffr2"
	
	s ^JX("JONDAX","devDir") = "C:\TestFolder\S3\devEnv\"
	s ^JX("JONDAX","devDir","s3ScanTempDir") = "C:\TestFolder\S3\Logs\"
	s ^JX("JONDAX","devDir","textractDir") = "C:\TestFolder\S3\Logs\Textract\"
	s ^JX("JONDAX","devDir","errors") = "C:\TestFolder\S3\Errors"
	
	s ^JX("JONDAX","CODES","CliError") = "111"
	
Step2
	
	s stageBucket = ^JX("JONDAX","BIOLYTICA","stageBucket")
	s inProgressBucket = ^JX("JONDAX","BIOLYTICA","inProgressBucket")
	s failureBucket = ^JX("JONDAX","BIOLYTICA","failureBucket")
	s devDir = ^JX("JONDAX","devDir")
.
	try{
		; check the biolytical/staging bucket for files
		s stdoutDir = ^JX("JONDAX","devDir","s3ScanTempDir")_"log.txt"
		s stderrDir = ^JX("JONDAX","devDir","s3ScanTempDir")_"err.txt" 
		
		s status = $ZF(-100, "/SHELL", "aws", "s3", "rm", stageBucket) ; remove ghost files in s3 bucket
		
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_""""  ;add "/LOGCMD" inside for command expression inspection
		s status = $ZF(-100, cmdflag, "aws","s3","ls", stageBucket )
		if (status '= 0) {
			; throw error
			s errData = $$ReadFile(stderrDir)	
			Throw ##class(%Exception.General).%New("CLI ERROR"_stageBucket, ^JX("JONDAX","CODES","CliError") , "Step2^aws s3 ls", errData)
		}
		
		s fileName = $$ExtractFileNameFromBucketLog(stdoutDir)		
		i ($L(fileName) '> 0) {
			; no files left in bucket 
			
		}
		
		g Step3PdfCheck
	
Step2InProgress	
		; copy file to dev env
		s fileId = $p($h,",",1)_$p($h,",",2)
		s status = $ZF(-100, cmdflag, "aws", "s3", "cp", stageBucket_fileName, devDir_fileId_"-"_fileName)
		if (status '= 0){
			; throw error
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLI ERROR",^JX("JONDAX","CODES","CliError") ,"Step2^aws s3 cp",errData)
		}
		
		; log the download to table
		
		; move file from staging to in-progress 
		s status = $ZF(-100, cmdflag, "aws", "s3", "mv", stageBucket_fileName, inProgressBucket_fileName)
		if (status '= 0) {
			; throw error
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLI ERROR",^JX("JONDAX","CODES","CliError") ,"Step2^aws s3 mv",errData)
		}
		
		;g Step3Tesseract
		
	} catch(err){
		w !, "ERROR in step2",!
		; error handler
	}
	g Step2
	q
	
	
Step3PdfCheck
	
	try {
		; file usability check		
		s fileExt = $p(fileName,".",*)
		s fileExt = $zconvert(fileExt, "U")
		i (fileExt '= "PDF") {
			
			; log and report to the db table
			w !,"NOT PDF",!
			
			; move file from staging to failure
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv", stageBucket_fileName, failureBucket_fileName)
			if (status '= 0){
				; throw error
				s errData = $$ReadFile(stderrDir)
				Throw ##class(%Exception.General).%New("CLI ERROR",^JX("JONDAX","CODES","CliError") ,"Step3^aws s3 mv",errData)
			}
			
			g Step2
		}
		g Step2InProgress
		
Step3Tesseract
		
		; do the tesseract here
		
				
		
	} catch(error){
		w !,"ERROR in step3",!
		; error handler
	}
	
	q
	
	
	
Step5
	
	; process each file in devDir 
	; gonna spawn another process in another routine
	
.
	
	
ExtractFileNameFromBucketLog(logPath)
	
	s str = $$ReadFile(logPath)
	s topLine = $p(str, $c(13,10), 1)
	s fileName = $p(topLine, " ", 8, *)
	q fileName
	
	
ReadFile(fileFullPath)
	
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = logPath
	try {
		s str = fs.Read($$$MaxLocalLength)
	}catch(err){
		w !,"ERROR in ReadFile",!
	}
	q str
	
.

boboBioTemp2^MAC^^66650,79817.2236604^0
jxBiolytica
.
	d INIT1^WSP999	; background task, so no %session or usernames
	#import MX
	;k buckets d GetBuckets	; get a list of Biolytica AWS buckets to process and set to array buckets
	q:'$d(buckets)
	s bk=""
	
	;;;;; might need to check table for pooling, skipped here for testing
	
	
Step5
	
	; get available image
	
	s stdoutDir = ^JX("JONDAX","devDir","s3ScanTempDir")_"log.txt"
	s stderrDir = ^JX("JONDAX","devDir","s3ScanTempDir")_"err.txt" 
.
	try{ 
		s devDir = ^JX("JONDAX","devDir")
.
		s tRS=##class(%ResultSet).%New("%Library.File:FileSet")
	    s tStatus=tRS.Execute(devDir)
.
Step5ProcessFile	    
	    if tRS.Next(){
			s fileFullPath = tRS.Get("Name")
			
			w !,"Processing:",$c(9),fileFullPath
			
			s fileId = $p($p(fileFullPath, "-",*), ".",1)
	
			g Step5PDF2PNG
			
		} else {
			hang 10
			g Step5
		}
	   	
	} catch(err){
		w !,"ERROR in Step5",!
		; error handler
	}
	
	   	
	   	
    q
    
Step5PDF2PNG
.
	try{
			
		s tempImagesDir = "C:\TestFolder\S3\TempImages\"_fileId_"\"
		d ##class(%File).CreateDirectory(tempImagesDir)
.
		w !,"PDF To PNG to:",$c(9),tempImagesDir
		
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_""""  ;add "/LOGCMD" inside for command expression inspection
		s status = $ZF(-100, cmdflag, "win2pdfd","pdf2png",fileFullPath, tempImagesDir_fileId_".png", "0" )
		if (status '= 0) {
			; throw error	
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLI ERROR",^JX("JONDAX","CODES","CliError") ,"Step5^pdf2png",errData)
		}
		
		g Step6
		
	} catch(err){
		w !,"ERROR in PDF2PNG",!
		; error handler
	}
	q
	
	
Step6
	
	try{
		
		s tRS2=##class(%ResultSet).%New("%Library.File:FileSet")
	    s tStatus=tRS2.Execute(tempImagesDir)
	    
Step6ProcessImage	    
	    if tRS2.Next(){
			s imageFileFullPath = tRS2.Get("Name")
			
			w !,"Processing Image:",$c(9),imageFileFullPath
			
			g ProcessImage
	    } else {
	    	g Step5ProcessFile
	    }
		
	} catch(err){
		w !,"ERROR in Step6", !
		; error handler
	}
	
.
ProcessImage
.
	try{
		s scale = 100
		s maxFileSize = 9999999
		s fileSize =  ##class(%File).GetFileSize(imageFileFullPath)
		i (fileSize > maxFileSize){
			s scale=$p(100-(fileSize/99999999*100),".",1)-1	
		}
		
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_""""  ;add "/LOGCMD" inside for command expression inspection
		s status = $ZF(-100, cmdflag, "convert",imageFileFullPath,"-scale",scale_"%", "-deskew","40%", imageFileFullPath)
		if (status '= 0) {
			; throw error	
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLI ERROR",^JX("JONDAX","CODES","CliError") ,"ProcessImage convert -scale",errData)
		}
		
		s fileSize =  ##class(%File).GetFileSize(imageFileFullPath)
		i (fileSize > maxFileSize){
			g ProcessImage	
		} else{
			g UploadToTextract
		}
		
		
	} catch(err){
		w !,"ERROR in ProcessImage", !
		; error handler
	}
	
UploadToTextract
	
	try{
		
		w !,"Uploading Image..."
		
		s textractBucket = "s3://jondaffr2/jondax-ocr/"
		
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_""""  ;add "/LOGCMD" inside for command expression inspection
		s status = $ZF(-100, cmdflag, "aws", "s3", "cp", imageFileFullPath, textractBucket)
		if (status '= 0) {
			; throw error	
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLI ERROR",^JX("JONDAX","CODES","CliError") ,"upload to textract",errData)
		}
		
		g SDTD
		
	}catch(err){
		w !,"ERROR in UploadToTextract"
		; error handler
	}
	
.
SDTD
	; aws textract start-document-text-detection --document-location "{\"S3Object\":{\"Bucket\":\"jondaffr2\",\"Name\":\"jondax-ocr/TestBlood.png\"}}"
	
	try{
		
		s bucket = ^JX("JONDAX","JONDA","ocrBucketName")
		s imageName = $p(imageFileFullPath,"\",*)
.
		w !,"SDTD on image:",$c(9),imageName
.
		s docLocation = """{\""S3Object\"":{\""Bucket\"":\"""_bucket_"\"",\""Name\"":\""jondax-ocr/"_imageName_"\""}}"""
.
		d ##class(%File).CreateDirectory(^JX("JONDAX","devDir","textractDir")_fileId_"\")
		d ##class(%File).CreateDirectory(^JX("JONDAX","devDir","textractDir")_fileId_"\jobIds\")
		d ##class(%File).CreateDirectory(^JX("JONDAX","devDir","textractDir")_fileId_"\err\")
		d ##class(%File).CreateDirectory(^JX("JONDAX","devDir","textractDir")_fileId_"\results\")
		
		s sdtdStdoutDir = ^JX("JONDAX","devDir","textractDir")_fileId_"\jobIds\"_$p(imageName,".",1,*-1)_"-jobId.txt"
		s sdtdStderrDir = ^JX("JONDAX","devDir","textractDir")_fileId_"\err\"_"err.txt" 
				
		s cmdflag = "/NOQUOTE/SHELL/STDOUT="""_sdtdStdoutDir_""""_"/STDERR+="""_sdtdStderrDir_""""  ;add "/LOGCMD" inside for command expression inspection
		s status = $ZF(-100, cmdflag, "aws","textract","start-document-text-detection","--document-location", docLocation)
		if (status '= 0) {
			; throw error
			s errData = $$ReadFile(sdtdStderrDir)
			Throw ##class(%Exception.General).%New("CLI ERROR",^JX("JONDAX","CODES","CliError") ,"SDTDt",errData)	
		}
		
		; g Step6ProcessImage ; NOT LOOPING ANYMORE
		d boboBioTemp3
		
	}catch(err){
		w !,"ERROR in SDTD",!
		; error handler
		w !,err.Name
		w !,err.Location
		w !,err.Data
	}
	
	
ReadFile(fileFullPath)
	
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = logPath
	try {
		s str = fs.Read($$$MaxLocalLength)
	}catch(err){
		w !,"ERROR in ReadFile",!
	}
	q str

boboBioTemp3^MAC^^66738,26696.8249967^0
//// START AI
.
TableToResultPipeline
	
	s document = "two_epic.pdf" // name of document in bucket
	s jobId = ##class(python.textractUtils).SDTDTables(document)
	
	s filename = "C:\data_transform\AI\epic" // path to file output without file extension
	s status = ##class(python.textractUtils).GenerateCSVFromJobID(jobId, filename)
	
	if (status = 0){
		w !,"ERROR"
		q
	} else {
		s csvName = "C:\data_transform\AI\epic.csv"
		d ##class(python.textractUtils).ProcessCSV(csvName)
	}
	q
	
.
.
TestPL
	s csvName = "C:\data_transform\AI\epic.csv"
	d ##class(python.textractUtils).ProcessCSV(csvName)
	q
.
.
.
.
.
.
.
.
.
.
////////////// END AI
.
.
jxBiolytica
.
	s devMode = 1
	d INIT1^WSP999	; background task, so no %session or usernames
	#import MX
	
	s userid = 9 ; 1 for Biolytica, 9 for JondaX
	k buckets k bucketIds d GetBuckets	; get a list of Biolytica AWS buckets to process and set to array buckets
	q:'$d(buckets)
	s bk=""
	
	;remove in production
	;s buckets("jondaffr2")=""
	
	s FileCounter=0
	
Step1
	s bk=$o(buckets(bk)) 
	i (devMode){w !,"current Bucket: ",bk,!}
.
	;remove in production
	;s CliProfileName = "default"			
		
	if (bk = ""){
		i (devMode){w "NO MORE BUCKET TO PROCESS. QUITTING",!}
		i FileCounter>0 d SendReviewMail^AutoMail
		q
	}
	
	
	s systemDir = "c:\intersystems\cache\jondax\"
	s companyDir = systemDir_CompanyName_"\"
	s devDir = systemDir_CompanyName_"\"_bk_"\"
	s stdDir = systemDir_CompanyName_"\"_bk_"\stdOutputs\"
	s docDir = systemDir_CompanyName_"\"_bk_"\documents\"
	s outputsDir = systemDir_CompanyName_"\"_bk_"\outputs\"
	s resultsDir = systemDir_CompanyName_"\"_bk_"\results\"
	
	d CreateDir(companyDir)
	d CreateDir(devDir)
	d CreateDir(stdDir)
	d CreateDir(docDir)
	d CreateDir(outputsDir)
	d CreateDir(resultsDir)
	
	s stagingBucket = "s3://"_bk_"/Staging/"
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"
	
	s textractBucketName = "jondaffr"
	s textractBucket = "s3://"_textractBucketName_"/"	
	
Step2
	; download each file from [STAGING] bucket into c:\intersystems\cache\jondax\biolytica\bucket
	; if no more files, go to Step1
	; set buckets(bk,filename)=""
	; log the download for dashboard reporting
.
	try{
		; check the biolytical/staging bucket for files
	
		s stdoutDir = stdDir_"log.txt"
		s stderrDir = stdDir_"err.txt" 
	
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_"""" 
		s status = $ZF(-100, cmdflag, "aws","s3","ls", stagingBucket, "--profile",  CliProfileName)
		i (status = 0) { ; remove ghost files in s3 bucket
			
			s str = $$ReadFile(stdoutDir)
			s secLine = $p(str, $c(13,10), 2)
			if (secLine '= ""){
				w "Removing ghost files",!
				s status = $ZF(-100, "/SHELL", "aws", "s3", "rm", stagingBucket, "--profile", CliProfileName)}
		} 
		
Step2GetDocuments
		
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_"""" 
		s status = $ZF(-100, cmdflag, "aws","s3","ls", stagingBucket , "--profile", CliProfileName)
.
		s fileName = ""
		s fileName = $$ExtractFileNameFromBucketLog(stdoutDir)	
		
		i (fileName = ""){ ;empty bucket returns as error
			i (devMode){w !,"EMPTY BUCKET"}	
			
			; recreating staging folder regardless of it exists or not
			s status = $ZF(-100, cmdflag, "aws","s3api","put-object", "--bucket" , bk, "--key", "Staging/", "--profile", CliProfileName)
			
			g Step5
		}
.
		if (devMode){w !,"current file name from bucket: ", fileName}
		
		s tempFile = $$ATTNAME^WSP999()
		
		g Step3PdfCheck
.
Step2InProgress	
		; copy file to dev env
		
		s fileExt = $p(fileName,".",*)
		s status = $ZF(-100, cmdflag, "aws", "s3", "cp", stagingBucket_fileName, docDir_tempFile_"."_fileExt, "--profile", CliProfileName)
		
		if (status '= 0){
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLIError", "JX2006","Step2InProgress^jxBiolytica",errData)
		}
		
		; obtain file binary
		s binaryFs = ##class(%Stream.FileBinary).%New()
		s binaryFs.Filename = docDir_tempFile_"."_fileExt
		s binaryFs2 = ##class(%Stream.FileBinary).%New()
		WHILE 'binaryFs.AtEnd{
			s fileBinaryStream = binaryFs.Read()
			d binaryFs2.Write(fileBinaryStream)
		}
		d binaryFs2.%Save()
		s binaryName = binaryFs2.Filename
		; log the download to table
		s dt = $zdatetime($h,3)
		
		&sql(INSERT INTO MX.Record (OrgFile,Status, fExt,Profile,TempFile, CreatedDate, BucketName, BinaryData, BinaryName) VALUES (:fileName, 'In-Process', :fileExt, :userid, :tempFile, :dt, :bk, :binaryFs2, :binaryName))
		
		; move file from staging to in-progress 
		s status = $ZF(-100, cmdflag, "aws", "s3", "mv", stagingBucket_fileName, inProcessBucket, "--profile", CliProfileName)
		if (status '= 0) {
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLIError", "JX2006","Step2InProgress^jxBiolytica",errData)
		}
		if (devMode){w !,"moved file to in-process"}
	} catch(err){
		d ErrorHandler(err)
	}
.
	g Step2GetDocuments
	q
	
Step3PdfCheck
	try {
		; file usability check		
		s fileExt = $p(fileName,".",*)
		s fileExtUpper = $zconvert(fileExt, "U")
		
		i ((fileExtUpper'="PDF")&(fileExtUpper'="XLSX")&(fileExtUpper'="PNG")&(fileExtUpper'="JPG")&(fileExtUpper'="HEIC")&(fileExtUpper'="AVIF")&(fileExtUpper'="WEBP")&(fileExtUpper'="HL7") & (fileExtUpper'="XML") & (fileExtUpper'="JSON")) {
						
			i (devMode){w !,"Not supported file. Moving to Failure"}
			
			; log and report to the db table
			s dt = $zdatetime($h,3)
			&sql(INSERT INTO MX.Record (OrgFile,Status, fExt,Profile,TempFile, CreatedDate, ProcessedDate) VALUES (:fileName, 'Failure', :fileExt, :userId, :tempFile, :dt, :dt))			
			&sql(SELECT ID INTO :rid FROM MX.Record WHERE OrgFile=:fileName AND TempFile=:tempFile)
			
			s errCode = "JX1002"
			s errData = fileName_" in "_bk_"file type is not supported by the system."
			s errName = "UnsupportedFileType"
			s errLocation = "Step3PdfCheck^jxBiolytica"
			&sql(INSERT INTO MX.Error (Code, Data, Name, Location, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :dt, :rid, :bk))
			
			; move file from staging to failure
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv", stagingBucket_fileName, failureBucket, "--profile", CliProfileName)
			i (status '= 0){
				s errData = $$ReadFile(stderrDir)
				Throw ##class(%Exception.General).%New("CLIError","JX2006" ,"Step3PdfCheck^jxBiolytica",errData)
			}
			g Step2GetDocuments
		}
	} catch(err){
		d ErrorHandler(err)
	}
	g Step2InProgress
	q
	
Step5
	; get each file in c:\intersystems\cache\jondax\biolytica\bucket
	; split pdf into individual png page
	; if no more files, go END
	
	try{ 
		s rid=""
		&sql(SELECT TOP 1 ID,TempFile,fExt, OrgFile INTO :rid,:tempFile, :fExt, :fileName FROM Record WHERE IsNull(ProcessedDate,'')='' AND OrgFile<>'' AND Status='In-Process' AND BucketName=:bk ORDER BY CreatedDate)
		w !,"RID: ",rid
Step5ProcessFile
		if rid="" {
			i (devMode) {w !,"NO MORE FILE TO PROCESS.",!}
			
			d ^jxErrorReport 
			k buckets(bk)
			s bk="" 
			
			g Step1
		}
		
		s FileCounter=1
		
		s maxFileSize = 4999999 ;5MB
		s fileSize =  ##class(%File).GetFileSize(docDir_tempFile_"."_fExt)
		if (fileSize > maxFileSize){
			s errData = "The "_fileName_" in "_bk_" file size is above the limit of 5MB"
			Throw ##class(%Exception.General).%New("FileSizeExceeded","JX1003" ,"Step5ProcessFile^jxBiolytica",errData)
		}
		
		; insert resultbloodtest
		&sql(INSERT INTO ResultBloodTest (Record,Type) VALUES (:rid, 'Blood Test'))
		
		s ext=$zconvert(fExt,"U")
		if (ext = "PDF"){
			d ^jxAWSBGa
			
			&sql(SELECT OCR INTO :ocrstr FROM Record WHERE ID=:rid)
			if ($L(ocrstr) = 0){
				Throw ##class(%Exception.General).%New("OCRTimeout","JX2003" ,"Step5ProcessFile^jxBiolytica","OCR process took too long to complete for "_fileName_" in "_bk)
			}
			
			d ^jxShowResults
		}
		if (ext = "XLSX"){
			s filePath = docDir_tempFile_"."_fExt
			
			d ^jxAWSBGXLSX
		
		}
		if (ext="PNG")!(ext="JPG")!(ext="HEIC")!(ext="AVIF")!(ext="WEBP"){
			
			if (ext'="PNG"){ ; change format to png
				s cmd="mogrify -format png "_docDir_tempFile_"."_fExt
				s x=$zf(-1,cmd_" && exit")	
				d ##class(%File).Delete(docDir_tempFile_"."_fExt)
				s fExt = "png"
			}
			&sql(Update Record SET PageCount ='1' WHERE id=:rid)
			s OCRstr = $$jxOCRPNG^jxOCRPNG(docDir_tempFile_"."_fExt)
			i ($L(OCRstr)=0){Throw ##class(%Exception.General).%New("OCRTimeout","JX2003" ,"Step5ProcessFile^jxBiolytica","OCR process took too long to complete for "_fileName_" in "_bk)}
			d OCR2Table^jxOCRPNG(OCRstr, rid)
			
			d ^jxShowResults
		}
		if (ext="HL7"){
			s HL7StandardizedStr = $$StandardizeHL7^jxSDAToResults(docDir_tempFile_"."_fExt)
			s SDAStr = $$HL7ToSDA^jxSDAToResults(HL7StandardizedStr)
			s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
			d jxSDAToResults^jxSDAToResults(sda, rid, 1)
		}
		if (ext="JSON"){
			s SDAStr = $$FHIRJsonToSDA^jxSDAToResults(docDir_tempFile_"."_fExt)
			s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
			d jxSDAToResults^jxSDAToResults(sda, rid, 1)
		}
		if (ext= "XML"){
			s fContent = $$ReadFile(docDir_tempFile_"."_fExt)
			if (fContent["ClinicalDocument"){
				; CDA
				s SDAStr = $$CDAToSDA^jxSDAToResults(docDir_tempFile_"."_fExt)
				s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
				d jxSDAToResults^jxSDAToResults(sda, rid, 1)
			}
			elseif (fContent["Bundle"){
				; FHIR
				s SDAStr = $$FHIRXmlToSDA^jxSDAToResults(docDir_tempFile_"."_fExt)
				s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
				d jxSDAToResults^jxSDAToResults(sda, rid, 1)
			}
			else {
				s errData = "The "_fileName_" in "_bk_" cannot be processed due to bad content: Neither CDA or FHIR file"
				Throw ##class(%Exception.General).%New("BadFileContent","JX1007" ,"Step5ProcessFile^jxBiolytica",errData)
			}
		}
		
		s processedDate = $zdatetime($h,3)
		&sql(UPDATE MX.Record SET ProcessedDate=:processedDate WHERE ID = :rid)
		
		d ##class(%File).Delete(docDir_tempFile_"."_fExt)
		
		i (devMode){ w !,"RID: ",rid, "  ","RBT: ",rbt, "  ProcessedDate: ", processedDate}
		
		;s status = $$jxResult2HL7^jxResult2HL7(rid)
		;w !
		;zw status
	} catch(err){
		d ErrorHandler(err)
	}
	g Step5	; get next file
	
	
GetBuckets
	; NOTE: WE NEED TO CREATE A TABLE TO STORE BUCKET NAMES AND DETAILS
	; get list of Biolytica root buckets
	&sql(SELECT Setting, CompanyName, Setting->CliProfileName INTO :setting, :CompanyName, :CliProfileName FROM "User" WHERE ID=:userid)
	i (devMode) {w !, "Setting ID: ",setting, !,"CompanyName: ",CompanyName,!}
	&sql(DECLARE cBucket CURSOR FOR
		SELECT Buckets_Name
		INTO :r2
		FROM Setting_Buckets
		WHERE Setting=:setting
	)
	&sql(OPEN cBucket)
	&sql(FETCH cBucket)
	WHILE SQLCODE=0{
		s buckets(r2)=""
		&sql(FETCH cBucket)
	}
	&sql(CLOSE cBucket)
	q
END
	;cleanup and quit
	
	return
	
CreateDir(dirFullPath)
	try{
		if (##class(%File).DirectoryExists(dirFullPath) = 0){
			d ##class(%File).CreateDirectory(dirFullPath)
		}
	} catch(err){
		d ErrorHandler(err)
	}
	q
.
	
ExtractFileNameFromBucketLog(logPath)
	s str = $$ReadFile(logPath)
	s topLine = $p(str, $c(13,10), 1)
	s fileName = $E(topLine, 32,*)
	q fileName
	
ReadFile(fileFullPath)
	
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = fileFullPath
	try {
		s str = fs.Read($$$MaxLocalLength)
	}catch(err){
		d ErrorHandler(err)
	}
	q str
.
ExtractJobId(fullFilePath)
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = fullFilePath
	s str = fs.Read($$$MaxLocalLength)
	i (str=""){
		q ""
	}
	s jobIdObj = ##class(%DynamicAbstractObject).%FromJSON(str)
	s jobId = jobIdObj."JobId"
	q jobId
	
	
ErrorHandler(err)
		
	s dt = $zdatetime($h, 3)
	
	i (devMode){
		w !,"------ ERROR MESSAGE ------"
		w !,"Name: ",err.Name
		w !,"Code: ",err.Code
		w !,"Location: ",err.Location
		w !,"Data: ",err.Data
		w !,"------ END ERROR MESSAGE ------"
	}
.
	i err.Name="" {s errName=""} else {s errName=err.Name}
	i err.Location="" {s errLocation=""} else {s errLocation = err.Location}
	i err.Code ="" {s errCode=""} else {s errCode = err.Code}
	i err.Data ="" {s errData=""} else {s errData = err.Data}
	i err.iStack="" {s erriStack=""} else {s erriStack = err.iStack}
	i ($d(tempFile) && $L(tempFile)>0){
		if (($d(rid)) && (rid="")){s bucketName = "" s recordName = "" } else {s bucketName = bk s recordName=fileName}
		&sql(INSERT INTO MX.Error (Code, Data, Name, Location, Stack, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :erriStack, :dt, :rid, :bucketName))
		
		&sql(UPDATE MX.Record SET Status='Failure', ProcessedDate=:dt WHERE ID = :rid)
		s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",inProcessBucket_fileName, failureBucket, "--profile", CliProfileName)
		
		d CleanFiles(rid)
		d StripTables(rid)
		
	} else {
		&sql(INSERT INTO MX.Error (Code, Data, Location, Name, Stack, CreatedDate) VALUES (:errCode, :errData, :errLocation, :errName, :erriStack, :dt))
	}
	
	
	hang 1
	q
	
CleanFiles(rid)
	&sql(SELECT TempFile,fExt, OrgFile,Profile->CompanyName,BucketName INTO :tempFile,:ext,:fileName, :comName, :bkName FROM Record WHERE ID=:rid)
	
	s resDir = "C:\InterSystems\Cache\JondaX\"_comName_"\"_bkName_"\results\"
	s dcDir = "C:\InterSystems\Cache\JondaX\"_comName_"\"_bkName_"\documents\"
	
	s file=resultsDir_tempFile_"."_ext
	d ##class(%File).Delete(file)
	s file=docDir_tempFile_"."_ext
	d ##class(%File).Delete(file)
	s file=docDir_tempFile_"\"
	d ##class(%File).RemoveDirectoryTree(file)
	s tRS=##class(%ResultSet).%New("%Library.File:FileSet")
	s tStatus=tRS.Execute(resDir)    
	while (tRS.Next()){
		d ##class(%File).Delete(tRS.Get("Name"))
	}
	
	q	
	
	
StripTables(rid)
	#import MX
.
	&sql(SELECT ID INTO :rbt From ResultBloodTest WHERE Record->ID=:rid)
	&sql(SELECT BinaryName INTO :binaryName FROM Record WHERE ID=:rid)
	&sql(DELETE FROM ResultBloodTest_Tests WHERE ResultBloodTest = :rbt)
	&sql(DELETE FROM ResultBloodTest WHERE Record->ID=:rid)
	&sql(UPDATE Record SET BinaryData=NULL, OrgFile=NULL, OCR=NULL WHERE ID = :rid)
	d ##class(%File).Delete(binaryName)
	q
.
.
CLEANALLTABLES ; only for testing, DO NOT USE THIS
	
	&sql(DELETE FROM Record)
	&sql(DELETE FROM ResultBloodTest)
	&sql(DELETE FROM ResultBloodTest_Tests)
	&sql(DELETE FROM Error)
.
	s CliProfileName = "default"
	s bk = "jondaffr2"
	s CompanyName = "JondaX"
	s systemDir = "c:\intersystems\cache\jondax\"
	s cmdflag = "/SHELL"
	s devDir = systemDir_CompanyName_"\"_bk_"\"
	
	s stagingBucket = "s3://"_bk_"/Staging/"
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"
.
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", inProcessBucket, "--profile", CliProfileName)
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", failureBucket, "--profile", CliProfileName)
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", completedBucket, "--profile", CliProfileName)
.
	d ##class(%File).RemoveDirectoryTree(devDir)
.
	q

boboBioUtils^MAC^^66780,45058.4922776^0
CountResultBloodTest(Date = "", MarkerName = "")
	#import MX
	&sql(SELECT COUNT(ID) INTO :count FROM Resultbloodtest_tests WHERE $zdatetime(Resultbloodtest->Record->ProcessedDate)[:Date )
	if (Date = ""){
		s date = $zdatetime($h,3)
	} else {
		s date = $zdatetime(Date,3)
	}
	
	If ((MarkerName= "") & (Date = "")){
		&sql(SELECT COUNT(ID) INTO :count FROM Resultbloodtest_tests WHERE Resultbloodtest->Record->ProcessedDate <=:date )
		w !,"Total count: ",count
		q count
	} elseif ((MarkerName '= "") &(Date '="")) {
		s date = $p(date," ",1)
		&sql(SELECT COUNT(ID) INTO :count FROM Resultbloodtest_tests WHERE Resultbloodtest->Record->ProcessedDate[:date AND Tests_TestName = :MarkerName )
		w !,"Total count for ", MarkerName, " in ",date," is: ", count
		q count
	} elseif ((MarkerName = "") &(Date '="")){
		s date = $p(date," ",1)
		&sql(SELECT COUNT(ID) INTO :count FROM Resultbloodtest_tests WHERE Resultbloodtest->Record->ProcessedDate[:date)
		w !,"Total count in ",date , " is: ", count
		q count
	} elseif((MarkerName'="")&(Date = "")){
		&sql(SELECT COUNT(ID) INTO :count FROM Resultbloodtest_tests WHERE Tests_TestName = :MarkerName )
		w !,"Total count for ",MarkerName , " is: ", count
		q count
	}
	q
.
CalculateOCRUnitsSpent(userId, subId)
	#import MX
	
	&sql(DECLARE COcr CURSOR FOR
		SELECT PageCount
		INTO :pageCount
		FROM Record
		WHERE Profile->ID=:userId AND SubscriptionID=:subId
	)
	&sql(OPEN COcr)
	&sql(FETCH COcr)
.
	i SQLCODE '= 0{
		q ""
	}
	s OCRUnitsSpent = ""
	WHILE SQLCODE=0{
		s OCRUnitsSpent = +pageCount + OcrUnitsSpent 
		&sql(FETCH COcr)
	}
	&sql(CLOSE COcr)
	q OCRUnitsSpent
	
CalculateTransformationUnitsSpent(userId, subId)
	#import MX
	&sql(SELECT COUNT(*) INTO :transformationUnitsSpent FROM MX.Record WHERE Profile->ID=:userId AND SubscriptionID=:subId AND Status='Completed')
	q transformationUnitsSpent
	
.
.
GetCurrentSubscription(userID)
	s user = ##class(MX.User).%OpenId(userID)
	s subCount = user.Subscriptions.Count()
	w !,"Sub count: ", subCount,!
	
	s oldestSubID= ""
	FOR i=1:1:subCount{
		s sub = user.Subscriptions.GetAt(i)
		if ((sub.EndDate < $zdatetime($h,3)) ! sub.Status="FULL") {continue}
		else { 
			if (oldestSubID=""){s oldestSubID=i}
			if (sub.StartDate < user.Subscriptions.GetAt(oldestSubID).StartDate){
				s oldestSubID = i
			}
		}
	}
	w !,"Sub ID: ",oldestSubID
	q oldestSubID
.
ViewUserSubscriptions
	s user = ##class(MX.User).%OpenId(9)
	s subCount = user.Subscriptions.Count()
	zw subCount
	w !, "Subs: "
	FOR i=1:1:subCount{
		w user.Subscriptions.GetAt(i).Subscription.Name,!
	}
	q
.
AddSubscriptionToUser
	s user = ##class(MX.User).%OpenId(9)
	s sub = ##class(MX.Subscription).%New()
	s subSetup = ##class(MX.SubscriptionSetup).%OpenId(1)
	
	s sub.Subscription = subSetup
	s sub.Status = "RUNNING"
	s sub.EndDate = $p($h,",",1) +7 
	s sub.StartDate = $p($h,",",1) -15 
.
	d user.Subscriptions.SetAt(sub,4)
	s status = user.%Save()
	zw status
	q
.
CreateSubscriptionSetup
	&sql(INSERT INTO MX.SubscriptionSetup (Code, Name, OCRUnit, TransformationUnit) VALUES ('001','testTrial', 5, 5))
	zw SQLCODE
	q
.
AddSubscriptionToRecord
	s user = ##class(MX.User).%OpenId(9)
	s sub = user.Subscriptions.GetAt(4)
	
	&sql(INSERT INTO MX.Record (SubscriptionID, Profile) VALUES ('4', '9'))
	zw SQLCODE
	q
.
.
TestOCR
	#import MX
	&sql(SELECT OCR INTO :ocr FROM Record WHERE ID=579)
	w SQLCODE,"  ",$L(ocr),!
	zw ocr
	q
.
ReportError(rid)
	#import MX
	&sql(update MX.error set reporteddate=NULL where Record= :rid)
	s status= $$GenerateErrorReportByRid^jxErrorReport(rid)
	zw status
	i (status '= 0){
		&sql(SELECT Profile->Setting->CliProfileName, BucketName, OrgFile INTO :CliProfileName, :bk, :fileName FROM MX.Record WHERE ID=:rid)
		
		s sts = ##class(python.s3Utils).uploadFile(CliProfileName, status, bk, "Completed")
		d ##class(%File).Delete(status)	
		
	}
	q
	
ChangeBucket
	#import MX
	FOR i=567:1:575 {
		s rid = i
		&sql(UPDATE MX.Record SET BucketName='nexus-aime', Profile=1 where id=:rid AND BucketName='jondaffr2')
	}
	q
.
ChangeError
	#import MX
	FOR i=567:1:575 {
		s rid = i
		;&sql(UPDATE MX.Error SET BucketName='nexus-aime' where Record=:rid)
		&sql(select Data into :data from Error where record=:rid)
		if ($L(data)>0){
			s dataFixed = $REPLACE(data, "jondaffr2", "nexus-aime")
			&sql(UPDATE MX.Error SET data=:dataFixed WHERE Record=:rid)
		}
	}
	q
.
GenerateErrorReportByRid(rid)
	#import MX
	&sql(SELECT BucketName, OrgFile, Profile->CompanyName INTO :bk, :fileName, :companyName FROM Record WHERE id=:rid)
	
	&sql(DECLARE C2 CURSOR FOR
		SELECT Code, CreatedDate, Record->OrgFile, Name, Data, ID
		INTO :d1,:d2,:d3,:d4,:d5,:d6
		FROM Error
		WHERE BucketName=:bk AND Record=:rid AND IsNull(ReportedDate,'')=''
	)
	&sql(OPEN C2)
	&sql(FETCH C2)
.
	i SQLCODE '= 0{
		q 0
	}
	s cr = $c(13,10)
	s csvStr = ""
	WHILE SQLCODE=0{
		&sql(SELECT Facing Into :facing FROM ErrorCode WHERE Code=:d1)
		if (facing = "Internal"){&sql(FETCH C2) continue}
		
		s csvStr = csvStr_d3_","_d1_","_d4_","_d5_","_d2_cr
		s dt = $zdatetime($h,3)
		&sql(UPDATE MX.Error SET ReportedDate=:dt WHERE ID=:d6)
		&sql(FETCH C2)
	}
	&sql(CLOSE C2)
	s csvStr="File_Name,Error_Code,Error,Data,Date"_cr_csvStr
	if (csvStr=""){q 0}
	s csvStream = ##class(%Stream.FileCharacter).%New()
	s dt = $zdatetime($h,3)
	s filedt = $TR($TR($zdatetime($h,2),":","-")," ","-")
	s csvFileName =  "ErrorReport for "_fileName_" in "_bk_"-"_filedt_".csv"
	s outputsDir = "c:\intersystems\cache\jondax\"_companyName_"\"_bk_"\outputs\"
	s csvStream.Filename = outputsDir_csvFileName
	s csvStream.TranslateTable="UTF8"
 	s csvStream.BOM=$C(239,187,191)
	s writeStatus = csvStream.Write(csvStr)
	d csvStream.%Save()
		
	q outputsDir_csvFileName
.
TestDate
	s ss = "2013-01-17T08:49:00+11:00"
	s ess = $p(ss,"T",1)
	;s date = $TRANSLATE(ess, "-","")
	w !,ess
	s indate = $zdateh(ess,6)
	w !, indate
	&sql(UPDATE MX.ResultBloodTest SET ReportDate=:indate WHERE ID=334)
	q
.
DeleteRecords
	FOR i=560:1:566 {
		s rid = i
		&sql(DELETE FROM MX.Record where id=:rid AND BucketName='jondaffr2')
	}
	q
TestTests
	#import MX
	s dt = $zdate($h,3)
	s objx=##class(ResultBloodTest).%OpenId(353)
	s objx1=##class(ResultBloodTestValue).%New()
	zw dt
	w !
	s zdate= $zdateh(dt,6)	
	zw zdate
	w !
	s hl7date= $ZDT(zdate,8)				
	zw hl7date
	s objx1.TestDate = zdate
	d objx.Tests.SetAt(objx1,10)
	s ss = objx.%Save()
	zw ss
	q
.
CreateEndUser
	&sql(INSERT INTO "User" (CompanyLogo, CompanyName, Email, Password, Setting, UserID) VALUES ('jondax.png', 'JondaX','testjondax@jonda.health','Beta1.0:)', '2','testjondax@jonda.health'))
	q
	
UpdateUserSetting
	&sql(UPDATE MX."User" SET Setting=6 WHERE ID='1')
	zw SQLCODE
	q	
	
CreateSetting
	s dt= $zdatetime($h,3)
	&sql(INSERT INTO MX.Setting ( CliProfileName, ServerName, CreatedDate) VALUES ('Biolytica','Biolytica', :dt))
	zw SQLCODE
	q
	
CreateBuckets
	s objx=##class(MX.Setting).%OpenId(6)
	if (objx.Buckets '= ""){
		s count = objx.Buckets.Count()
	}else {s count = 0 }
	s objx1=##class(MX.Buckets).%New()
.
	s objx1.Name= "jonda-reports-stage-euc1-v1"
	s objx1.Folder = "1d8e6921-0592-486e-aefb-384177529dda"
	s objx1.Folder = "224053d4-a964-4633-8ac4-bcc00ec0a743"
	s objx1.Folder = "256a24f6-fb3d-4a26-b592-964efc1bc342"
	s objx1.Folder = "26160fe8-884d-4bdc-a5df-1cdda88633e8"
	s objx1.Folder = "2f4400ab-ec2d-483f-bf70-7f0774faf952"
	s objx1.Folder = "7e2d40fa-0b71-4bd9-a80c-e6f651afd6cf"
	s objx1.Folder = "dd4c73f2-ae77-4613-a1bd-dad6750c059e"
	/*
	*/
	s objx1.CliProfileName = "biolytica3"
	s dt = $zdatetime($h,3)
	s objx1.CreatedDate = dt
	d objx.Buckets.SetAt(objx1,+count+1)
	
	d objx.%Save()
	q
	
cloneTemplate
	&sql(DECLARE C1 CURSOR FOR
		SELECT BucketName, DiagnosticTest, Name, Setting, UnitName
		INTO :bucketName, :diagnosticTest, :name, :setting, :unitName
		FROM Template
		WHERE BucketName='nexus-aime'
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	if SQLCODE '= 0{
		q 0
	}
	s bk = "jondaffr2"
	s st = 2
	WHILE SQLCODE=0{ 
		&sql(INSERT INTO Template (BucketName,DiagnosticTest, Name, Setting, UnitName) VALUES (:bk, :diagnosticTest, :name, :st, :unitName))
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	q
.
testMove
	s sts = ##class(python.s3Utils).moveFile("default","jondaffr2","jondaffr2", "Blood Lipids_Panel Fobes 09-Oct-2019.xlsx", "Failure", "In-Process")
	zw sts
	q
.
testUpload
	s sts = ##class(python.s3Utils).uploadFile("default", "C:\InterSystems\Cache\JondaX\Biolytica\jondaffr2\documents\6668131665.png", "jondaffr2", "Staging")
	zw sts
	q
.
jxBiolytica	; routine to process Biolytica files
	/*
		JondaX - Biolytica Workflow
.
		1. Scan [Biolytica] -> [STAGING] for files
		2. Download files to JondaX, Move [Biolytica] -> [STAGING] to [Biolytica] -> [IN-PROGRESS] 
		3. Determine if file contains ANY TEXT (Tesseract)
		4. IF NO TEXT, move from [Biolytica] -> [IN-PROGRESS] to [Biolytica] -> [FAILURE] and generate EXCEPTION/ERROR MESSAGE
		   --- LOOP TO NEXT FILE IF ABOVE IS TRUE ---
		5. IF CONTAINS TEXT, split pdf to png-1...png-x
		6. Deskew & colour correct pngs
		7. Upload pngs to [Jonda AWSFFR] -> [jondaffr] bucket 
		8. Execute Textract on png, get result
		9. Process result, generate [HL7] using the Biolytica Template
		10. Upload HL7 to [Biolytica] -> [COMPLETE]
		11. Move from [Biolytica] -> [IN-PROGRESS] to [Biolytica] -> [COMPLETE] and generate COMPLETION REPORT
		 --- LOOP ---
	*/
	d INIT1^WSP999	; background task, so no %session or usernames
	#import MX
	k buckets d GetBuckets	; get a list of Biolytica AWS buckets to process and set to array buckets
	q:'$d(buckets)
	s bk=""
Step1
	s bk=$o(buckets(bk)) q:bk=""
	s devDir = "c:\intersystems\cache\jondax\"_bk_"\"
	
	s stdDir = "c:\intersystems\cache\jondax\"_bk_"\stdOutputs\"
	s docDir = "c:\intersystems\cache\jondax\"_bk_"\documents\"
	s textractDir = "c:\intersystems\cache\jondax\"_bk_"\textract\"
	
	d CreateDir(devDir)
	d CreateDir(stdDir)
	d CreateDir(docDir)
	d CreateDir(textractDir)
	; clear & create the directory
	
	s stagingBucket = "s3://"_bk_"/Staging/"
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"
	
	s textractBucketName = "jondaffr2"
	s textractBucket = "s3://"_textractBucketName_"/"
	
	
	
Step2
	; download each file from [STAGING] bucket into c:\intersystems\cache\jondax\biolytica\bucket
	; if no more files, go to Step1
	; set buckets(bk,filename)=""
	; log the download for dashboard reporting
.
	try{
		; check the biolytical/staging bucket for files
		s stdoutDir = stdDir_"log.txt"
		s stderrDir = stdDir_"err.txt" 
		
		s status = $ZF(-100, "/SHELL", "aws", "s3", "rm", stagingBucket) ; remove ghost files in s3 bucket
		
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_""""  ;add "/LOGCMD" inside for command expression inspection
		s status = $ZF(-100, cmdflag, "aws","s3","ls", stagingBucket )
		if (status '= 0) {
			; throw error
			s errData = $$ReadFile(stderrDir)	
			Throw ##class(%Exception.General).%New("CLI ERROR"_stagingBucket, 100 , "Step2^aws s3 ls", errData)
		}
		
		s fileName = $$ExtractFileNameFromBucketLog(stdoutDir)		
		i ($L(fileName) '> 0) {
			; no files left in bucket 
			g Step5
		}	
		d Step3PdfCheck
		g Step2
	
Step2InProgress	
		; copy file to dev env
		s fileId = $p($h,",",1)_$p($h,",",2)
		s status = $ZF(-100, cmdflag, "aws", "s3", "cp", stagingBucket_fileName, devDir_fileId_"-"_fileName)
		if (status '= 0){
			; throw error
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLI ERROR", 100,"Step2^aws s3 cp",errData)
		}
		
		; log the download to table
		
		; move file from staging to in-progress 
		s status = $ZF(-100, cmdflag, "aws", "s3", "mv", stagingBucket_fileName, inProcessBucket_fileName)
		if (status '= 0) {
			; throw error
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLI ERROR", 100,"Step2^aws s3 mv",errData)
		}
		
	} catch(err){
		;w !, "ERROR in step2",!
		; write error to some global 
		; error handler
	}
	g Step2
	q
	
Step3PdfCheck
	try {
		; file usability check		
		s fileExt = $p(fileName,".",*)
		s fileExt = $zconvert(fileExt, "U")
		i (fileExt '= "PDF") {
			
			; log and report to the db table
			w !,"NOT PDF",!
			
			; move file from staging to failure
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv", stagingBucket_fileName, failureBucket_fileName)
			if (status '= 0){
				; throw error
				s errData = $$ReadFile(stderrDir)
				Throw ##class(%Exception.General).%New("CLI ERROR",100 ,"Step3^aws s3 mv",errData)
			}
			q
		}
		d Step2InProgress
	} catch(error){
		w !,"ERROR in step3",!
		; error handler
	}
	q
	;Step3
	; check if file is a PDF. if not, move to [FAILURE], report and log. delete from c:\intersystems\cache\jondax\biolytica\bucket & loop back to Step2
	; call tesseract to check if file contains text. if not, move to [FAILURE], report and log. delete from c:\intersystems\cache\jondax\biolytica\bucket & loop back to Step2
	;g Step2
	
	; ---------------------------------------------------
	
Step5
	; get each file in c:\intersystems\cache\jondax\biolytica\bucket
	; split pdf into individual png page
	; if no more files, go END
.
	try{ 
		s tRS=##class(%ResultSet).%New("%Library.File:FileSet")
	    s tStatus=tRS.Execute(docDir)
.
Step5ProcessFile	    
	    if tRS.Next(){
			s fileFullPath = tRS.Get("Name")
			s fileId = $p($p(fileFullPath, "-",*), ".",1)
			d Step5PDF2PNG
		} else {
			g Step1	; get next bucket
		}
	} catch(err){
		; error handler
	}
	g Step6
    
Step5PDF2PNG
.
	try{
		d ##class(%File).CreateDirectory(textractDir_fileId_"\")	
		s tempImagesDir = textractDir_fileId_"\images\"
		d ##class(%File).CreateDirectory(tempImagesDir)	
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_""""  ;add "/LOGCMD" inside for command expression inspection
		s status = $ZF(-100, cmdflag, "win2pdfd","pdf2png",fileFullPath, tempImagesDir_fileId_".png", "0" )
		if (status '= 0) {
			; throw error	
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLI ERROR",100 ,"Step5^pdf2png",errData)
		}	
		q
		
	} catch(err){
		; error handler
	}
	q
	
Step6
	; do deskew &  other pre-process
	
	try{	
		s tRS2=##class(%ResultSet).%New("%Library.File:FileSet")
	    s tStatus=tRS2.Execute(tempImagesDir)
Step6ProcessImage	    
	    if tRS2.Next(){
			s imageFileFullPath = tRS2.Get("Name")
			d ProcessImage
	    } else {
	    	g Step5ProcessFile
	    }
	} catch(err){
		w !,"ERROR in Step6", !
		; error handler
	}
	g Step5ProcessFile
.
ProcessImage
.
	try{
		s scale = 100
		s maxFileSize = 9999999
		s fileSize =  ##class(%File).GetFileSize(imageFileFullPath)
		i (fileSize > maxFileSize){
			s scale=$p(100-(fileSize/99999999*100),".",1)-1	
		}
		
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_""""  ;add "/LOGCMD" inside for command expression inspection
		s status = $ZF(-100, cmdflag, "convert",imageFileFullPath,"-scale",scale_"%", "-deskew","40%", imageFileFullPath)
		if (status '= 0) {
			; throw error	
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLI ERROR",100 ,"ProcessImage convert -scale",errData)
		}
		
		s fileSize =  ##class(%File).GetFileSize(imageFileFullPath)
		i (fileSize > maxFileSize){
			g ProcessImage	
		} else{
			d UploadToTextract
		}
	} catch(err){
		w !,"ERROR in ProcessImage", !
		; error handler
	}
	q
	
UploadToTextract
	
	try{
		w !,"Uploading Image..."
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_""""  ;add "/LOGCMD" inside for command expression inspection
		s status = $ZF(-100, cmdflag, "aws", "s3", "cp", imageFileFullPath, textractBucket)
		if (status '= 0) {
			; throw error	
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLI ERROR",^JX("JONDAX","CODES","CliError") ,"upload to textract",errData)
		}
		d SDTD
	}catch(err){
		w !,"ERROR in UploadToTextract"
		; error handler
	}
	q
.
SDTD
	; aws textract start-document-text-detection --document-location "{\"S3Object\":{\"Bucket\":\"jondaffr2\",\"Name\":\"jondax-ocr/TestBlood.png\"}}"
	
	try{
		
		s bucket = textractBucketName
		s imageName = $p(imageFileFullPath,"\",*)
		w !,"SDTD on image:",$c(9),imageName
		s docLocation = """{\""S3Object\"":{\""Bucket\"":\"""_bucket_"\"",\""Name\"":\""jondax-ocr/"_imageName_"\""}}"""
.
		d ##class(%File).CreateDirectory(textractDir_fileId_"\jobIds\")
		d ##class(%File).CreateDirectory(textractDir_fileId_"\errs\")
		d ##class(%File).CreateDirectory(textractDir_fileId_"\results\")
		
		s sdtdStdoutDir = textractDir_fileId_"\jobIds\"_$p(imageName,".",1,*-1)_"-jobId.txt"
		s sdtdStderrDir =textractDir_fileId_"\errs\"_"sdtderr.txt" 
				
		s cmdflag = "/NOQUOTE/SHELL/STDOUT="""_sdtdStdoutDir_""""_"/STDERR+="""_sdtdStderrDir_""""  ;add "/LOGCMD" inside for command expression inspection
		s status = $ZF(-100, cmdflag, "aws","textract","start-document-text-detection","--document-location", docLocation)
		if (status '= 0) {
			; throw error
			s errData = $$ReadFile(sdtdStderrDir)
			Throw ##class(%Exception.General).%New("CLI ERROR",100 ,"SDTDt",errData)	
		}
		
		; g Step6ProcessImage ; NOT LOOPING ANYMORE
		
		
	}catch(err){
		w !,"ERROR in SDTD",!
		; error handler
	}
	
.
	;Step7
	; upload to awsffr
	
	;Step8
	; run AWS Textract for the file and get result
	
Step8GetResults
.
	try{
		
		s jobIdFolderDir = textractDir_fileId_"\jobIds\"
		
		s tRS2=##class(%ResultSet).%New("%Library.File:FileSet")
	    s tStatus=tRS2.Execute(jobIdFolderDir)	    
	    
Step8ProcessJobId	   
	    if tRS2.Next(){
			s jobIdFileFullPath = tRS2.Get("Name")
			s fileName = $p($p($p(jobIdFileFullPath,"\",*),".",1,*-1),"-",1,*-1) ; without -jobId at the back
				
			s jobId = $$ExtractJobId(jobIdFileFullPath)
			w !,jobId
			i (jobId =""){
				; throw error
				w !,"NO JOB ID",!
				Throw ##class(%Exception.General).%New("NO JOB ID",100 ,"Step8ProcessJobId","NO JOB ID IN FILE: "_jobIdFileFullPath)
			}
			d GDTD
	    } else{
	    	; END or DO something
	    	w "END"
	    	hang 10
	    	Break
	    }
	}catch(err){
		w !,"ERROR in Step8GetResults",!
		; error handler
	}
	q
	
GDTD
	try{
		w !,"GDTD on image:",$c(9),fileName
		s gdtdStdoutDir = textractDir_fileId_"\results\"_fileName_"-result.txt"
		s gdtdStderrDir = textractDir_fileId_"\err\"_"gdtderr.txt" 
		s cmdflag = "/NOQUOTE/SHELL/STDOUT="""_gdtdStdoutDir_""""_"/STDERR+="""_gdtdStderrDir_""""  ;add "/LOGCMD" inside for command expression inspection
		s status = $ZF(-100, cmdflag, "aws","textract","get-document-text-detection","--job-id", """"_jobId_"""")
		if (status '= 0) {
			; throw error	
			s errData = $$ReadFile(gdtdStderrDir)
			Throw ##class(%Exception.General).%New("CLI ERROR",100 ,"GDTD",errData)	
		}
		
		; check SUCCEEDED status here
		
		g Step8ProcessJobId
		
	}catch(err){
		w !,"ERROR in SDTD",!
		; error handler
	}
	
Step9 
	; get tests
	; standardize names
	; convert unit of measurements
	; generate HL7
	; generate report and log. delete from c:\intersystems\cache\jondax\biolytica\bucket
	; 
Step10
	; upload HL7 to [COMPLETE]
	; move file from [IN-PROGRESS] to [COMPLETE]
	g Step5
	
	; ---------------------------------------------------
	
GetBuckets
	; NOTE: WE NEED TO CREATE A TABLE TO STORE BUCKET NAMES AND DETAILS
	; get list of Biolytica root buckets
	&sql(SELECT Setting INTO :r1 FROM "User" WHERE ID=:userid)
	&sql(DECLARE cBucket CURSOR FOR
		SELECT Buckets_Name 
		INTO :r2
		FROM Setting_Buckets
		WHERE Setting=:r1
	)
	&sql(OPEN cBucket)
	&sql(FETCH cBucket)
	WHILE SQLCODE=0{
		s buckets(r2)=""
		&sql(FETCH cBucket)
	}
	&sql(CLOSE cBucket)
	
	q
END
	;cleanup and quit
	q
	
CreateDir(dirFullPath)
	try{
		if (##class(%File).DirectoryExists(dirFullPath) = 0){
			d ##class(%File).CreateDirectory(dirFullPath)
		}
	} catch(err){
		; error handler
	}
	q
	
ExtractFileNameFromBucketLog(logPath)
	
	s str = $$ReadFile(logPath)
	s topLine = $p(str, $c(13,10), 1)
	s fileName = $p(topLine, " ", 8, *)
	q fileName
	
ReadFile(fileFullPath)
	
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = logPath
	try {
		s str = fs.Read($$$MaxLocalLength)
	}catch(err){
		w !,"ERROR in ReadFile",!
	}
	q str
.
ExtractJobId(fullFilePath)
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = fullFilePath
	s str = fs.Read($$$MaxLocalLength)
	i (str=""){
		q ""
	}
	s jobIdObj = ##class(%DynamicAbstractObject).%FromJSON(str)
	s jobId = jobIdObj."JobId"
	q jobId
	
	
	
TestThrow
.
	Throw ##class(%Exception.General).%New("TEST THROW",100 ,"GDTD",errData)	
	
ErrorHandler
	s errdir = "C:\TestFolder\S3\Errors\"
	s errmsg = "ERR NAME:"_$c(9)_err.Name_$c(13,10)_"ERR CODE:"_$c(9)_err.Code_$c(13,10)_"ERR LOCATION:"_$c(9)_err.Location_$c(13,10)_"ERR DATA:"_$c(9)_err.Data_$c(13,10)_"STACK:"_$c(9)_err.iStack
	s errtxt = ##class(%Stream.FileCharacter).%New()
	d errtxt.Write(errmsg)	
	s GUID = ##class(%SYSTEM.Util).CreateGUID()
	s errfs = ##class(%Stream.FileCharacter).%New()
	s errfs.Filename=errdir_"ERROR-"_GUID_$zstrip($zdatetime($horolog, 3), "*pw")_".txt"
	s errfsStatus = errfs.CopyFromAndSave(errtxt)

boboShowResults^MAC^^66688,26319.5324545^0
TestCli
	s bk = "jondaffr2"
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"	
	s CliProfileName = "default"
	
	s stdDir = "C:\InterSystems\Cache\JondaX\Biolytica\jondaffr2\stdOutputs\"
	s stdoutDir = stdDir_"log.txt"
	s stderrDir = stdDir_"err.txt" 
	
	s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_"""" 
	;s cmdflag = "/SHELL" 
	s status = 	$ZF(-100, cmdflag, "echo", "%username%")
	q
.
Transform
	s ^data("jxTransform","fileName")= "C:\data_transform\HL4.hl7"
	d StandardizeHL7
	d HL7ToSDA
	q
.
HL7ToSDA
.
	s hl7Stream = ##class(%Stream.GlobalCharacter).%New()
	d hl7Stream.Write(^data("jxTransform","hl7Standardized"))
	s hl7msg = ##class(EnsLib.HL7.Message).ImportFromLibraryStream(hl7Stream)	
	
	;s hl7msg = ##class(EnsLib.HL7.Message).ImportFromFile(^data("jxTransform","fileName"))
	s tMSH = hl7msg.FindSegment("MSH")	; setting DocType
	i (tMSH){
		s ^data("jxTransform", "MSH") = tMSH.OutputToString()
		s tType = tMSH.GetValueAt(9, ":_~\&")
		s tVersion = tMSH.GetValueAt(12, ":_~\&")
		i (tType && tVersion){
			s hl7msg.DocType = tVersion_":"_tType
		}
	} else {
		s ^data("jxTransform", "MSH") = ""
	}
	d ##class(HS.Gateway.HL7.HL7ToSDA3).GetSDA(hl7msg,.tSDA, 1 ,1)
	; tSDA is the SDA %Stream.GlobalCharacter
	s SDAStr = tSDA.Read()
	;kill ^data("jxTransform")
	s ^data("jxTransform", "SDAStr") = SDAStr
		
	q
						
CDAToSDA
.
	#include %msql
	
	s CDAStream = ##class(%Stream.FileCharacter).%New()
	s tSDA3Stream = ##class(%Stream.GlobalCharacter).%New()
	s CDAStream.Filename = ^data("jxTransform","fileName")
	Set tTransformer1 = ##class(HS.Util.XSLTTransformer).%New()
    Set TransformStatus = tTransformer1.Transform(CDAStream,"SDA3/CCDA-to-SDA.xsl",.tSDA3Stream)  
    
    s SDAStr = tSDA3Stream.Read()
	;kill ^data("jxTransform")
	s ^data("jxTransform", "MSH") = ""
	s ^data("jxTransform", "SDAStr") = SDAStr
	q
.
.
FHIRJsonToSDA
.
	#include %msql
	
	s file = ##class(%Stream.FileCharacter).%New()
	s file.Filename = ^data("jxTransform","fileName")
	s fhirJsonStr = file.Read($$$MaxLocalLength)
	Set fhirObj= {}.%FromJSON(fhirJsonStr)
	
	set sdaObj = ##class(HS.FHIR.DTL.Util.API.Transform.FHIRToSDA3).TransformObject(fhirObj,"R4")
	s sdaStream = ##class(%Stream.GlobalCharacter).%New()
	s sdaStatus = sdaObj.object.ToQuickXMLStream(.sdaStream)
	
	s SDAStr = sdaStream.Read()
	;kill ^data("jxTransform")
	s ^data("jxTransform", "MSH") = ""
	s ^data("jxTransform", "SDAStr") = SDAStr
	
	q
.
.
FHIRXmlTOSDA
.
	#include %msql
	
	s file = ##class(%Stream.FileCharacter).%New()
	s file.Filename = ^data("jxTransform","fileName")
	s fhirXmlStr = file.Read($$$MaxLocalLength)
	
	Set jsonStream = ##class(%Stream.GlobalCharacter).%New()
	Set schema = ##class(HS.FHIRServer.Schema).LoadSchema("R4")
  	Do ##class(HS.FHIRServer.Util.XMLToJSON).XMLToJSONStream(fhirXmlStr, .jsonStream, schema)  
  	Set fhirObj= {}.%FromJSON(jsonStream)
	
	set sdaObj = ##class(HS.FHIR.DTL.Util.API.Transform.FHIRToSDA3).TransformObject(fhirObj,"R4")
.
	s sdaStream = ##class(%Stream.GlobalCharacter).%New()
	s sdaStatus = sdaObj.object.ToQuickXMLStream(.sdaStream)
	
	s SDAStr = sdaStream.Read()
	;kill ^data("jxTransform")
	s ^data("jxTransform", "MSH") = ""
	s ^data("jxTransform", "SDAStr") = SDAStr
.
	q
.
.
SDAToHL7
	
	s tSDA = ##class(%Stream.GlobalCharacter).%New()
	d tSDA.Write(^data("jxTransform","SDAStr"))	
	
	s sda = ##class(HS.SDA3.Container).%New()
	d sda.InitializeXMLParse(tSDA)
	
	k hl7msg
	s hl7msg = ##class(EnsLib.HL7.Message).%New()
	d hl7msg.Clear()
	
	s dl = "^"
	
	s pSDA = 1
	WHILE(pSDA '= ""){
		d sda.GetNextSDA(.pType, .pSDA)
		if (pType ="Patient"){
			s hl7msg = $$ParsePIDandMSH^jxSDAToHL7(.pSDA, .hl7msg)
		} elseif(pType = "Encounter"){
			s hl7msg = $$ParsePV1^jxSDAToHL7(.pSDA, .hl7msg)
		} elseif (pType = "LabOrder"){
			s hl7msg = $$ParseORC^jxSDAToHL7(pSDA, hl7msg)
			s hl7msg = $$ParseOBR^jxSDAToHL7(pSDA, hl7msg)
			s hl7msg = $$ParseOBX^jxSDAToHL7(pSDA, hl7msg)
		}	
	}
.
	s downloadStr = hl7msg.OutputToString()
	s ^data("jxTransform","downloadStr")= downloadStr
	&js<downloadStr = `#(^data("jxTransform","downloadStr"))#`>
	
	q
.
.
SDAToCDA
.
	s tSDA = ##class(%Stream.GlobalCharacter).%New()
	d tSDA.Write(^data("jxTransform","SDAStr"))
	
	s tTransformer = ##class(HS.Util.XSLTTransformer).%New()
    s tSC = tTransformer.Transform(tSDA,"SDA3/SDA-to-CCDA-CCD.xsl",.tCDAStream)
	
	d tCDAStream.Rewind()
	s downloadStr = tCDAStream.Read()
	s ^data("jxTransform","downloadStr")= downloadStr
	&js<downloadStr = `#(^data("jxTransform","downloadStr"))#`>
	
	q
.
.
.
SDAToFHIRJson
.
	s tSDA = ##class(%Stream.GlobalCharacter).%New()
	d tSDA.Write(^data("jxTransform","SDAStr"))
	
	s fhirObj = ##class(HS.FHIR.DTL.Util.API.Transform.SDA3ToFHIR).TransformStream(tSDA,"HS.SDA3.Container","R4")
	s fhirJson = fhirObj.bundle.%ToJSON()
	
	s fsStream = ##class(%GlobalCharacterStream).%New()
	s streamStatus = fsStream.Write(fhirJson)
	
	d fsStream.Rewind()
	s downloadStr = fsStream.Read()
	s ^data("jxTransform","downloadStr")= downloadStr
	&js<downloadStr = `#(^data("jxTransform","downloadStr"))#`>
	
	q
.
SDAToFHIRXml
.
	s tSDA = ##class(%Stream.GlobalCharacter).%New()
	d tSDA.Write(^data("jxTransform","SDAStr"))
	
	s fhirObj = ##class(HS.FHIR.DTL.Util.API.Transform.SDA3ToFHIR).TransformStream(tSDA,"HS.SDA3.Container","R4")
	s xmlStream = ##class(%Stream.GlobalCharacter).%New()
	s schema = ##class(HS.FHIRServer.Schema).LoadSchema("R4")
  	d ##class(HS.FHIRServer.Util.JSONToXML).JSONToXML(fhirObj.bundle, .xmlStream, schema)   
	
	d xmlStream.Rewind()
	s downloadStr = xmlStream.Read()
	s ^data("jxTransform","downloadStr")= downloadStr
	&js<downloadStr = `#(^data("jxTransform","downloadStr"))#`>
	
	q
.
ExtractSDA
.
	s tSDA = ##class(%Stream.GlobalCharacter).%New()
	d tSDA.Write(^data("jxTransform","SDAStr"))
	
.
	; ADD HERE tSDA is %Global.CharacterStream from Session 	
	d tSDA.Rewind()
	s sda = ##class(HS.SDA3.Container).%New()
	d sda.InitializeXMLParse(.tSDA)
	
	
	s pType = ""
	WHILE (pType '= "LabOrder" ){
		d sda.GetNextSDA(.pType, .pSDA)
		if pType = "" {BREAK}
	}
.
	if (pType = "") {
		&js<alert("No results are found in the uploaded record!")>
		q	
	}
	
	if (pSDA.Result && pSDA.Result.ResultItems){
		s resultsList = pSDA.Result.ResultItems	
	} else {
		&js<alert("No list in results!")>
		q
	}
	
	if (resultsList){
		s ^data("jxTransform","Count") = resultsList.Count()
	} else {s ^data("jxTransform","Count") =0}
	;s ^data("jxTransform","Count") = resultsList.Count()
	;FOR index=1:1:resultsList.Count(){
	FOR index=1:1:^data("jxTransform","Count"){	
		s labResultItem = resultsList.GetAt(index)
		s testItemCode = labResultItem.TestItemCode
		
		s ^data("jxTransform",index,"ObservationTime")=labResultItem.ObservationTime
		s ^data("jxTransform",index,"ObservationValueType")=labResultItem.ObservationValueType
		s ^data("jxTransform",index,"ResultNormalRange")=labResultItem.ResultNormalRange
		s ^data("jxTransform",index,"ResultValue")=labResultItem.ResultValue
		s ^data("jxTransform",index,"ResultValueUnits")=labResultItem.ResultValueUnits
		s ^data("jxTransform",index,"OrgResultValueUnits")=labResultItem.ResultValueUnits
		s ^data("jxTransform",index,"TestItemStatus")=labResultItem.TestItemStatus
		s ^data("jxTransform",index,"OrgCode")=testItemCode.Code
		s ^data("jxTransform",index,"Code")=testItemCode.Code
		s ^data("jxTransform",index,"OrgDescription")=testItemCode.Description
		s ^data("jxTransform",index,"Description")=testItemCode.Description
		s ^data("jxTransform",index,"IsNumeric")=testItemCode.IsNumeric
		s ^data("jxTransform",index,"SDACodingStandard")=testItemCode.SDACodingStandard
		s ^data("jxTransform",index,"SIName")=""
	}
	
	q
	
.
ModifySDA
	
	s tSDA = ##class(%Stream.GlobalCharacter).%New()
	d tSDA.Write(^data("jxTransform","SDAStr"))
	
	; ADD HERE tSDA is %Global.CharacterStream from Session 	
	d tSDA.Rewind()
	s startIndex = tSDA.FindAt(1, "<Result>" ) - 1
	s endIndex = tSDA.FindAt(startIndex, "</Result>") +9
	
	s sda = ##class(HS.SDA3.Container).%New()
	d sda.InitializeXMLParse(.tSDA)
	
	
	s pType = ""
	WHILE (pType '= "LabOrder" ){
		d sda.GetNextSDA(.pType, .pSDA)
	}
	
.
	FOR index=1:1:^data("jxTransform","Count"){
		s pSDA.Result.ResultItems.GetAt(index).ObservationTime = ^data("jxTransform",index,"ObservationTime")
		s pSDA.Result.ResultItems.GetAt(index).ObservationValueType = ^data("jxTransform",index,"ObservationValueType")
		s pSDA.Result.ResultItems.GetAt(index).ResultNormalRange = ^data("jxTransform",index,"ResultNormalRange")
		s pSDA.Result.ResultItems.GetAt(index).ResultValue = ^data("jxTransform",index,"ResultValue")
		s pSDA.Result.ResultItems.GetAt(index).ResultValueUnits = ^data("jxTransform",index,"ResultValueUnits")
		s pSDA.Result.ResultItems.GetAt(index).TestItemStatus = ^data("jxTransform",index,"TestItemStatus")
		s pSDA.Result.ResultItems.GetAt(index).TestItemCode.Code = ^data("jxTransform",index,"Code")
		s pSDA.Result.ResultItems.GetAt(index).TestItemCode.Description = ^data("jxTransform",index,"Description")
		s pSDA.Result.ResultItems.GetAt(index).TestItemCode.IsNumeric = ^data("jxTransform",index,"IsNumeric")
		s pSDA.Result.ResultItems.GetAt(index).TestItemCode.SDACodingStandard = ^data("jxTransform",index,"SDACodingStandard")
	}
	
.
	s streamlet = pSDA.Result
	set pXML = ##class(%Stream.FileCharacter).%New()
	d streamlet.ToQuickXMLStream(.pXML)
	
	set newSDA = ##class(%Stream.FileCharacter).%New()
	
	d tSDA.Rewind()
	d newSDA.Write(tSDA.Read(startIndex))
	d pXML.Rewind()
	d newSDA.Write(pXML.Read())
	d tSDA.MoveTo(endIndex)
	d newSDA.Write(tSDA.Read(tSDA.Size))
	
	d newSDA.Rewind()
	s SDAStr = newSDA.Read()
	s ^data("jxTransform", "SDAStr") = SDAStr
	&js<fileName='#($p($p(^data("jxTransform","fileName"),"c:\InterSystems\Cache\JondaX\jxUpload\",2),".",1))#'>
	q
.
.
DownloadFile
	q
.
.
StandardizeHL7
	
	s hl7msg = ##class(EnsLib.HL7.Message).ImportFromFile(^data("jxTransform","fileName"))
	i ('hl7msg){
		;w !, "ERROR IMPORTING HL7 FILE: ",^data("jxTransform","fileName"),!
		&js<alert("WRONG FILE FORMAT! IMPORTED FILE: "+`#(^data("jxTransform","fileName"))#`)>
		q
	}
	
	; setting Encounter
	s tPV1 = hl7msg.FindSegment("PV1")
	if (tPV1){
		s tEncNum = tPV1.GetValueAt(19, ":_~\&")
		if ('tEncNum){
			s EncStatus = tPV1.SetValueAt("123456789", 19)
			;w !,"Added Encounter number 123456789 at PV1:19"
		} 
	} else{
		s tPV1 = ##class(EnsLib.Hl7.Segment).%New()
		s PV1Status = tPV1.SetValueAt("PV1", 0)
		s EncNumStatus = tPV1.SetValueAt("123456789",19)
		
		d hl7msg.FindSegment("PID", .PIDIndex)
		if (PIDIndex){
			s PV1Index = PIDIndex + 1
		} else {
			s PV1Index = 3
		}
		s setSegStatus = hl7msg.InsertSegmentAt(tPV1, PV1Index)
		if ('setSegStatus){
			w !, "Failed to insert PV1 segment",!
			q
		}
		;w !,"Added added PV1 segment with encounter number 123456789 after PID"
		KILL tPV1, PIDIndex, PV1Index
	}
	
	
	; finding OBRs
	s OBRIndex = 0
	s listOBR = $LISTBUILD()
	WHILE (OBRIndex '= ""){
		d hl7msg.FindSegment("OBR", .OBRIndex)
		if (OBRIndex){
			s listOBR = listOBR_$LISTBUILD(OBRIndex)	
		}
	}
	
	; finding ORCs
	s ORCIndex = 0
	s listORC = $LISTBUILD()
	WHILE(ORCIndex '=""){
		d hl7msg.FindSegment("ORC", .ORCIndex)
		if (ORCIndex){
			s listORC = listORC_$LISTBUILD(ORCIndex)	
		}
	}
	
	i ($LISTLENGTH(listOBR)<$LISTLENGTH(listORC)){
		;w !,"Bad Format: numbers of OBR is less than numbers of ORC in the file."
		q 
	}
	;zw listOBR
	s ORCIndexCarry = 0
	s numAddedSegments = 0
	FOR index=2:1:($LISTLENGTH(listOBR)){
		s curOBRIndex = $LISTGET(listOBR,index)
		s orcindex = index - ORCIndexCarry
		s curORCIndex = $LISTGET(listORC,orcindex)
.
		; setting ORC
		if ((curORCIndex '= "") && (curORCIndex < curOBRIndex)){
		
			s segIndex = curORCIndex - 1
			s tORC = hl7msg.FindSegment("ORC",.segIndex)
			i ((tORC '="") && (ORCIndex < curOBRIndex)){
				s tOBS = tORC.GetValueAt(29, ":_~\&")
				if ('tOBS){
					s obsStatus = tORC.SetValueAt("LAB",29)
				}
			}
			;w !,"Added value for ORC at index: "_segIndex
		} else {
	
			s tORC = ##class(EnsLib.HL7.Segment).%New()
			s orcStatus = tORC.SetValueAt("ORC",0)
			s obsStatus = tORC.SetValueAt("LAB",29)
			s curOBRIndex = curOBRIndex + numAddedSegments
			s setSegStatus = hl7msg.InsertSegmentAt(tORC, curOBRIndex)
			if ('setSegStatus){
				;w !, "Failed to insert ORC segment",!
				q
			}
			;w !,"Added ORC at index: "_curOBRIndex
			s ORCIndexCarry = ORCIndexCarry + 1
			s numAddedSegments = numAddedSegments + 1
		} 
		
		
	}
		
.
	KILL tORC, OBRIndex, ORCIndex, ORCIndexCarry
	
	s hl7Str = hl7msg.OutputToString()
	s ^data("jxTransform","hl7Standardized")=hl7Str
	
	q
.

cAI2^MAC^^67152,19533.2075855^0
cAI2	; correct for any errors in OCR		;called from cShowResults.mac
	n x,i,d1,d2,d3,d4,d5,d6,d7,d8,d9,d10
	n res,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10
	n SkipUnits
	s arr2test=arr1
	s arr2test=$replace(arr2test,(Q_Q),Q)
	;w "Original: ",$replace(arr2test,Q,"*"),!
	f i=1:1:10 s @("d"_i)=$p(arr2test,Q,i)
	s res=0
	; remove * FROM piece 1
	s n=$o(^DW(""),-1)+1,^DW(n)=arr1
	s $p(arr2test,Q,1)=$replace($p(arr2test,Q,1),"*","")
	; TEST: NAME & SIName (currently split for easy reading but can be combined into  a single query)
	s x=d1_"%"
	&sql(SELECT COUNT(ID),SIUnit INTO :r1,:r2 FROM DiagnosticTest WHERE (NAME LIKE :x) OR (SINAME LIKE :x))
	s res=res+r1
	s x=$p(d1," ",1)_"%"
	&sql(SELECT COUNT(ID),SIUnit INTO :r1,:r2 FROM DiagnosticTest WHERE (NAME LIKE :x) OR (SINAME LIKE :x))
	s res=res+r1
	s x="%"_$p(d1," ",1)
	&sql(SELECT COUNT(ID),SIUnit INTO :r1,:r2 FROM DiagnosticTest WHERE (NAME LIKE :x) OR (SINAME LIKE :x))
	s res=res+r1
	s x="%"_d1
	&sql(SELECT COUNT(ID),SIUnit INTO :r1,:r2 FROM DiagnosticTest WHERE (NAME LIKE :x) OR (SINAME LIKE :x))
	s res=res+r1
	&sql(SELECT COUNT(ID),SIUnit INTO :r1,:r2 FROM DiagnosticTest WHERE NAME %STARTSWITH(:d1) OR (SINAME %STARTSWITH(:d1) OR (:d1 %STARTSWITH(NAME)) OR (:d1 %STARTSWITH(SIName))))
	;;w r1,"-"
	s res=res+r1
	i res=0 s AIerr=1 q 
	;w !,"TESTING IN PROGRESS...",!
	; TEST: SIUnit
	/*
	millilitre per min per 1.73
	CONTAIN Ratio
	min
	S/CO
	Index
	Score
	Seconds
	*/
	; TEST: Result
	s x=0
	f i=1:1:7 s x=x+@("d"_i)
	;i x=0 s AIerr=1 q
	;w x,!
	
	; strip piece 2 if blank
	i $p(arr2test,Q,2)=""!($p(arr2test,Q,2)=$c(1)) f i=2:1:10 s $p(arr2test,Q,i)=$p(arr2test,Q,i+1)
	b
	; strip piece 3 if blank AND piece 4 is a SIUnit
	i $p(arr2test,Q,3)="" d
	. s x=$p(arr2test,Q,4)
	. s r1="" &sql(SELECT ID INTO :r1 FROM SIUnit WHERE Name=:x OR SIName=:x)
	. i r1'="" f i=3:1:$l(arr2test,Q) s $p(arr2test,Q,i)=$p(arr2test,Q,i+1) 
	; check if $p(4) contains "-"
	i $p(arr2test,Q,4)["-" s $p(arr2test,Q,5)=$p($p(arr2test,Q,4),"-",2),$p(arr2test,Q,4)=$p($p(arr2test,Q,4),"-",1)
	
	; if SIUnit is null, check if SIUnit exists any where else
	i $p(arr2test,Q,3)="" f i=4:1:$l(arr2test,Q) d
	. s r1=""
	. s x=$p(arr2test,Q,i)
	. &sql(SELECT ID INTO :r1 FROM SiUnit WHERE Name=:x or SIName=:x)
	. i r1'="" s $p(arr2test,Q,3)=$p(arr2test,Q,i) q
	
	; check if $p(4) is LIKE 10^9 AND $p(5)=/L
	i $p(arr2test,Q,4)'="",$p(arr2test,Q,5)["/" d
	. s $p(arr2test,Q,4)=$p(arr2test,Q,4)_$p(arr2test,Q,5)
	. f i=5:1:$l(arr2test,Q) s $p(arr2test,Q,i)=$p(arr2test,Q,i+1)
	
	;need to cater for multi SIUnits eg:
	; piece 2 & piece 3 are the same as piece 4 & piece 5 but different SIUnits
	;  Cholesterol|6.23|mmol/L|240.54|mg/dL|< 5.20|< 200.77|Comment/s:|NCEP Recommendations:|Desirable:|<5.20 mmol/L <200.00 mg/dL
	s arr1=arr2test
	q
	
	

cAWSBGPDF^MAC^^67159,31888.7729872^0
cAWSBGPDF		; not used ; Same Function with jxAWSBGPDF
	d ##class(%File).CreateDirectory("c:\intersystems\cache\jonda\upload\"_d2) 
	; split PDF into per-page png
	s cmd="win2pdfd pdf2png ""c:\intersystems\cache\jonda\upload\"_d2_"."_ext_""" ""c:\intersystems\cache\jonda\upload\"_d2_"\"_d2_".png"" 0"
	s x=$zf(-1,cmd_" && exit")
	
	; get files in directory & deskew
	s removedir="c:\intersystems\cache\jonda\upload\"_d2
	d GetFiles
	d ##class(%File).RemoveDirectoryTree(removedir)
	q
	; ---------------------
.
GetFiles
	;s gbl="^"_d2		;_"("_i_")"
	;k @(gbl)
	k filelist
	set dir = "c:\intersystems\cache\jonda\upload\"_d2_"\"
	set dir = ##class(%File).NormalizeDirectory(dir)
	set file=$ZSEARCH(dir_"*")
	while file'="" {
		s x=$p(file,"\",$l(file,"\")) 
		i $zconvert($p(x,".",$l(x,".")),"l")="png" d
		. s filelist(file)=""
		. ; added 10/06 - DW
		. s scale=100
		. s fsize=##class(%File).GetFileSize(file)
		. i fsize>9999999 d		; 10Mb limit for AWS
		.. s scale=$p(100-(fsize/99999999*100),".",1)-1
		. s cmd="convert "_file_" -scale "_scale_"% -deskew 40% "_file
		.
		. s cmd="convert """_file_""" -deskew 40% """_file_""""
		. s x=$zf(-1,cmd_" && exit")
		. ; Upload file to AWS S3 jonda bucket
		. w ?3,"UploadToS3: ",file,!
		. s x=$zf(-1,"aws s3 cp "_file_" s3://jondaocr/ && exit")
		. h 3
.
		set file=$ZSEARCH("")
	}
	k arr
	s ProcessCount=0
A	s file=$o(filelist("")) 
	s dt=$zdatetime($h,3)
	i file="" k filelist &sql(UPDATE Record SET ProcessedDate=:dt WHERE ID=:rid) q		
	s fileid=$p($h,",",1)_$p($h,",",2)
	s ProcessCount=ProcessCount+1
	;;; TODO: check what the ProcessCount (Page Limit) is 
	i ProcessCount>11 &sql(UPDATE Record SET ProcessedDate=:dt WHERE ID=:rid) q
	d SDTD
B	w ?3,"Getting JobID..." 
	i '##class(%File).Exists("c:\intersystems\cache\jonda\upload\"_d2_"\"_fileid_".txt") d
	. s ProcessCount=ProcessCount+1
	. i ProcessCount>11 &sql(UPDATE Record SET ProcessedDate=:dt WHERE ID=:rid) q
	. h 5 
	. g B
	; ---------------------
ReadJobID
	s ProcessCount=ProcessCount+1
	i ProcessCount>11 g EndReadResult
	w ?3,"Read JobID..."
	s fnam="c:\intersystems\cache\jonda\upload\"_d2_"\"_fileid_".txt"
	s $ztrap="EndReadJobID^cAWSBGPDF"
	o fnam u fnam
	k arr
	s i=0
ReadJobID1
	u fnam r x
	s i=i+1
	s arr(i)=x
	g ReadJobID1	
	; ---------------------
EndReadJobID
	s $ztrap=""
	c fnam
	i '$d(arr(2)) &sql(UPDATE Record SET Type='Other' WHERE ID=:rid) g EndReadResult2
	; cleanup
	d ##class(%File).Delete(fnam)
	w ?3,"End JobID...",!
	s jobid=$p(arr(2),"""",4)
EndReadJobID1
	d GDTD
.
ReadResult
	w ?3,"Read Result..."
	s fnam="c:\intersystems\cache\jonda\results\"_$p(file,"\",$l(file,"\"))_".txt"
	i '##class(%File).Exists(fnam) h 5 g EndReadJobID1
	o fnam u fnam
	s $ZERROR=""
	s $ztrap="EndReadResult^cAWSBGPDF"
	;s pcs="^"_d2_"("""")"
	s (text,top,left,blocktype,confidence,page)=""
	;s i=$o(@(pcs),-1)
ReadResult1
	u fnam r x
	i x["IN_PROGRESS" d  g EndReadJobID1
	. c fnam 
	. w "   ",fnam," IN PROGRESS...",! 
	. s $ztrap="" 
	. d ##class(%File).Delete(fnam)
	. h 10 	;i x="" c fnam s $ztrap="" h 1 g EndReadJobID1
	i x["""BlockType"": " s blocktype=$p(x,"""BlockType"": ",2)
	i x["""Confidence"": " s confidence=$p(x,"""Confidence"": ",2)
	i x["""Page"": " s page=$p(x,"""Page"": ",2)
	i x["""Text"": " s text=$p(x,"""Text"": ",2),text=$e(text,1,$l(text)-1)
	i x["""Left"": " s left=$p(x,"""Left"": ",2),left=$e(left,1,$l(left)-1)
	i x["""Top"": " s top=$p(x,"""Top"": ",2),top=$e(top,1,$l(top)-1)
	i x["""Page"": " d
	. i text'="" d
	.. ;i +confidence<59 s text="",left="",top="" q
	.. s text=$replace(text,"""","")
	.. s text=$replace(text,"(","")
	.. s text=$replace(text,")","")
	.. i text="" s text="",left="",top="" q
	.. s blocktype=$zconvert($replace(blocktype,"""",""),"l")
	.. i blocktype'="line," q
	.. ;s i=i+1
	.. ;s arr(i)=text
	.. ;s gbl="^"_d2_"("_i_")"
	.. s obj=##class(MX.Record).%OpenId(rid)
	.. d obj.OCR.Insert(text)
	.. d obj.%Save()
	.. s obj=""
	.. ;s @(gbl)=text
	.. ;s ^FF34A(i)=text
	.. ;s ^FF34(page,top,left)=text
	.. s (text,top,left,blocktype,confidence,page)=""	
	g ReadResult1
EndReadResult
	s $ztrap=""
	c fnam
EndReadResult1
	w !
	; DO ^DW3 PROCESSING
	;s dt=$zdatetime($h,3)
	;&sql(UPDATE Record SET ProcessedDate=:dt WHERE ID=:rid)
	;s ^UPLOAD(k1,d2)=$h
EndReadResult2
	; clean up
	s str="aws s3 rm s3://jondaocr/"_file
	;s x=$zf(-1,str_" && exit")
	d ##class(%File).Delete(file)
	i $o(filelist(file))="" k filelist d ^cAWSBGSave q
	k filelist(file)
	s file=""
	;s dt=$zdatetime($h,3)
	;&sql(UPDATE Record SET ProcessedDate=:dt WHERE ID=:rid)	;s ^UPLOAD(k1,d2)=$h
	;d ^cAWSBGSave
	g A
SDTD	; Start Document Text Detection
	w "   Start Document Text Detection: ",file,!
	s cmd="aws textract start-document-text-detection --document ""{\""S3Object\"":{\""Bucket\"":\""jondaocr\"",\""Name\"":\"""_$p(file,"\",$l(file,"\"))_"\""}}"" > c:\intersystems\cache\jonda\upload\"_d2_"\"_fileid_".txt"
	s x=$zf(-1,cmd_" && exit")
	q
GDTD	; Get Document Text Detection
	w "   Get Document Text Detection: ",!
	s cmd="aws textract get-document-text-detection --job-id """_jobid_""" > C:\InterSystems\Cache\Jonda\results\"_$p(file,"\",$l(file,"\"))_".txt"
	s x=$zf(-1,cmd_" && exit")
	q

cAWSBGSave^MAC^^67159,31885.5070875^0
cAWSBGSave		; not used ; Same Function with jxAWSBGSave	
	; ensure Record ID (rid) is set
	d ^cAWSOCR
	i ($d(TestType("Blood Test"))!($d(TestType("Medication")))),'$d(^Automail(rid)) s ^Automail(rid)=$h d ^AutoMail	
	; clean up files
	&sql(SELECT TempFile,fExt INTO :d2,:ext FROM Record WHERE ID=:rid)
	s file="c:\intersystems\cache\jonda\results\"_d2_"."_ext
	d ##class(%File).Delete(file)
	s file="c:\intersystems\cache\jonda\upload\"_d2_"."_ext
	d ##class(%File).Delete(file)
	s file="c:\intersystems\cache\jonda\upload\"_d2_".pdf"
	d ##class(%File).Delete(file)
	s file="c:\intersystems\cache\jonda\upload\"_d2_"\"
	d ##class(%File).RemoveDirectoryTree(file)
	
	q
	;d GetDateType
GetDateType	; Date and Type of Record
	s ReportDate=""
	k TestType
	set obj=##class(MX.Record).%OpenId(rid)
	for i=1:1:obj.OCR.Count() {
		s rec=obj.OCR.GetAt(i)
		s rec=$zconvert(rec,"U")
		; DATE
		;i "*DATE REQUESTED*DATE RECEIVED*COLLECTION DATE*REPORT DATE*DATE OF REPORT*DATE OF VISIT*VISIT DATE*"[("*"_rec_"*") {
		i ((ReportDate="")&(rec["DATE")&(rec'["BIRTH"))!((ReportDate="")&(rec["COLLECTED")){
			s ReportDate=$replace(ReportDate," ","")
			s ReportDate=$p(rec,":",2) 
			i ReportDate="" s ReportDate=obj.OCR.GetAt(recno+1) i ReportDate[":" s ReportDate=$p(ReportDate,":",2) 
			i ReportDate="" s ReportDate=obj.OCR.GetAt(recno+2) i ReportDate[":" s ReportDate=$p(ReportDate,":",2)
			i $e(ReportDate,1,1)=" " s ReportDate=$e(ReportDate,2,999)	
			s ReportDate=$replace(ReportDate,","," ")
			;i +ReportDate=0 q
			s x=$zdateh(ReportDate,15,,,,,,,-1)					; dd-mm-yyyy
			i x=-1 s x=$zdateh(ReportDate,6,,,,,,,-1)		; mm-dd-yyyy
			i +x>1 s ReportDate=x,obj.ReportDate=ReportDate d obj.%Save() 
			
			/*
			s ReportDate=$p(rec,":",2)
			i ReportDate="" s ReportDate=obj.OCR.GetAt(i+1),ReportDate=$p(ReportDate,":",2)
			i ReportDate="" s ReportDate=obj.OCR.GetAt(i+2),ReportDate=$p(ReportDate,":",2)
			i $e(ReportDate,1,1)=" " s ReportDate=$e(ReportDate,2,999)	
			s ReportDate=$replace(ReportDate,","," ")
			s ReportDate=$zdateh(ReportDate,6)
			i ReportDate>0 s obj.ReportDate=ReportDate d obj.%Save()
			*/
		}
		
		; TYPE
		s x=rec
		s x=$replace(x,"(",""),x=$replace(x,")","")
		s id=""
		&sql(SELECT ID,ResultType INTO :id,:r1 FROM DiagnosticType WHERE Name=:x)
		i id'="" d
		. s TestType(r1)=""
	}
	s test=""
	i $d(TestType) s x="" f i=1:1 d  q:x=""
	. s x=$o(TestType(x)) q:x=""
	. s test=test_$s(test'="":", ",1:"")_x
	i test'="" s obj.Type=$zconvert(test,"W") d obj.%Save()
	s obj=""
	q
.
.
GetType
	q
	/*
	s k1="""""",Keys=""
	k TestType
	k TestResult
A	s gbl="^"_d2_"("_k1_")"
	s k1=$o(@(gbl)) g:k1="" END
	s x=$zconvert(^(k1),"U")
	s x=$replace(x,"(",""),x=$replace(x,")","")
	
	i +$replace(x," ","")>0 g A		; skip if a number
	
	; check if its a Test Type
	s id=""
	&sql(SELECT ID,ResultType INTO :id,:r1 FROM DiagnosticType WHERE Name=:x)
	i id'="" d
	. s Keys="" w !,"Test Type: ",r1,!
	. s TestType(r1)=""
	
	; check if its a Test Name
	s id=""
	&sql(SELECT ID,Rule,SIName INTO :id,:rule,:r1 FROM DiagnosticTest WHERE Name=:x)
	i id'="" d
	. i Keys="" d GetKeys
	. ;w "Test Name: ",i," ",x," Rule: ",rule
	. w x," "
	. ; check if its before or after
	. s BefAft="" d CheckBeforeAfter
	. ; get columns
	. i +rule>3,BefAft="B" d GetCol4B q
	. i +rule>2,BefAft="B" d GetCol3B q
	. i +rule>1,BefAft="B" d GetCol2B q
	. i +rule=1,BefAft="B" d GetCol1B q
	
	. i +rule>3,BefAft="A" d GetCol4A q
	. i +rule>2,BefAft="A" d GetCol3A q
	. i +rule>1,BefAft="A" d GetCol2A q
	. i +rule=1,BefAft="A" d GetCol1A q
	
.
.
	g A
	s rec=""
	f i=1:1:$o(^FF34A(""),-1) d
	. s x=$zconvert(^FF34A(i),"l")
	. i x["collection date" s:rec="" rec=i q
	;REPORT DATE*DATE OF REPORT*DATE OF VISIT*VISIT DATE*"[("*"_x_"*")
	q:rec=""
	s x=^FF34A(rec),x=$p(x,":",2)
	i $e(x,1,1)=" " s x=$e(x,2,999)
	s x=$replace(x,","," ")
	f i=1:1:10 s x=$replace(x,"  "," ")
	s x=$zdateh(x,6)
	s ReportDate=$zdate(x,3)
	w "Report Date: "_ReportDate,!
	q	
GetKeys
	q:Keys=""
	s (r1,r2,r3)=""
	s r3=$g(^FF34A(k1-1)),r2=$g(^FF34A(k1-2)),r1=$g(^FF34A(k1-3))
	s Keys=r1_"  "_r2_"  "_r3
	w "TEST NAME",?25,r1,?40,r2,?55,r3,!
	q
CheckBeforeAfter
	s BefAft="A"
	s x=^FF34A(k1+1),x=$replace(x," ","")
	i "*0*1*2*3*4*5*6*7*8*9*10*"[("*"_$e(x,1,1)_"*") s BefAft="A"
	e  s BefAft="B"
	s BefAft="A"
	q
GetCol4B	; Result Before
	;w "(",k1,")B"
	q:k1<3	
	k arr
	s arr1=""
	; get before
	f ii=(k1-1):-1:(k1-8) s x=^FF34A(ii),arr=$replace($replace(x,"-"," "),"  "," ")_" "_$g(arr) ;w ii_"-"_x,!
	s arr=$replace(arr,"  "," ")
	s arr1=$p(arr," ",6)_" "_$p(arr," ",7)_"-"_$p(arr," ",8)_" "_$p(arr," ",9)
	;w arr1,!
	w ?25,$p(arr," ",6),?40,$p(arr," ",7)_"-"_$p(arr," ",8),?55,$p(arr," ",9),!
.
	q
	;s str=$g(^FF34A(k1-1))_" "_$g(^FF34A(k1-2))_" "_$g(^FF34A(k1-3))_" "_$g(^FF34A(k1-4))_" "_$g(^FF34A(k1-5))_" "_$g(^FF34A(k1-6))_" "_$g(^FF34A(k1-7))
	f ii=1:1:$l(str," ") d
	. s val=$p(str," ",ii) 
	. i val'="" s val1=$o(arr(""),-1)+1
	. i val'="" s arr(val1)=val
	q
GetCol3B
	q
GetCol2B
	q
GetCol1B
	q
GetCol4A
	;w "(",k1,")A"
	q:k1<3	
	k arr
	s arr1=""
	; get after
	f ii=(k1+1):1:(k1+8) s x=^FF34A(ii),arr=$g(arr)_" "_$replace($replace(x,"-"," "),"  "," ") ;w ii_"-"_x,!
	s arr=$replace(arr,"  "," ")
	s arr1=$p(arr," ",2)_" "_$p(arr," ",3)_"-"_$p(arr," ",4)_" "_$p(arr," ",5)
	;w arr1,!
	w ?25,$p(arr," ",2),?40,$p(arr," ",3)_"-"_$p(arr," ",4),?55,$p(arr," ",5),!
	;s TestResult()=""
	q
GetCol3A
	q
GetCol2A
	q
GetCol1A
	q
	
END
	s pid=""
	&sql(SELECT ID INTO :pid FROM Profile WHERE UserID=:UserID AND FName=:k5)
	s obj=##class(Profile).%OpenId(pid)
	s obj1=##class(MX.Result).%New()
	s type=""
	s x="" f i=1:1 s x=$o(TestType(x)) q:x=""  s type=type_$s(type'="":", ",1:"")_x
	s obj1.Type=type
	;s resv=""
	;f i=1:1:$o(TestResult(""),-1) s resv=resv_$s(resv'="":"|",1:"")_TestResult(i)
	;s obj1.ResultValue=resv
	
	
	s obj1.URL="c:\intersystems\cache\jonda\upload\"_d2_"."_fExt
	s obj1.CreatedDate=$zdatetime($h,3)
	s obj1.ResultDate=$zdate($h,3)
	s obj1.OrgFile=^UPLOAD(k1,d2,"OrgFile")
	;d obj1.%Save()
	s i=""
	&sql(SELECT COUNT(ID) INTO :i FROM Profile_Result WHERE Profile->UserID=:UserID AND Profile=:pid)
	s i=i+1
	s ^UPLOAD(k1,d2,"ResultID")=i
	d obj.Result.SetAt(obj1,i)
	d obj.%Save()
	s obj=""
	s obj=##class(MX.AWSOCR).%New()
	s obj.Profile=pid
	s obj.elekey=i
	s k1=""""""
	s gbl="^"_d2_"("_k1_")"
END1
	s k1=$o(@(gbl)) g:k1="" END2
	s x=^(k1)
	d obj.Text.Insert(x)
.
END2
	d obj.%Save()
	q
	*/
.

cAWSBGa^MAC^^67159,31547.890516^0
cAWSBGa		; 20th Dec 2021 ; not used ; Same Function with jxAWSBGa
	#import MX
	d INIT^CSP999
	w #,"--- DO NOT CLOSE THIS WINDOW ---",!
	;s k1=""
BG1	;w "BG1",!
	;s k1=$o(^UPLOAD(k1)) 
	s rid=""
	&sql(SELECT TOP 1 ID INTO :rid FROM Record WHERE IsNull(ProcessedDate,'')='' AND OrgFile<>'' ORDER BY CreatedDate)
	i rid="" h 10 g BG1
	&sql(SELECT Profile,Profile->UserID,TempFile,fExt INTO :pid,:k1,:d2,:ext FROM Record WHERE ID=:rid)
	w $zdatetime($h,3,,4),!
	s ProcessCount=0
	;b
	;i k1="" h 20 g BG1
	;s d2=""
BG2	;w "BG2",!
	;s d2=$o(^UPLOAD(k1,d2))
	;g:d2="" BG1
	;i $g(^UPLOAD(k1,d2))'="" g BG2	; processed
	w "Processing ",d2,!
	
	;s ext=$zconvert(^UPLOAD(k1,d2,"fExt"),"U") 
	;i ext="PDF" d ^cAWSBGPDF w !,"--- DO NOT CLOSE THIS WINDOW ---",! g BG1
	s ext=$zconvert(ext,"U")
	i ext="PDF" d ^cAWSBGPDF w !,"--- DO NOT CLOSE THIS WINDOW ---",! g BG1
	i ext="MP3" q
	i ext="MP4" q
	
	; convert iPhone HEIC, Android AVIF/WebP & all files to png
	; and set limit to less than 5mb
	i (ext="HEIC")!(ext="AVIF")!(ext="WEBP") d
	. ;this doesn't work	;s cmd="mogrify -resize 50% -format png c:\intersystems\cache\jonda\upload\"_d2_"."_ext
	. s cmd="mogrify -format png c:\intersystems\cache\jonda\upload\"_d2_"."_ext
	. s x=$zf(-1,cmd_" && exit")
	. s ext="PNG"
	. ; set non-standard images to png in MX.Record
	. ; set OrgFile,fExt,BinaryData
	. ;&sql()
	
	; check for oversized files
	s scale=100
	s x=##class(%File).GetFileSize("c:\intersystems\cache\jonda\upload\"_d2_"."_ext)
	i x>9999999 d		; 10Mb limit for AWS
	. s x=x-1	; to be sure
	. s scale=$p(100-(x/99999999*100),".",1)-1
	. w ?3,"File size too large: ",x,"   Scaling by ",scale,"%",!
	s cmd="convert c:\intersystems\cache\jonda\upload\"_d2_"."_ext_" -scale "_scale_"% -deskew 40% c:\intersystems\cache\jonda\upload\"_d2_".png"
	s x=$zf(-1,cmd_" && exit")
	s ext="PNG"
	; run this twice to be sure
	s x=##class(%File).GetFileSize("c:\intersystems\cache\jonda\upload\"_d2_"."_ext)
	i x>9999999 d		; 10Mb limit for AWS
	. s x=x-1	; to be sure
	. s scale=$p(100-(x/99999999*100),".",1)-1
	. w ?3,"File size too large: ",x,"   Scaling by ",scale,"%",!
	. s cmd="convert c:\intersystems\cache\jonda\upload\"_d2_"."_ext_" -scale "_scale_"% -deskew 40% c:\intersystems\cache\jonda\upload\"_d2_".png"
	. s x=$zf(-1,cmd_" && exit")
	. s x=##class(%File).GetFileSize("c:\intersystems\cache\jonda\upload\"_d2_"."_ext)
	. w ?3,"New File Size: ",x,!
	; Uploading file
	d UploadToS3
	h 10
	d ##class(%File).Delete(d2_"."_ext)
.
	; Decyphering text
Decypher1
	s fileid=$p($h,",",1)_$p($h,",",2)
	d SDTD
Decypher2	i '##class(%File).Exists("c:\intersystems\cache\jonda\upload\"_fileid_".txt") h 5 g Decypher2	
ReadJobID
	s ProcessCount=ProcessCount+1
	i ProcessCount>11 g EndReadResult
	w ?3,"ReadJobID..."
	s $ZERROR=""
	s $ztrap="EndReadJobID^cAWSBGa"
	s fnam="c:\intersystems\cache\jonda\upload\"_fileid_".txt"
	o fnam u fnam
	k arr
	s i=0
ReadJobID1
	u fnam r x
	s i=i+1
	s arr(i)=x
	g ReadJobID1
	
EndReadJobID
	s $ztrap=""
	i $ZERROR'="",$ZERROR'["ENDOFFILE" u 0 w "ERROR: ",$ZERROR,!
	c fnam
	
	w ?3,"EndJobID..."
	s jobid=$p($g(arr(2)),"""",4)
	i jobid="" h 5 g ReadJobID
	; cleanup
	s ^JC1234=fname
	d ##class(%File).Delete(fnam)
	s readtries=0
EndReadJobID1
	s $ztrap=""
	d GDTD
ReadResult
	w ?3,!,"ReadResult..."	
	s fnam="c:\intersystems\cache\jonda\results\"_d2_".txt"
	s readtries=readtries+1
	i readtries>10 g EndReadResult
	i '##class(%File).Exists(fnam) h 5 g EndReadJobID1
	o fnam u fnam
	s $ZERROR=""
	s $ztrap="EndReadResult^cAWSBGa"
	k arr
	s (text,top,left,blocktype,confidence,page)=""
	;s i=0
ReadResult1
	u fnam r x
	i x["INVALID_IMAGE_TYPE" s dt=$zdatetime($h,3) &sql(UPDATE Record SET ProcessedDate=:dt,Type='Invalid Image',ReviewedBy=9,ReviewedDate=:dt WHERE ID=:rid) g BG1
	i x["IN_PROGRESS" d  g EndReadJobID1
	. c fnam 
	. u 0 w "   ",fnam," IN PROGRESS...",! 
	. s $ztrap="" 
	. d ##class(%File).Delete(fnam)
	. h 10 
	i x="" c fnam s $ztrap="" h 2 g EndReadJobID1
	i x["""BlockType"": " s blocktype=$p(x,"""BlockType"": ",2)
	i x["""Confidence"": " s confidence=$p(x,"""Confidence"": ",2)
	i x["""Page"": " s page=$p(x,"""Page"": ",2)
	i x["""Text"": " s text=$p(x,"""Text"": ",2),text=$e(text,1,$l(text)-1)
	i x["""Left"": " s left=$p(x,"""Left"": ",2),left=$e(left,1,$l(left)-1)
	i x["""Top"": " s top=$p(x,"""Top"": ",2),top=$e(top,1,$l(top)-1)
	i x["""Page"": " d
	. i text'="" d
	.. ;i +confidence<59 s text="",left="",top="" q
	.. s text=$replace(text,"""","")
	.. s text=$replace(text,"(","")
	.. s text=$replace(text,")","")
	.. i text="" s text="",left="",top="" q
	.. s blocktype=$zconvert($replace(blocktype,"""",""),"l")
	.. i blocktype'="line," q
	.. ;u 0 w !,text
	.. s obj=##class(MX.Record).%OpenId(rid)
	.. d obj.OCR.Insert(text)
	.. d obj.%Save()
	.. s obj=""
	.. ;s i=i+1
	.. ;s gbl="^"_d2_"("_i_")"
	.. ;s @(gbl)=text
	.. s (text,top,left,blocktype,confidence,page)=""
	g ReadResult1
	
EndReadResult
	s $ztrap=""
	c fnam
	w !
	; DO ^DW3 PROCESSING
	;s ^UPLOAD(k1,d2)=$h
	s dt=$zdatetime($h,3)
	&sql(UPDATE Record SET ProcessedDate=:dt WHERE ID=:rid)
	d ^cAWSBGSave
	; clean up
	s str="aws s3 rm s3://jondaocr/"_d2_".png"
	s x=$zf(-1,str_" && exit")	
	d ##class(%File).Delete(fnam)
	d ##class(%File).Delete("c:\intersystems\cache\jonda\upload\"_d2_".png")
	w !,"--- DO NOT CLOSE THIS WINDOW ---",!
	g BG1
	
	
	
	
	
	
EndReadResult1
	w "  EndReadResult1..."
	k arr
	s $ztrap="ProcessResult^cAWSBGa"
	s tempfile="c:\intersystems\cache\jonda\results\"_d2_".txt"
	o tempfile
	f i=1:1 u tempfile r x s file="^"_d2_"("_i_")",@(file)=x
.
ProcessResult
	s $ztrap="" c tempfile
	w "  ProcessResult..."
	s text="",top="",left="",prevtop=""
	s tempfile="c:\intersystems\cache\jonda\results\"_d2_".0sv"
	o tempfile:"(NWS)"
	s i=""
ProcessResult1
	s i=$o(arr(i)) i i="" k arr c tempfile g ShowResult 			;q:i=""
	i arr(i)["""Text"":" s text=$replace($p(arr(i),": ",2),"""","") i text="" s text=$replace($p(arr(i),": ",3),"""","")
	; strip ending comma and replace with $c(0)
	i arr(i)["""Text"":",text'="" s text=$e(text,1,$l(text)-1)_Q
	i arr(i)["""Left"":" s left=$e($p(arr(i),": ",2),1,5)
	i arr(i)["""Top"":" s top=$j($e($p(arr(i),": ",2),1,5),0,2) d
	. q:text=""
	. ;u tempfile w "Prev: ",prevtop," Top: ",top,"  Left: ",$j(left,0,2),"  ",text
	. i top'=prevtop s prevtop=top w !
	. u tempfile w text
	. i prevtop="" s prevtop=top
	. s text="",left="",top=""
	g ProcessResult1	
ShowResult
	w "ShowResult: ",d2_"."_ext,!
	;s ^UPLOAD(k1,d2)=$h
	g BG2
	
UploadToS3	; Upload file to AWS S3 jonda bucket
	w "   UploadToS3: ",d2_"."_ext,!
	s file="c:\intersystems\cache\jonda\upload\"_d2_"."_ext
	s x=$zf(-1,"aws s3 cp "_file_" s3://jondaocr/ && exit")
	q
SDTD	; Start Document Text Detection
	w "   Start Document Text Detection: ",d2_"."_ext,!
	s str="aws textract start-document-text-detection --document ""{\""S3Object\"":{\""Bucket\"":\""jondaocr\"",\""Name\"":\"""_d2_"."_ext_"\""}}"" > c:\intersystems\cache\jonda\upload\"_fileid_".txt"
	s x=$zf(-1,str_" && exit")
	q
GDTD	; Get Document Text Detection
	w "   Get Document Text Detection: ",!
	s str="aws textract get-document-text-detection --job-id """_jobid_""" > C:\InterSystems\Cache\Jonda\results\"_d2_".txt"
	s x=$zf(-1,str_" && exit")
	q
GNXT	; Get Next Token
	w "   Get Next Token: ",!
	s str="aws textract get-document-text-detection --job-id """_jobid_""" -- next-token """_tokenid_""" > C:\InterSystems\Cache\Jonda\results\"_tokenid_".txt"
	s x=$zf(-1,str_" && exit")
	q
.

cAWSOCR^MAC^^67159,31864.7078773^0
cAWSOCR	 	; not used ; Same Function with jxAWSOCR
 ; pass in Record ID (rid) and get OCR text
GetDateType	; Date and Type of Record
	n test
	s ReportDate=""
	k TestType
	s obj=##class(MX.Record).%OpenId(rid)
	q:$g(obj)=""
	f recno=1:1:obj.OCR.Count() {
		s rec=obj.OCR.GetAt(recno)
		s rec=$zconvert(rec,"U")
		; DATE
		;i "*DISCHARGE DATE*ADMISSION DATE*DATE RECEIVED*COLLECTION DATE*REPORT DATE*DATE OF REPORT*DATE OF VISIT*VISIT DATE*ADMITTED ON*"[("*"_rec_"*") {
		i ((ReportDate="")&(rec["DATE")&(rec'["BIRTH"))!((ReportDate="")&(rec["COLLECTED")&(rec["REPORTED")){
			s ReportDate=$replace(ReportDate," ","")
			s ReportDate=$p(rec,":",2) 
			i ReportDate="" s ReportDate=obj.OCR.GetAt(recno+1) i ReportDate[":" s ReportDate=$p(ReportDate,":",2) 
			i ReportDate="" s ReportDate=obj.OCR.GetAt(recno+2) i ReportDate[":" s ReportDate=$p(ReportDate,":",2)
			i $e(ReportDate,1,1)=" " s ReportDate=$e(ReportDate,2,999)	
			s ReportDate=$replace(ReportDate,","," ")
			;i +ReportDate=0 q
			s x=$zdateh(ReportDate,15,,,,,,,-1)					; dd-mm-yyyy
			i x=-1 s x=$zdateh(ReportDate,6,,,,,,,-1)		; mm-dd-yyyy
			; check for year (sliding scale)
			/*
			i +x>1 {
					s nowdt=$h
					s nowyr=$zdateh("01/01/"_$p($zdate($h,4,,4),"/",3),4,,4)
					i x<nowdt
			}
			*/
			; end check for year
			i +x>1 s ReportDate=x,obj.ReportDate=ReportDate d obj.%Save()
		}
		
		; BELOW DOES NOT WORK 08.03.22-DW
		; TYPE: CHECK MX.DiagnosticType
		;i obj.Type'="" d  g SkipTestType
		;. s x=obj.Type f iii=1:1 d  q:x1=""
		;.. s x1=$p(x,", ",iii) q:x1=""
		;.. s TestType(x1)=""
.
		s x=$zconvert(rec,"U")
.
		s x=$replace(x,"("," "),x=$replace(x,")"," "),x=$replace(x,":"," "),x=$replace(x,"-"," "),x=$replace(x,"*"," ")
		;;; TAKE ONLY COMPLETE WORDS
		s (id,r1,r2)=""
		&sql(SELECT ID,ResultType,Name INTO :id,:r1,:r2 FROM DiagnosticType WHERE :x[UPPER(Name))
		; check if space before 
		i id'="" d
		. s r2=$zconvert(r2,"U")
		. s err=0
		. s x1=$p(x,r2,1)
		. i $l(x1)>0,($e(x1,$l(x1),$l(x1))'=" ") s err=1
		. ; check if space after
		. s x1=$p(x,r2,2)
		. i $l(x1)>0,($e(x1,1,1)'=" ") s err=1
		. i err=0,id'="" s TestType(r1)=""
		
		; TYPE: CHECK DiagnosticTest->Type->Name
		s (id,r1,r2)=""
		&sql(SELECT ID,Type->ResultType,Type->Name,SIName INTO :id,:r1,:r2,:r3 FROM DiagnosticTest WHERE :x[UPPER(DiagnosticTest.Name))
		; check if space before 
		i id'="" d
		. s TestType(r1)=""
	}
SkipTestType
	s test1=""
	i '$d(TestType) d ^MAI ; Medication AI 
.
	; if not BLOOD TEST, set to auto-reviewed
	;i '$d(TestType("Blood Test")),'$d(TestType("Medication")) d
	s dt=$zdatetime($h,3)
	
	//CHECK IF TYPE IS ALREADY ASSIGNED - JC 18-05-2023
	s GHRecID="",fExt=""
	&sql(SELECT Type,GHRecID,fExt INTO :PreType,:GHRecID,:fExt FROM MX.Record WHERE ID=:rid)
	
	
	i $o(TestType(""))="" d  s obj="" q
	. &sql(UPDATE Record SET ReviewedDate=:dt,ReviewedBy=1,Type='Other' WHERE ID=:rid)
.
	i $d(TestType) s x="" f ii=1:1 d  q:x=""
	. s x=$o(TestType(x)) q:x=""
	. s test1=test1_$s(test1'="":", ",1:"")_x
.
	;i test1="" s test1="Other" 
	;i obj.Type="" s obj.Type=test1 d obj.%Save()
	s obj.Type=test1 d obj.%Save()
	s obj=""
	s r1="" &sql(SELECT ID INTO :r1 FROM ResultBloodTest WHERE Record->ID=:rid)
	
	// fExt
	s ^JC3=PreType
	i GHRecID'="",PreType="Radiology",fExt'="html" &sql(UPDATE Record SET Type=:PreType,ReviewedDate=:dt,ReviewedBy=1 WHERE ID=:rid)
	i GHRecID'="",PreType="Urinalisys" &sql(UPDATE Record SET Type=:PreType,ReviewedDate=:dt,ReviewedBy=1 WHERE ID=:rid)
	q
	
	
	
	q:ReportDate'=""
	s obj=##class(MX.Record).%OpenId(rid)
	f i=1:1:obj.OCR.Count() {
		s rec=obj.OCR.GetAt(i)
		s rec=$zconvert(rec,"U")
		; DATE
		i "*DATE*"[("*"_rec_"*") {
			s ReportDate=$p(rec,":",2)
			i ReportDate="" s ReportDate=obj.OCR.GetAt(i+1) i ReportDate[":" s ReportDate=$p(ReportDate,":",2)
			i ReportDate="" s ReportDate=obj.OCR.GetAt(i+2) i ReportDate[":" s ReportDate=$p(ReportDate,":",2)
			i $e(ReportDate,1,1)=" " s ReportDate=$e(ReportDate,2,999)	
			s ReportDate=$replace(ReportDate,","," ")
			i +ReportDate=0 q
			s x=$zdateh(ReportDate,15,,,,,,,-1)					; dd-mm-yyyy
			i x=-1 s x=$zdateh(ReportDate,6,,,,,,,-1)		; mm-dd-yyyy
			q:+x<1 
			s ReportDate=x
			s obj.ReportDate=ReportDate d obj.%Save()
		}
	}
	q

cChangePassword^MAC^^67159,32522.4472957^0
cChangePassword  
	q
CheckNUpdatePW		; Called by cChangePassword.csp
	#import MX
	d INIT1^CSP999
	; Check for old password's correct or not 
	&sql(SELECT Count(ID) INTO :count FROM "User" WHERE ID=:UserID AND %Exact(Password)=:d1)
	if (count=0){
		&js<document.getElementById("org-pass").querySelector(".error-text").classList.add("active")>
		q
	}
	; Update old to new password
	&sql(UPDATE "User" SET Password=:d2 WHERE ID=:UserID)
	if (SQLCODE=0){
		&js<document.getElementById("popup").classList.remove("inactive")>
		q
	}
	else{
		&js<alert("Some errors occur while updating the password")>
	}
	q

cClientTemplate^MAC^^67160,65578.1657015^0
cClientTemplate		; Admin setting,same with cViewClientTemplate, actions(editing/ adding new) are  allowed
InitMe
	#import MX
	d INIT1^CSP999
	&sql(SELECT Top 1 BucketName INTO :bk From Template)
	s %session.Data("ClientTemplates","bk") = bk
	s lastViewDate = $s($g(^LastView("ClientTemplate",UserID,bk))="":"2023-03-01 00:00:01",1:$zdatetime($g(^LastView("ClientTemplate",UserID,bk)),3))
	&js<lastViewDate="#(lastViewDate)#";>
	s ^LastView("ClientTemplate",UserID,bk)=$h
	&js<document.querySelector(".temp-name").innerHTML="#(bk)#">
	d LoadTemplates^cClientTemplate("",1,lastViewDate)
	q
	
WriteTemplates		; Load data onto templates dropdown
	#import MX
	d INIT1^CSP999
	//CT for Client Template
	&sql(DECLARE CT CURSOR FOR
		SELECT DISTINCT BY (BucketName) %EXACT(Bucketname) 
		INTO :bk
		FROM Template
		ORDER BY BucketName
	)
	&sql(OPEN CT)
	&sql(FETCH CT)
	WHILE SQLCODE=0{
		w "<li onclick='changeBK(event)'>"_bk_"</li>"
		&sql(FETCH CT)
	}
	&sql(CLOSE CT)
	q
	
LoadTemplates(searchVal,orderCol,lastViewDate)	; Load template table
	#import MX
	d INIT1^CSP999
	s bk=%session.Data("ClientTemplates","bk")
	
	//Search for Newly Added Client Templates based on Start letter
	&sql(DECLARE CN0 CURSOR FOR
		SELECT ID,DiagnosticTest,Name,UnitName
		INTO :id,:diagnosticTest,:name,:unitName
		FROM Template
		WHERE Name %STARTSWITH (:searchVal)
		AND BucketName=:bk
		AND ModifiedDate>=:lastViewDate
		AND ISNULL(DeletedDate,'')=''
		ORDER BY 
			CASE WHEN :orderCol=1 Then DiagnosticTest END,
			CASE WHEN :orderCol=2 Then DiagnosticTest END DESC,
			CASE WHEN :orderCol=3 Then Name END,
			CASE WHEN :orderCol=4 Then Name END DESC
	)
	
	//Search for Newly Added Client Templates based on Numeric
	&sql(DECLARE CN1 CURSOR FOR
		SELECT ID,DiagnosticTest,Name,UnitName
		INTO :id,:diagnosticTest,:name,:unitName
		FROM Template
		WHERE Name NOT BETWEEN 'A' AND 'Z' AND Name NOT BETWEEN 'a' AND 'z'
		AND BucketName=:bk
		AND ModifiedDate>=:lastViewDate
		AND ISNULL(DeletedDate,'')=''
		ORDER BY 
			CASE WHEN :orderCol=1 Then DiagnosticTest END,
			CASE WHEN :orderCol=2 Then DiagnosticTest END DESC,
			CASE WHEN :orderCol=3 Then Name END,
			CASE WHEN :orderCol=4 Then Name END DESC
	)
	
	//Search for Client Templates based on Start letter
	&sql(DECLARE CT0 CURSOR FOR
		SELECT ID,DiagnosticTest,Name,UnitName
		INTO :id,:diagnosticTest,:name,:unitName
		FROM Template
		WHERE Name %STARTSWITH (:searchVal)
		AND BucketName=:bk
		AND ModifiedDate<:lastViewDate
		AND ISNULL(DeletedDate,'')=''
		ORDER BY 
			CASE WHEN :orderCol=1 Then DiagnosticTest END,
			CASE WHEN :orderCol=2 Then DiagnosticTest END DESC,
			CASE WHEN :orderCol=3 Then Name END,
			CASE WHEN :orderCol=4 Then Name END DESC
	)
	//Search for Client Templates based on Numeric
	&sql(DECLARE CT1 CURSOR FOR
		SELECT ID,DiagnosticTest,Name,UnitName
		INTO :id,:diagnosticTest,:name,:unitName
		FROM Template
		WHERE Name NOT BETWEEN 'A' AND 'Z' AND Name NOT BETWEEN 'a' AND 'z'
		AND BucketName=:bk
		AND ModifiedDate<:lastViewDate
		AND ISNULL(DeletedDate,'')=''
		ORDER BY 
			CASE WHEN :orderCol=1 Then DiagnosticTest END,
			CASE WHEN :orderCol=2 Then DiagnosticTest END DESC,
			CASE WHEN :orderCol=3 Then Name END,
			CASE WHEN :orderCol=4 Then Name END DESC
	)
	s tbodyContent=""
	if (searchVal="num"){
		&sql(OPEN CN1)
		&sql(FETCH CN1)
	}
	else{
		&sql(OPEN CN0)
		&sql(FETCH CN0)
	}
	WHILE SQLCODE=0{
		s tbodyContent = tbodyContent_$$WriteTr(id,diagnosticTest,name,unitName,1)
		if (searchVal="num"){
			&sql(FETCH CN1)
		}
		else{
			&sql(FETCH CN0)
		}
	}
	if (searchVal="num"){
		&sql(CLOSE CN1)
	}
	else{
		&sql(CLOSE CN0)
	}
	if (searchVal="num"){
		&sql(OPEN CT1)
		&sql(FETCH CT1)
	}
	else{
		&sql(OPEN CT0)
		&sql(FETCH CT0)
	}
	WHILE SQLCODE=0{
		s tbodyContent = tbodyContent_$$WriteTr(id,diagnosticTest,name,unitName,0)
		if (searchVal="num"){
			&sql(FETCH CT1)
		}
		else{
			&sql(FETCH CT0)
		}
	}
	if (searchVal="num"){
		&sql(CLOSE CT1)
	}
	else{
		&sql(CLOSE CT0)
	}
	&js<document.querySelector("tbody").innerHTML="#(tbodyContent)#">
	q
	
WriteTr(id,diagnosticTest,name,unitName,highlight)	;Create HTML <tr><td>
	s tr = "<tr key='"_id_"'"
	if (highlight) s tr = tr_" class='highlight'"
	s tr = tr_">\n<td class='diagnostic-test'>"_diagnosticTest_"</td>\n"
    s tr = tr_"<td class='client-name'>"_name_"</td>\n"
    s tr = tr_"<td class='client-unit'>"_unitName_"</td>\n"
    s tr = tr_"<td class='actions"
	s tr = tr_"'><img class='edit-icon' src='./assets/images/edit.png' alt='Edit' onclick='editRow(event)'> <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)'></td>\n</tr>"
	q tr
	
SaveUpdateTemplate		; Update or save edit/new template data
	#import MX
	d INIT1^CSP999
	s date=$ZDATETIME($h,3)
	if (id=""){
		s bk=%session.Data("ClientTemplates","bk")
		&sql(SELECT Setting INTO :setting FROM "User" WHERE id=:UserID)
		&sql(INSERT INTO Template (DiagnosticTest,Name,UnitName,BucketName,Setting,CreatedDate,ModifiedDate) VALUES (:diagnosticTest,:clientName,:clientUnit,:bk,:setting,:date,:date))
	}
	else{
		&sql(UPDATE Template SET DiagnosticTest=:diagnosticTest,Name=:clientName,UnitName=:clientUnit,ModifiedDate=:date WHERE ID=:id)
	}
	if (SQLCODE=0){
		&sql(SELECT ID INTO :id FROM Template WHERE DiagnosticTest=:diagnosticTest AND Name=:clientName AND UnitName=:clientUnit )
		&js<
			currentTr.setAttribute("key","#(id)#");
		>
	}
	else{
		&js<alert("Some errors occured during the saving process")>
	}
	q
	
DeleteTemplate	; Delete template row
	#import MX
	d INIT1^CSP999
	s deletedDate = $zdatetime($h,3)
	&sql(UPDATE template SET deletedDate=:deletedDate WHERE ID=:id)
	q
	
LoadDiagnosticTests	; Fetch JX Test Name suggestions for new and editing row
	#import MX
	d INIT1^CSP999
	//CS - Cursor Search
	&sql(DECLARE CS0 CURSOR FOR
		SELECT %EXACT(SIName) 
		INTO :siName
		FROM MX.DiagnosticTest
		WHERE LOWER(SIName)[LOWER(:name)
		AND ISNULL(DeletedDate,'')=''
		GROUP BY SIName
		ORDER BY SIName
	)
	s diagnosticContent = ""
	&sql(OPEN CS0)
	&sql(FETCH CS0)
	WHILE SQLCODE=0{
		s diagnosticContent=diagnosticContent_"<li value='"_siName_"' onclick='changeDiagnosticTest(event)'>"_siName_"</li>"
		&sql(FETCH CS0)	
	}
	&sql(CLOSE CS0)
	&js<document.querySelector(".diagnostic-data ul").innerHTML="#(diagnosticContent)#">
	q
	
LoadClientNames	; Fetch Client Test Name suggestions for new and editing row
	#import MX
	d INIT1^CSP999
	//CS - Cursor Search
	&sql(DECLARE CS1 CURSOR FOR
		SELECT %EXACT(Name) 
		INTO :clientName
		FROM MX.DiagnosticTest
		WHERE LOWER(Name)[LOWER(:name)
		AND ISNULL(DeletedDate,'')=''
		GROUP BY Name
		ORDER BY Name
	)
	s clientNameContent = ""
	&sql(OPEN CS1)
	&sql(FETCH CS1)
	WHILE SQLCODE=0{
		s clientNameContent=clientNameContent_"<li value='"_clientName_"' onclick='changeClientName(event)'>"_clientName_"</li>"
		&sql(FETCH CS1)	
	}
	&sql(CLOSE CS1)
	&js<document.querySelector(".name-data ul").innerHTML="#(clientNameContent)#">
	q
	
LoadClientUnits		; Fetch unit suggestions for new and editing row
	#import MX
	d INIT1^CSP999
	//CS - Cursor Search
	&sql(DECLARE CS2 CURSOR FOR
		SELECT %EXACT(Name) 
		INTO :clientUnit
		FROM MX.SIUnit
		WHERE LOWER(Name)[LOWER(:name)
		AND ISNULL(DeletedDate,'')=''
		GROUP BY Name
		ORDER BY Name
	)
	s clientUnitContent = ""
	&sql(OPEN CS2)
	&sql(FETCH CS2)
	WHILE SQLCODE=0{
		s clientUnitContent=clientUnitContent_"<li value='"_clientUnit_"' onclick='changeClientUnit(event)'>"_clientUnit_"</li>"
		&sql(FETCH CS2)	
	}
	&sql(CLOSE CS2)
	&js<document.querySelector(".unit-data ul").innerHTML="#(clientUnitContent)#">
	q
	
SearchData		// Fetch data for search results
	#import MX
	d INIT1^CSP999
	s bk=%session.Data("ClientTemplates","bk")
	//Search DiagnosticTest
	&sql(DECLARE CS3 CURSOR FOR
		SELECT ID,DiagnosticTest,Name
		INTO :id,:diagnosticTest,:cName
		FROM Template
		WHERE LOWER(DiagnosticTest)[LOWER(:searchVal)
		AND BucketName=:bk
		AND ISNULL(DeletedDate,'')=''
	)
	//Search Client Name
	&sql(DECLARE CS4 CURSOR FOR
		SELECT ID,Name,DiagnosticTest
		INTO :id,:cName,:diagnosticTest
		FROM Template
		WHERE LOWER(Name)[LOWER(:searchVal)
		AND BucketName=:bk
		AND ISNULL(DeletedDate,'')=''
	)
	//Search Client Units
	&sql(DECLARE CS5 CURSOR FOR
		SELECT ID,UnitName,Name,DiagnosticTest
		INTO :id,:cUnit,:cName,:diagnosticTest
		FROM Template
		WHERE LOWER(UnitName)[LOWER(:searchVal)
		AND BucketName=:bk
		AND ISNULL(DeletedDate,'')=''
	)
	d SearchDiagnosticTest
	d SearchClientName
	d SearchClientUnit
	q
	
SearchDiagnosticTest
	s bk=%session.Data("ClientTemplates","bk")
	&sql(OPEN CS3)
	&sql(FETCH CS3)
	&js<console.log("dTEst #(searchVal_":"_SQLCODE)#")>
	WHILE SQLCODE=0{
		s ^SearchDiagnosticTest(diagnosticTest,id)=""
		s ^SearchCName(cName,id)=""
		s ^SearchData(diagnosticTest) = "DiagnosticTest:"_id
		&sql(FETCH CS3)
	}
	&sql(CLOSE CS3)
	q
	
SearchClientName
	s bk=%session.Data("ClientTemplates","bk")
	&sql(OPEN CS4)
	&sql(FETCH CS4)
	WHILE SQLCODE=0{
		s ^SearchDiagnosticTest(diagnosticTest,id)=""
		s ^SearchCName(cName,id)=""
		s ^SearchData(cName) = "ClientName:"_id
		&sql(FETCH CS4)
	}
	&sql(CLOSE CS4)
	q
	
SearchClientUnit
	s bk=%session.Data("ClientTemplates","bk")
	&sql(OPEN CS5)
	&sql(FETCH CS5)
	&js<console.log("cUnit #(searchVal_":"_SQLCODE)#")>
	WHILE SQLCODE=0{
		s ^SearchDiagnosticTest(diagnosticTest,id)=""
		s ^SearchCName(cName,id)=""
		s ^SearchData(cUnit) = "ClientUnit:"_id
		&sql(FETCH CS5)
	}
	&sql(CLOSE CS5)
	q
	
	
LoadSearchSuggestions	; Featch data for search suggestions
	#import MX
	d INIT1^CSP999
	s searchContent=""
	s suggestion=$ORDER(^SearchData(""))
   	WHILE (suggestion'="") {
		s searchContent = searchContent_"<li value='"_^SearchData(suggestion)_"' onclick='jLoadSearchData(event)'>"_suggestion_"</li>"
		s suggestion=$ORDER(^SearchData(suggestion))
	}
	&js<document.querySelector(".search-data ul").innerHTML="#(searchContent)#">
	q
	
LoadSearchResults	; Load search result and inject into table contents
	#import MX
	d INIT1^CSP999
	s tableContent=""
	s sortName=""
	if (orderCol=1){
		s sortName=$ORDER(^SearchDiagnosticTest(""))
	}
	elseif (orderCol=2){
		s sortName=$ORDER(^SearchDiagnosticTest(""),-1)
	}
	elseif (orderCol=3){
		s sortName=$ORDER(^SearchCName(""))
	}
	elseif (orderCol=4){
		s sortName=$ORDER(^SearchCName(""),-1)
	}
	if (sortName=""){
		&js<alert("No results Found")>
		q
	}
   	WHILE (sortName'="") {
	   	if (orderCol<3){
			s id=$ORDER(^SearchDiagnosticTest(sortName,""))
	   	}
	   	else{
		   	s id=$ORDER(^SearchCName(sortName,""))
	   	}
	   	WHILE (id'=""){
			&sql(
				SELECT DiagnosticTest,Name,UnitName
				INTO :diagnosticTest,:name,:unitName
				FROM Template
				WHERE ID=:id
			)
			s tableContent = tableContent_$$WriteTr(id,diagnosticTest,name,unitName,0)
			if (orderCol<3){
				s id=$ORDER(^SearchDiagnosticTest(sortName,id))
	   		}
	   		else{
		   		s id=$ORDER(^SearchCName(sortName,id))
	   		}
	   	}
		if (orderCol=1){
			s sortName=$ORDER(^SearchDiagnosticTest(sortName))
		}
		elseif (orderCol=2){
			s sortName=$ORDER(^SearchDiagnosticTest(sortName),-1)
		}
		elseif (orderCol=3){
			s sortName=$ORDER(^SearchCName(sortName))
		}
		elseif (orderCol=4){
			s sortName=$ORDER(^SearchCName(sortName),-1)
		}
	}
	&js<document.querySelector("tbody").innerHTML="#(tableContent)#">
	q

cCountry^MAC^^67159,39086.7481295^0
cCountry
InitMe
	#import MX
	d INIT1^CSP999
	s lastViewDate = $s($g(^LastView("Country",UserID))="":"2023-03-01 00:00:01",1:$zdatetime($g(^LastView("Country",UserID)),3))
	&js<lastViewDate="#(lastViewDate)#";>
	; Populate table on page start
	d LoadCountries^cCountry("",1,lastViewDate)
	s ^LastView("Country",UserID)=$h
	q
	
PopTab1 	;Pop table ,sorted with country code ; called from SortMe
	#import MX
	d INIT1^CSP999
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID,Code,Name,DateFormat,Region,UPPER(Code)
		INTO :r1,:r2,:r3,:r4,:r5,:r6
		FROM Country
		ORDER BY 6
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	s row=1
	WHILE SQLCODE=0{
		s row=row+1
		s r4=$s(r4=1:"mm/dd/yyyy",r4=4:"dd/mm/yyyy",1:"")
		&js<document.getElementById("Tab1").insertRow(),
			document.getElementById("Tab1").rows[#(row)#].insertCell(0),
			document.getElementById("Tab1").rows[#(row)#].insertCell(1),
			document.getElementById("Tab1").rows[#(row)#].insertCell(2),
			document.getElementById("Tab1").rows[#(row)#].insertCell(3),
			document.getElementById("Tab1").rows[#(row)#].insertCell(4),
			document.getElementById("Tab1").rows[#(row)#].insertCell(5),
			document.getElementById("Tab1").rows[#(row)#].cells[0].innerHTML="<span style='cursor:pointer' onclick=''>#(r1)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[1].innerHTML="<span style='cursor:pointer' onclick=''>#(r2)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[2].innerHTML="<span style='cursor:pointer' onclick=''>#(r3)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[3].innerHTML="<span style='cursor:pointer' onclick=''>#(r4)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[4].innerHTML="<span style='cursor:pointer' onclick=''>#(r5)#</span>"
			document.getElementById("Tab1").rows[#(row)#].cells[5].innerHTML="<img style='cursor:pointer;height:15px' onclick='jDeleteMe(#(r1)#)' src='images/delete.gif'>"
		>
		&sql(FETCH C1)	
	}
	&sql(CLOSE C1)
	q
	
	
SortMe		; Sorting with country name
	#import MX
	d INIT1^CSP999
	s d1=+d1
	i d1=1 d PopTab1 q	; Sorting with country code
	i d1=3 d SortMe1 q	
	&sql(DECLARE C2 CURSOR FOR
		SELECT ID,Code,Name,DateFormat,Region,UPPER(Name)
		INTO :r1,:r2,:r3,:r4,:r5,:r6
		FROM Country
		ORDER BY 6
	)
	&sql(OPEN C2)
	&sql(FETCH C2)
	s row=1
	WHILE SQLCODE=0{
		s row=row+1
		s r4=$s(r4=1:"mm/dd/yyyy",r4=4:"dd/mm/yyyy",1:"")
		&js<document.getElementById("Tab1").insertRow(),
			document.getElementById("Tab1").rows[#(row)#].insertCell(0),
			document.getElementById("Tab1").rows[#(row)#].insertCell(1),
			document.getElementById("Tab1").rows[#(row)#].insertCell(2),
			document.getElementById("Tab1").rows[#(row)#].insertCell(3),
			document.getElementById("Tab1").rows[#(row)#].insertCell(4),
			document.getElementById("Tab1").rows[#(row)#].insertCell(5),
			document.getElementById("Tab1").rows[#(row)#].cells[0].innerHTML="<span style='cursor:pointer' onclick=''>#(r1)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[1].innerHTML="<span style='cursor:pointer' onclick=''>#(r2)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[2].innerHTML="<span style='cursor:pointer' onclick=''>#(r3)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[3].innerHTML="<span style='cursor:pointer' onclick=''>#(r4)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[4].innerHTML="<span style='cursor:pointer' onclick=''>#(r5)#</span>"
			document.getElementById("Tab1").rows[#(row)#].cells[5].innerHTML="<img style='cursor:pointer;height:15px' onclick='jDeleteMe(#(r1)#)' src='images/delete.gif'>"
		>
		&sql(FETCH C2)	
	}
	&sql(CLOSE C2)
	q
	
SortMe1	; Sorting with Region
	&sql(DECLARE C3 CURSOR FOR
		SELECT ID,Code,Name,DateFormat,Region,UPPER(Region)
		INTO :r1,:r2,:r3,:r4,:r5,:r6
		FROM Country
		ORDER BY 6
	)
	&sql(OPEN C3)
	&sql(FETCH C3)
	s row=1
	WHILE SQLCODE=0{
		s row=row+1
		s r4=$s(r4=1:"mm/dd/yyyy",r4=4:"dd/mm/yyyy",1:"")
		&js<document.getElementById("Tab1").insertRow(),
			document.getElementById("Tab1").rows[#(row)#].insertCell(0),
			document.getElementById("Tab1").rows[#(row)#].insertCell(1),
			document.getElementById("Tab1").rows[#(row)#].insertCell(2),
			document.getElementById("Tab1").rows[#(row)#].insertCell(3),
			document.getElementById("Tab1").rows[#(row)#].insertCell(4),
			document.getElementById("Tab1").rows[#(row)#].insertCell(5),
			document.getElementById("Tab1").rows[#(row)#].cells[0].innerHTML="<span style='cursor:pointer' onclick=''>#(r1)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[1].innerHTML="<span style='cursor:pointer' onclick=''>#(r2)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[2].innerHTML="<span style='cursor:pointer' onclick=''>#(r3)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[3].innerHTML="<span style='cursor:pointer' onclick=''>#(r4)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[4].innerHTML="<span style='cursor:pointer' onclick=''>#(r5)#</span>"
			document.getElementById("Tab1").rows[#(row)#].cells[5].innerHTML="<img style='cursor:pointer;height:15px' onclick='jDeleteMe(#(r1)#)' src='images/delete.gif'>"
		>
		&sql(FETCH C3)	
	}
	&sql(CLOSE C3)
	q
	
SaveMe		;Insert new country
	#import MX
	d INIT1^CSP999
	s id=""
	s d1=$zconvert(d1,"U")
	s d4=$zconvert(d4,"U")
	&sql(SELECT ID INTO :id FROM Country WHERE Code=:d1)
	i id="" &sql(INSERT INTO Country (Code,Name,DateFormat,Region) VALUES (:d1,:d2,:d3,:d4))
	i id'="" &sql(UPDATE Country SET Code=:d1,Name=:d2,DateFormat=:d3,Region=:d4 WHERE Code=:d1)
	q
	
LoadCountries(start,orderCol,lastViewDate)	; Populate table, called by InitMe too 
	
	#import MX
	d INIT1^CSP999
	&sql(DECLARE CA1 CURSOR FOR
		SELECT  ID,Code,Name,DateFormat,Region
		INTO :id,:code,:name,:dateFormat,:region
		FROM Country
		WHERE LOWER(Name) %StartsWith LOWER(:start)
		AND ModifiedDate>=:lastViewDate
		AND ISNULL(DeletedDate,'')=''
		ORDER BY 
			CASE WHEN :orderCol=1 Then Code END,
			CASE WHEN :orderCol=2 Then Code END DESC,
			CASE WHEN :orderCol=3 Then Name END,
			CASE WHEN :orderCol=4 Then Name END DESC,
			CASE WHEN :orderCol=5 Then Region END,
			CASE WHEN :orderCol=6 Then Region END DESC
	)
	&sql(DECLARE CA2 CURSOR FOR
		SELECT  ID,Code,Name,DateFormat,Region
		INTO :id,:code,:name,:dateFormat,:region
		FROM Country
		WHERE Name NOT BETWEEN 'A' AND 'Z' AND Name NOT BETWEEN 'a' AND 'z' 
		AND ModifiedDate>=:lastViewDate
		AND ISNULL(DeletedDate,'')=''
		ORDER BY 
			CASE WHEN :orderCol=1 Then Code END,
			CASE WHEN :orderCol=2 Then Code END DESC,
			CASE WHEN :orderCol=3 Then Name END,
			CASE WHEN :orderCol=4 Then Name END DESC,
			CASE WHEN :orderCol=5 Then Region END,
			CASE WHEN :orderCol=6 Then Region END DESC
	)
	&sql(DECLARE CL1 CURSOR FOR
		SELECT  ID,Code,Name,DateFormat,Region
		INTO :id,:code,:name,:dateFormat,:region
		FROM Country
		WHERE LOWER(Name) %StartsWith LOWER(:start)
		AND ModifiedDate<:lastViewDate
		AND ISNULL(DeletedDate,'')=''
		ORDER BY 
			CASE WHEN :orderCol=1 Then Code END,
			CASE WHEN :orderCol=2 Then Code END DESC,
			CASE WHEN :orderCol=3 Then Name END,
			CASE WHEN :orderCol=4 Then Name END DESC,
			CASE WHEN :orderCol=5 Then Region END,
			CASE WHEN :orderCol=6 Then Region END DESC
	)
	&sql(DECLARE CL2 CURSOR FOR
		SELECT  ID,Code,Name,DateFormat,Region
		INTO :id,:code,:name,:dateFormat,:region
		FROM Country
		WHERE Name NOT BETWEEN 'A' AND 'Z' AND Name NOT BETWEEN 'a' AND 'z' 
		AND ModifiedDate<:lastViewDate
		AND ISNULL(DeletedDate,'')=''
		ORDER BY 
			CASE WHEN :orderCol=1 Then Code END,
			CASE WHEN :orderCol=2 Then Code END DESC,
			CASE WHEN :orderCol=3 Then Name END,
			CASE WHEN :orderCol=4 Then Name END DESC,
			CASE WHEN :orderCol=5 Then Region END,
			CASE WHEN :orderCol=6 Then Region END DESC
	)
	s tableContent=""
	if (start="num"){
		&sql(OPEN CA2)
		&sql(FETCH CA2)
	}
	else{
		&sql(OPEN CA1)
		&sql(FETCH CA1)
	}
	WHILE SQLCODE=0{
		s tableContent=tableContent_$$WriteTr(id,code,name,dateFormat,region,1)
		if (start="num"){
			&sql(FETCH CA2)
		}
		else{
			&sql(FETCH CA1)
		}
	}
	if (start="num"){
		&sql(CLOSE CA2)
	}
	else{
		&sql(CLOSE CA1)
	}
	if (start="num"){
		&sql(OPEN CL2)
		&sql(FETCH CL2)
	}
	else{
		&sql(OPEN CL1)
		&sql(FETCH CL1)
	}
	WHILE SQLCODE=0{
		s tableContent=tableContent_$$WriteTr(id,code,name,dateFormat,region,0)
		if (start="num"){
			&sql(FETCH CL2)
		}
		else{
			&sql(FETCH CL1)
		}
	}
	if (start="num"){
		&sql(CLOSE CL2)
	}
	else{
		&sql(CLOSE CL1)
	}
	&js<document.querySelector("tbody").innerHTML="#(tableContent)#">
	q
	
	
WriteTr(id,code,name,dateFormat,region,highlight)	; Create html rows for table
	#import MX
	d INIT1^CSP999
	s tr="<tr key='"_id_"'"
	if (highlight) s tr=tr_" class='highlight'"
	s tr=tr_">"
	s tr=tr_"<td class='id'>"_id_"</td>\n"
	s tr=tr_"<td class='code'>"_code_"</td>\n"
	s tr=tr_"<td class='name'>"_name_"</td>\n"
	s tr=tr_"<td class='date-format'>"_$s(dateFormat=1:"mm/dd/yyyy",dateFormat=4:"dd/mm/yyyy",1:"dd/mm/yyyy")_"</td>\n"
	s tr=tr_"<td class='region'>"_region_"</td>\n"
	s tr=tr_"<td class='actions'><img class='edit-icon' src='./assets/images/edit.png' alt='Edit' onclick='editRow(event)'> <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)'></td>\n</tr>"
	q tr
.
.
SaveUpdateCountry	; Update country
	#import MX
	d INIT1^CSP999
	&sql(SELECT ID INTO :test FROM Country WHERE Code=:code AND ISNULL(DeletedDate,'')='')
	if (test'="")&(test'=id){
		&js<alert("The data added is already existed in the database");dataExist=true;>
		q
	}
	s date=$ZDATETIME($h,3)
	s dateFormat = $s(dateFormat="mm/dd/yyyy":1,dateFormat="dd/mm/yyyy":4,1:1)
	if (id=""){
		&sql(INSERT INTO Country (Code,Name,DateFormat,Region,CreatedDate,ModifiedDate) VALUES (:code,:name,:dateFormat,:region,:date,:date))
	}
	else{
		&sql(UPDATE Country SET Code=:code,Name=:name,DateFormat=:dateFormat,Region=:region,ModifiedDate=:date WHERE ID=:id)
	}
	if (SQLCODE=0){
		&sql(SELECT ID INTO :id FROM Country WHERE Name=:name AND Code=:code AND ISNULL(DeletedDate,'')='')
		s date=$ZDATETIME($h,3)
		&js<
			currentTr.querySelector(".id").innerHTML = #(id)#;
			currentTr.setAttribute("key",#(id)#);
		>
	}
	else{
		&js<alert("Some errors occured during the saving process")>
	}
	q
.
DeleteCountry
	#import MX
	d INIT1^CSP999
	s date=$ZDATETIME($h,3)
	&sql(UPDATE Country SET DeletedDate=:date WHERE ID=:id)
	q	
 	
SearchData	; Featch data for suggestions
	#import MX
	d INIT1^CSP999
	//Search Code
	&sql(DECLARE CS1 CURSOR FOR
		SELECT ID,Code,Name,Region
		INTO :id,:code,:name,:region
		FROM Country
		WHERE LOWER(Code)[LOWER(:searchVal)
		AND ISNULL(DeletedDate,'')=''
	)
	//Search Name
	&sql(DECLARE CS2 CURSOR FOR
		SELECT ID,Code,Name,Region
		INTO :id,:code,:name,:region
		FROM Country
		WHERE LOWER(Name)[LOWER(:searchVal)
		AND ISNULL(DeletedDate,'')=''
	)
	
	//Search DateFormat
	&sql(DECLARE CS3 CURSOR FOR
		SELECT ID,Code,Name,Region
		INTO :id,:code,:name,:region
		FROM Country
		WHERE DateFormat=:searchVal
		AND ISNULL(DeletedDate,'')=''
	)
		
	//Search Region
	&sql(DECLARE CS4 CURSOR FOR
		SELECT ID,Code,Name,Region
		INTO :id,:code,:name,:region
		FROM Country
		WHERE LOWER(Region)[LOWER(:searchVal)
		AND ISNULL(DeletedDate,'')=''
	)
	// set Globals
	d SearchCode
	d SearchName
	d SearchDateFormat
	d SearchRegion
	q
	
SearchCode
	&sql(OPEN CS1)
	&sql(FETCH CS1)
	WHILE SQLCODE=0{
		s ^SearchCode(code,id)=""
		s ^SearchName(name,id)=""
		s ^SearchRegion(region,id)=""
		s ^SearchData(code) = "Code:"_id
		&sql(FETCH CS1)
	}
	&sql(CLOSE CS1)
	q
	
.
SearchName
	&sql(OPEN CS2)
	&sql(FETCH CS2)
	WHILE SQLCODE=0{
		s ^SearchCode(code,id)=""
		s ^SearchName(name,id)=""
		s ^SearchRegion(region,id)=""
		s ^SearchData(name) = "Name:"_id
		&sql(FETCH CS2)
	}
	&sql(CLOSE CS2)
	q
	
SearchDateFormat
	s tempSearchVal = searchVal
	s pos = $FIND("dd/mm/yyyy",tempSearchVal)
	if (pos'=0){
		s ^SearchData("dd/mm/yyyy") = "DateFormat:"_4
		s searchVal = 4
		&sql(OPEN CS3)
		&sql(FETCH CS3)
		WHILE SQLCODE=0{
			s ^SearchCode(code,id)=""
			s ^SearchName(name,id)=""
			s ^SearchRegion(region,id)=""
			&sql(FETCH CS3)
		}
		&sql(CLOSE CS3)
	}
	s pos = $FIND("mm/dd/yyyy",tempSearchVal)
	if (pos'=0){
		s ^SearchData("mm/dd/yyyy") = "DateFormat:"_1
		s searchVal = 1
		&sql(OPEN CS3)
		&sql(FETCH CS3)
		WHILE SQLCODE=0{
			s ^SearchCode(code,id)=""
			s ^SearchName(name,id)=""
			s ^SearchRegion(region,id)=""
			&sql(FETCH CS3)
		}
		&sql(CLOSE CS3)
	}
	q
	
SearchRegion
	&sql(OPEN CS4)
	&sql(FETCH CS4)
	WHILE SQLCODE=0{
		s ^SearchCode(code,id)=""
		s ^SearchName(name,id)=""
		s ^SearchRegion(region,id)=""
		s ^SearchData(region) = "Region:"_id
		&sql(FETCH CS4)
	}
	&sql(CLOSE CS4)
	q
		
	
LoadSearchSuggestions		;load data for suggestion dropdown
	#import MX
	d INIT1^CSP999
	s searchContent=""
	s suggestion=$ORDER(^SearchData(""))
   	WHILE (suggestion'="") {
		s searchContent = searchContent_"<li value='"_^SearchData(suggestion)_"' onclick='jLoadSearchData(event)'>"_suggestion_"</li>"
		s suggestion=$ORDER(^SearchData(suggestion))
	}
	&js<document.querySelector(".search-data ul").innerHTML="#(searchContent)#">
	q
	
LoadSearchResults		// Load result in table	
	#import MX
	d INIT1^CSP999
	s tableContent=""
	s sortName=""
	if (orderCol=1){
		s sortName=$ORDER(^SearchCode(""))
	}
	elseif (orderCol=2){
		s sortName=$ORDER(^SearchCode(""),-1)
	}
	elseif (orderCol=3){
		s sortName=$ORDER(^SearchName(""))
	}
	elseif (orderCol=4){
		s sortName=$ORDER(^SearchName(""),-1)
	}
	elseif (orderCol=5){
		s sortName=$ORDER(^SearchRegion(""))
	}
	elseif (orderCol=6){
		s sortName=$ORDER(^SearchRegion(""),-1)
	}
	if (sortName=""){
		&js<alert("No results Found")>
		q
	}
   	WHILE (sortName'="") {
	   	if (orderCol=1)!(orderCol=2){
			s id=$ORDER(^SearchCode(sortName,""))
	   	}
	   	elseif (orderCol=3)!(orderCol=4){
			s id=$ORDER(^SearchName(sortName,""))
	   	}
	   	else{
		   	s id=$ORDER(^SearchRegion(sortName,""))
	   	}
	   	WHILE (id'=""){
			&sql(
				SELECT Code,Name,DateFormat,Region
				INTO :code,:name,:dateFormat,:region
				FROM Country
				WHERE ID=:id
			)
			s tableContent = tableContent_$$WriteTr(id,code,name,dateFormat,region,0)
			if (orderCol=1)!(orderCol=2){
				s id=$ORDER(^SearchCode(sortName,id))
	   		}
	   		elseif (orderCol=3)!(orderCol=4){
				s id=$ORDER(^SearchCode(sortName,id))
	   		}
	   		else{
		   		s id=$ORDER(^SearchRegion(sortName,id))
	   		}
	   	}
		if (orderCol=1){
			s sortName=$ORDER(^SearchCode(sortName))
		}
		elseif (orderCol=2){
			s sortName=$ORDER(^SearchCode(sortName),-1)
		}
		elseif (orderCol=3){
			s sortName=$ORDER(^SearchName(sortName))
		}
		elseif (orderCol=4){
			s sortName=$ORDER(^SearchName(sortName),-1)
		}
		elseif (orderCol=5){
			s sortName=$ORDER(^SearchRegion(sortName))
		}
		elseif (orderCol=6){
			s sortName=$ORDER(^SearchRegion(sortName),-1)
		}
	}
	&js<document.querySelector("tbody").innerHTML="#(tableContent)#">
	q
.
LoadResultById
	#import MX
	d INIT1^CSP999
	s tableContent=""
	&sql(SELECT Code,Name,DateFormat,Region
	INTO :code,:name,:dateFormat,:region
	FROM Country
	WHERE id=:id)
	s tableContent=$$WriteTr(id,code,name,dateFormat,region,0)
	&js<document.querySelector("tbody").innerHTML="#(tableContent)#">
	q

cDiagnosticCategory^MAC^^67291,18226.711554^0
cDiagnosticCategory
.
ApprovalInitMe
	#import MX
	d INIT1^CSP999
	d LoadUnapprovedCategories(1)
	q
LoadUnapprovedCategories(orderCol)	; Fetch data and pop table, Default sorting(1) Name ASC
	#import MX
	d INIT1^CSP999
	n id,name,jxName
	s totalcount=0
	//Search for records that is approved since Last View
	&sql(DECLARE CU0 CURSOR FOR
		SELECT ID,Name,ResultType
		INTO :id,:category,:jxCategory
		FROM DiagnosticType
		WHERE (ApprovedDate IS NULL
		OR ModifiedDate>ApprovedDate)
		AND DeletedDate IS NULL
		ORDER BY 
			CASE WHEN :orderCol=1 Then Name END,
			CASE WHEN :orderCol=2 Then Name END DESC,
			CASE WHEN :orderCol=3 Then ResultType END,
			CASE WHEN :orderCol=3 Then ResultType END DESC
			
	)
	s tbodyContent = ""
	&sql(OPEN CU0)
	&sql(FETCH CU0)
	if SQLCODE=100{
		&js<
		document.querySelector("table").remove();
		document.querySelector(".no-data").style.display="block";
		document.querySelector(".table-border").style.opacity=0;
		>
		q
	}
	WHILE SQLCODE=0{
		s tbodyContent = tbodyContent_$$WriteTr("unapproved",id,category,jxCategory,0,0)
		s totalcount=totalcount+1
		&sql(FETCH CU0)
	}
	&sql(CLOSE CU0)
	&js<
	document.querySelector("tbody").innerHTML="#(tbodyContent)#";
	document.getElementById("TotalCount").innerHTML="";
	setTableBorderPos();>
	i totalcount>0 &js<document.getElementById("TotalCount").innerHTML="&nbsp;(#(totalcount)# records)";>
	q
LoadJxCategories
	#import MX
	d INIT1^CSP999
	&sql(DECLARE CS4 CURSOR FOR
		SELECT DISTINCT BY(ResultType) ID,%EXACT(ResultType) 
		INTO :r1,:r2
		FROM MX.DiagnosticType
		WHERE ResultType[:d1
		ORDER BY ResultType
	)
	s JXCategories= ""
	&sql(OPEN CS4)
	&sql(FETCH CS4)
	WHILE SQLCODE=0{
		s JXCategories=JXCategories_"<li value='"_r1_"' onclick='changeCategory(event)'>"_r2_"</li>"
		&sql(FETCH CS4)	
	}
	&sql(CLOSE CS4)
	&js<document.querySelector(".category ul").innerHTML = "#(JXCategories)#">
	q		
	
SaveUpdateCategory
	#import MX
	d INIT1^CSP999
	; strip double spaces
	s name=$replace(d1,"  "," "),jxName=$replace(d2,"  "," ") ;category and jxcategory
	; strip trailing spaces
	i $e(name,$l(name))=" " s name=$e(name,1,$l(name)-1)
	i $e(jxName,$l(jxName))=" " s jxName=$e(jxName,1,$l(jxName)-1)
	; leading spaces
	i $e(name,1,1)=" " s name=$e(name,2,999)	
	i $e(jxName,1,1)=" " s jxName=$e(jxName,2,999)
	; tab
	s name=$replace(name,$c(9),"")
	s jxName=$replace(jxName,$c(9),"")
	; end strip
	s test=""
	&sql(SELECT ID INTO :test FROM DiagnosticType WHERE Name=:name AND ResultType=:jxName AND ISNULL(DeletedDate,'')='')
	if (test'="")&(test'=id){
		&js<alert("The data already exists in the database");dataExist=true;>
		q
	}
	s date=$ZDATETIME($h,3)
	if (id=""){
		&sql(INSERT INTO DiagnosticType (Name,ResultType,CreatedDate,ModifiedDate) VALUES (:name,:jxName,:date,:date))
	}
	else{
		&sql(UPDATE DiagnosticType SET Name=:name,ResultType=:jxName,ModifiedDate=:date WHERE ID=:id)
	}
	if (SQLCODE=0){
		&sql(SELECT ID INTO :id FROM DiagnosticType WHERE Name=:name AND ResultType=:jxName AND ISNULL(DeletedDate,'')='')
		s date=$ZDATETIME($h,3)
		&js<
			currentTr.querySelector(".id").innerHTML = #(id)#;
			currentTr.setAttribute("key",#(id)#);
		>
		if (UserID=3)!(UserID=12){
			&sql(UPDATE DiagnosticType SET ApprovedDate=:date WHERE ID=:id)
		}
		else{
			&js<
				currentTr.querySelector(".id").innerHTML="<img src='./assets/images/Pending.png' alt='Pending' title='Pending approval'>";
			>
		}
	}
	else{
		&js<alert("Some errors occured during the saving process")>
	}
	q	
.
ApproveCategory
	#import MX
	d INIT1^CSP999
	s date = $zdatetime($h,3)
	&sql(UPDATE DiagnosticType SET ApprovedDate=:date WHERE ID=:id)
	if (SQLCODE=0){
		&js<removePopup1();openPopup2();>
	}
	else{
		&js<alert("Some error occured while approving entry")>
	}
	q
.
RejectCategory
	#import MX
	d INIT1^CSP999
	s date = $zdatetime($h,3)
	&sql(UPDATE DiagnosticType SET DeletedDate=:date WHERE ID=:id)
	if (SQLCODE=0){
		&js<removePopup3();openPopup4();>
	}
	else{
		&js<alert("Some error occured while rejecting entry")>
	}
	q		
	
	
	//normal	
	
PopTab1		; Pop table with selected character, Sorted with name on start('All')
	#import MX
	d INIT1^CSP999
	i d1="0" g PopTab1A
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID,Name,ResultType
		INTO :r1,:r2,:r3
		FROM DiagnosticType
		WHERE Name %STARTSWITH (:d1) AND ISNULL(DeletedDate,'')=''
		ORDER BY 2
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	s row=1
	WHILE SQLCODE=0{
		s row=row+1
		&js<document.getElementById("Tab1").insertRow(),
			document.getElementById("Tab1").rows[#(row)#].insertCell(0),
			document.getElementById("Tab1").rows[#(row)#].insertCell(1),
			document.getElementById("Tab1").rows[#(row)#].insertCell(2),
			document.getElementById("Tab1").rows[#(row)#].insertCell(3),
			document.getElementById("Tab1").rows[#(row)#].cells[0].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r1)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[1].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r2)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[2].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r3)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[3].innerHTML="<img style='cursor:pointer;height:15px' onclick='jDeleteMe(#(r1)#)' src='images/delete.gif'>"
		>
		&sql(FETCH C1)	
	}
	&sql(CLOSE C1)
	q
	
PopTab1A 	; Pop table data that starts with a number
	&sql(DECLARE C1A CURSOR FOR
		SELECT ID,Name,ResultType
		INTO :r1,:r2,:r3
		FROM DiagnosticType
		WHERE ISNULL(DeletedDate,'')='' AND Name BETWEEN 0 AND 9
		ORDER BY 2
	)
	&sql(OPEN C1A)
	&sql(FETCH C1A)
	s row=1
	WHILE SQLCODE=0{
		s row=row+1
		&js<document.getElementById("Tab1").insertRow(),
			document.getElementById("Tab1").rows[#(row)#].insertCell(0),
			document.getElementById("Tab1").rows[#(row)#].insertCell(1),
			document.getElementById("Tab1").rows[#(row)#].insertCell(2),
			document.getElementById("Tab1").rows[#(row)#].insertCell(3),
			document.getElementById("Tab1").rows[#(row)#].cells[0].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r1)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[1].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r2)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[2].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r3)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[3].innerHTML="<img style='cursor:pointer;height:15px' onclick='jDeleteMe(#(r1)#)' src='images/delete.gif'>"
		>
		&sql(FETCH C1A)	
	}
	&sql(CLOSE C1A)
	q
	
PopFields	; Copy values to input boxes when click on a row
	#import MX
	d INIT1^CSP999
	&sql(SELECT Name,ResultType
		INTO :r1,:r2
		FROM DiagnosticType
		WHERE ID=:d1
	)
	&js<T1.value="#(r1)#",T2.value="#(r2)#">
	q
DeleteMe	; Delete
	#import MX
	d INIT1^CSP999
	 &sql(UPDATE DiagnosticType SET DeletedDate=:dt WHERE ID=:id)
	q
SaveMe		;Update
	#import MX
	d INIT1^CSP999
	s dt=$zdatetime($h,3)
	;s d1=$replace(d1,"(",""),d1=$replace(d1,")","")
	;f i=1:1:2 s @("d"_i)=$zconvert(@("d"_i),"W"),@("d"_i)=$replace(@("d"_i),"(",""),@("d"_i)=$replace(@("d"_i),")","")
	s id="" &sql(SELECT ID INTO :id FROM DiagnosticType WHERE Name=:d1)
	i id="" &sql(INSERT INTO DiagnosticType (Name,ResultType,CreatedDate) VALUES (:d1,:d2,:dt))
	i id'="" &sql(UPDATE DiagnosticType SET Name=:d1,ResultType=:d2,ModifiedDate=:dt WHERE ID=:id)
	q
.
.
WriteTr(d1,id,category,saveCategory,highlight,pending)
	;q ""
	s tr = "<tr key='"_id_"'"
	if (highlight) s tr = tr_" class='highlight'"
	if (pending) s tr = tr_" class='pending'"
	s tr = tr_">\n<td class='id'"
	if (pending){
		s tr = tr_"><img src='./assets/images/Pending.png' alt='Pending' title='Pending approval'></td>\n"
	}
	else{ 
		s tr = tr_">"_id_"</td>\n"
	}
    s tr = tr_"<td class='category'>"_category_"</td>\n"
    s tr = tr_"<td class='save-category'>"_saveCategory_"</td>\n"
    s tr = tr_"<td class='actions"
    if (d1="deleted") s tr = tr_" hidden"
    if (d1="unapproved"){
	    s tr = tr_"'><img class='edit-icon' src='./assets/images/edit.png' alt='Edit' onclick='editRow(event)'><img src='./assets/images/true.png' alt='True' onclick='approveRow(event)'><img src='./assets/images/false.png' alt='False' onclick='rejectRow(event)'></td>\n</tr>"
	}
	else{
		s tr = tr_"'><img class='edit-icon' src='./assets/images/edit.png' alt='Edit' onclick='editRow(event)'> <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)'></td>\n</tr>"
	}
	q tr

cDiagnosticTest^MAC^^67290,18082.3016393^0
cDiagnosticTest
InitMe
	#import MX
	d INIT1^CSP999
	i $g(UserID)="" &js<window.open('cLockDown.csp','_self')>
	s lastViewDate = $select($g(^LastView("DataDictionary",UserID))="":"2023-03-01 00:00:01",1:$zdatetime($g(^LastView("DataDictionary",UserID)),3))
	s count=0
	&sql(SELECT Count(ID) INTO :count FROM DiagnosticTest WHERE ISNULL(DeletedDate,'')='')
	&js<lastViewDate="#(lastViewDate)#"; document.getElementById('BBCount').innerHTML = "("+"#(count)#"+")";>
	d LoadDiagnosticTests^cDiagnosticTest("",1,lastViewDate)
	d LoadLanguages
	s ^LastView("DataDictionary",UserID)=$h
	q
.
LoadLanguages		; Fetch  language and inject into js
	#import MX
	d INIT1^CSP999
	&sql(DECLARE CL2 CURSOR FOR
		SELECT DISTINCT %EXACT(Name)
		INTO :lang
		FROM "Language"
		ORDER BY Name
	)
	s count=1
	s langContent = ""
	&sql(OPEN CL2)
	&sql(FETCH CL2)
	WHILE SQLCODE=0{
		s langContent = langContent_"<div class='item'>\n"
        s langContent = langContent_"<div class='round'>\n"
        s langContent = langContent_"<input name='language' id='LC"_count_"' type='checkbox' value='"_lang_"'>\n"
        s langContent = langContent_"<label for='LC"_count_"'></label>\n"
        s langContent = langContent_"</div>\n"
        s langContent = langContent_"<p>"_lang_"</p>\n"
        s langContent = langContent_"</div>\n"
        &js<langArr.push("#(lang)#")>
        s count=count+1
		&sql(FETCH CL2)
	}
	&sql(CLOSE CL2)
	s langContent = langContent_"<button onclick='closeLanguageSelect()'>Confirm</button>"
	&js<document.querySelector(".language-data .collapse").innerHTML = "#(langContent)#">
    q   
    	
LoadDiagnosticTests(d1,orderCol,lastViewDate)	; Fetch data and pop table
	#import MX
	d INIT1^CSP999
	n id,name,jxName,category,saveCategory,jxUnit,rule,language
	
	//Search for records that is approved since Last View
	&sql(DECLARE CA0 CURSOR FOR
		SELECT ID,Name,SIName,Type->Name,Type->ResultType,SIUnit,Rule
		INTO :id,:name,:jxName,:category,:saveCategory,:jxUnit,:rule
		FROM DiagnosticTest
		WHERE Name %STARTSWITH (:d1)
		AND ApprovedDate IS NOT NULL
		AND ApprovedDate>=:lastViewDate
		AND ModifiedDate<=ApprovedDate
		AND DeletedDate IS NULL
		ORDER BY 
			CASE WHEN :orderCol=1 Then Name END,
			CASE WHEN :orderCol=2 Then Name END DESC,
			CASE WHEN :orderCol=3 Then SIName END,
			CASE WHEN :orderCol=4 Then SIName END DESC
			
	)
	
	//Search for records alphabetically
	&sql(DECLARE CS0 CURSOR FOR
		SELECT ID,Name,SIName,Type->Name,Type->ResultType,SIUnit,Rule,ModifiedDate,ApprovedDate
		INTO :id,:name,:jxName,:category,:saveCategory,:jxUnit,:rule,:modifiedDate,:approvedDate
		FROM DiagnosticTest
		WHERE Name %STARTSWITH (:d1)
		AND (ApprovedDate<:lastViewDate OR ISNULL(ApprovedDate,'')='')
		AND DeletedDate IS NULL
		ORDER BY 
			CASE WHEN :orderCol=1 Then Name END,
			CASE WHEN :orderCol=2 Then Name END DESC,
			CASE WHEN :orderCol=3 Then SIName END,
			CASE WHEN :orderCol=4 Then SIName END DESC
			
	)
	
	
	//Search for non-alphabetic records since last view 
	&sql(DECLARE CA1 CURSOR FOR
		SELECT ID,Name,SIName,Type->Name,Type->ResultType,SIUnit,Rule
		INTO :id,:name,:jxName,:category,:saveCategory,:jxUnit,:rule
		FROM DiagnosticTest
		WHERE Name NOT BETWEEN 'A' AND 'Z' AND Name NOT BETWEEN 'a' AND 'z'
		AND ApprovedDate IS NOT NULL
		AND ApprovedDate>=:lastViewDate
		AND ModifiedDate<=ApprovedDate
		AND DeletedDate IS NULL
		ORDER BY 
			CASE WHEN :orderCol=1 Then Name END,
			CASE WHEN :orderCol=2 Then Name END DESC,
			CASE WHEN :orderCol=3 Then SIName END,
			CASE WHEN :orderCol=4 Then SIName END DESC
	)
	
	//Search for non-alphabetic records
	s (name,jxName,category,saveCategory,jxUnit,rule,modifiedDate,approvedDate)=""
	&sql(DECLARE CS1 CURSOR FOR
		SELECT ID,Name,SIName,Type->Name,Type->ResultType,SIUnit,Rule,ModifiedDate,ApprovedDate
		INTO :id,:name,:jxName,:category,:saveCategory,:jxUnit,:rule,:modifiedDate,:approvedDate
		FROM DiagnosticTest
		WHERE Name NOT BETWEEN 'A' AND 'Z' AND Name NOT BETWEEN 'a' AND 'z'
		AND (ApprovedDate<:lastViewDate OR ISNULL(ApprovedDate,'')='')
		AND DeletedDate IS NULL
		ORDER BY 
			CASE WHEN :orderCol=1 Then Name END,
			CASE WHEN :orderCol=2 Then Name END DESC,
			CASE WHEN :orderCol=3 Then SIName END,
			CASE WHEN :orderCol=4 Then SIName END DESC
	)
	
	//Search for deleted records
	&sql(DECLARE CS2 CURSOR FOR
		SELECT ID,Name,SIName,Type->Name,Type->ResultType,SIUnit,Rule
		INTO :id,:name,:jxName,:category,:saveCategory,:jxUnit,:rule
		FROM DiagnosticTest
		WHERE DeletedDate IS NOT NULL
		ORDER BY 
			CASE WHEN :orderCol=1 Then Name END,
			CASE WHEN :orderCol=2 Then Name END DESC,
			CASE WHEN :orderCol=3 Then SIName END,
			CASE WHEN :orderCol=4 Then SIName END DESC
	)
	
	//Cursor Languages
	&sql(DECLARE CL1 CURSOR FOR
		SELECT Languages->Name
		INTO :lang
		FROM DiagnosticTest_Languages
		WHERE DiagnosticTest=:id
		)
	s tbodyContent = ""
	if (d1="num"){
		&sql(OPEN CA1)
		&sql(FETCH CA1)
	}
	else{
		&sql(OPEN CA0)
		&sql(FETCH CA0)
	}
	WHILE SQLCODE=0{
		&sql(OPEN CL1)
		&sql(FETCH CL1)
		s language=lang
		WHILE SQLCODE=0{
			&sql(FETCH CL1)
			if (lang'=""){
				s language = language_", "_lang
			}
		}
		&sql(CLOSE CL1)
		s tbodyContent = tbodyContent_$$WriteTr(d1,id,name,jxName,category,saveCategory,jxUnit,language,rule,1,0)
		if (d1="num"){
			&sql(FETCH CA1)
		}
		else{
			&sql(FETCH CA0)
		}
	}
	if (d1="num"){
		&sql(CLOSE CA1)
	}
	else{
		&sql(CLOSE CA0)
	}
	
	if (d1="num"){
		&sql(OPEN CS1)
		&sql(FETCH CS1)
	}
	elseif (d1="deleted"){
		&sql(OPEN CS2)
		&sql(FETCH CS2)
	}
	else{
		&sql(OPEN CS0)
		&sql(FETCH CS0)
	}
	WHILE SQLCODE=0{
		&sql(OPEN CL1)
		&sql(FETCH CL1)
		s language=lang
		WHILE SQLCODE=0{
			&sql(FETCH CL1)
			if (lang'=""){
				s language = language_", "_lang
			}
		}
		&sql(CLOSE CL1)
.
		if (approvedDate=""){
			s tbodyContent = tbodyContent_$$WriteTr(d1,id,name,jxName,category,saveCategory,jxUnit,language,rule,0,1)
		}
		elseif ($ZDATEH(modifiedDate,8)>$ZDATEH(approvedDate,8))
		{	
			s tbodyContent = tbodyContent_$$WriteTr(d1,id,name,jxName,category,saveCategory,jxUnit,language,rule,0,1)
		}
		else{
			s tbodyContent = tbodyContent_$$WriteTr(d1,id,name,jxName,category,saveCategory,jxUnit,language,rule,0,0)
		}
		
		
		if (d1="num"){
			&sql(FETCH CS1)
		}
		elseif (d1="deleted"){
			&sql(FETCH CS2)
		}
		else{
			&sql(FETCH CS0)
		}	
	}
	if (d1="num"){
		&sql(CLOSE CS1)
	}
	elseif (d1="deleted"){
		&sql(CLOSE CS2)
	}
	else{
		&sql(CLOSE CS0)
	}
	&js<document.querySelector("tbody").innerHTML="#(tbodyContent)#">
	q
.
 ; Create HTML <tr><td>for table
WriteTr(d1,id,name,jxName,category,saveCategory,jxUnit,language,rule,highlight,pending)
	;q ""
	s tr = "<tr key='"_id_"'"
	if (highlight) s tr = tr_" class='highlight'"
	if (pending) s tr = tr_" class='pending'"
	s tr = tr_">\n<td class='id'"
	if (pending){
		s tr = tr_"><img src='./assets/images/Pending.png' alt='Pending' title='Pending approval'></td>\n"
	}
	else{ 
		s tr = tr_">"_id_"</td>\n"
	}
	s tr = tr_"<td class='diagnostic-name'>"_name_"</td>\n"
    s tr = tr_"<td class='jx-name'>"_jxName_"</td>\n"
    s tr = tr_"<td class='category'>"_category_"</td>\n"
    s tr = tr_"<td class='save-category'>"_saveCategory_"</td>\n"
    s tr = tr_"<td class='jx-unit'>"_jxUnit_"</td>\n"
    s tr = tr_"<td class='language'>"_language_"</td>\n"
    s tr = tr_"<td class='rule'>"_rule_"</td>\n"
    s tr = tr_"<td class='actions"
    if (d1="deleted") s tr = tr_" hidden"
    if (d1="unapproved"){
	    s tr = tr_"'><img class='edit-icon' src='./assets/images/edit.png' alt='Edit' onclick='editRow(event)'><img src='./assets/images/true.png' alt='True' onclick='approveRow(event)'><img src='./assets/images/false.png' alt='False' onclick='rejectRow(event)'></td>\n</tr>"
	}
	else{
		s tr = tr_"'><img class='edit-icon' src='./assets/images/edit.png' alt='Edit' onclick='editRow(event)'> <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)'></td>\n</tr>"
	}
	q tr
.
WriteUnits		; Fetch units into unit dropdown for edit/new row
	#import MX
	d INIT1^CSP999
	&sql(DECLARE CS3 CURSOR FOR
		SELECT DISTINCT BY(SIName) ID,%EXACT(SIName) 
		INTO :r1,:r2
		FROM MX.SIUnit
		ORDER BY SIName
	)
	&sql(OPEN CS3)
	&sql(FETCH CS3)
	WHILE SQLCODE=0{
		w "<li value='"_r1_"' onclick='changeUnit(event)'>"_r2_"</li>"
		&sql(FETCH CS3)	
	}
	&sql(CLOSE CS3)
	q
.
          
    
LoadCategoryNames		; Fetch data into category name dropdown for edit/new row
	#import MX
	d INIT1^CSP999
	&sql(DECLARE CS4 CURSOR FOR
		SELECT DISTINCT BY(Name) ID,%EXACT(Name) 
		INTO :r1,:r2
		FROM MX.DiagnosticType
		WHERE LOWER(Name)[LOWER(:name)
		ORDER BY Name
	)
	s categoryContent = ""
	&sql(OPEN CS4)
	&sql(FETCH CS4)
	WHILE SQLCODE=0{
		s categoryContent=categoryContent_"<li value='"_r1_"' onclick='changeCategory(event)'>"_r2_"</li>"
		&sql(FETCH CS4)	
	}
	&sql(CLOSE CS4)
	&js<document.querySelector(".category-data ul").innerHTML="#(categoryContent)#">
	q
	
LoadCategoryResultTypes		; Fetch data into Save category as dropdown for edit/new row
	&sql(DECLARE CS5 CURSOR FOR
		SELECT DISTINCT BY(ResultType) ID,%EXACT(ResultType) 
		INTO :r1,:r2
		FROM MX.DiagnosticType
		WHERE LOWER(ResultType)[LOWER(:resultType)
		ORDER BY ResultType
	)
	s categoryContent = ""
	&sql(OPEN CS5)
	&sql(FETCH CS5)
	WHILE SQLCODE=0{
		s categoryContent=categoryContent_"<li value='"_r1_"' onclick='changeSaveCategory(event)'>"_r2_"</li>"
		&sql(FETCH CS5)	
	}
	&sql(CLOSE CS5)
	&js<document.querySelector(".save-category-data ul").innerHTML="#(categoryContent)#">
	q
.
SaveUpdateDiagnosticTest		; Save/Update new/edited row
	#import MX
	d INIT1^CSP999
	; strip double spaces
	s name=$replace(name,"  "," "),jxName=$replace(jxName,"  "," "),jxUnit=$replace(jxUnit,"  "," ")
	; strip trailing spaces
	i $e(name,$l(name))=" " s name=$e(name,1,$l(name)-1)
	i $e(jxName,$l(jxName))=" " s jxName=$e(jxName,1,$l(jxName)-1)
	i $e(jxUnit,$l(jxUnit))=" " s jxUnit=$e(jxUnit,1,$l(jxUnit)-1)
	; leading spaces
	i $e(name,1,1)=" " s name=$e(name,2,999)	; Name
	i $e(jxName,1,1)=" " s jxName=$e(jxName,2,999)	; SIName
	i $e(jxUnit,1,1)=" " s jxUnit=$e(jxUnit,2,999)	; SIUnit
	; tab
	s name=$replace(name,$c(9),"")
	s jxName=$replace(jxName,$c(9),"")
	s jxUnit=$replace(jxUnit,$c(9),"")
	; end strip
	s type=""
	&sql(SELECT ID INTO :type FROM DiagnosticType WHERE Name=:category)
	s test=""
	&sql(SELECT ID INTO :test FROM DiagnosticTest WHERE Name=:name AND SIName=:jxName AND Type=:type AND SIUnit=:jxUnit AND "Language"=:language AND Rule=:rule AND ISNULL(DeletedDate,'')='')
	if (test'="")&(test'=id){
		&js<alert("The data already exists in the database");dataExist=true;>
		q
	}
	s date=$ZDATETIME($h,3)
	if (type=""){
		&sql(INSERT INTO DiagnosticType (Name,ResultType,CreatedDate) VALUES (:category,:saveCategory,:date))
		&sql(SELECT ID INTO :type FROM DiagnosticType WHERE Name=:category)
	}
	if (id=""){
		&sql(INSERT INTO DiagnosticTest (Name,SIName,Type,SIUnit,Rule,CreatedDate,ModifiedDate) VALUES (:name,:jxName,:type,:jxUnit,:rule,:date,:date))
	}
	else{
		&sql(UPDATE DiagnosticTest SET Name=:name,SIName=:jxName,Type=:type,SIUnit=:jxUnit,Rule=:rule,ModifiedDate=:date WHERE ID=:id)
	}
	if (SQLCODE=0){
		&sql(SELECT ID INTO :id FROM DiagnosticTest WHERE Name=:name AND SIName=:jxName AND Type=:type AND ISNULL(DeletedDate,'')='')
		d SaveLanguage
		s date=$ZDATETIME($h,3)
		&js<
			currentTr.querySelector(".id").innerHTML = #(id)#;
			currentTr.setAttribute("key",#(id)#);
		>
		if (UserID=3)!(UserID=2){
			&sql(UPDATE DiagnosticTest SET ApprovedDate=:date WHERE ID=:id)
		}
		else{
			&js<
				currentTr.querySelector(".id").innerHTML="<img src='./assets/images/Pending.png' alt='Pending' title='Pending approval'>";
			>
		}
	}
	else{
		&js<alert("Some errors occured during the saving process")>
	}
	q
.
SaveLanguage	; Update MX.Language according to new/edited Diagnostic Test
	&sql(DELETE From DiagnosticTest_Languages WHERE DiagnosticTest=:id)
	s objx=##class(DiagnosticTest).%OpenId(id)
	s language = $REPLACE(language,"  "," ")
	s langList = $LISTFROMSTRING(language,",")
	for j=1:1:$LISTLENGTH(langList){
		s lang = $LIST(langList,j)
		s langID=""
		&SQL(SELECT ID INTO :langID FROM "Language" WHERE Name=:lang)
		if langID=""{
			&SQL(INSERT INTO "Language" (Name) values (:lang))
			&SQL(SELECT ID INTO :langID FROM "Language" WHERE Name=:lang)
		}
		s langObj = ##class(Language).%OpenId(langID)
		d objx.Languages.SetAt(langObj,j)
		d objx.%Save()
	}
	q	
	
DeleteDiagnosticTest	; Delete record from DiagnosticTest
	#import MX
	d INIT1^CSP999
	s deletedDate = $zdatetime($h,3)
	&sql(UPDATE DiagnosticTest SET deletedDate=:deletedDate WHERE ID=:id)
	q
	
SearchSQLCursor		; Search cursor for search bar suggestions
	#import MX
	d INIT1^CSP999
	k SearchData
	k SearchName
	k SearchJXName
	//Search for similar diagnostic name
	&sql(DECLARE CS6 CURSOR FOR
		SELECT ID,Name,SIName
		INTO :id,:name,:jxName
		FROM DiagnosticTest
		WHERE LOWER(Name)[LOWER(:searchVal)
		AND DeletedDate IS NULL
	)
	//Search for similar jx name
	&sql(DECLARE CS7 CURSOR FOR
		SELECT ID,Name,SIName
		INTO :id,:name,:jxName
		FROM DiagnosticTest
		WHERE LOWER(SIName)[LOWER(:searchVal)
		AND DeletedDate IS NULL
	)
	//Search for similar category
	&sql(DECLARE CS8 CURSOR FOR
		SELECT ID,Name,SIName,Type->Name
		INTO :id,:name,:jxName,:category
		FROM DiagnosticTest
		WHERE LOWER(Type->Name)[LOWER(:searchVal)
		AND DeletedDate IS NULL
	)
	//Search for similar save category as
	&sql(DECLARE CS9 CURSOR FOR
		SELECT ID,Name,SIName,Type->ResultType
		INTO :id,:name,:jxName,:saveCategory
		FROM DiagnosticTest
		WHERE LOWER(Type->ResultType)[LOWER(:searchVal)
		AND DeletedDate IS NULL
	)
	//Search for similar jx unit
	&sql(DECLARE CS10 CURSOR FOR
		SELECT ID,Name,SIName,SIUnit
		INTO :id,:name,:jxName,:jxUnit
		FROM DiagnosticTest
		WHERE LOWER(SIUnit)[LOWER(:searchVal)
		AND DeletedDate IS NULL
	)
	//Search for similar language
	&sql(DECLARE CS11 CURSOR FOR
		SELECT DiagnosticTest,DiagnosticTest->Name,DiagnosticTest->SIName,"Languages"->Name
		INTO :id,:name,:jxName,:language
		FROM DiagnosticTest_Languages
		WHERE LOWER("Languages"->Name)[LOWER(:searchVal)
	)
	//Search for similar rule
	&sql(DECLARE CS12 CURSOR FOR
		SELECT ID,Name,SIName,Rule
		INTO :id,:name,:jxName,:rule
		FROM DiagnosticTest
		WHERE LOWER(Rule)[LOWER(:searchVal)
		AND DeletedDate IS NULL
	)
	&sql(DECLARE CS13 CURSOR FOR
		SELECT ID,Name,SIName
		INTO :id,:name,:jxName
		FROM DiagnosticTest
		WHERE LOWER(Name)[LOWER(:searchVal)
		AND ApprovedDate IS NULL 
		AND DeletedDate IS NULL
	)
	q
.
 // Fetch data for search bar suggestions
SearchDiagnosticName
	#import MX
	d INIT1^CSP999
	&sql(OPEN CS6)
	&sql(FETCH CS6)
	WHILE SQLCODE=0{
		s ^SearchName(name,id) = ""
		s ^SearchJXName(jxName,id) = ""
		s ^SearchData(name) = "Name:"_id
		&sql(FETCH CS6)
	}
	&sql(CLOSE CS6)
	q
	
SearchJXName
	#import MX
	d INIT1^CSP999
	&sql(OPEN CS7)
	&sql(FETCH CS7)
	WHILE SQLCODE=0{
		s ^SearchName(name,id) = ""
		s ^SearchJXName(jxName,id) = ""
		s ^SearchData(jxName) = "JX Name:"_id
		&sql(FETCH CS7)
	}
	&sql(CLOSE CS7)
	q
	
SearchCategory
	#import MX
	d INIT1^CSP999
	&sql(OPEN CS8)
	&sql(FETCH CS8)
	WHILE SQLCODE=0{
		s ^SearchName(name,id) = ""
		s ^SearchJXName(jxName,id) = ""
		s ^SearchData(category) = "Category:"_id
		&sql(FETCH CS8)
	}
	&sql(CLOSE CS8)
	q
	
SearchSaveCategory
	#import MX
	d INIT1^CSP999
	&sql(OPEN CS9)
	&sql(FETCH CS9)
	WHILE SQLCODE=0{
		s ^SearchName(name,id) = ""
		s ^SearchJXName(jxName,id) = ""
		s ^SearchData(saveCategory) = "Save Category:"_id
		&sql(FETCH CS9)
	}
	&sql(CLOSE CS9)
	q
	
SearchJXUnit
	#import MX
	d INIT1^CSP999
	&sql(OPEN CS10)
	&sql(FETCH CS10)
	WHILE SQLCODE=0{
		s ^SearchName(name,id) = ""
		s ^SearchJXName(jxName,id) = ""
		s ^SearchData(jxUnit) = "JX Unit:"_id
		&sql(FETCH CS10)
	}
	&sql(CLOSE CS10)
	q
	
SearchLanguage
	#import MX
	d INIT1^CSP999
	&sql(OPEN CS11)
	&sql(FETCH CS11)
	WHILE SQLCODE=0{
		s ^SearchName(name,id) = ""
		s ^SearchJXName(jxName,id) = ""
		s ^SearchData(language) = "Language:"_id
		&sql(FETCH CS11)
	}
	&sql(CLOSE CS11)
	q
	
SearchRule
	#import MX
	d INIT1^CSP999
	&sql(OPEN CS12)
	&sql(FETCH CS12)
	WHILE SQLCODE=0{
		s ^SearchName(name,id) = ""
		s ^SearchJXName(jxName,id) = ""
		s ^SearchData(rule) = "Rule:"_id
		&sql(FETCH CS12)
	}
	&sql(CLOSE CS12)
	q
.
LoadSearchSuggestions	; Load data onto search bar suggestions
	#import MX
	d INIT1^CSP999
	s searchContent=""
	s suggestion=$ORDER(^SearchData(""))
   	WHILE (suggestion'="") {
		s searchContent = searchContent_"<li value='"_^SearchData(suggestion)_"' onclick='jLoadSearchData(event)'>"_suggestion_"</li>"
		s suggestion=$ORDER(^SearchData(suggestion))
	}
	&js<document.querySelector(".search-data ul").innerHTML="#(searchContent)#">
	q
	
LoadSearchResults	; Load search result and pop table
	#import MX
	d INIT1^CSP999
	s tbodyContent=""
	s sortName=""
	if (orderCol=1){
		s sortName=$ORDER(^SearchName(""))
	}
	elseif (orderCol=2){
		s sortName=$ORDER(^SearchName(""),-1)
	}
	elseif (orderCol=3){
		s sortName=$ORDER(^SearchJXName(""))
	}
	elseif (orderCol=4){
		s sortName=$ORDER(^SearchJXName(""),-1)
	}
	if (sortName=""){
		&js<alert("No results Found")>
		q
	}
   	WHILE (sortName'="") {
	   	if (orderCol<3){
			s id=$ORDER(^SearchName(sortName,""))
	   	}
	   	else{
		   	s id=$ORDER(^SearchJXName(sortName,""))
	   	}
	   	WHILE (id'=""){
			&sql(SELECT Name,SIName,Type->Name,Type->ResultType,SIUnit,Rule,ModifiedDate,ISNULL(ApprovedDate,'NULL')
				INTO :name,:jxName,:category,:saveCategory,:jxUnit,:rule,:modifiedDate,:approvedDate
				FROM DiagnosticTest
				WHERE ID=:id
			)
			&sql(OPEN CL1)
			&sql(FETCH CL1)
			s language=lang
			WHILE SQLCODE=0{
				&sql(FETCH CL1)
				if (lang'=""){
					s language = language_", "_lang
				}
			}
			&sql(CLOSE CL1)
			if (approvedDate="NULL"){
				;s tbodyContent = tbodyContent_$$WriteTr("unapproved",id,name,jxName,category,saveCategory,jxUnit,language,rule,0,0)
				s tbodyContent = tbodyContent_$$WriteTr("",id,name,jxName,category,saveCategory,jxUnit,language,rule,0,1)
			}
			elseif ($ZDATEH(modifiedDate,8)>$ZDATEH(approvedDate,8)){
				s tbodyContent = tbodyContent_$$WriteTr("",id,name,jxName,category,saveCategory,jxUnit,language,rule,0,1)
			}
			else{
				s tbodyContent = tbodyContent_$$WriteTr("",id,name,jxName,category,saveCategory,jxUnit,language,rule,0,0)
			}
			if (orderCol<3){
				s id=$ORDER(^SearchName(sortName,id))
	   		}
	   		else{
		   		s id=$ORDER(^SearchJXName(sortName,id))
	   		}
	   	}
		if (orderCol=1){
			s sortName=$ORDER(^SearchName(sortName))
		}
		elseif (orderCol=2){
			s sortName=$ORDER(^SearchName(sortName),-1)
		}
		elseif (orderCol=3){
			s sortName=$ORDER(^SearchJXName(sortName))
		}
		elseif (orderCol=4){
			s sortName=$ORDER(^SearchJXName(sortName),-1)
		}
	}
	&js<document.querySelector("tbody").innerHTML="#(tbodyContent)#">
	q
.
	
	
	// routines for utilAutoapproveDiagnosticTest
ApprovalInitMe
	#import MX
	d INIT1^CSP999
	d LoadUnapprovedDiagnosticTests^cDiagnosticTest(1)
	d LoadLanguages
	q
		
LoadUnapprovedDiagnosticTests(orderCol)		; Fetch data and pop table
	#import MX
	d INIT1^CSP999
	n id,name,jxName,category,saveCategory,jxUnit,rule,language,totalcount
	s totalcount=0
	//Search for records that is approved since Last View
	&sql(DECLARE CU0 CURSOR FOR
		SELECT ID,Name,SIName,Type->Name,Type->ResultType,SIUnit,Rule
		INTO :id,:name,:jxName,:category,:saveCategory,:jxUnit,:rule
		FROM DiagnosticTest
		WHERE (ApprovedDate IS NULL
		OR ModifiedDate>ApprovedDate)
		AND DeletedDate IS NULL
		ORDER BY 
			CASE WHEN :orderCol=1 Then Name END,
			CASE WHEN :orderCol=2 Then Name END DESC,
			CASE WHEN :orderCol=3 Then SIName END,
			CASE WHEN :orderCol=4 Then SIName END DESC
	)
	s tbodyContent = ""
	&sql(OPEN CU0)
	&sql(FETCH CU0)
	if SQLCODE=100{
		&js<
		document.querySelector("table").remove();
		document.querySelector(".no-data").style.display="block";
		document.querySelector(".table-border").style.opacity=0;
		>
		q
	}
	WHILE SQLCODE=0{
		&sql(OPEN CL1)
		&sql(FETCH CL1)
		s language=lang
		WHILE SQLCODE=0{
			&sql(FETCH CL1)
			if (lang'=""){
				s language = language_", "_lang
			}
		}
		&sql(CLOSE CL1)
		s tbodyContent = tbodyContent_$$WriteTr("unapproved",id,name,jxName,category,saveCategory,jxUnit,language,rule,0,0)
		s totalcount=totalcount+1
		&sql(FETCH CU0)
	}
	&sql(CLOSE CU0)
	&js<
	document.querySelector("tbody").innerHTML="#(tbodyContent)#";
	document.getElementById("TotalCount").innerHTML="";
	setTableBorderPos();>
	i totalcount>0 &js<document.getElementById("TotalCount").innerHTML="&nbsp;(#(totalcount)# records)";>
	q
LoadSearchResultsApproval	; Load search result and pop table
	#import MX
	d INIT1^CSP999
	s tbodyContent=""
	s sortName=""
	if (orderCol=1){
		s sortName=$ORDER(^SearchName(""))
	}
	elseif (orderCol=2){
		s sortName=$ORDER(^SearchName(""),-1)
	}
	elseif (orderCol=3){
		s sortName=$ORDER(^SearchJXName(""))
	}
	elseif (orderCol=4){
		s sortName=$ORDER(^SearchJXName(""),-1)
	}
	if (sortName=""){
		&js<alert("No results Found")>
		q
	}
   	WHILE (sortName'="") {
	   	if (orderCol<3){
			s id=$ORDER(^SearchName(sortName,""))
	   	}
	   	else{
		   	s id=$ORDER(^SearchJXName(sortName,""))
	   	}
	   	WHILE (id'=""){
			&sql(SELECT Name,SIName,Type->Name,Type->ResultType,SIUnit,Rule,ModifiedDate,ISNULL(ApprovedDate,'NULL')
				INTO :name,:jxName,:category,:saveCategory,:jxUnit,:rule,:modifiedDate,:approvedDate
				FROM DiagnosticTest
				WHERE ID=:id
			)
			&sql(OPEN CL1)
			&sql(FETCH CL1)
			s language=lang
			WHILE SQLCODE=0{
				&sql(FETCH CL1)
				if (lang'=""){
					s language = language_", "_lang
				}
			}
			&sql(CLOSE CL1)
			/*
			if (approvedDate="NULL"){
				s tbodyContent = tbodyContent_$$WriteTr("unapproved",id,name,jxName,category,saveCategory,jxUnit,language,rule,0,0)
				
			}
			elseif ($ZDATEH(modifiedDate,8)>$ZDATEH(approvedDate,8)){
				s tbodyContent = tbodyContent_$$WriteTr("",id,name,jxName,category,saveCategory,jxUnit,language,rule,0,1)
			}
			else{
				s tbodyContent = tbodyContent_$$WriteTr("",id,name,jxName,category,saveCategory,jxUnit,language,rule,0,0)
			} */
			s tbodyContent = tbodyContent_$$WriteTr("unapproved",id,name,jxName,category,saveCategory,jxUnit,language,rule,0,0)
			if (orderCol<3){
				s id=$ORDER(^SearchName(sortName,id))
	   		}
	   		else{
		   		s id=$ORDER(^SearchJXName(sortName,id))
	   		}
	   	}
		if (orderCol=1){
			s sortName=$ORDER(^SearchName(sortName))
		}
		elseif (orderCol=2){
			s sortName=$ORDER(^SearchName(sortName),-1)
		}
		elseif (orderCol=3){
			s sortName=$ORDER(^SearchJXName(sortName))
		}
		elseif (orderCol=4){
			s sortName=$ORDER(^SearchJXName(sortName),-1)
		}
	}
	&js<document.querySelector("tbody").innerHTML="#(tbodyContent)#">
	q
SearchDiagnosticNameApproval
	#import MX
	d INIT1^CSP999
	&sql(OPEN CS13)
	&sql(FETCH CS13)
	WHILE SQLCODE=0{
		s ^SearchName(name,id) = ""
		s ^SearchJXName(jxName,id) = ""
		s ^SearchData(name) = "Name:"_id
		&sql(FETCH CS13)
	}
	&sql(CLOSE CS13)
	q
ApproveDiagnosticTest	; Approve  Diagnostic test
	#import MX
	d INIT1^CSP999
	s date = $zdatetime($h,3)
	&sql(UPDATE DiagnosticTest SET ApprovedDate=:date WHERE ID=:id)
	if (SQLCODE=0){
		&js<removePopup1();openPopup2();>
	}
	else{
		&js<alert("Some error occured while approving entry")>
	}
	q
	
RejectDiagnosticTest	; Reject Diagnostic test
	#import MX
	d INIT1^CSP999
	s date = $zdatetime($h,3)
	&sql(UPDATE DiagnosticTest SET DeletedDate=:date WHERE ID=:id)
	if (SQLCODE=0){
		&js<removePopup3();openPopup4();>
	}
	else{
		&js<alert("Some error occured while rejecting entry")>
	}
	q
	
UpdateDiagnosticTest		; not using
	#import MX
	d INIT1^CSP999
	; strip double spaces
	s name=$replace(name,"  "," "),jxName=$replace(jxName,"  "," "),type=$replace(type,"  "," "),jxUnit=$replace(jxUnit,"  "," ")
	; end strip
	s type=""
	&sql(SELECT ID INTO :type FROM DiagnosticType WHERE Name=:category)
	s test=""
	&sql(SELECT ID INTO :test FROM DiagnosticTest WHERE Name=:name AND SIName=:jxName AND Type=:type AND SIUnit=:jxUnit AND "Language"=:language AND Rule=:rule AND DeletedDate is NULL)
	if (test'="")&(id=""){
		&js<alert("The data added is already existed in the database");dataExist=true;>
		q
	}
	s date=$ZDATETIME($h,3)
	if (type=""){
		&sql(INSERT INTO DiagnosticType (Name,ResultType,CreatedDate) VALUES (:category,:saveCategory,:date))
		&sql(SELECT ID INTO :type FROM DiagnosticType WHERE Name=:category)
	}
	&sql(UPDATE DiagnosticTest SET Name=:name,SIName=:jxName,Type=:type,SIUnit=:jxUnit,Rule=:rule,ModifiedDate=:date WHERE ID=:id)
	if (SQLCODE=0){
		d SaveLanguage
	}
	else{
		&js<alert("Some errors occured during the saving process")>
	}
	
.
	
LinkDiagnosticTestToLanguage	; not using
	&sql(DECLARE CL0 CURSOR FOR
		SELECT ID,"Language"
		INTO :id,:language
		FROM DiagnosticTest
	)
	&sql(OPEN CL0)
	&sql(FETCH CL0)
	WHILE SQLCODE=0{
		s objx=##class(DiagnosticTest).%OpenId(id)
		s language = $REPLACE(language," ","")
		s langList = $LISTFROMSTRING(language,",")
		for j=1:1:$LISTLENGTH(langList){
			s lang = $LIST(langList,j)
			s langID=""
			&SQL(SELECT ID INTO :langID FROM "Language" WHERE Name=:lang)
			if langID=""{
				&SQL(INSERT INTO "Language" (Name) values (:lang))
				&SQL(SELECT ID INTO :langID FROM "Language" WHERE Name=:lang)
			}
			s langObj = ##class(Language).%OpenId(langID)
			d objx.Languages.SetAt(langObj,j)
			
		}
		d objx.%Save()
		&sql(FETCH CL0)
	}
	&sql(CLOSE CL0)
	q	
LoadTableByID	; not using
	#import MX
	d INIT1^CSP999
	&sql(SELECT Name,SIName,Type->Name,Type->ResultType,SIUnit,Rule,ModifiedDate,ISNULL(ApprovedDate,'NULL')
		INTO :name,:jxName,:category,:saveCategory,:jxUnit,:rule,:modifiedDate,:approvedDate
		FROM DiagnosticTest
		WHERE ID=:id
	)
	&sql(OPEN CL1)
	&sql(FETCH CL1)
	s language=lang
	WHILE SQLCODE=0{
		&sql(FETCH CL1)
		if (lang'=""){
			s language = language_", "_lang
		}
	}
	&sql(CLOSE CL1)
	if (approvedDate="NULL"){
		s tbodyContent = $$WriteTr("",id,name,jxName,category,saveCategory,jxUnit,language,rule,0,1)
	}
	elseif ($ZDATEH(modifiedDate,8)>$ZDATEH(approvedDate,8)){
		s tbodyContent = $$WriteTr("",id,name,jxName,category,saveCategory,jxUnit,language,rule,0,1)
	}
	else{
		s tbodyContent = $$WriteTr("",id,name,jxName,category,saveCategory,jxUnit,language,rule,0,0)
	}
	&js<document.querySelector("tbody").innerHTML="#(tbodyContent)#">
	q	
		
	/*	
LoadDiagnosticTests1(d1,orderCol,lastViewDate)
	#import MX
	d INIT1^CSP999
	n id,name,jxName,category,saveCategory,jxUnit,rule,language
.
	&sql(DECLARE CA00 CURSOR FOR
		SELECT ID,Name,SIName,Type->Name,Type->ResultType,SIUnit,Rule
		INTO :id,:name,:jxName,:category,:saveCategory,:jxUnit,:rule
		FROM DiagnosticTest
		WHERE ApprovedDate IS NOT NULL
			AND ModifiedDate<=ApprovedDate
			AND DeletedDate IS NULL
		ORDER BY 
			CASE WHEN :orderCol=1 Then Name END,
			CASE WHEN :orderCol=2 Then Name END DESC,
			CASE WHEN :orderCol=3 Then SIName END,
			CASE WHEN :orderCol=4 Then SIName END DESC 	
	)	
	//Cursor Languages
	&sql(DECLARE CL11 CURSOR FOR
		SELECT Languages->Name
		INTO :lang
		FROM DiagnosticTest_Languages
		WHERE DiagnosticTest=:id
		)
	s tbodyContent = ""
	&sql(OPEN CA00)
	&sql(FETCH CA00)
	WHILE SQLCODE=0{
		&sql(OPEN CL11)
		&sql(FETCH CL11)
		s language=lang
		WHILE SQLCODE=0{
			&sql(FETCH CL11)
			if (lang'=""){
				s language = language_", "_lang
			}
		}
		&sql(CLOSE CL11)
		;&sql(FETCH CA00)
		s tbodyContent = tbodyContent_$$WriteTr(d1,id,name,jxName,category,saveCategory,jxUnit,language,rule,0,0)
		&sql(FETCH CA00)
	}
		&sql(CLOSE CA00)
	&js<document.querySelector("tbody").innerHTML="#(tbodyContent)#">
	q 
	*/

cErrorCode^MAC^^67162,7449.0938324^0
cErrorCode
PopTab1		; Fetch data from MX.ErrorCode and pop table with JS injection
	#import MX
	d INIT1^CSP999
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID,Code,Type,Name,Description,FriendlyDescription,Action,Facing,IsError
		INTO :r0,:r1,:r2,:r3,:r4,:r5,:r6,:r7,:r8
		FROM ErrorCode
		ORDER BY 2
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	s row=2
	WHILE SQLCODE=0{
		s r8=$s(r8=1:"Yes",r8=0:"No",1:"")
		&js<document.getElementById("Tab1").insertRow(),
			document.getElementById("Tab1").rows[#(row)#].insertCell(0),
			document.getElementById("Tab1").rows[#(row)#].insertCell(1),
			document.getElementById("Tab1").rows[#(row)#].insertCell(2),
			document.getElementById("Tab1").rows[#(row)#].insertCell(3),
			document.getElementById("Tab1").rows[#(row)#].insertCell(4),
			document.getElementById("Tab1").rows[#(row)#].insertCell(5),
			document.getElementById("Tab1").rows[#(row)#].insertCell(6),
			document.getElementById("Tab1").rows[#(row)#].insertCell(7),
			document.getElementById("Tab1").rows[#(row)#].insertCell(8),
			document.getElementById("Tab1").rows[#(row)#].cells[0].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r0)#)'>#(r1)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[1].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r0)#)'>#(r2)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[2].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r0)#)'>#(r3)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[3].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r0)#)'>#(r4)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[4].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r0)#)'>#(r5)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[5].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r0)#)'>#(r6)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[6].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r0)#)'>#(r7)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[7].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r0)#)'>#(r8)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[8].innerHTML="<img style='cursor:pointer;height:15px' onclick='jDeleteMe(#(r0)#)' src='images/delete.gif'>"
		>
		s row=row+1
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	q
PopFields		; Pop new input boxes with data from selected ID
	#import MX
	d INIT1^CSP999
	f i=0:1:8 s (@("r"_i))=""
	&sql(SELECT ID,Code,Type,Name,Description,FriendlyDescription,Action,Facing,IsError
		INTO :r0,:r1,:r2,:r3,:r4,:r5,:r6,:r7,:r8
		FROM ErrorCode
		WHERE ID=:d1
		)
	i r0="" q
	&js<T1.value="#(r1)#",S1.value="#(r2)#",T2.value="#(r3)#",T3.value="#(r4)#",T4.value="#(r5)#",T5.value="#(r6)#",S2.value="#(r7)#",S3.value="#(r8)#">
	q
	
SaveMe		; New Error code
	#import MX
	d INIT1^CSP999
	; check if exists
	s id=""
	s d1=$zconvert(d1,"U")
	&sql(SELECT ID INTO :id FROM ErrorCode WHERE Code=:d1)
	i id="" &sql(INSERT INTO ErrorCode (Code,Type,Name,Description,FriendlyDescription,Action,Facing,IsError)
		VALUES (:d1,:d2,:d3,:d4,:d5,:d6,:d7,:d8)
	)
	i id'="" &sql(UPDATE ErrorCode SET Code=:d1,Type=:d2,Name=:d3,Description=:d4,FriendlyDescription=:d5,Action=:d6,Facing=:d7,IsError=:d8 WHERE ID=:id) 
	q
DeleteMe		; Delete Error code	
	#import MX
	d INIT1^CSP999
	&sql(DELETE FROM ErrorCode WHERE ID=:d1)	
	q

cLanguage^MAC^^67160,58749.2632795^0
cLanguage	; Insert, Edit, Delete Language.cls
InitMe
	#import MX
	d INIT1^CSP999
	s lastViewDate = $s($g(^LastView("Language",UserID))="":"2023-03-01 00:00:01",1:$zdatetime($g(^LastView("Language",UserID)),3))
	&js<lastViewDate="#(lastViewDate)#";>
	d LoadLanguages("",1,lastViewDate)
	s ^LastView("Language",UserID)=$h
	q
		
	
LoadLanguages(start,orderCol,lastViewDate)		; Fecth data and Populate table
	#import MX
	d INIT1^CSP999
	&sql(DECLARE CA1 CURSOR FOR
		SELECT ID,Name 
		INTO :id,:name
		FROM "Language"
		WHERE LOWER(Name) %StartsWith LOWER(:start)
		AND ModifiedDate>=:lastViewDate
		AND ISNULL(DeletedDate,'')=''
		ORDER BY 
			CASE WHEN :orderCol=1 Then Name END,
			CASE WHEN :orderCol=2 Then Name END DESC
	)
	&sql(DECLARE CA2 CURSOR FOR
		SELECT ID,Name 
		INTO :id,:name
		FROM "Language"
		WHERE Name NOT BETWEEN 'A' AND 'Z' AND Name NOT BETWEEN 'a' AND 'z' 
		AND ModifiedDate>=:lastViewDate
		AND ISNULL(DeletedDate,'')=''
		ORDER BY 
			CASE WHEN :orderCol=1 Then Name END,
			CASE WHEN :orderCol=2 Then Name END DESC
	)
	&sql(DECLARE CL1 CURSOR FOR
		SELECT ID,Name 
		INTO :id,:name
		FROM "Language"
		WHERE LOWER(Name) %StartsWith LOWER(:start)
		AND ModifiedDate<:lastViewDate
		AND ISNULL(DeletedDate,'')=''
		ORDER BY
			CASE WHEN :orderCol=1 Then Name END,
			CASE WHEN :orderCol=2 Then Name END DESC
	)
	&sql(DECLARE CL2 CURSOR FOR
		SELECT ID,Name 
		INTO :id,:name
		FROM "Language"
		WHERE Name NOT BETWEEN 'A' AND 'Z' AND Name NOT BETWEEN 'a' AND 'z' 
		AND ModifiedDate<:lastViewDate
		AND ISNULL(DeletedDate,'')=''
		ORDER BY 
			CASE WHEN :orderCol=1 Then Name END,
			CASE WHEN :orderCol=2 Then Name END DESC
	)
	s tableContent=""
	if (start="num"){
		&sql(OPEN CA2)
		&sql(FETCH CA2)
	}
	else{
		&sql(OPEN CA1)
		&sql(FETCH CA1)
	}
	WHILE SQLCODE=0{
		s tableContent=tableContent_$$WriteTr(id,name,1)
		if (start="num"){
			&sql(FETCH CA2)
		}
		else{
			&sql(FETCH CA1)
		}
	}
	if (start="num"){
		&sql(CLOSE CA2)
	}
	else{
		&sql(CLOSE CA1)
	}
	if (start="num"){
		&sql(OPEN CL2)
		&sql(FETCH CL2)
	}
	else{
		&sql(OPEN CL1)
		&sql(FETCH CL1)
	}
	WHILE SQLCODE=0{
		s tableContent=tableContent_$$WriteTr(id,name,0)
		if (start="num"){
			&sql(FETCH CL2)
		}
		else{
			&sql(FETCH CL1)
		}
	}
	if (start="num"){
		&sql(CLOSE CL2)
	}
	else{
		&sql(CLOSE CL1)
	}
	&js<document.querySelector("tbody").innerHTML="#(tableContent)#">
	q
	
WriteTr(id,name,highlight)		; Create html <tr><td>
	#import MX
	d INIT1^CSP999
	s tr="<tr"
	if (highlight) s tr=tr_" class='highlight'"
	s tr=tr_">"
	s tr=tr_"<td class='id'>"_id_"</td>\n"
	s tr=tr_"<td class='name'>"_name_"</td>\n"
	s tr=tr_"<td class='actions'><img class='edit-icon' src='./assets/images/edit.png' alt='Edit' onclick='editRow(event)'> <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)'></td>\n</tr>"
	q tr
	
SaveUpdateLanguage		; Insert new Language and Update old Language
	#import MX
	d INIT1^CSP999
	s test=""
	&sql(SELECT ID INTO :test FROM "Language" WHERE Name=:name)
	if (test'="")&(test'=id){
		&js<alert("The data added is already existed in the database");dataExist=true;>
		q
	}
	s date=$ZDATETIME($h,3)
	if (id=""){
		//INSERT
		&sql(INSERT INTO "Language" (Name,CreatedDate,ModifiedDate) VALUES (:name,:date,:date))
	}
	else{
		//UPDATE
		&sql(UPDATE "Language" SET Name=:name,ModifiedDate=:date WHERE ID=:id)
	}
	if (SQLCODE=0){
		&sql(SELECT ID INTO :id FROM "Language" WHERE Name=:name)
		&js<currentTr.querySelector(".id").innerHTML = "#(id)#">
	}
	else{
		&js<alert("There are some errors while saving")>
	}
	q
.
DeleteLanguage		; Delete language
	#import MX
	d INIT1^CSP999
	s date=$ZDATETIME($h,3)
	&sql(UPDATE "Language" SET DeletedDate=:date WHERE ID=:id)
	q
.

cLogin^MAC^^67190,44442.8286835^0
cLogin		// Admin portal login
Validate	// User login validation	
	#import MX
	d INIT1^CSP999
	s id="", timeFrame=180
	s dt=$zdatetime($h,3)	// Set current datetime in dt
	s d1=$zconvert(d1,"l")	// Convert UserID email into lowercase
	// Set count of attempt to 5 in global
	if '$d(^cLoginAttempt(d1)) {s ^cLoginAttempt(d1)=5}
	// Check if the user account is locked before and Remove timeout if the time is passed
	i +$h>+$g(^cTimeout(d1)) k ^cTimeout(d1) 	// Cater for different day
	i $d(^cTimeout(d1)),$p($h,",",1)=$p($g(^cTimeout(d1)),",",1),($p($h,",",2)-$p($g(^cTimeout(d1)),",",2)) > 300 {k ^cTimeout(d1)} 
	// cater for re-login after timeout
	if $g(^cLoginAttempt(d1))<1,'$d(^cTimeout(d1)) {s ^cLoginAttempt(d1)=5}
	// Set global for first attempt
	if $g(^cLoginAttempt(d1))=5 s ^cFirstAtmpt(d1)=$h ;$p($h,",",2) 
.
	// Check user exists and Get user information
	&sql(SELECT ID,CompanyName,CompanyLogo,Address_City,Address_Country->Name
		INTO :id,:r1,:r2,:r3,:r4
		FROM "User" 
		WHERE UserID=:d1 AND %EXACT(Password)=:d2 AND IsNull(DeletedDate,'')='' AND IsAdmin=1)
	// Cater for incorrect credentials and user doesn't exit
	i id="" d  q
	. s ^cLoginAttempt(d1)=$g(^cLoginAttempt(d1))-1		// Reduce one valid attempt
	. &js<document.getElementById("AlertText").style.opacity=1; document.getElementById("AlertText").innerHTML="Please enter a correct user id and password.";> 
	. // Lock user account for 5 minutes(300s) if more than 5 attempts fail in 3 minutes(180s)
	. if $g(^cLoginAttempt(d1))<1,$p($h,",",1)=$p($g(^cFirstAtmpt(d1)),",",1),($p($h,",",2)-$p($g(^cFirstAtmpt(d1)),",",2))< timeFrame d
	..i '$d(^cTimeout(d1)) s ^cTimeout(d1)=$h	// Set global to lock user account
	..&js<document.getElementById("AlertText").innerHTML="Please enter a correct user id and password.<br>Too Many Attempts<br>";> 
	. s valid=0 d autoMail	// Send mail to admin
	. ;&sql(INSERT INTO MX.SysLog (DateTime,LogProcess,Name,Description,Type) VALUES (:LLog,'Login','Unsuccessful Login Attempted',:desc,1)) 
	. q:id="" 
	
	// Cater for successful login
	i '$d(^cTimeout(d1)){	
	// Log the login time in database
	s loginCount = 0
	&sql(SELECT count(*)
		INTO :loginCount
		FROM User_LastLogin
		WHERE "User"=:id)
	s user=##class(User).%OpenId(id)
	s lastLogin=$zdatetime($horolog,3)
	d user.LastLogin.SetAt(lastLogin,loginCount+1)
	d user.%Save()
	// Set session data
	s fDir="C:/InterSystems/Cache/JondaX/ClientDownload/"	; next folder should be ID from "User"
	s %session.Data("UserID")=id
	s %session.Data("CompanyName")=r1
	s %session.Data("CompanyLogo")=r2
	s %session.Data("City")=r3
	s %session.Data("Country")=r4
	s %session.Data("UserName")=d1
	s %session.Data("Dir")=fDir		//for client portal download file storage
	s %session.Data("SessionId")=%session.SessionId		s ^SessionID(id)=$g(%session.Data("SessionId"))
	// Send mail to admin
	s valid=1 d autoMail
	;&js<alert(`#(%session.Data("UserName"))#`);>
	&js<window.open('cMain.csp','_self')> ;change the landing page 
	;Set js="<script type='text/javascript' nonce='<%="_nonce _" %>'>window.open('cMain.csp','_self');</script>"
	;W js
	}
	else 
	{	// Cater for locked user
		&js<document.getElementById("AlertText").style.opacity=1;document.getElementById("AlertText").innerHTML="You have exceeded your login attempts. Try again Later.";> 
		} 
	
	q
	
autoMail  // Mailing the records of user login logs to "notifications@jonda.health"
.
	// Create message 
	if valid=1 s desc="[User ID] = "_d1_" logged into the admin system successfully. Time ["_dt_"]."
	if valid=0 s desc="[User ID] = "_d1_" failed logging into the admin system. Time ["_dt_"]."
	s EmailAddress="notifications@jonda.health"
	#include %occOptions
	#include %occStatus
	
	// Set Mailjet credentials
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	
	// Initialize the SMTP server settings for sending emails
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	
	// Create and configure the email message
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	set mail.Subject="JondaX Admin Portal Log"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	s status=mail.TextData.Write(desc)	
	s status=mail.TextData.Write($char(13,10))
	set status=mailserver.Send(mail)	// Send mail
	q	
	
	
Logout(d1)	// Called by cMain.csp(cLogout)
	// Clear globals and session.Data, redirect to cLogin.csp
	k ^cLoginAttempt(d1),^cFirstAtmpt(d1)
	k %session.Data
	&js<window.open('cLogin.csp','_self')>
	q
	
Login  ;not used
	#import MX
	d INIT1^WSP999
	s id=""
	&sql(SELECT ID,CompanyName,CompanyLogo,Address_City,Address_Country->Name
		INTO :id,:r1,:r2,:r3,:r4
		FROM "User" 
		WHERE UserID=:d1 AND %EXACT(Password)=:d2 AND IsNull(DeletedDate,'')='' AND IsAdmin=1)
		
	i id="" d  q
	. ;s LLog=$zdatetime($h,3,1),desc="An unsuccessful attempt to log into the system was detected from "_%request.CgiEnvs("REMOTE_ADDR")_". [User ID] = "_d1_", [Password] = "_d2_"."	
	. s valid=0  d autoMail
	. &js<document.getElementById("AlertText").style.opacity=1> q
	. ;&sql(INSERT INTO MX.SysLog (DateTime,LogProcess,Name,Description,Type) VALUES (:LLog,'Login','Unsuccessful Login Attempted',:desc,1)) 
	. q:id="" 
	
	
	//Added By Nyein to track Last Login date on 21st Sept, 2023
	s loginCount = 0
	&sql(SELECT count(*)
		INTO :loginCount
		FROM User_LastLogin
		WHERE "User"=:id)
	s user=##class(User).%OpenId(id)
	s lastLogin=$zdatetime($horolog,3)
	d user.LastLogin.SetAt(lastLogin,loginCount+1)
	d user.%Save()
	k user
	//
	
	s %session.Data("UserID")=id
	s %session.Data("CompanyName")=r1
	s %session.Data("CompanyLogo")=r2
	s %session.Data("City")=r3
	s %session.Data("Country")=r4
	s %session.Data("UserName")=d1
	s %session.Data("SessionId")=%session.SessionId
	s valid=1 d autoMail
	&js<window.open('cMain.csp','_self')>
	
	q
Logout1 ;not used
	k %session.Data
	&js<window.open('cLogin.csp','_self')>
	q
		

cMain^MAC^^67282,37321.6153915^0
cMain
InitMe
	#import MX
	d INIT1^CSP999		; Initialization routine - %session.Data and ^INST("ZDATE")
	s d1=%session.Data("UserID")
	
	; Set the company logo path based on session data, or use default if not specified
	s companyLogo = $s(%session.Data("CompanyLogo")'="":"./CompanyLogos/"_%session.Data("CompanyLogo"),1:"./assets/images/profileBordered.png")
	
	;The directory path for the company logo
	s dirlogo=^INST("CSPDir")_"\"_^INST("NS")_"\CompanyLogos\"_%session.Data("CompanyLogo")
	i '##class(%File).Exists(dirlogo) s companyLogo="./CompanyLogos/default.png"
	s r1="" &sql(SELECT ContactPerson INTO :r1 FROM "User" WHERE ID=:d1)
	
	; Set profile image source and welcome message using JavaScript injection
	&js<document.getElementsByClassName("profile")[0].src='#(companyLogo)#',document.getElementById("userid").innerHTML="Welcome #(r1)#">
	q
	
Logout ;not used logout^cLogin
	k %session.Data
	&js<window.open('cLogin.csp','_self')>
	q
.
LockDown	; Lock Down unauthorized access
	k %session.Data
	&js<window.open("jxLockDown.csp","_parent")>
	q
FormatNumber(num,digit) ;digit = two decimal places
	n prefix,postfix,infix,num1,num2
	s prefix="",postfix="",infix=""
	i num[":" q num
	
	; Cater for prefixs
	i num["<=" s prefix="<=",num=$replace(num,"<=",""),num=prefix_$fn(num,,digit) q num
	i num[">=" s prefix=">=",num=$replace(num,">=",""),num=prefix_$fn(num,,digit) q num
	i num["</=" s prefix="</=",num=$replace(num,"</=",""),num=prefix_$fn(num,,digit) q num
	i num[">/=" s prefix=">/=",num=$replace(num,">/=",""),num=prefix_$fn(num,,digit) q num
	
	i num["+",$f(num,"+")=2 s prefix="+",num=$replace(num,"+",""),num=prefix_$fn(num,,digit) q num
	i num["+",$f(num,"+")=$l(num)+1 s postfix="+",num=$replace(num,"+",""),num=prefix_$fn(num,,digit)_postfix q num
	
	i num["-"
	{	s pos =$f(num,"-") 
		i pos=2 {s prefix="-",num=$replace(num,"-",""),num=prefix_$fn(num,,digit) q num}
		elseif pos=($l(num)+1) {s postfix="-",num=$replace(num,"-",""),num=prefix_$fn(num,,digit)_postfix q num }
		else {s infix="-",num1=$p(num,"-",1),num2=$p(num,"-",2),num= $fn(num1,,digit)_infix_$fn(num2,,digit) q num}
	}
	; Check for prefix characters and apply formatting
	if ($EXTRACT(num)="<")!($EXTRACT(num)=">")!($EXTRACT(num,1,4)="&lt;")!($EXTRACT(num,1,4)="&gt;"){
		s fChar = $s($EXTRACT(num)="<":$EXTRACT(num),$EXTRACT(num)=">":$EXTRACT(num),1:$EXTRACT(num,1,4))
		s num = fChar_$FNUMBER($P(num,fChar,2),"",digit)		 ; Format number with prefix
	}
	elseif ($ISVALIDNUM(num)){		;check num is a number or not
		s num = $FNUMBER(num,"",digit)	; Format number if it’s a valid number
	}	
.
	q num
.
jScript
	; JavaScript functions for handling UI interactions
	w "<script type='text/javascript'>",!
	w "function openMobileNav(e){",!
	w "    let sideNav = document.getElementsByClassName('side-nav')[0];",!
	w "    sideNav.classList.add('nav-open');",!
	w "}",!
	w "function closeMobileNav(e){",!
	w "    let sideNav = document.getElementsByClassName('side-nav')[0];",!
	w "    sideNav.classList.remove('nav-open');",!
	w "}",!
	
	; Functions to toggle various collapsible menu sections
	w "function toggleCollapseSetting(e){",!
	w "    e.stopPropagation();",!
	w "    let collapse = document.getElementsByClassName('collapse')[0];",!
	w "    collapse.classList.toggle('collapse-open');",!
	w "	   checkScrollbar();",!
	w "}",!
.
	w "function toggleAdmin(e){",!
	w "    e.stopPropagation();",!
	w "    let collapse = document.getElementsByClassName('collapse admin')[0];",!
	w "    collapse.classList.toggle('admin-open');",!
	w "	   checkScrollbar();",!
	w "}",!
.
	w "function toggleReport(e){",!
	w "    e.stopPropagation();",!
	w "    let collapse = document.getElementsByClassName('collapse report')[0];",!
	w "    collapse.classList.toggle('report-open');",!
	w "	   checkScrollbar();",!
	w "}",!
	
	w "function toggleTesting(e){",!
	w "    e.stopPropagation();",!
	w "    let collapse = document.getElementsByClassName('collapse testing')[0];",!
	w "    collapse.classList.toggle('testing-open');",!
	w "	   checkScrollbar();",!
	w "}",!
	
	; Error handling function to redirect in case of server method errors
	w "function cspRunServerMethodError() {",!
    w "		window.open('cLockDown.csp','_self')",!
   	w "return;",!
	w "}",!
	
	; Function to open specific dashboard pages based on element ID
	w "function openDashboardPages(e){",!
	w "		e.stopPropagation();",!
	w "		let fileName = e.target.id;",!
	w "		window.open('cMain'+fileName+'.csp','_self');",!
    w "}",!
	w "</script>",!
	q
	
jScript2
	; JavaScript for side navigation toggle functionality
	w "<script type='text/javascript'>",!
	w "function toggleSideNav(){",!
	w "    let sideNav = document.getElementsByClassName('side-nav')[0];",!
	w "    let mainField = document.getElementsByClassName('main-field')[0];",!
	w "    if(sideNav.classList.contains('nav-close')){",!
	w "        sideNav.classList.remove('nav-close');",!
	w "        mainField.style.width='80vw';",!
	w "    }",!
	w "    else{",!
	w "        sideNav.classList.add('nav-close');",!
	w "        mainField.style.width='95vw';",!	w "    }",!
	w "}",!
	w "</script>",!
	q
LoadSideMenu
.
	q

cReviewRedact^MAC^^67242,18778.6738774^0
cReviewRedact	; For reviewer preview	; called from cReviewResultGroot.mac and trialReviewResult.mac
	; pass in Record.ID as rid
	#import MX
	n obj
	n r1
	;n r2
	n stream
	n x
	n cmd
	n dir
	n file
	n filelist
	
	; copy binary stream to c:\intersystems\cache\csp\jondax\review and convert to png & deskew
	s obj=##class(Record).%OpenId(rid)
	i obj.BinaryData.FileBinarySize()=0 &js<alert("File is 0 bytes");> q
	s filesiz=obj.BinaryData.FileBinarySize()
	s stream=##class(%Stream.FileBinary).%New()
	d ##class(%File).CreateDirectory("c:\intersystems\cache\csp\jondax\review\"_rid)
	d stream.CopyFrom(obj.BinaryData)
	s r1=obj.TempFile
	s r2=obj.fExt
	i $zconvert(r2,"l")="heic" q
	; Directory for preview file
	s %dev="c:\intersystems\cache\csp\jondax\review\"_rid_"\"_r1_"."_r2
	o %dev:"wns" u %dev
	s status=stream.OutputToDevice()	;Write output in that file
	c %dev
	
	q
	
	
	s obj=""	
	s stream=""
	i $zconvert(r2,"l")'="pdf",$zconvert(r2,"l")'="html" d IMAGE
	
	i $zconvert(r2,"l")="html" {
		s CurFile="c:\intersystems\cache\csp\jondax\review\"_rid_"\"_r1_"."_r2
		d HTML		; Generate HTML content
		
		; File Directory
		s cdir="c:\intersystems\cache\csp\jondax\review\"_rid_"\"_r1_"."_r2
		; Open file in write mode and use it
		o cdir:"WNS"
		u cdir //<span style="font-size:10pt;font-weight:bold" id="LComp"></span></td>
		s HTMLContent=$p(HTMLContent,"</td>							</tr>						</tbody></table><br>						<table",1)_"</td>							</tr>						</tbody></table><br><div align='center'><h2>LAB RESULT</h2></div>"_$p(HTMLContent,"LAB RESULT",2)
		w HTMLContent
		c cdir	; Close file
	}
	
	//TO DO REDACT HTML
	i filesiz>2000000 q		; win2pdfd does not like large PDFs... checking with win2pdfd
	i $zconvert(r2,"l")="pdf" d PDF
	q
	
IMAGE
	; Convert image into "png" and delete the image
	i r2'="png" d
	. s cmd="mogrify -format png c:\intersystems\cache\csp\jondax\review\"_rid_"\"_r1_"."_r2
	. s x=$zf(-1,cmd_" && exit")
	. d ##class(%File).Delete("c:\intersystems\cache\csp\jondax\review\"_rid_"\"_r1_"."_r2)
	. s r2="png"
	
	;deskew the "png" using ImageMagick's , applies a deskew of 40% and overwrite the original png
	s cmd="convert c:\intersystems\cache\csp\jondax\review\"_rid_"\"_r1_"."_r2_" -scale 50% c:\intersystems\cache\csp\jondax\review\"_rid_"\"_r1_"."_r2
	s x=$zf(-1,cmd_" && exit")
	s r2="png"
	; Redact the png before preview using python script
	;s cmd="c:\interSystems\cache\jondax\scripts\pyredact.py -i c:/intersystems/cache/csp/jondax/review/"_rid_"/"_r1_"."_r2_" -c 10"
	;s x=$zf(-1,cmd_" && exit")
	q
.
PDF	
	; Split PDF into per page png, redact them with python script and conbime into a pdf again
	;&js<alert("Please be patient... PDF files may take a while to redact depending on the number of pages")>
	s ext="pdf"
	; split PDF into per-page png
	s cmd="win2pdfd pdf2png ""c:\intersystems\cache\csp\jondax\review\"_rid_"\"_r1_"."_r2_""" ""c:\intersystems\cache\csp\jondax\review\"_rid_"\"_r1_".png"" 0"
	s x=$zf(-1,cmd_" && exit")
	
	d ##class(%File).Delete("c:\intersystems\cache\csp\jondax\review\"_rid_"\"_r1_".pdf")
	k filelist
	set dir = "c:\intersystems\cache\csp\jondax\review\"_rid_"\"
	set dir = ##class(%File).NormalizeDirectory(dir)
	set file=$ZSEARCH(dir_"*")
	while file'="" {
		s x=$p(file,"\",$l(file,"\")) 
		i $zconvert($p(x,".",$l(x,".")),"l")="png" d
		. s filelist(file)=""
		. ;w file,!
		. s scale=100
		. s fsize=##class(%File).GetFileSize(file)
		. i fsize>99999999 d		; 10Mb limit for AWS
		.. s scale=$p(100-(fsize/99999999*100),".",1)-1
		. s cmd="convert "_file_" -scale "_scale_"% -deskew 40% "_file
		. 
		. ;s cmd="convert """_file_""" -deskew 40% """_file_""""
		. s x=$zf(-1,cmd_" && exit")
		.
		. ; redact files
		. s xfile=$replace(file,"\","/")
		. ;s cmd="c:\InterSystems\Cache\jondax\scripts\pyredact.py -i "_xfile_" -c 10"
		. ;s x=$zf(-1,cmd_" && exit")
		. 
		. s cmd="win2pdfd.exe png2pdf "_xfile_" "_$replace(xfile,".png",".pdf")
		. s x=$zf(-1,cmd_" && exit")
		. d ##class(%File).Delete(xfile)
.
		set file=$ZSEARCH("")
	}
	s r2="pdf"
	
	; batch convert pngs to pdfs
	;s cmd="win2pdfd.exe batchconvert """_dir_""" """_dir_""" pdf"
	;s x=$zf(-1,cmd_" && exit")
.
	; combine individual pdfs to one pdf
	set file=$ZSEARCH(dir_"*")
	k filelist
	while file'="" {
		s x=$p(file,"\",$l(file,"\")) 
		i $zconvert($p(x,".",$l(x,".")),"l")="pdf" d
		. s filelist(x)=""
		set file=$ZSEARCH("")
	}
	q:'$d(filelist)
	s file1=$o(filelist(""))
	s file=file1 f i=1:1 d  q:file=""
	. s file=$o(filelist(file)) q:file=""
	. i i=1 s cmd="win2pdfd.exe append """_dir_file1_""" """_dir_file_""" """_dir_r1_".pdf"_""""
	. i i>1 s cmd="win2pdfd.exe append """_dir_r1_".pdf"" """_dir_file_""" """_dir_r1_".pdf"_""""
	. s x=$zf(-1,cmd_" && exit")
	. d ##class(%File).Delete(dir_file1),##class(%File).Delete(dir_file)
	q
.
.
HTML
	#import MX
	//close %dev
	s Q=$c(9)	; tab
	s %dev=CurFile,n=0
	o %dev:"rs"
	s Content=""
HTMLREADSTART
	; Generate HTML content
	#import MX
	u %dev r rec
	
	s Content=Content_" "_rec
	i rec["</html>" d
	. s HTMLContent=Content
	i rec["</html>" c %dev q
	g HTMLREADSTART

cReviewResultGroot^MAC^^67306,27700.0707317^0
cReviewResultGroot
InitMe
	#import MX
	d INIT1^CSP999
	// lock down
	i ($g(%session.Data("UserID"))=""){
		&js<window.open("cLockdown.csp","_self")>
		q 
	}
	// Get rid & set rid in csp
	s rid=$g(%session.Data("jxTransform","rid"))
	&js<document.getElementById("trans-id").innerHTML="Transaction ID. #(rid)#";rid=#(rid)#>
	
	// Pull data of the file & Report Date
	&sql(SELECT Profile,BucketName,fExt,TempFile,Type,ReportDate,Profile->ContactPerson,Profile->UserID
		INTO :cID,:tName,:fExt,:tmpname,:reportType,:rReportDate,:cName,:uName
	 	FROM Record 
	 	WHERE ID=:rid)
	&sql(SELECT ID,ReportDate
		INTO :rbt,:rbtReportDate
		FROM ResultBloodTest
		WHERE Record=:rid
	)
	// Set Client name, Template name,report date and report format in csp
	&js<rbt="#(rbt)#">
	if ($LENGTH(cName)=0){
		s uName=$ZCONVERT($P(uName,"@",1),"s")
		&js<document.getElementById("cName").innerHTML = "#(uName)#">
		&js<document.getElementById("cName1").innerHTML = "#(uName)#">
	}
	else{
		&js<document.getElementById("cName").innerHTML = "#(cName)#">
		&js<document.getElementById("cName1").innerHTML = "#(cName)#">
	}
	&js<document.getElementById("tName").innerHTML = "#(tName)#">
	&js<document.getElementById("tName1").innerHTML = "#(tName)#">
	
	s reportDate=""
	if (rbtReportDate'=""){
		s reportDate=$ZDate(rbtReportDate,3)
	}
	else{
		if (rReportDate'=""){
			s reportDate=$ZDate(rReportDate,3)
		}
	}
	if (reportDate'=""){
		&js<
			document.querySelector("#report-date").value=`#(reportDate)#`;
			date = new Date("#(reportDate)#");
			document.querySelector(".date-input").innerHTML=date.getDate().toString().padStart(2, '0')+"/"+(date.getMonth()+1).toString().padStart(2, '0')+"/"+date.getFullYear()+calendarText;
		>
	}
.
	if (reportType=""){
		// set Blood Test as default report type
		&js<reportType="Blood Test">
	}
	else{
		// Inject report type
		&js<reportType="#(reportType)#">
	}
	// Get roe count of textract scan and set in csp
	s path="C:\data_transform\AI\"_tmpname_".csv"
	s trc=$g(^Textract(path,"rowCount"))
	&js<document.getElementById('OCRrowCount').innerHTML = "OCR - " +`#(trc)#`+ " row(s) |";>
	
	// Check for old selection of FileRedaction in ^jxRedacted , 22Nov2024
	i $d(^jxRedacted(rid)) d
	.s jxRedacted=$g(^jxRedacted(rid)) //"Yes" or "No"
	.// Inject the selection into js
	.&js<const value = `#(jxRedacted)#`;
         document.querySelector(`input[name="redact"][value="${value}"]`).checked = true;
         >
	
	// Set ^LastView of the file
	s ^LastView("cReviewResults",UserID,rid)="cReviewResultGroot.csp"
	s ^ReviewLog("cReviewResults",UserID,rid)=$zdatetime($h,3)
	q
.
 // Poppulate the result table
 // New file -> if ^AICLAUDE exists, do WriteTableClaudeA 
 //				else pull from MX.ResultBloodTest_Tests
 // In-review -> use ^FormData, do WriteTable1a, latest updated 
WriteResults
	; Initialize variables
	#import MX
	d INIT1^CSP999
	; Lock down
	i ($g(%session.Data("UserID"))=""){
		&js<window.open("cLockdown.csp","_self")>
		q 
	}
	s rid=$g(%session.Data("jxTransform","rid"))
	&sql(SELECT ID 
		INTO :rbt
		FROM ResultBloodTest
		WHERE Record=:rid
	)
	s UserID=$g(%session.Data("UserID"))
	s Q=$c(9) ; tab
	n fname,tmp,fext
	&sql(SELECT OrgFile,TempFile,fExt INTO :fname,:tmp,:fext FROM Record WHERE ID=:rid)
	
	s fname=$replace(fname,fext,"")
.
	s c1="#405470"	; blue
	s c2="#e63876"	; pink
	s c3="#048f2a"	; green
	s row=""
	s trow=1
	n d0,tempName,tempUnit
	s d0=1,tempName="",tempUnit=""
	
	;if ($d(^FormaData(-1, rid)) = 10) {&js<"testing">  d WriteTr^martin12	q }
	if ($d(^FormData(UserID, rid)) = 10) {&js<"FormData">  d WriteTable1a	}
	elseif ($d(^AIGEMINI(rid))){&js<"GEMINI"> d TwoSets  d WriteTableGeminiA} ;Take Data from ^AIGEMINI
	else {&js<"RBT">  d WriteTableRBT }
	q
RemoveFile	
	; Remove files after producing output
	s previewFile=$g(%session.Data("jxPreview","File"))
	s tempFile=$g(%session.Data("jxTransform","TempDir"))
	if $d(%session.Data("jxTransform","OutputDir","xml/json")) d ##class(%File).Delete($g(%session.Data("jxTransform","OutputDir","xml/json")))
	d ##class(%File).Delete($g(%session.Data("jxTransform","OutputDir","HL7")))
	d ##class(%File).Delete(previewFile)
	d ##class(%File).Delete(tempFile)
	q
FileStatusChange(d1,d2,d3)
	; Set file status in MX.record, Note=d1,Status=d2,Reason=d3
	#import MX
	d INIT1^CSP999
	s rid=%session.Data("jxTransform","rid")
	; For error files
	if (d2="Failure")!(d2="In-Process"){
		&sql(UPDATE Record SET Note=:d1,Status=:d2,Reason=:d3,ReviewedDate=GETDATE() WHERE ID=:rid)
		// must add to error table based on the selection of reasion
		s errCode = "100"
		s errData = "test data"
		s errName = "test error from review"
		//The new errors are not populated yet, thus leads to '' in errCode,errData,errName
		&sql(SELECT Code,Description,Name INTO :errCode,:errData,:errName FROM ErrorCode WHERE FriendlyDescription=:d3)
		
		s dt = $zdatetime($h,3)
		&sql(SELECT BucketName,OrgFile INTO :bk,:fName FROM Record WHERE ID=:rid)
		s errData = $REPLACE(errData,"[yyyy-mm-dd hh:mm]",dt)
		s errData = $REPLACE(errData,"[filename]",fName)
		s errData = $REPLACE(errData,"[bucket]",bk)
		&sql(INSERT INTO MX.Error (Code, Data, Name, CreatedDate, Record, BucketName) 
			VALUES (:errCode, :errData, :errName, :dt, :rid, :bk))
	}
	else{
		&sql(UPDATE Record SET Note=:d1,Status=:d2,Reason=:d3 WHERE ID=:rid)
	}	
	q
	
ConvertResults	; not used
	#import MX
	d INIT1^CSP999
	&sql(SELECT SIName 
	INTO :r1
	FROM DiagnosticTest
	WHERE LOWER(Name)[LOWER(:d1)
	)
.
	s cVal = $$U2U^WSP999(r1,d2,d5,d6)   ;changed on 2024-03-26 Martin
	s lVal = $$U2U^WSP999(r1,d3,d5,d6) 
	s uVal = $$U2U^WSP999(r1,d4,d5,d6) 
	&js<unitsCal.push("#($s(cVal="":"",1:$$FormatNumber^cMain(cVal,2)))#","#($s(lVal="":"",1:$$FormatNumber^cMain(lVal,2)))#","#($s(uVal="":"",1:$$FormatNumber^cMain(uVal,2)))#")>
	q
	
ConvertNewResults
	; calculate the values 
	; d1=TransformedName, d2= initial value, d3/d4= initial l-range/u-range, d5=from-unit, d6=to-unit
	#import MX
	d INIT1^CSP999
	s rid=$g(%session.Data("jxTransform","rid"))
	&sql(SELECT BucketName INTO :bk FROM Record WHERE ID=:rid)
	&sql(SELECT DiagnosticTest 
	INTO :r1
	FROM Template
	WHERE LOWER(Name)=LOWER(:d1) AND BucketName=:bk
	)
.
	&js<console.log("INPUT:  "+`#(d1)#`+","+`#(r1)#`+","+`#(d2)#`+","+`#(d5)#`+","+`#(d6)#`)>  ;+`#(d3)#`+`#(d4)#`)>
	s cVal = $$U2U^WSP999(r1,d2,d5,d6) 
	s lVal = $$U2U^WSP999(r1,d3,d5,d6) 
	s uVal = $$U2U^WSP999(r1,d4,d5,d6) 
	if $$CheckValue^WSP999(cVal)=1 s cVal=$$FormatNumber^cMain(cVal,2)
	if $$CheckValue^WSP999(lVal)=1 s lVal=$$FormatNumber^cMain(lVal,2) 	
	if $$CheckValue^WSP999(uVal)=1 s uVal=$$FormatNumber^cMain(uVal,2)
	
	&js<console.log("OUTPUT:  "+`#(cVal)#`+","+`#(lVal)#`+","+`#(uVal)#`)>
	;&js<unitsCal.push("#($s(cVal="":"",1:$$FormatNumber^cMain(cVal,2)))#","#($s(lVal="":"",1:$$FormatNumber^cMain(lVal,2)))#","#($s(uVal="":"",1:$$FormatNumber^cMain(uVal,2)))#")>
	&js<unitsCal.push("#($s(cVal="":"",1:cVal))#","#($s(lVal="":"",1:lVal))#","#($s(uVal="":"",1:uVal))#")>
	//&js<alert("Result is "+`#(cVal)#`+"Round off "+`#(martin)#`)>	
	q
	
WriteReasons
	; Load error reasons from MX.ErrorCode
	#import MX
	d INIT1^CSP999
	&sql(DECLARE C3 CURSOR FOR
		SELECT FriendlyDescription 
		INTO :r1
		FROM ErrorCode
		WHERE IsReason=1
	)
	&sql(OPEN C3)
	&sql(FETCH C3)
	WHILE SQLCODE=0{
		w "<li onclick='selectReason(event)'>"_r1_"</li>"
		&sql(FETCH C3)
	}
	&sql(CLOSE C3)
	q
	
LoadTemplateNames
	; Load template name suggestions
	#import MX
	d INIT1^CSP999
	;&sql(SELECT Setting INTO :setting FROM "User" WHERE ID=:UserID)
	s rid=$g(%session.Data("jxTransform","rid"))
	&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	s testNames = ""
	&sql(DECLARE C4 CURSOR FOR
	SELECT DISTINCT %EXACT(name)
	INTO :r1 
	FROM Template
	WHERE LOWER(name)[LOWER(:d1)
	AND BucketName=:bk
	ORDER BY name
	)
	&sql(OPEN C4)
	&sql(FETCH C4)
	if SQLCODE=100 s testNames = "<li class='no-result'>No result found</li>"
	WHILE SQLCODE=0{
		s testNames=testNames_"<li onclick='changeTestName(event)' tabIndex='-1'>"_r1_"</li>\n"
		&sql(FETCH C4)
	}
	&sql(CLOSE C4)
	&js<document.querySelector(".testname-dropdown").firstElementChild.innerHTML = "#(testNames)#">
	q
.
BiomarkerTranslation1(name,bk) ; not used
	s tempName="",tempUnit=""
	s x=$$GetSIName^WSP999(name)
	i x'="" {
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:x AND BucketName=:bk )
		}
	q x_$c(1)_tempName_$c(1)_tempUnit
	
		
.
PopOriginal
	#import MX
	d INIT1^CSP999
	;s rid=%session.Data("ReviewResults")
	;s rid=337
	//Nyein added on 19th Sept
	s rid=%session.Data("jxTransform","rid")
	; added 10/06 - DW
	; disabled 29/6/2022 DW 
	
	d ^cReviewRedact
	s r1="",r2=""
	&sql(SELECT TempFile,fExt INTO :r1,:r2 FROM Record WHERE ID=:rid)
	;&sql(SELECT TempFile INTO :r1 FROM Record WHERE ID=:rid)
	
	s file="Review/"_rid_"/"_r1_"."_r2
	;&js<window.open("#(file)#","new")>
	;q
	s r1=""
	
	
	&sql(SELECT TempFile,fExt INTO :r1,:r2 FROM Record WHERE ID=:rid)
	&sql(SELECT TempFile INTO :r1 FROM Record WHERE ID=:rid)
	s ffile="c:\intersystems\cache\csp\review\"_rid_"\"_r1_"."_r2
	s r2=$zconvert(r2,"l")
	
	;i r2="heic"!(r2="webp")!(r2="avif")!(r2="jpg")!(r2="jpeg") d	
	i r2="heic"!(r2="webp")!(r2="avif") d
	. s cmd="mogrify -resize 50% -format png "_ffile
	. s x=$zf(-1,cmd_" && exit")
	. s r2="PNG"
	. s file="Review/"_rid_"/"_r1_"."_r2
	
	//html result
	i r2="html" d
	. s file="Review/"_rid_"/"_r1_"."_r2
	;&js<alert("#(file)#")>
	s %session.Data("ReviewResults","File")="Review/"_rid
	&js<window.open("#(file)#","_blank")>
	
	;d ##class(%File).Delete(^INST("CSPDir")_"\"_^INST("NS")_"\"_file)
	q
	
WriteResultTypes
	; Populate report types
	s rid=%session.Data("jxTransform","rid")
	&sql(SELECT Type
		INTO :reportType
	 	FROM MX.Record 
	 	WHERE ID=:rid)
	&sql(DECLARE C2 CURSOR FOR
		SELECT DISTINCT %EXACT(ResultType)
		INTO :r1
		FROM MX.DiagnosticType
		WHERE DeletedDate IS NULL
	)
	&sql(OPEN C2)
	&sql(FETCH C2)
	s num=1
	WHILE SQLCODE=0{
		w "<div class='report-item'>",!
        w "<div class='round'>",!
        w "<input autocomplete='off' name='report' id='C"_num_"' type='checkbox' value='"_r1_"'"
	 	if (reportType=r1) {  ;|| (num=1){
		 	w " checked"
	 	}
        w ">",!
        w "<label for='C"_num_"'></label>",!
        w "</div>",!
        w "<p>"_r1_"</p>",!
        w "</div>",!
        s num=num+1
        &sql(FETCH C2)
	}
	&sql(CLOSE C2)
	q	
.
DeleteReviewerFile		; Delete reviewer download file in system
	d ##class(%File).RemoveDirectoryTree($g(%session.Data("reviewerFileDir")))
	k %session.Data("reviewerFileDir"),%session.Data("FileName"),%session.Data("OutputFormat")
	q	
.
UnredactedError // Add record to MX.Error 12-Nov-2024, Martin
	
	s rid=d1
	; if the file isn't redacted
	if ^jxRedacted(rid)="No"
	{
		// Initialize necessary data in variable, pull from MX.Record
		&sql(SELECT OrgFile, BucketName INTO :fileName, :bk FROM MX.Record WHERE ID=:rid)
		s dt = $zdatetime($h, 3)
		s errCode = "JX5001" ;err code for unredacted file
		s errData = fileName_" in "_bk_" contains Personal Identifiable Information. This notification is for compliance as per our contract. The file has been processed and we will delete all records on our end as per our standard process."
		s errName =  $$GenerateErrorName^jxErrorReport(errCode)
		s errLocation = "Review Process"
		s Stack = ""
		i ($L(errData)>0){s errData = """"_errData_""""}
		
		&sql(INSERT INTO MX.Error (Code, Data, Name, Location, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :dt, :rid, :bk))
	}
	q	
	
SaveReport
	; Save report type and date when a report type is selected, js> closeReportSelect()
	#import MX
	s rid=$g(%session.Data("jxTransform","rid"))
	s sid=$g(%session.Data("SessionId"))
	i sid'="",rid="" s rid=$g(^jxTransform(sid,"cReviewResults"))
	&sql(UPDATE Record SET Type=:d1,ReportDate=Date(:d2) WHERE ID=:rid)
	&sql(UPDATE ResultBloodTest SET ReportDate=Date(:d2) WHERE ID=:rbt)
	q	
SaveReportDate ;30/10/2024 New funtion to save report date when clicking "Apply All" button
	#import MX
	&sql(UPDATE Record SET ReportDate=Date(:d1) WHERE ID=:rid)
	&sql(UPDATE ResultBloodTest SET ReportDate=Date(:d1) WHERE Record=:rid)
	q	
	
LoadJXNames(d1)	; Transformed d1(new test name) into template test name
	#import MX
	s UserID=$g(%session.Data("UserID"))
	&sql(SELECT Setting INTO :setting FROM "User" WHERE ID=:UserID)
	s rid=$g(%session.Data("jxTransform","rid"))
	&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	n tempName,tempUnit,IsMatch,ro,r1,r1a
	s testName = ""
	s c1="#405470"	; blue
	s c2="#e63876"	; pink
	s c3="#048f2a"	; green
	s cTestName=$$GetSIName^WSP999(d1)
	; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
	;if cTestName["#",r2="%" s cTestName=$p(cTestName," ",1)
	s r1a=""
	i cTestName="" {
	 	s IsMatch=0,r1a=d1
		WHILE IsMatch=0&($l(r1a)'=0){
			s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
			i r0'="" s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
		i r1a'="" d
		.&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:r1a AND BucketName=:bk)
		.i tempName'="" d
		..s testName=tempName 
		..s testName="<td class='transformed-name issue' style='color:"_c2_"' title='No match-Picking closest JX match'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" 
		.e  d 
		..s testName=r1a 
		..s testName="<td class='transformed-name' style='color:"_c1_"' title='No matching Template:Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_d1_"'></td>"
		e  d
		.s tempUnit="" s testName=d1 
		.s testName="<td class='transformed-name issue' style='color:"_c2_";' title='No matching JX Name & Template:Using original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_d1_"'></td>"
		&js<newTestname=`#(testName)#`>
	}
	i cTestName'="" {
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:cTestName AND BucketName=:bk)
		i tempName'="" d
		.;i tempName["(percent)",r2'="%" d
		..;s x1=cTestName_" #" 
		..;&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:x1 AND BucketName=:bk)
		.i $zconvert(tempName,"l")=$zconvert(d1,"l") s testName="<td class='transformed-name converted' style='color:"_c1_"' title='Converted:Same BB'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>"
		.e  s d1=cTestName s testName= "<td class='transformed-name converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>"
		e  s testName=d1  s testName="<td class='transformed-name ' style='color:"_c1_"; ' title='No matching Template- Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_d1_"'></td>"
		&js<newTestname=`#(testName)#`>
		}
	q testName
	
LoadUnitsBasedOnName	; Load unit of the transformed testname
	s units=""
	s rid=$g(%session.Data("jxTransform","rid"))
	&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	&sql(SELECT UnitName 
	INTO :r1
	FROM Template
	WHERE LOWER(Name)=LOWER(:d1) 
	AND BucketName=:bk
	) ;query is edited from "LOWER(Name)[LOWER(:d1)' to 'LOWER(Name)=LOWER(:d1)' 17/10/2024
	if (SQLCODE=0){
		s units="<li onclick='changeUnit(event)' tabindex='-1'>"_r1_"</li>\n"
	}
	if (d2="") {
		s units = units_"<li onclick='changeUnit(event)' tabindex='-1'><br></li>\n"
	}
	if (r1'=d2){
		;s units="<li onclick='changeUnit(event)' tabindex='-1'>"_r1_"</li>\n"
		s units = units_"<li onclick='changeUnit(event)' tabindex='-1'>"_d2_"</li>\n"
	}
	&js<document.querySelector(".unit-dropdown").firstElementChild.innerHTML = "#(units)#">
	
	q
unitCleanUp	; Clean up from-unit, not use
	; d1= from-unit
	n x,x1,d1x,x2
	s d1x=d1
	s rid=$g(%session.Data("jxTransform","rid"))
.
	s d1=$replace(d1," / ","/")
	s d1=$replace(d1,"|","l")
	s d1=$replace(d1," ","")
	s d1=$replace(d1,".","")
    i $e(d1,$l(d1))="_" s d1=d1_"l"  ;for "g_"
    i $e(d1,$l(d1)-1,$l(d1))="/1" s d1=$replace(d1,"/1","/l")
	s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:d1 OR SIName=:d1)
	i x="",(d1["lU")!(d1["Ul") s d1=$replace(d1,"l","I")
	i x="",d1'="" s d1=d1_"/l"	; because of g. ; commented by DW 2024-03-14 ;uncommented by Martin 2024-03-20
	s x1="" &sql(SELECT ID INTO :x1 FROM SIUnit WHERE Name=:d1 OR SIName=:d1) 
	i x1="",d1'="" s d1=$replace(d1,"/l","")
	i x'="" &sql(SELECT SIName INTO :x2 FROM SIUnit WHERE ID=:x) s d1=x2
	i x1'="" &sql(SELECT SIName INTO :x2 FROM SIUnit WHERE ID=:x1) s d1=x2
	if d1'=d1x &js<newFromUnit1= "#(d1)#">
	e  &js<newFromUnit1= "#(d1x)#">
	q	
	
Binary2file	
	; pass in Record.ID as rid
	#import MX
	n obj
	n r1
	;n r2
	n stream
	n x
	n cmd
	n dir
	n file
	n filelist
	
	; copy binary stream to c:\intersystems\cache\csp\jondax\review and convert to png & deskew
	s obj=##class(Record).%OpenId(rid)
	i obj.BinaryData.FileBinarySize()=0 w "File is 0 bytes" q
	s filesiz=obj.BinaryData.FileBinarySize()
	s stream=##class(%Stream.FileBinary).%New()
	d ##class(%File).CreateDirectory("c:\intersystems\cache\csp\jondax\review\"_rid)
	d stream.CopyFrom(obj.BinaryData)
	s r1=obj.OrgFile
	
	; Directory for preview file
	s %dev="c:\intersystems\cache\csp\jondax\review\"_rid_"\"_r1
	o %dev:"wns" u %dev
	s status=stream.OutputToDevice()	;Write output in that file
	c %dev
	q 
		
WriteTable1a
	; Populated result table using ^FormData
	; Data clean up, transform, flag errors, flag new Biomarkers, compare rows with Textract scan
	; some variables are set in WriteResults
	s row=$o(^FormData(UserID, rid,row)) g:row="" WriteTable1End
	s r0 = $g(^FormData(UserID, rid, row, "testDate"))
	s r1 = $g(^FormData(UserID, rid, row, "testName"))
	s r2 = $g(^FormData(UserID, rid, row, "testUnit"))
	s r3 = $g(^FormData(UserID, rid, row, "testValue"))	
	s r4 = $g(^FormData(UserID, rid, row, "testLoRange"))	
	s r5 = $g(^FormData(UserID, rid, row, "testHiRange"))
	s r7 = $g(^FormData(UserID, rid, row, "testComment"))
	&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	
	s r2x=r2, r3x=r3
	g:r1="" WriteTable1a
.
		i bk["INDO"{  ;!(bk["JXTesting") {
			; Use the original from GEMINI
			// treat "." as comma
			s r3=$replace(r3,".",""),r4=$replace(r4,".",""),r5=$replace(r5,".","")
			// treat commas as "."
			s r3=$replace(r3,",","."),r4=$replace(r4,",","."),r5=$replace(r5,",",".")
		}else 
		{	
			s r3=$replace(r3,",","."),r4=$replace(r4,",","."),r5=$replace(r5,",",".")
			}
	; end clean up
	w "<tr class=''>" 
	w "<td class='actions'><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)' > <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)' >  <img class='add-row-icon' src='./assets/images/row.png' alt='add row' onclick='addNewRow(event)' ></td>"
	w "<td class='date' onclick='jEditBox(event)' style='color:"_c1_"'>"_r0_"</td>"
	w "<td class='test-name' onclick='jEditBox(event)'>"_r1_"</td>"
	s x=$$GetSIName^WSP999(r1)
	; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
	if x["#",r2="%" s x=$p(x," ",1)
	
	/*&sql(select ID INTO x2 from Template where DiagnosticTest[:x_" #")
	if x2'="",r2'="%" s x=x_" #" */
	
	if $d(^FormData(UserID, rid, row, "TNameEdited")),$g(^FormData(UserID, rid, row, "TNameEdited"))'=""{
		s r1Edited=$g(^FormData(UserID, rid, row, "TNameEdited"))
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE Name=:r1Edited AND BucketName=:bk)
		if tempName'="" w "<td class='transformed-name edited' style='color:"_c1_";' title='Edited' ><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1Edited_"'></td>"
		e  w "<td class='transformed-name edited' style='color:"_c2_";'title='No matching Template-Edited'  ><input type='text' style='color:"_c2_";' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1Edited_"'></td>"
		}
	else{	//else1
	s r1a=""
	i x="" {
	 	s IsMatch=0,r1a=r1
		WHILE IsMatch=0&($l(r1a)'=0){
			s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
			i r0'="" s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
		
		i r1a'="" d
		.&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:r1a AND BucketName=:bk)
		.i tempName'="" s r1=tempName w "<td class='transformed-name issue' style='color:"_c2_"' title='No match-Picking closest JX match'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1a
		.e  w "<td class='transformed-name' style='color:"_c1_"' title='No matching Template:Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>" ;r1a
		e  s tempUnit="" w "<td class='transformed-name issue' style='color:"_c2_";' title='No matching JX Name & Template:Using original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
		
	}
	i x'="" {
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:x AND BucketName=:bk)
		i tempName'="" d
		.i tempName["(percent)",r2'="%" d
		..s x=x_" #" ;s tempName=$replace(tempName,"(percent)","(Abs)") 
		..&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:x AND BucketName=:bk)
		.i $zconvert(tempName,"l")=$zconvert(r1,"l") w "<td class='transformed-name converted' style='color:"_c1_"' title='Converted:Same BB'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>" ;r1	
		.e  s r1=x w "<td class='transformed-name converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>"
		e  w "<td class='transformed-name' style='color:"_c1_"; ' title='No matching Template- Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
		}
	} //end of 	else1
		
	w "<td class='result' onclick='jEditBox(event)'>"_r3x_"</td>"
	w "<td class='from-unit' onclick='jEditBox(event)'>"_r2_"</td>"
	if tempUnit'="" {
	s x=$$GetJXUnit^WSP999(r2)
	s r2a=tempUnit
	i x'="" s r2=x 
 
	; more clean up
		i r2="%" d
		. i $l($p(r3,".",1))>3 s r3=$replace(r3,".",""),r3=$e(r3,1,2)_"."_$e(r3,3,999)
		. i $l($p(r4,".",1))>3 s r4=$replace(r4,".",""),r4=$e(r4,1,2)_"."_$e(r4,3,999)
		. i $l($p(r5,".",1))>3 s r5=$replace(r5,".",""),r5=$e(r5,1,2)_"."_$e(r5,3,999)
		 ;end more
		; test if original unit can be converted
		s x="",x=$$U2U^WSP999(r1,r3,r2,r2a)
	
	 	s r3x=r3,r4x=r4,r5x=r5
		s r3=$$U2U^WSP999(r1,r3,r2,r2a)
		s r4=$$U2U^WSP999(r1,r4,r2,r2a)
		s r5=$$U2U^WSP999(r1,r5,r2,r2a)
.
	}else  
	 {
		 s x="ERROR Converting" s r2a=r2,r3x=r3,r4x=r4,r5x=r5  
	  	s r3=$fn(r3,,2)
		s r4=$fn(r4,,2)
		s r5=$fn(r5,,2)
	  }
.
	s r4=$g(^FormData(UserID, rid, row, "TLoRange"))
	s r5=$g(^FormData(UserID, rid, row, "THiRange"))
	s r4Org = $g(^FormData(UserID, rid, row, "testLoRange"))	
	s r5Org = $g(^FormData(UserID, rid, row, "testHiRange"))
.
	s recalc=0
	
	i $d(^FormData(UserID, rid, row, "TUnitEdited")),$g(^FormData(UserID, rid, row, "TUnitEdited"))'="" {
		s r2Edited=$g(^FormData(UserID, rid, row, "TUnitEdited"))
		s r3=$g(^FormData(UserID, rid, row, "TValue"))
		w "<td class='convert-result-unit edited' style='color:"_c1_";' title='Edited' ><div class='dropdown' style='color:"_c1_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2Edited_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>"
		w "<td class='convert-result-val edited' style='color:"_c1_"' title='Edited'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
		w "<td class='l-range' onclick='jEditBox(event)'>"_r4Org_"</td>",!  ; "_r2x_"
		w "<td class='l-result-val' style='color:"_c1_"' title='Edited'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!
		;w "<td class='l-result-unit'>"_r2a_"</td>",!
		w "<td class='u-range' onclick='jEditBox(event)'>"_r5Org_"</td>",!  ; "_r2x_"
		w "<td class='u-result-val' style='color:"_c1_"' title='Edited'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!
		;w "<td class='u-result-unit'>"_r2a_"</td>",!
		; style='display:none;'
		w "<td class='comment' ><textarea autocomplete='off' rows='5' cols='50' onkeyup=''>"_r7_"</textarea></td>",!
		w "<td class='row-num' style='display:none;'>"_row_"</td>"
		w "</tr>",!
	}
	else{
		i tempUnit="" ,x["ERROR" d
		.w "<td class='convert-result-unit' style='color:"_c1_"' title='No matching Template Unit, Using Original : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
		i tempUnit'="" ,x["ERROR" d
		.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching JX Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
		
		i tempUnit'="",x'["ERROR" d	;r2a=tempUnit, r2x=original r2(unit)
		. i (r2a="")!($zconvert(r2a,"l")=$zconvert(r2x,"l")) w "<td class='convert-result-unit converted' style='color:"_c1_"' title='Converted:Same Unit'><div class='dropdown' style='color:"_c1_";/*border-color:"_c3_"*/'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>"
		. ;s ^testing("unit",row)=r2a_", "_r2_", "_tempUnit_", "_r2x
		. e  s recalc=1 s r2=r2a w "<td class='convert-result-unit converted' style='color:"_c3_"' title='Converted'><div class='dropdown' style='color:"_c3_"' onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td></td>" 
	
		i recalc {
			;i recalc d
			;s ave=$$AveRes^WSP999(tempName,r3,r2,"") &js<alert(`#(ave)#`)>
			i r3'["ERROR"  w "<td class='convert-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"   ;_ave_"// " s ave=$$AveRes^WSP999(r1,r3,r2,"")
			i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			
			w "<td class='l-range' onclick='jEditBox(event)'>"_r4Org_"</td>",! ; "_r2x_"
			if r4["ERROR" {w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4Org_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"}
			elseif (tempUnit="" ){w "<td class='l-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			else  {w "<td class='l-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			;w "<td class='l-result-unit'>"_r2a_"</td>",!
			
			w "<td class='u-range' onclick='jEditBox(event)'>"_r5Org_"</td>",! ; "_r2x_"
			i r5["ERROR" {w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5Org_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			ELSEIF (tempUnit="") {w "<td class='u-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			else {w "<td class='u-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			;w "<td class='u-result-unit'>"_r2a_"</td>",! 
			;style='display:none;'
			w "<td class='comment' ><textarea autocomplete='off' rows='5' cols='50' onkeyup=''>"_r7_"</textarea></td>",!
			w "<td class='row-num' style='display:none;'>"_row_"</td>"
			w "</tr>",!
	
		  }else{
		
			i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			e  d
			.i tempUnit="" w "<td class='convert-result-val' style='color:"_c1_"' title='No template:Using Original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			.e  s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
.
			w "<td class='l-range' onclick='jEditBox(event)'>"_r4Org_"</td>",!
			if r4["ERROR" {w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4Org_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"}
			elseif (tempUnit="" ){w "<td class='l-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			else  {w "<td class='l-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			;w "<td class='l-result-unit'>"_r2a_"</td>",!
			
			w "<td class='u-range' onclick='jEditBox(event)'>"_r5Org_"</td>",!
			i r5["ERROR" {w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5Org_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			ELSEIF (tempUnit="") {w "<td class='u-result-val ' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			else {w "<td class='u-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			;w "<td class='u-result-unit'>"_r2a_"</td>",!
			;style='display:none;'
			w "<td class='comment' ><textarea autocomplete='off' rows='5' cols='50' onkeyup=''>"_r7_"</textarea></td>",!
			w "<td class='row-num' style='display:none;'>"_row_"</td>"
			w "</tr>",!
		}
	}  ;end of TUnitEdited else
	;u %dev w r0_Q_r1_Q_r2_Q_r3_Q_r4_Q_r5,! 
	u 0
	g WriteTable1a	
WriteTable1End
	;c %dev
	;u 0
	q
	/*
	}
	//if ($d(^FormData(UserID, rid)) = 10) { d WriteTable1a	}
	elseif ($d(^AICLAUDE(rid))){d WriteTableClaudeA} ;Take Data from ^AICLAUDE 
	else { */
WriteTableRBTx	
		&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
		 ; From ResultBloodTest_Tests for HL7,Json,xml,xlsx, or if no ^AICLAUDE , doesn't compare with textract
		 &sql(DECLARE C1 CURSOR FOR
			SELECT COUNT(element_key),element_key,Tests_TestName,Tests_SIUnit,Tests_Result,Tests_LowRange,Tests_HighRange,ResultBloodTest->ReportDate
			INTO :rowkey,:key,:r1,:r2,:r3,:r4,:r5,:r0
			FROM ResultBloodTest_Tests 
			WHERE ResultBloodTest=:rbt
		)
		&sql(OPEN C1)
		&sql(FETCH C1)
		WHILE SQLCODE=0{
WriteTable2a
			s row=key
			s r2x=r2	
			g:r1="" WriteTable2End
.
			; clean up units
			s r2=$replace(r2,"|","l")
			s r2=$replace(r2," ","")
			s r3=$replace(r3,",",".")
			i $e(r2,$l(r2)-1,$l(r2))="/1" s r2=$replace(r2,"/1","/l")
			i $e(r2,$l(r2))="_" s r2=r2_"l"
			s r2=$replace(r2," / ","/") 
			s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:r2 OR SIName=:r2)
			i x="",(r2["lU")!(r2["Ul") s r2=$replace(r2,"l","I")
			i x="",r2'="" s r2=r2_"/l"	; because of g. ; commented by DW 2024-03-14 ;uncommented by Martin 2024-03-20
			s x1="" &sql(SELECT ID INTO :x1 FROM SIUnit WHERE Name=:r2 OR SIName=:r2) 
			i x1="",r2'="" s r2=$replace(r2,"/l","")
			i r3[" " { 
				for i = 1:1:$length(r3, " ") 
				{   if $number($piece(r3, " ", i))  d
			    	.if r2="" s r2=$piece(r3, " ", i+1)
			    	.s r3= $piece(r3, " ", i)  
					}
			}
			; clean up value and range
				s r3=$replace(r3,",",".")
				s r3=$replace(r3,"*","")
				s r3=$replace(r3," ","")
				s r4=$replace(r4,",",".")
				s r4=$replace(r4," ","")
				i $p(r4,"-",1)'="",$p(r4,"-",2)'="" d	; cater for 1-3
				. s r5=$p(r4,"-",2),r4=$p(r4,"-",1)
				s r5=$replace(r5,",",".")
				s r5=$replace(r5," ","")
				i $p(r5,"-",1)'="",$p(r5,"-",2)'="" d	; cater for 1-3
				. s r4=$p(r5,"-",1),r5=$p(r5,"-",2)
				i bk["INDO" { ; !(bk["JXTesting") {
					;s ^testing("Red",row)=r2_", "_r3_", "_r4_", "_r5
					if r3[".",($zconvert(r2,"l")="/ul")!($zconvert(r2,"l")="ul/") d
					.s r3=$replace(r3,".",""),r4=$replace(r4,".",""),r5=$replace(r5,".","")
					;s ^testing("Blue",row)=r2_", "_r3_", "_r4_", "_r5
				}
			; end clean up
			;cater for "<", ">" signs column placement
			if (r4["<"),(r5="") s r5=r4 s r4=""
			if (r4=""),(r5[">") s r4=r5 s r5=""
			
			w "<tr class=''>"
			w "<td class='actions'><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)' > <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)' >  <img class='add-row-icon' src='./assets/images/row.png' alt='add row' onclick='addNewRow(event)' ></td>"
			w "<td class='date' style='color:"_c1_"'>"_r0_"</td>"
			w "<td class='test-name' onclick='jEditBox(event)'>"_r1_"</td>"
			s x=$$GetSIName^WSP999(r1)
			; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
			if x["#",r2="%" s x=$p(x," ",1)
			
			s r1a=""
			i x="" {
	 			s IsMatch=0,r1a=r1
				WHILE IsMatch=0&($l(r1a)'=0){
					s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
					i r0'="" s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
					i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
			}
		
			i r1a'="" d
			.&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:r1a AND BucketName=:bk)
			.i tempName'="" w "<td class='transformed-name issue' style='color:"_c2_"' title='No match-Picking closest JX match'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1a
			.e  w "<td class='transformed-name' style='color:"_c1_"' title='No matching Template:Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>" ;r1a
			e  s tempUnit="" w "<td class='transformed-name issue' style='color:"_c2_";' title='No matching JX Name & Template:Using original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
		
			}
			i x'="" {
				&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:x AND BucketName=:bk)
				i tempName'="" d
				.i tempName["(percent)",r2'="%" d
				..s x=x_" #" ;s tempName=$replace(tempName,"(percent)","(Abs)") 
				..&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:x AND BucketName=:bk)
				.i $zconvert(tempName,"l")=$zconvert(r1,"l") w "<td class='transformed-name converted' style='color:"_c1_"' title='Converted:Same BB'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>" ;r1	
				.e  s r1=x w "<td class='transformed-name converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>"
				e  w "<td class='transformed-name' style='color:"_c1_"; ' title='No matching Template- Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
			}	
			
			w "<td class='result' onclick='jEditBox(event)'>"_r3_"</td>"
			w "<td class='from-unit' onclick='jEditBox(event)'>"_r2_"</td>"
			if tempUnit'="" {
			s x=$$GetJXUnit^WSP999(r2)
			s r2a=tempUnit
			i x'="" s r2=x 
		 
			; more clean up
				i r2="%" d
				. i $l($p(r3,".",1))>3 s r3=$replace(r3,".",""),r3=$e(r3,1,2)_"."_$e(r3,3,999)
				. i $l($p(r4,".",1))>3 s r4=$replace(r4,".",""),r4=$e(r4,1,2)_"."_$e(r4,3,999)
				. i $l($p(r5,".",1))>3 s r5=$replace(r5,".",""),r5=$e(r5,1,2)_"."_$e(r5,3,999)
				
				; test if original unit can be converted
				s x="",x=$$U2U^WSP999(r1,r3,r2,r2a)
				
				i x["ERROR" s r2a=tempUnit 
			; end more
			d
			. s r3x=r3,r4x=r4,r5x=r5
			. s r3=$$U2U^WSP999(r1,r3,r2,r2a)
			. s r4=$$U2U^WSP999(r1,r4,r2,r2a)
			. s r5=$$U2U^WSP999(r1,r5,r2,r2a)
			}else  {
				s x="ERROR Converting" s r2a=r2,r3x=r3,r4x=r4,r5x=r5 
				s r3=$fn(r3,,2)
				s r4=$fn(r4,,2)
				s r5=$fn(r5,,2)
			 }
			
			s recalc=0
			i tempUnit="" ,x["ERROR" d
			.w "<td class='convert-result-unit' style='color:"_c1_"' title='No matching Template Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
			i tempUnit'="" ,x["ERROR" d
			.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching JX Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
			i x'["ERROR" d
			. i (r2a="")!($zconvert(r2a,"l")=$zconvert(r2,"l")) w "<td class='convert-result-unit' style='color:"_c1_"'><div class='dropdown' style='color:"_c1_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>"
			. e  s recalc=1 s r2=r2a w "<td class='convert-result-unit' style='color:"_c3_"'><div class='dropdown' style='color:"_c3_"' onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td></td>" 
.
			i recalc d
			. i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"   ;_ave_"// " s ave=$$AveRes^WSP999(r1,r3,r2,"")
			. i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			. w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_" "_r2x_"</td>",!
			. i r4'["ERROR" w "<td  class='l-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
			. i r4["ERROR" w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
			. w "<td class='l-result-unit' >"_r2a_"</td>",!
			. w "<td class='u-range' onclick='jEditBox(event)'>"_r5x_" "_r2x_"</td>",!
			. i r5'["ERROR" w "<td class='u-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"
			. i r5["ERROR" w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"
			. w "<td class='u-result-unit'>"_r2a_"</td>",!
			. ;w "<td style='color:"_c3_"'>"_$s(r4'="":r4,1:"")_"</td>"
			. ;w "<td style='color:"_c3_"'>"_$s(r5'="":r5,1:"")_"</td>"
			e  d
			. i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			. i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			. w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_" "_r2x_"</td>",!
			. i r4'["ERROR" w "<td class='l-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
			. i r4["ERROR" w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
			. w "<td class='l-result-unit'>"_r2a_"</td>",!
			. w "<td class='u-range' onclick='jEditBox(event)'>"_r5x_" "_r2x_"</td>",!
			. i r5'["ERROR" w "<td class='u-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"  //"_$s(r5'="":r5,1:"")
			. i r5["ERROR" w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"  //$s(r5'="":r5,1:"")
			. w "<td class='u-result-unit'>"_r2a_"</td>",!
			w "</tr>",!
			
WriteTable2End
			&sql(FETCH C1) 
		}
		&sql(CLOSE C1)
		q
  
TwoSets
	//Complete Reference Range
	s row=$o(^AIGEMINI(rid,row)) g:row="" TwoSetsEnd
	s r1=$g(^AIGEMINI(rid,row,"name"))
	s r2=$g(^AIGEMINI(rid,row,"unit"))
	s r3=$g(^AIGEMINI(rid,row,"value"))
	s r4=$g(^AIGEMINI(rid,row,"loRange"))
	s r5=$g(^AIGEMINI(rid,row,"hiRange"))
	if row>1 
	{	n pRow s pRow= row-1
		s pName=$g(^AIGEMINI(rid,pRow,"name"))
		if (r1=pName),(^AIGEMINI(rid,row,"row"_row)'= ^AIGEMINI(rid,pRow,"row"_pRow)) 
		{	
			i (r4="")!(r5="")
			{	;w "no RR current row",row,!
				s ^AIGEMINI(rid,row,"loRange")=^AIGEMINI(rid,pRow,"loRange")
		 		s ^AIGEMINI(rid,row,"hiRange")=^AIGEMINI(rid,pRow,"hiRange")
			}
			elseif ($g(^AIGEMINI(rid,pRow,"loRange"))="") ! ($g(^AIGEMINI(rid,pRow,"hiRange"))="") 
			{
				s ^AIGEMINI(rid,pRow,"loRange")=r4
				s ^AIGEMINI(rid,pRow,"hiRange")=r5
			}
		
		}
	}
	g TwoSets
TwoSetsEnd	
	q
	
WriteTableGeminiA
	;u 0
	;&js<console.log(`#(row)#`);>
	s row=$o(^AIGEMINI(rid,row)) g:row="" WriteTableGeminiEnd
	s r0=$g(^AIGEMINI(rid,row,"date")) 
	s r1=$g(^AIGEMINI(rid,row,"name"))
	s r2=$g(^AIGEMINI(rid,row,"unit"))
	s r3=$g(^AIGEMINI(rid,row,"value"))
	s r4=$g(^AIGEMINI(rid,row,"loRange"))
	s r5=$g(^AIGEMINI(rid,row,"hiRange"))
	s r6=$g(^AIGEMINI(rid,row,"category"))
	s r7=$g(^AIGEMINI(rid,row,"comment"))
.
	/*
	for Category
	i r6'="" 
	{	
		&sql(SELECT ID,ResultType INTO :c1,:c2 FROM DiagnosticType WHERE Lower(Name)=LOWER(:r6))
		i c1'="" s r6x=c2 s CatMatch=1
		e  s r6x="Blood Test" s CatMatch=0
		
	}else {s r6x="Blood Test" s CatMatch=0}
	*/
	
	&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	s r2x=r2,r3x=r3,r4x=r4,r5x=r5
	
	//Cater for duplicate rows, compare current row with all previous rows
	if row>1 
	{	n pRow s pRow= row-1
		s r1p=$g(^AIGEMINI(rid,pRow,"name"))
		for i=1:1:pRow
		{
			if ^AIGEMINI(rid,row,"row"_row)= ^AIGEMINI(rid,i,"row"_i) g WriteTableGeminiA
			
			}
	} 
	g:r1="" WriteTableGeminiA
	g:r3="" WriteTableGeminiA
		
	; clean up units
		s r2=$replace(r2,"|","l")
		s r2=$replace(r2," ","")
		s r2=$replace(r2,"-1","-l")
		s r2=$replace(r2,"_1","_l")
		i $e(r2,$l(r2)-1,$l(r2))="/1" s r2=$replace(r2,"/1","/l")
		i $e(r2,$l(r2))="_" s r2=r2_"l"
		s r2=$replace(r2," / ","/") 
	
	; clean up value and range
		s r3=$replace(r3,"*","")
		s r3=$replace(r3," ","")
		s r4=$replace(r4," ","")
		i $p(r4,"-",1)'="",$p(r4,"-",2)'="" d	; cater for 1-3
		. s r5=$p(r4,"-",2),r4=$p(r4,"-",1), r4x=r4,r5x=r5
		s r5=$replace(r5," ","")
		i $p(r5,"-",1)'="",$p(r5,"-",2)'="" d	; cater for 1-3
		. s r4=$p(r5,"-",1),r5=$p(r5,"-",2), r4x=r4,r5x=r5
		; For Indo clients
		i bk["INDO"{  ;!(bk["JXTesting") {
			; Use the original from GEMINI
			// treat "." as comma
			s r3=$replace(r3,".",""),r4=$replace(r4,".",""),r5=$replace(r5,".","")
			// treat commas as "."
			s r3=$replace(r3,",","."),r4=$replace(r4,",","."),r5=$replace(r5,",",".")
		}else 
		{	s r3=$replace(r3,",","."),r4=$replace(r4,",","."),r5=$replace(r5,",",".")
			}
		/* Set Result as the standard
		i bk["INDO"!(bk["4321-qa-jondaffr") {
			if r3["." d
			. s r4=$replace(r4,",","."),r5=$replace(r5,",",".")
			. s r3=$replace(r3,".",""),r4=$replace(r4,".",""),r5=$replace(r5,".","")
			if r3["," d
			. s r4=$replace(r4,".",","),r5=$replace(r5,".",",")
			.s r3=$replace(r3,",","."),r4=$replace(r4,",","."),r5=$replace(r5,",",".")
		}		
		*/
	; end clean up
	;END
	
	w "<tr class=''>" 
	w "<td class='actions'><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)' > <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)' >  <img class='add-row-icon' src='./assets/images/row.png' alt='add row' onclick='addNewRow(event)' ></td>"
	w "<td class='date' onclick='jEditBox(event)' style='color:"_c1_"'>"_r0_"</td>"
	w "<td class='test-name' onclick='jEditBox(event)'>"_r1_"</td>"
	s x=$$GetSIName^WSP999(r1)
	; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
	if x["#",r2="%" s x=$p(x," ",1)
	
	s r1a=""
	i x="" {
	 	s IsMatch=0,r1a=r1
		WHILE IsMatch=0&($l(r1a)'=0){
			s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
			i r0'=""  s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
		
		i r1a'="" d
		.;s r1ax=r1a w "<td class='test-name' onclick='jEditBox(event)'>"_r1ax_"</td>"
		.&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:r1a AND BucketName=:bk)
		.i tempName'="" s r1=tempName w "<td class='transformed-name issue' style='color:"_c2_"' title='No match-Picking closest JX match'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1a
		.e  w "<td class='transformed-name' style='color:"_c1_"' title='No matching Template:Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>" ;r1a
		e  s tempUnit="" w "<td class='transformed-name issue' style='color:"_c2_";' title='No matching JX Name & Template:Using original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
		
	}
	i x'="" {
		;w "<td class='test-name' onclick='jEditBox(event)'>"_r1_"</td>"
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:x AND BucketName=:bk)
		i tempName'="" d
		.i tempName["(percent)",r2'="%" d
		..s x=x_" #" ;s tempName=$replace(tempName,"(percent)","(Abs)") 
		..&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:x AND BucketName=:bk)
		.i $zconvert(tempName,"l")=$zconvert(r1,"l") w "<td class='transformed-name converted' style='color:"_c1_"' title='Converted:Same BB'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>" ;r1	
		.e  s r1=x w "<td class='transformed-name converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>"
		e  w "<td class='transformed-name ' style='color:"_c1_"; ' title='No matching Template- Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
		}	
	w "<td class='result' onclick='jEditBox(event)'>"_r3x_"</td>"
	w "<td class='from-unit' onclick='jEditBox(event)'>"_r2_"</td>"
	if tempUnit'="" {
		s x=$$GetJXUnit^WSP999(r2)
		s r2a=tempUnit
		i x'="" s r2=x 
	 
		; more clean up
		i r2="%" d
		. i $l($p(r3,".",1))>3 s r3=$replace(r3,".",""),r3=$e(r3,1,2)_"."_$e(r3,3,999)
		. i $l($p(r4,".",1))>3 s r4=$replace(r4,".",""),r4=$e(r4,1,2)_"."_$e(r4,3,999)
		. i $l($p(r5,".",1))>3 s r5=$replace(r5,".",""),r5=$e(r5,1,2)_"."_$e(r5,3,999)
		; test if original unit can be converted
		s x="",x=$$U2U^WSP999(r1,r3,r2,r2a)
		i x["ERROR" s r2a=tempUnit 
		; end more
.
		s r3=$$U2U^WSP999(r1,r3,r2,r2a)
		s r4=$$U2U^WSP999(r1,r4,r2,r2a)
		s r5=$$U2U^WSP999(r1,r5,r2,r2a)
	}
	else
	{	
		s x="ERROR Converting" s r2a=r2,r3x=r3,r4x=r4,r5x=r5
		s r3=$fn(r3,,2)
		s r4=$fn(r4,,2)
		s r5=$fn(r5,,2)
	}
	
	s recalc=0
	// r2 Unit
	i tempUnit="" ,x["ERROR" d
		.w "<td class='convert-result-unit' style='color:"_c1_"' title='No matching Template Unit, Using Original : "_r2x_"'><div class='dropdown' style='color:"_c1_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
	i tempUnit'="" ,x["ERROR" d
		.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching JX Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
		
	i tempUnit'="",x'["ERROR" d ;r2a=tempUnit, r2x=original r2(unit)
		. i (r2a="")!($zconvert(r2a,"l")=$zconvert(r2x,"l")) w "<td class='convert-result-unit converted' style='color:"_c1_"' title='Converted:Same Unit'><div class='dropdown' style='color:"_c1_";/*border-color:"_c3_"*/'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>"
		. e  s recalc=1 s r2=r2a w "<td class='convert-result-unit converted' style='color:"_c3_"' title='Converted'><div class='dropdown' style='color:"_c3_"' onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td></td>" 
	// END of r2 unit
	
	// value and RR
		i recalc {
			i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			
			w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_"</td>",! ;_" "_r2x_"
			if r4["ERROR" {w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"}
			elseif (tempUnit="" ){w "<td class='l-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			else  {w "<td class='l-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			;w "<td class='l-result-unit'>"_r2a_"</td>",!
			w "<td class='u-range' onclick='jEditBox(event)'>"_r5x_"</td>",!  ; "_r2x_"
			i r5["ERROR" {w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			ELSEIF (tempUnit="") {w "<td class='u-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			else {w "<td class='u-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			;w "<td class='u-result-unit'>"_r2a_"</td>",!
			;style='display:none;'
			w "<td class='comment' ><textarea autocomplete='off' rows='5' cols='50' onkeyup=''></textarea></td>",!
			w "<td class='row-num' style='display:none;'>"_row_"</td>"
			w "</tr>",!
	
		  }else{
		
			i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			e  d
			.i tempUnit="" w "<td class='convert-result-val' style='color:"_c1_"' title='No template:Using Original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			.e  s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
.
			w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_"</td>",! ; "_r2x_"
			if r4["ERROR" {w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"}
			elseif (tempUnit="" ){w "<td class='l-result-val ' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			else  {w "<td class='l-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			;w "<td class='l-result-unit'>"_r2a_"</td>",!
			
			w "<td class='u-range' onclick='jEditBox(event)'>"_r5x_"</td>",! ; "_r2x_"
			i r5["ERROR" {w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			ELSEIF (tempUnit="") {w "<td class='u-result-val ' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			else {w "<td class='u-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			;w "<td class='u-result-unit'>"_r2a_"</td>",!
			; style='display:none;'
			w "<td class='comment'><textarea autocomplete='off' rows='5' cols='50' onkeyup=''></textarea></td>",!
			w "<td class='row-num' style='display:none;'>"_row_"</td>"
			w "</tr>",!
		}
	
	 u 0
	g WriteTableGeminiA	
WriteTableGeminiEnd
	q
	
	
WriteTableRBT	
	&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	 ; From ResultBloodTest_Tests for HL7,Json,xml,xlsx, or if no ^AICLAUDE , doesn't compare with textract
	 &sql(DECLARE C01 CURSOR FOR
		SELECT COUNT(element_key),element_key,Tests_TestName,Tests_SIUnit,Tests_Result,Tests_LowRange,Tests_HighRange,ResultBloodTest->ReportDate
		INTO :rowkey,:key,:r1,:r2,:r3,:r4,:r5,:r0
		FROM ResultBloodTest_Tests 
		WHERE ResultBloodTest=:rbt
	)
	&sql(OPEN C01)
	&sql(FETCH C01)
	WHILE SQLCODE=0{
WriteTableRBT1
	s row=key
	s r2x=r2,r3x=r3,r4x=r4,r5x=r5
	
	//Cater for duplicate rows, compare current row with all previous rows
	/*
	if row>1 
	{	n pRow s pRow= row-1
		s r1p=$g(^AIGEMINI(rid,pRow,"name"))
		for i=1:1:pRow
		{
			if ^AIGEMINI(rid,row,"row"_row)= ^AIGEMINI(rid,i,"row"_i) g WriteTableRBTEnd
			
			}
	} 
	*/
	g:r1="" WriteTableRBTEnd
	g:r3="" WriteTableRBTEnd
		
	; clean up units
		s r2=$replace(r2,"|","l")
		s r2=$replace(r2," ","")
		s r2=$replace(r2,"-1","-l")
		s r2=$replace(r2,"_1","_l")
		i $e(r2,$l(r2)-1,$l(r2))="/1" s r2=$replace(r2,"/1","/l")
		i $e(r2,$l(r2))="_" s r2=r2_"l"
		s r2=$replace(r2," / ","/") 
	
	; clean up value and range
		s r3=$replace(r3,"*","")
		s r3=$replace(r3," ","")
		s r4=$replace(r4," ","")
		i $p(r4,"-",1)'="",$p(r4,"-",2)'="" d	; cater for 1-3
		. s r5=$p(r4,"-",2),r4=$p(r4,"-",1), r4x=r4,r5x=r5
		s r5=$replace(r5," ","")
		i $p(r5,"-",1)'="",$p(r5,"-",2)'="" d	; cater for 1-3
		. s r4=$p(r5,"-",1),r5=$p(r5,"-",2), r4x=r4,r5x=r5
		; For Indo clients
		i bk["INDO"{  ;!(bk["JXTesting") {
			; Use the original from GEMINI
			// treat "." as comma
			s r3=$replace(r3,".",""),r4=$replace(r4,".",""),r5=$replace(r5,".","")
			// treat commas as "."
			s r3=$replace(r3,",","."),r4=$replace(r4,",","."),r5=$replace(r5,",",".")
		}else 
		{	s r3=$replace(r3,",","."),r4=$replace(r4,",","."),r5=$replace(r5,",",".")
			}
		/* Set Result as the standard
		i bk["INDO"!(bk["4321-qa-jondaffr") {
			if r3["." d
			. s r4=$replace(r4,",","."),r5=$replace(r5,",",".")
			. s r3=$replace(r3,".",""),r4=$replace(r4,".",""),r5=$replace(r5,".","")
			if r3["," d
			. s r4=$replace(r4,".",","),r5=$replace(r5,".",",")
			.s r3=$replace(r3,",","."),r4=$replace(r4,",","."),r5=$replace(r5,",",".")
		}		
		*/
	; end clean up
	;END
	
	w "<tr class=''>" 
	w "<td class='actions'><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)' > <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)' >  <img class='add-row-icon' src='./assets/images/row.png' alt='add row' onclick='addNewRow(event)' ></td>"
	w "<td class='date' onclick='jEditBox(event)' style='color:"_c1_"'>"_r0_"</td>"
	w "<td class='test-name' onclick='jEditBox(event)'>"_r1_"</td>"
	s x=$$GetSIName^WSP999(r1)
	; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
	if x["#",r2="%" s x=$p(x," ",1)
	
	s r1a=""
	i x="" {
	 	s IsMatch=0,r1a=r1
		WHILE IsMatch=0&($l(r1a)'=0){
			s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
			i r0'=""  s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
		
		i r1a'="" d
		.;s r1ax=r1a w "<td class='test-name' onclick='jEditBox(event)'>"_r1ax_"</td>"
		.&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:r1a AND BucketName=:bk)
		.i tempName'="" s r1=tempName w "<td class='transformed-name issue' style='color:"_c2_"' title='No match-Picking closest JX match'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1a
		.e  w "<td class='transformed-name' style='color:"_c1_"' title='No matching Template:Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>" ;r1a
		e  s tempUnit="" w "<td class='transformed-name issue' style='color:"_c2_";' title='No matching JX Name & Template:Using original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
		
	}
	i x'="" {
		;w "<td class='test-name' onclick='jEditBox(event)'>"_r1_"</td>"
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:x AND BucketName=:bk)
		i tempName'="" d
		.i tempName["(percent)",r2'="%" d
		..s x=x_" #" ;s tempName=$replace(tempName,"(percent)","(Abs)") 
		..&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:x AND BucketName=:bk)
		.i $zconvert(tempName,"l")=$zconvert(r1,"l") w "<td class='transformed-name converted' style='color:"_c1_"' title='Converted:Same BB'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>" ;r1	
		.e  s r1=x w "<td class='transformed-name converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>"
		e  w "<td class='transformed-name' style='color:"_c1_"; ' title='No matching Template- Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
		}	
	w "<td class='result' onclick='jEditBox(event)'>"_r3x_"</td>"
	w "<td class='from-unit' onclick='jEditBox(event)'>"_r2_"</td>"
	if tempUnit'="" {
		s x=$$GetJXUnit^WSP999(r2)
		s r2a=tempUnit
		i x'="" s r2=x 
	 
		; more clean up
		i r2="%" d
		. i $l($p(r3,".",1))>3 s r3=$replace(r3,".",""),r3=$e(r3,1,2)_"."_$e(r3,3,999)
		. i $l($p(r4,".",1))>3 s r4=$replace(r4,".",""),r4=$e(r4,1,2)_"."_$e(r4,3,999)
		. i $l($p(r5,".",1))>3 s r5=$replace(r5,".",""),r5=$e(r5,1,2)_"."_$e(r5,3,999)
		; test if original unit can be converted
		s x="",x=$$U2U^WSP999(r1,r3,r2,r2a)
		i x["ERROR" s r2a=tempUnit 
		; end more
.
		s r3=$$U2U^WSP999(r1,r3,r2,r2a)
		s r4=$$U2U^WSP999(r1,r4,r2,r2a)
		s r5=$$U2U^WSP999(r1,r5,r2,r2a)
	}
	else
	{	
		s x="ERROR Converting" s r2a=r2,r3x=r3,r4x=r4,r5x=r5  
		s r3=$fn(r3,,2)
		s r4=$fn(r4,,2)
		s r5=$fn(r5,,2)
	}
	
	s recalc=0
	// r2 Unit
	i tempUnit="" ,x["ERROR" d
		.w "<td class='convert-result-unit' style='color:"_c1_"' title='No matching Template Unit, Using Original : "_r2x_"'><div class='dropdown' style='color:"_c1_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
	i tempUnit'="" ,x["ERROR" d
		.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching JX Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
		
	i tempUnit'="",x'["ERROR" d ;r2a=tempUnit, r2x=original r2(unit)
		. i (r2a="")!($zconvert(r2a,"l")=$zconvert(r2x,"l")) w "<td class='convert-result-unit converted' style='color:"_c1_"' title='Converted:Same Unit'><div class='dropdown' style='color:"_c1_";/*border-color:"_c3_"*/'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>"
		. e  s recalc=1 s r2=r2a w "<td class='convert-result-unit converted' style='color:"_c3_"' title='Converted'><div class='dropdown' style='color:"_c3_"' onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td></td>" 
	// END of r2 unit
	
	// value and RR
		i recalc {
			i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			
			w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_"</td>",! ;_" "_r2x_"
			if r4["ERROR" {w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"}
			elseif (tempUnit="" ){w "<td class='l-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			else  {w "<td class='l-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			;w "<td class='l-result-unit'>"_r2a_"</td>",!
			w "<td class='u-range' onclick='jEditBox(event)'>"_r5x_"</td>",!  ; "_r2x_"
			i r5["ERROR" {w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			ELSEIF (tempUnit="") {w "<td class='u-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			else {w "<td class='u-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			;w "<td class='u-result-unit'>"_r2a_"</td>",!
			;style='display:none;'
			w "<td class='comment' ><textarea autocomplete='off' rows='5' cols='50' onkeyup=''></textarea></td>",!
			w "<td class='row-num' style='display:none;'>"_row_"</td>"
			w "</tr>",!
	
		  }else{
		
			i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			e  d
			.i tempUnit="" w "<td class='convert-result-val' style='color:"_c1_"' title='No template:Using Original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			.e  s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
.
			w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_"</td>",! ; "_r2x_"
			if r4["ERROR" {w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"}
			elseif (tempUnit="" ){w "<td class='l-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			else  {w "<td class='l-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			;w "<td class='l-result-unit'>"_r2a_"</td>",!
			
			w "<td class='u-range' onclick='jEditBox(event)'>"_r5x_"</td>",! ; "_r2x_"
			i r5["ERROR" {w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			ELSEIF (tempUnit="") {w "<td class='u-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			else {w "<td class='u-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			;w "<td class='u-result-unit'>"_r2a_"</td>",!
			; style='display:none;'
			w "<td class='comment'><textarea autocomplete='off' rows='5' cols='50' onkeyup=''></textarea></td>",!
			w "<td class='row-num' style='display:none;'>"_row_"</td>"
			w "</tr>",!
		}
		
WriteTableRBTEnd
		&sql(FETCH C01) 
		}
		&sql(CLOSE C01)
		q		

cReviewResultGrootList^MAC^^67305,35544.5683164^0
cReviewResultGrootList
InitMe   
	#import MX
	d INIT1^CSP999	; set global and %session.Data, security check
	
	// Count of in-review files
	&sql(SELECT count(*) 
		INTO :r1
		FROM Record
		WHERE Status='In-Process'
		AND ReviewedBy!=''
		AND ReviewedDate IS NULL
		AND ProcessedDate IS NOT NULL
		AND BucketName!='ad-hoc'
	) ;AND BucketName='jondaffr2'
	
	// Update "in-review" count based on r1 in cReviewResultGrootList.csp
	if (r1<2){
		&js<document.getElementById("in-review").innerHTML=#(r1)#+" result is">
	}
	else{
		&js<document.getElementById("in-review").innerHTML=#(r1)#+" results are">
	}
	
	// Count of for-review files
	&sql(SELECT count(*)
		INTO :r2
		FROM Record
		WHERE Status='In-Process'
		AND ReviewedBy IS NULL
		AND ReviewedDate IS NULL
		AND ProcessedDate IS NOT NULL
		AND BucketName!='ad-hoc'
		) ;AND BucketName='jondaffr2'
	
	// Update "for-review" count based on r2 in cReviewResultGrootList.csp
	if (r2<2){
		&js<document.getElementById("for-review").innerHTML=#(r2)#+" result is">
	}
	else{
		&js<document.getElementById("for-review").innerHTML=#(r2)#+" results are">
	}
	q
.
.
WriteRecords		; Populate review file table 
	#import MX
	d INIT1^CSP999
	
	// Pull data of In-Process files
	&sql(DECLARE C3 CURSOR FOR
		SELECT CreatedDate,ProcessedDate,fExt,ID,Type,TempFile,ReviewedBy->ContactPerson,Status,ReviewedBy,Profile->CompanyName,IsTrial
		INTO :r1,:r2,:r3,:r4,:r5,:r6,:r7,:r8,:r9,:cName,:r10
		FROM Record
		WHERE Status!='Failure' 
		AND Status!='Completed'
		AND ReviewedDate IS NULL
		AND ProcessedDate IS NOT NULL
		AND BucketName!='ad-hoc'
		ORDER BY 1,8
	)
	&sql(OPEN C3)
	&sql(FETCH C3)
	WHILE SQLCODE=0{
		
		//Set classes for current status
		if (r8="In-Process"){
			if (r7'=""){
				if (r9=UserID){
					s class="for-review in-review"
				}
				else{
					s class="in-review"
				}
			}
			else{
				s class="for-review"
			}
		}
		elseif (r8="In-Transfer"){
			s class="in-transfer"
		}
		else{
			s class="on-hold"
		}
		
		// Create the html row
		if (r9=UserID){
			w "<tr class='"_class_" my-files'>",!
			s imgExt = ".png"
		}
		elseif (r7'=""){
			w "<tr class='reviewed "_class_"'>",!
			s imgExt = "Grey.png"
		}
		else{
			w "<tr class='"_class_"'>",!
			s imgExt = ".png"
		}
		
		// Create html columns
		;w "<td>"_r1_"</td>",!	; Upload Date/Time	
		w "<td>"_r2_"</td>",!	; Process Date/Time
		
		// Cater for image of file types
		if (r3="hl7")!(r3="xml")!(r3="json"){
			w "<td class='fileType' data-ext='"_r3_"'><img src='assets/images/hl7Icon"_imgExt_"' alt='HL7/FHIR File'></td>"
		}
		elseif (r3="xlsx"){
			w "<td class='fileType' data-ext='"_r3_"'><img src='assets/images/excelIcon"_imgExt_"' alt='Excel File'></td>"
		}
		else{
			w "<td class='fileType' data-ext='"_r3_"'><img src='assets/images/ocrIcon"_imgExt_"' alt='OCR File'></td>"
		}
		
		// Record IDs, Set file ID color pink if the file is a Trial file
		i r10=1 w "<td class='rid trial' style='color:#E63876;'>"_r4_"</td>",!
		e  w "<td class='rid'>"_r4_"</td>",!
		
		s score=""
		&sql(SELECT Score,ReviewedScore INTO :score,:score2 FROM MX.RecordScore WHERE Record=:r4)
		w "<td class='rid'>"_score_"%</td>",!
		w "<td class='rid'>"_score2_"%</td>",!
		
		// Column of company name
		w "<td>"_cName_"</td>",!
		if (r5=""){ 
			s r5="-"
		}
		w "<td>"_r5_"</td>",! ;Report Type
		
		// Cater for review button
		if (r8="In-Process"){
			if (r7'=""){
				if (r9=UserID){
					w "<td><button type='button' class='review-btn blue-btn' onclick='toggleReview(event)'>Continue review</button></td>",!
				}
				else{
					w "<td>In review by: <br><span>"_r7_"</span></td>",!
				}
			}
			else{
				w "<td><button type='button' class='review-btn blue-btn' onclick='toggleReview(event)'>Start review</button></td>",!
			}
		}
		elseif (r8="In-Transfer"){
			w "<td><button type='button' class='review-btn blue-btn' onclick='toggleReview(event)'>Review Transfer</button></td>",!
		}
		else{
			w "<td><button type='button' class='review-btn blue-btn' onclick='toggleReview(event)'>Review On Hold</button></td>",!
		}
		w "</tr>",!
		&sql(FETCH C3)
	}
	&sql(CLOSE C3)
	
	q	
	
SaveReviewer	; Update the reviewer of the file
	#import MX
	d INIT1^CSP999
	
	&sql(SELECT ReviewedBy INTO :reviewedBy FROM Record WHERE ID=:d1)
	// Merge the globals of old to the new reviewer if the file is transfered
	if (($L(reviewedBy)>0) && ($d(^FormData(reviewedBy, d1)) = 10)){
		s receiverID =  $g(%session.Data("UserID"))
		if (+receiverID '= +reviewedBy){
			merge ^FormData(receiverID) = ^FormData(reviewedBy)
			k ^FormData(reviewedBy,d1)
		}	
	}
	; Update the reviewer of the file in MX.Record
	&sql(UPDATE Record SET ReviewedBy=:UserID, Status='In-Process' WHERE ID=:d1)
	s %session.Data("jxTransform","rid") = d1
	s ^jxTransform(SId,"cReviewResults")=d1
	q
	
PopTab1	; not used
	#import MX
	d INIT1^CSP999
	i d1=1 g PopTab1a	; show reviewed
	&sql(DECLARE C1 CURSOR FOR
		SELECT CreatedDate,ProcessedDate,OrgFile,ID,Type,ReportDate,TempFile
		INTO :r1,:r2,:r3,:r4,:r5,:r6,:r7
		FROM Record
		WHERE IsNull(ReviewedDate,'')=''
		AND ProcessedDate IS NOT NULL 
		ORDER BY 1,4	
	)	
		;AND BucketName='jondaffr2'
		;WHERE IsNull(ReviewedDate,'')='' AND IsNull(ProcessedDate,'')<>'' AND CreatedDate>'2022-06-01'
		;;WHERE Type['Blood Test' AND IsNull(ReviewedDate,'')=''
.
	&sql(OPEN C1)
	&sql(FETCH C1)
	s row=1
	WHILE SQLCODE=0{
		s:+r6>0 r6=$zdate(r6,3)
		s locked=" "
		i $d(^ReviewResults(r4)) d
		. s x=^ReviewResults(r4)
		. s x1="" &sql(SELECT Email INTO :x1 FROM "User" WHERE ID=:x)
		. s locked="<img src='images/favicon.png' style='height:15px;width:15px' title='"_x1_"'>"
		&js<document.getElementById("Tab1").insertRow(),
			document.getElementById("Tab1").rows[#(row)#].insertCell(0),
			document.getElementById("Tab1").rows[#(row)#].insertCell(1),
			document.getElementById("Tab1").rows[#(row)#].insertCell(2),
			document.getElementById("Tab1").rows[#(row)#].insertCell(3),
			document.getElementById("Tab1").rows[#(row)#].insertCell(4),
			document.getElementById("Tab1").rows[#(row)#].insertCell(5),
			document.getElementById("Tab1").rows[#(row)#].insertCell(6),
			document.getElementById("Tab1").rows[#(row)#].cells[0].innerHTML="#(locked)#",
			document.getElementById("Tab1").rows[#(row)#].cells[1].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r1)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[2].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r2)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[3].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r3)# <span style='font-size:6pt;font-style:italics'>#(r7)#</span></span>",
			document.getElementById("Tab1").rows[#(row)#].cells[4].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r4)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[5].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r5)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[6].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r6)#</span>"
		>
		s row=row+1		
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	q
PopTab1a	; not used
	s cdate=$h-8
	&sql(DECLARE C2 CURSOR FOR
		SELECT CreatedDate,ProcessedDate,OrgFile,ID,Type,ReportDate,TempFile,ReviewedBy->Email,ReviewedDate
		INTO :r1,:r2,:r3,:r4,:r5,:r6,:r7,:r8,:r9
		FROM Record
		WHERE IsNull(ReviewedDate,'')<>'' AND CreatedDate>:cdate AND IsNull(ProcessedDate,'')<>'' 
		ORDER BY 1 DESC,4 DESC
	)   ;AND BucketName='jondaffr2'
	&sql(OPEN C2)
	&sql(FETCH C2)
	s row=1
	WHILE SQLCODE=0{
		s:+r6>0 r6=$zdate(r6,3)
		s locked=" "
		i $d(^ReviewResults(r4)) d
		. s x=^ReviewResults(r4)
		. s x1="" &sql(SELECT Email INTO :x1 FROM "User" WHERE ID=:x)
		. s locked="<img src='images/favicon.png' style='height:15px;width:15px' title='"_x1_"'>"
		&js<document.getElementById("Tab1").insertRow(),
			document.getElementById("Tab1").rows[#(row)#].insertCell(0),
			document.getElementById("Tab1").rows[#(row)#].insertCell(1),
			document.getElementById("Tab1").rows[#(row)#].insertCell(2),
			document.getElementById("Tab1").rows[#(row)#].insertCell(3),
			document.getElementById("Tab1").rows[#(row)#].insertCell(4),
			document.getElementById("Tab1").rows[#(row)#].insertCell(5),
			document.getElementById("Tab1").rows[#(row)#].insertCell(6),
			document.getElementById("Tab1").rows[#(row)#].insertCell(7),
			document.getElementById("Tab1").rows[#(row)#].insertCell(8),
			document.getElementById("Tab1").rows[#(row)#].cells[0].innerHTML="#(locked)#",
			document.getElementById("Tab1").rows[#(row)#].cells[1].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r1)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[2].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r2)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[3].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r3)# <span style='font-size:6pt;font-style:italics'>#(r7)#</span></span>",
			document.getElementById("Tab1").rows[#(row)#].cells[4].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r4)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[5].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r5)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[6].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r6)#</span>"
			document.getElementById("Tab1").rows[#(row)#].cells[7].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r8)# #(r9)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[8].innerHTML="<input type='button' value='Send to Review' onclick='jReturnToReview(#(r4)#)'>"
		>
		s row=row+1		
		&sql(FETCH C2)
	}
	&sql(CLOSE C2)
	q
PopFields		; not used	called by PopTab1 and PopTab1a
	#import MX
	d INIT1^CSP999
	s %session.Data("ReviewResults")=d1
	s ^ReviewResults(d1)=UserID
	&js<jReviewResults1()>
	;&js<window.open("ReviewResults1.csp","ReviewResults1")>
	q
ReturnToReview	; not used
	#import MX
	d INIT1^CSP999
	&sql(UPDATE Record SET ReviewedBy=NULL,ReviewedDate=NULL WHERE ID=:d1)
	k ^ReviewResults(d1)
	&js<window.location.reload()>
	q
.
GetReviewCount ; not used
	#import MX
	d INIT1^CSP999
	// Get file count of the current user in internal bucket
	&sql(SELECT Count(ID) INTO :count FROM Record WHERE ReviewedBy=:UserID AND Status!='Failure' AND Status!='Completed' AND BucketName='jondaffr2')
	&js<reviewCount="#(count)#">
	q

cReviewResults^MAC^^67158,27349.7060357^0
cReviewResults	; old review system
InitMe
	#import MX
	d INIT1^CSP999
	&sql(SELECT count(*) 
		INTO :r1
		FROM Record
		WHERE Status='In-Process'
		AND ReviewedBy!=''
		AND ReviewedDate IS NULL
		AND ProcessedDate IS NOT NULL
		AND BucketName!='ad-hoc'
	)
	if (r1<2){
		&js<document.getElementById("in-review").innerHTML=#(r1)#+" result is">
	}
	else{
		&js<document.getElementById("in-review").innerHTML=#(r1)#+" results are">
	}
	&sql(SELECT count(*)
		INTO :r2
		FROM Record
		WHERE Status='In-Process'
		AND ReviewedBy IS NULL
		AND ReviewedDate IS NULL
		AND ProcessedDate IS NOT NULL
		AND BucketName!='ad-hoc'
	)
	if (r2<2){
		&js<document.getElementById("for-review").innerHTML=#(r2)#+" result is">
	}
	else{
		&js<document.getElementById("for-review").innerHTML=#(r2)#+" results are">
	}
	q
.
PopTab1
	#import MX
	d INIT1^CSP999
	i d1=1 g PopTab1a	; show reviewed
	&sql(DECLARE C1 CURSOR FOR
		SELECT CreatedDate,ProcessedDate,OrgFile,ID,Type,ReportDate,TempFile
		INTO :r1,:r2,:r3,:r4,:r5,:r6,:r7
		FROM Record
		WHERE IsNull(ReviewedDate,'')=''
		AND ProcessedDate IS NOT NULL
		ORDER BY 1,4	
	)
		;WHERE IsNull(ReviewedDate,'')='' AND IsNull(ProcessedDate,'')<>'' AND CreatedDate>'2022-06-01'
		;;WHERE Type['Blood Test' AND IsNull(ReviewedDate,'')=''
.
	&sql(OPEN C1)
	&sql(FETCH C1)
	s row=1
	WHILE SQLCODE=0{
		s:+r6>0 r6=$zdate(r6,3)
		s locked=" "
		i $d(^ReviewResults(r4)) d
		. s x=^ReviewResults(r4)
		. s x1="" &sql(SELECT Email INTO :x1 FROM "User" WHERE ID=:x)
		. s locked="<img src='images/favicon.png' style='height:15px;width:15px' title='"_x1_"'>"
		&js<document.getElementById("Tab1").insertRow(),
			document.getElementById("Tab1").rows[#(row)#].insertCell(0),
			document.getElementById("Tab1").rows[#(row)#].insertCell(1),
			document.getElementById("Tab1").rows[#(row)#].insertCell(2),
			document.getElementById("Tab1").rows[#(row)#].insertCell(3),
			document.getElementById("Tab1").rows[#(row)#].insertCell(4),
			document.getElementById("Tab1").rows[#(row)#].insertCell(5),
			document.getElementById("Tab1").rows[#(row)#].insertCell(6),
			document.getElementById("Tab1").rows[#(row)#].cells[0].innerHTML="#(locked)#",
			document.getElementById("Tab1").rows[#(row)#].cells[1].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r1)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[2].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r2)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[3].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r3)# <span style='font-size:6pt;font-style:italics'>#(r7)#</span></span>",
			document.getElementById("Tab1").rows[#(row)#].cells[4].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r4)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[5].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r5)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[6].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r6)#</span>"
		>
		s row=row+1		
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	q
PopTab1a
	s cdate=$h-8
	&sql(DECLARE C2 CURSOR FOR
		SELECT CreatedDate,ProcessedDate,OrgFile,ID,Type,ReportDate,TempFile,ReviewedBy->Email,ReviewedDate
		INTO :r1,:r2,:r3,:r4,:r5,:r6,:r7,:r8,:r9
		FROM Record
		WHERE IsNull(ReviewedDate,'')<>'' AND CreatedDate>:cdate AND IsNull(ProcessedDate,'')<>''
		ORDER BY 1 DESC,4 DESC
	)
	&sql(OPEN C2)
	&sql(FETCH C2)
	s row=1
	WHILE SQLCODE=0{
		s:+r6>0 r6=$zdate(r6,3)
		s locked=" "
		i $d(^ReviewResults(r4)) d
		. s x=^ReviewResults(r4)
		. s x1="" &sql(SELECT Email INTO :x1 FROM "User" WHERE ID=:x)
		. s locked="<img src='images/favicon.png' style='height:15px;width:15px' title='"_x1_"'>"
		&js<document.getElementById("Tab1").insertRow(),
			document.getElementById("Tab1").rows[#(row)#].insertCell(0),
			document.getElementById("Tab1").rows[#(row)#].insertCell(1),
			document.getElementById("Tab1").rows[#(row)#].insertCell(2),
			document.getElementById("Tab1").rows[#(row)#].insertCell(3),
			document.getElementById("Tab1").rows[#(row)#].insertCell(4),
			document.getElementById("Tab1").rows[#(row)#].insertCell(5),
			document.getElementById("Tab1").rows[#(row)#].insertCell(6),
			document.getElementById("Tab1").rows[#(row)#].insertCell(7),
			document.getElementById("Tab1").rows[#(row)#].insertCell(8),
			document.getElementById("Tab1").rows[#(row)#].cells[0].innerHTML="#(locked)#",
			document.getElementById("Tab1").rows[#(row)#].cells[1].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r1)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[2].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r2)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[3].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r3)# <span style='font-size:6pt;font-style:italics'>#(r7)#</span></span>",
			document.getElementById("Tab1").rows[#(row)#].cells[4].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r4)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[5].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r5)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[6].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r6)#</span>"
			document.getElementById("Tab1").rows[#(row)#].cells[7].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r4)#,#(row)#)'>#(r8)# #(r9)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[8].innerHTML="<input type='button' value='Send to Review' onclick='jReturnToReview(#(r4)#)'>"
		>
		s row=row+1		
		&sql(FETCH C2)
	}
	&sql(CLOSE C2)
	q
PopFields
	#import MX
	d INIT1^CSP999
	s %session.Data("ReviewResults")=d1
	s ^ReviewResults(d1)=UserID
	&js<jReviewResults1()>
	;&js<window.open("ReviewResults1.csp","ReviewResults1")>
	q
ReturnToReview
	#import MX
	d INIT1^CSP999
	&sql(UPDATE Record SET ReviewedBy=NULL,ReviewedDate=NULL WHERE ID=:d1)
	k ^ReviewResults(d1)
	&js<window.location.reload()>
	q
WriteRecords
	#import MX
	d INIT1^CSP999
	&sql(DECLARE C3 CURSOR FOR
		SELECT CreatedDate,ProcessedDate,fExt,ID,Type,TempFile,ReviewedBy->ContactPerson,Status,ReviewedBy,Profile->CompanyName,IsTrial
		INTO :r1,:r2,:r3,:r4,:r5,:r6,:r7,:r8,:r9,:cName,:r10
		FROM Record
		WHERE Status!='Failure' 
		AND Status!='Completed'
		AND ReviewedDate IS NULL
		AND ProcessedDate IS NOT NULL
		AND BucketName!='ad-hoc'
		ORDER BY 1,8
	)
	&sql(OPEN C3)
	&sql(FETCH C3)
	WHILE SQLCODE=0{
		if (r8="In-Process"){
			if (r7'=""){
				if (r9=UserID){
					s class="for-review in-review"
				}
				else{
					s class="in-review"
				}
			}
			else{
				s class="for-review"
			}
		}
		elseif (r8="In-Transfer"){
			s class="in-transfer"
		}
		else{
			s class="on-hold"
		}
		if (r9=UserID){
			w "<tr class='"_class_" my-files'>",!
			s imgExt = ".png"
		}
		elseif (r7'=""){
			w "<tr class='reviewed "_class_"'>",!
			s imgExt = "Grey.png"
		}
		else{
			w "<tr class='"_class_"'>",!
			s imgExt = ".png"
		}
		w "<td>"_r1_"</td>",!
		w "<td>"_r2_"</td>",!
		if (r3="hl7")!(r3="xml")!(r3="json"){
			w "<td class='fileType' data-ext='"_r3_"'><img src='assets/images/hl7Icon"_imgExt_"' alt='HL7/FHIR File'></td>"
		}
		elseif (r3="xlsx"){
			w "<td class='fileType' data-ext='"_r3_"'><img src='assets/images/excelIcon"_imgExt_"' alt='Excel File'></td>"
		}
		else{
			w "<td class='fileType' data-ext='"_r3_"'><img src='assets/images/ocrIcon"_imgExt_"' alt='OCR File'></td>"
		}
		
		i r10=1 w "<td class='rid trial' style='color:#E63876;'>"_r4_"</td>",!
		e  w "<td class='rid'>"_r4_"</td>",!
		
		w "<td>"_cName_"</td>",!
		if (r5=""){ 
			s r5="-"
		}
		w "<td>"_r5_"</td>",!
		if (r8="In-Process"){
			if (r7'=""){
				if (r9=UserID){
					w "<td><button type='button' class='review-btn blue-btn' onclick='toggleReview(event)'>Continue review</button></td>",!
				}
				else{
					w "<td>In review by: <br><span>"_r7_"</span></td>",!
				}
			}
			else{
				w "<td><button type='button' class='review-btn blue-btn' onclick='toggleReview(event)'>Start review</button></td>",!
			}
		}
		elseif (r8="In-Transfer"){
			w "<td><button type='button' class='review-btn blue-btn' onclick='toggleReview(event)'>Review Transfer</button></td>",!
		}
		else{
			w "<td><button type='button' class='review-btn blue-btn' onclick='toggleReview(event)'>Review On Hold</button></td>",!
		}
		w "</tr>",!
		&sql(FETCH C3)
	}
	&sql(CLOSE C3)
	
	q
	
SaveReviewer
	#import MX
	d INIT1^CSP999
	//Bobo added on Sep 17 to merge the globals of old to the new reviewer
	&sql(SELECT ReviewedBy INTO :reviewedBy FROM Record WHERE ID=:d1)
	if (($L(reviewedBy)>0) && ($d(^FormData(reviewedBy, d1)) = 10)){
		s receiverID =  $g(%session.Data("UserID"))
		if (+receiverID '= +reviewedBy){
			merge ^FormData(receiverID) = ^FormData(reviewedBy)
			k ^FormData(reviewedBy,d1)
		}
		
	}
	
	&sql(UPDATE Record SET ReviewedBy=:UserID, Status='In-Process' WHERE ID=:d1)
	s %session.Data("jxTransform","rid") = d1
	s ^jxTransform(SId,"cReviewResults")=d1
	q
	
GetReviewCount
	#import MX
	d INIT1^CSP999
	&sql(SELECT Count(ID) INTO :count FROM Record WHERE ReviewedBy=:UserID AND Status!='Failure' AND Status!='Completed')
	&js<reviewCount="#(count)#">
	q

cReviewResults1^MAC^^67158,27358.0997415^0
cReviewResults1	; old review system
InitMe
	#import MX
	d INIT1^CSP999
	
	s d1=%session.Data("ReviewResults")
	
	s ^ReviewResults(d1)=UserID
	s %session.Data("ShowResults")=d1
	s x="" &sql(SELECT IsNull(ReviewedDate,''),fExt INTO :x,:fExt FROM Record WHERE ID=:d1)
	s x=$replace(x,$c(0),"")
	
	i x="",fExt'="html" d ^cShowResults s rid=""
	&js<document.getElementById("Tab1").rows[1].cells[0].innerHTML="">
	s (r1,r2)=""
	&sql(SELECT ReportDate,Type,ID INTO :r1,:r2,:rid FROM ResultBloodTest WHERE Record->ID=:d1)
	i r1="" &sql(SELECT ReportDate INTO :r1 FROM Record WHERE ID=:d1)
	
	i +r1>0 s r1=$zdate(r1,4,,4)
	
	&js<RDate.value="#(r1)#",RType.value="#(r2)#">
	
	&sql(DECLARE C1 CURSOR FOR
		SELECT element_key,Tests_TestName,Tests_Result,Tests_SIUnit,Tests_LowRange,Tests_HighRange
		INTO :r1,:r2,:r3,:r4,:r5,:r6
		FROM MX.ResultBloodTest_Tests
		WHERE ResultBloodTest=:rid
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	s row=1
	WHILE SQLCODE=0{
		
		s ta="T"_row_"a",tb="T"_row_"b",tc="T"_row_"c",td="T"_row_"d",te="T"_row_"e"
		s tda="td"_row_"a"
		s tdb="td"_row_"b"
		s tdc="td"_row_"c"
		s tdd="td"_row_"d"
		s tde="td"_row_"e"
		s (r2a,r3a,r4a,r5a,r6a)=""
		s r2a=$$GetSIName^WSP999(r2)
		i r2a'="" d
		. s r4a=$$GetSIUnit^WSP999(r2a)
		. ;(testname,value,fromunit,tounit)
		. i +r3'=0,r4'="",r4a'="" s r3a=$$U2U^WSP999(r2a,r3,r4,r4a)
		. i +r3'=0,r5'="",r4a'="" s r5a=$$U2U^WSP999(r2a,r5,r4,r4a)
		. i +r3'=0,r6'="",r4a'="" s r6a=$$U2U^WSP999(r2a,r6,r4,r4a)
		
		i r2a'=r2 s r2a="<span style='color:red; onclick='"_tb_".value=&quot;"_r2a_"&quot;'>"_r2a_"</span>"
		i +r3a'=+r3 s r3a="<span style='color:red' onclick='"_tb_".value=&quot;"_r3a_"&quot;'>"_r3a_"</span>"
		i $zconvert(r4a,"l")'=$zconvert(r4,"L") s r4a="<span style='color:red' onclick='"_tc_".value=&quot;"_r4a_"&quot;'>"_r4a_"</span>"
		i +r5a'=+r5 s r5a="<span style='color:red' onclick='"_td_".value=&quot;"_r5a_"&quot;'>"_r5a_"</span>"
		i +r6a'=+r6 s r6a="<span style='color:red' onclick='"_te_".value=&quot;"_r6a_"&quot;'>"_r6a_"</span>"
		
		&js<document.getElementById("Tab1").rows[#(row)#].cells[0].innerHTML="#(r1)#",
			#(ta)#.value="#(r2)#",
			#(tb)#.value="#(r3)#",
			#(tc)#.value="#(r4)#",
			#(td)#.value="#(r5)#",
			#(te)#.value="#(r6)#",
			document.getElementById("#(tda)#").innerHTML="#(r2a)#",
			document.getElementById("#(tdb)#").innerHTML="#(r3a)#",
			document.getElementById("#(tdc)#").innerHTML="#(r4a)#",
			document.getElementById("#(tdd)#").innerHTML="#(r5a)#",
			document.getElementById("#(tde)#").innerHTML="#(r6a)#"
		>
		s row=row+1
		&sql(FETCH C1)	
	}
	&sql(CLOSE C1)
	q
ValField
	#import MX
	d INIT1^CSP999
	s (r1,r2)=""
	s fldno=$e(d1,1,$l(d1)-1)	; remove the a,b,c,d,e
	s fldno=$e(fldno,2,999)
	i d1["a" d  q		; test name
	. &sql(SELECT TOP 1 SIName,SIUnit INTO :r1,:r2 FROM DiagnosticTest WHERE Name=:d2 OR SIName=:d2)
	. i r1'="" s fld="T"_fldno_"c" &js<#(d1)#.value='#(r1)#',#(fld)#.value='#(r2)#',#(d1)#.style.borderColor='red',#(fld)#.style.borderColor='red'>
	; unit of measure
	q
PopOriginal
	#import MX
	d INIT1^CSP999
	;s rid=%session.Data("ReviewResults")
	;s rid=337
	//Nyein added on 19th Sept
	s rid=%session.Data("jxTransform","rid")
	; added 10/06 - DW
	; disabled 29/6/2022 DW 
	
	d ^cReviewRedact
	s r1="",r2=""
	&sql(SELECT TempFile,fExt INTO :r1,:r2 FROM Record WHERE ID=:rid)
	;&sql(SELECT TempFile INTO :r1 FROM Record WHERE ID=:rid)
	
	s file="Review/"_rid_"/"_r1_"."_r2
	;&js<window.open("#(file)#","new")>
	;q
	s r1=""
	
	
	&sql(SELECT TempFile,fExt INTO :r1,:r2 FROM Record WHERE ID=:rid)
	&sql(SELECT TempFile INTO :r1 FROM Record WHERE ID=:rid)
	s ffile="c:\intersystems\cache\csp\review\"_rid_"\"_r1_"."_r2
	s r2=$zconvert(r2,"l")
	
	;i r2="heic"!(r2="webp")!(r2="avif")!(r2="jpg")!(r2="jpeg") d	
	i r2="heic"!(r2="webp")!(r2="avif") d
	. s cmd="mogrify -resize 50% -format png "_ffile
	. s x=$zf(-1,cmd_" && exit")
	. s r2="PNG"
	. s file="Review/"_rid_"/"_r1_"."_r2
	
	//html result
	i r2="html" d
	. s file="Review/"_rid_"/"_r1_"."_r2
	;&js<alert("#(file)#")>
	s %session.Data("ReviewResults","File")="Review/"_rid
	&js<window.open("#(file)#","_blank")>
	
	;d ##class(%File).Delete(^INST("CSPDir")_"\"_^INST("NS")_"\"_file)
	q
	
SaveMeHeader
	#import MX
	d INIT1^CSP999
	s d1=%session.Data("ReviewResults")
	s uid=""
	s rid="" &sql(SELECT ID INTO :rid FROM ResultBloodTest WHERE Record->ID=:d1)
	i rid="" &sql(INSERT INTO ResultBloodTest (Record,Type) VALUES (:d1,'Blood Test')) s rid=%ROWID	;,h2="Blood Test"
	s h2a=""
	i h1'="" s h1a=$zdateh(h1,4,,4)
	&sql(Update ResultBloodTest SET ReportDate=:h1a,Type=:h2 WHERE Record->ID=:d1)
	s dt=$zdatetime($h,3)
	&sql(UPDATE Record SET Type=:h2,ReviewedDate=:dt,ReviewedBy=:UserID,ReportDate=:h1a WHERE ID=:d1)
	&sql(SELECT Profile->UserID INTO :uid FROM MX.Record WHERE ID=:d1)
	s file=$g(%session.Data("ReviewResults","File"))
	
	i file'="" d ##class(%File).RemoveDirectoryTree(^INST("CSPDir")_"\"_^INST("NS")_"\"_file)
	q
MoveToFailure
	#import MX
	d INIT1^CSP999
	s d1=%session.Data("ReviewResults")
	s bk = ""
	&sql(SELECT BucketName,OrgFile INTO :bk,:fileName FROM Record WHERE ID=:d1)
	i bk="" s bk = "jondaffr2"
	
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"	
	s CliProfileName = "default"
	
	s stdDir = "C:\InterSystems\Cache\JondaX\Biolytica\jondaffr2\stdOutputs\"
	s stdoutDir = stdDir_"log.txt"
	s stderrDir = stdDir_"err.txt" 
	
	s cmdflag = "/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_"""" 
	;s cmdflag = "/SHELL" 
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "ls")
	;s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",inProcessBucket_fileName, failureBucket, "--profile","default")
	;s status =  $ZF(-100, "/SHELL", "aws", "s3", "mv","s3://jondaffr2/In-Process/2023-08-01 001.png", "s3://jondaffr2/Failure/", "--profile", "default")
	s dt=$zdatetime($h,3)
	&sql(UPDATE Record SET ReviewedDate=:dt,ReviewedBy=:UserID WHERE ID=:d1)
	
	q
SaveMe
	#import MX
	d INIT1^CSP999
	s d1=%session.Data("ReviewResults")
	i ekey=0 k ^arr(d1)
	s key=$o(^arr(d1,""),-1),key=key+1
	i d1a'="" s ^arr(d1,key)=d1a_Q_d1b_Q_d1c_Q_d1d_Q_d1e,key=key+1
	i d2a'="" s ^arr(d1,key)=d2a_Q_d2b_Q_d2c_Q_d2d_Q_d2e,key=key+1
	i d3a'="" s ^arr(d1,key)=d3a_Q_d3b_Q_d3c_Q_d3d_Q_d3e,key=key+1
	i d4a'="" s ^arr(d1,key)=d4a_Q_d4b_Q_d4c_Q_d4d_Q_d4e,key=key+1
	i d5a'="" s ^arr(d1,key)=d5a_Q_d5b_Q_d5c_Q_d5d_Q_d5e,key=key+1
	i d6a'="" s ^arr(d1,key)=d6a_Q_d6b_Q_d6c_Q_d6d_Q_d6e,key=key+1
	i d7a'="" s ^arr(d1,key)=d7a_Q_d7b_Q_d7c_Q_d7d_Q_d7e,key=key+1
	i d8a'="" s ^arr(d1,key)=d8a_Q_d8b_Q_d8c_Q_d8d_Q_d8e,key=key+1
	i d9a'="" s ^arr(d1,key)=d9a_Q_d9b_Q_d9c_Q_d9d_Q_d9e,key=key+1
	i d10a'="" s ^arr(d1,key)=d10a_Q_d10b_Q_d10c_Q_d10d_Q_d10e,key=key+1
	i ekey=6 d SaveMe1
	q
SaveMe1
	&sql(DELETE FROM ResultBloodTest_Tests WHERE ResultBloodTest->Record=:d1)
	&sql(SELECT ID INTO :rid FROM ResultBloodTest WHERE Record->ID=:d1)
	s key=""
SaveMe1a
	s key=$o(^arr(d1,key)) 
	;i key="" {k ^ReviewResults(d1) &js<alert("Record Saved!"),window.close()> 
	i key="" {
		k ^ReviewResults(d1) ;&js<alert("Record Saved!"),window.close()> 
		s bk = ""
		&sql(SELECT  BucketName INTO :bk FROM Record WHERE ID=:d1)
		i bk="" s bk = "jondaffr2"
		s sts=0
		s sts = $$jxResult2HL7^jxResult2HL7(d1,  "C:\InterSystems\Cache\JondaX\Biolytica\jondaffr2\outputs\", bk, 1)  
		i sts=0 &js<jMoveToFailure()>
		s dt=$zdatetime($h,3)
		i sts'=0 &sql(UPDATE Record SET ReviewedDate=:dt,ReviewedBy=:UserID WHERE ID=:d1) &js<alert("Record Saved!"),window.close()>
		; cleanup RECORD
		;&js<console.log(`#(sts)#`)>
		q
	}
	; TODO: Bo Bo
	
	;i key="" k ^ReviewResults(d1) &js<alert("Record Saved!"),window.close()> d ^jxResult2HL7 q
	;i key="" k ^ReviewResults(d1) &js<alert("Record Saved! Please refresh the screen to see latest list of files"),window.close()> q
	s arr1=^arr(d1,key)
	s objx=##class(ResultBloodTest).%OpenId(rid)
	s objx1=##class(ResultBloodTestValue).%New()
	s objx1.TestName=$p(arr1,Q,1)
	s objx1.Result=$p(arr1,Q,2)
	s objx1.SIUnit=$p(arr1,Q,3)
	s objx1.LowRange=$p(arr1,Q,4)
	s objx1.HighRange=$p(arr1,Q,5)
.
	d objx.Tests.SetAt(objx1,key)
	d objx.%Save()
	s dt=$zdatetime($h,3)
	&sql(UPDATE Record SET ReviewedBy=:UserID WHERE ID=:d1)
	s objrbt=""			; What is this? DW
	g SaveMe1a
UnloadMe
	s rid=%session.Data("ReviewResults")
	&sql(SELECT TempFile,fExt INTO :r1,:r2 FROM Record WHERE ID=:rid)
	s file="review/"_rid_"/"_r1_"."_r2
	d ##class(%File).Delete("c:\intersystems\cache\csp\jondax\review\"_rid_"\"_r1_"."_r2)
	d ##class(%File).RemoveDirectory("c:\intersystems\cache\csp\jondax\review\"_rid)
	k ^ReviewResults(rid)
	q	
.

cReviewResultsS1^MAC^^67158,27353.4010625^0
cReviewResultsS1 	; old review system
InitMe
	#import MX
	d INIT1^CSP999
	s dropDownText = " <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'>"
	
	s rid=$g(%session.Data("jxTransform","rid"))
	s reportMethod=$g(%session.Data("jxTransform","rid","reportMethod"))
	i reportMethod="" s reportMethod="AWS",%session.Data("jxTransform","rid","reportMethod")=reportMethod	; by default
	i reportMethod="JX" &js<document.getElementById("imgJX").style="cursor:pointer;border-radius: 65px;border: 1px solid #FF0000;",document.getElementById("imgGPT").style="cursor:pointer">
	i reportMethod="GPT" &js<document.getElementById("imgJX").style="cursor:pointer",document.getElementById("imgGPT").style="cursor:pointer;border-radius: 65px;border: 1px solid #FF0000;">
	i reportMethod="AWS" &js<document.getElementById("imgAWS").style="cursor:pointer;border-radius: 65px;border: 1px solid #FF0000;",document.getElementById("imgJX").style="cursor:pointer",document.getElementById("imgGPT").style="cursor:pointer">
	&js<document.getElementById("trans-id").innerHTML="Transaction ID. #(rid)#">
	;d ^cReviewRedact
	&sql(SELECT Type,Profile,BucketName,ReportDate
		INTO :reportType,:cID,:tName,:rReportDate
	 	FROM Record 
	 	WHERE ID=:rid)
	//changes made for ReportType by Nyein on 9th Oct
	if (reportType=""){
		&js<closeReportSelect()>
	}
	else{
		&js<reportType="#(reportType)#">
	}
	/*if (reportType="Blood Test"){
		&js<document.getElementById("report-btn").innerHTML="#(reportType)#" + dropDownText>
	}*/
	//changes made for ReportDate by Nyein on 18th Sept
	&sql(SELECT ID,ReportDate
		INTO :rbt,:rbtReportDate
		FROM ResultBloodTest
		WHERE Record=:rid
	)
	s reportDate=""
	if (rbtReportDate'=""){
		s reportDate=$ZDate(rbtReportDate,3)
	}
	else{
		if (rReportDate'=""){
			s reportDate=$ZDate(rReportDate,3)
		}
	}
	if (reportDate'=""){
		&js<
			document.getElementById("report-date").value="#(reportDate)#";
			let date = new Date("#(reportDate)#");
			document.querySelector(".date-input").innerHTML=date.getDate().toString().padStart(2, '0')+"/"+(date.getMonth()+1).toString().padStart(2, '0')+"/"+date.getFullYear()+calendarText;
		>
	}
	&js<rbt="#(rbt)#">
	&js<rid="#(rid)#">
	&sql(SELECT ContactPerson,UserID INTO :cName,:uName FROM "User" WHERE ID=:cID)
	if ($LENGTH(cName)=0){
		s uName=$ZCONVERT($P(uName,"@",1),"s")
		&js<document.getElementById("cName").innerHTML = "#(uName)#">
	}
	else{
		&js<document.getElementById("cName").innerHTML = "#(cName)#">
	}
	&js<document.getElementById("tName").innerHTML = "#(tName)#">
	&sql(SELECT TempFile,fExt INTO :r1,:r2 FROM Record WHERE ID=:rid)
	s ffile="\"_rid_"\"_r1_"."_r2
	&js<tempFile="#(r1)#"
	fExt="#(r2)#">
	s ^LastView("cReviewResults",UserID,rid)="cReviewResultsS1.csp"
	q
SetJX
	#import MX
	d INIT1^CSP999
	s rid=$g(%session.Data("jxTransform","rid"))
	s %session.Data("jxTransform","rid","reportMethod")="JX"
	k ^FormData(UserID, rid)
	q	
SetGPT
	#import MX
	d INIT1^CSP999
	s rid=$g(%session.Data("jxTransform","rid"))
	s %session.Data("jxTransform","rid","reportMethod")="GPT"
	k ^FormData(UserID, rid)
	q
SetAWS
	#import MX
	d INIT1^CSP999
	s rid=$g(%session.Data("jxTransform","rid"))
	s %session.Data("jxTransform","rid","reportMethod")="AWS"
	k ^FormData(UserID, rid)
	q
CleanData
	
	n x1,x2,x3,x4,x5,x6,x7,x8,x9
	; clean up some data
	; try and fill in missing "_l"
	s x1=""
	i r4'="pmoll" d
	. &sql(SELECT SIUnit INTO :x1 FROM DiagnosticTest WHERE SIName=:r2 OR Name=:r2)
	. i x1["/" & ((r4'["_")&(r4'["/")&(r4'["-")) s r4=r4_"_l"
	; clean up "," instead of "." in Result and Range
	s r3=$replace(r3,",",".")
	s r5=$replace(r5,",",".")
	s r6=$replace(r6,",",".")
	; clean up "._"
	s r4=$replace(r4,"._","_")
	; clean up missing "_l" and _"l"
	i $e(r4,$l(r4),$l(r4))="_" s r4=r4_"l"
	; convert "|" (pipe) to "l" 
	s r4=$replace(r4,"|","l")
	; convert "_1" to "_l" 
	s r4=$replace(r4,"_1","_l")
	s r4=$replace(r4,"_!","_l")
	
.
	s r4=$replace(r4,"12-1","12-l")
	s r4=$replace(r4,"9-1","9-l")
	s r4=$replace(r4,"6-1","6-l")
	s r4=$replace(r4,"3-1","3-l")
.
	s r4=$replace(r4,"12-|","12-l")
	s r4=$replace(r4,"9-|","9-l")
	s r4=$replace(r4,"6-|","6-l")
	s r4=$replace(r4,"3-|","3-l")
.
	; strip unit from name
	s r3=$replace(r3,r4,"")
	i r3'["<" s r3=$fn(+r3,"",2)
	i $e(r3,1,1)="<" s r3="<"_$fn(+$e(r3,2,999),"",2)
	
	q
WriteResultsGPT
	#import MX
	d INIT1^CSP999
	s rid = %session.Data("jxTransform","rid")
	&sql(SELECT Date(ReportDate) INTO :r1 FROM ResultBloodTest WHERE Record=:rid)
	n bk
	&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	s r7 = bk
	n count
	f count=1:1:$o(^AIDATA(rid,""),-1){
		s rDate = $g(^AIDATA(rid,count,"testDate"))
		//i rDate="" s rDate=$replace($zdate(r1,4,,4),"/","-")
		i rDate="" s rDate=$zdate(r1,4,,4)
		s r2 = $g(^AIDATA(rid,count,"name"))
		s r3 = $g(^AIDATA(rid,count,"value"))
		s r4 = $g(^AIDATA(rid,count,"unit"))
		s r6 = $g(^AIDATA(rid,count,"hiRange"))
		s r5 = $g(^AIDATA(rid,count,"loRange"))
		s (TName,TValue,TUnit,THiRange,TLoRange) = ""
		/*
		s TName = r2
		s TValue = r3
		s TUnit = r4
		s THiRange = r5
		s TLoRange = r6
		*/	
		d CleanData
			s ^FormData(userId, rid, count, "testDate")=rDate
			s ^FormData(userId, rid, count, "testName")=r2
			s ^FormData(userId, rid, count, "testValue")=r3
			s ^FormData(userId, rid, count, "testUnit")=r4
			s ^FormData(userId, rid, count, "testHiRange")=r6
			s ^FormData(userId, rid, count, "testLoRange")=r5
			
			
.
		/*&sql(SELECT SIName INTO :r8 FROM DiagnosticTest WHERE Name[:r2)
		if (r8=""){ 
			s nameCheck=" issue"
		}
		else{
			s nameCheck=""
		}
		&sql(SELECT count(*) INTO :r9 FROM DiagnosticTest WHERE Unit[:r4)
		if (r9=0){ 
			s unitCheck=" issue"
		}
		else{
			s unitCheck=""
		}*/
		s nameCheck=""
		s unitCheck=""
		if (r2 = ""){
			w "<tr>",!
			;w "<tr style=""display:none"" class=""deleted"">",!
		} else {
			w "<tr>",!
		}
		
		w "<td style='display:none' class='TName'>"_TName_"</td>"
    	w "<td style='display:none' class='TValue'>"_TValue_"</td>"
    	w "<td style='display:none' class='TUnit'>"_TUnit_"</td>"
    	w "<td style='display:none' class='THiRange'>"_THiRange_"</td>"
    	w "<td style='display:none' class='TLoRange'>"_TLoRange_"</td>"
.
   		w "<td class='date'><input autocomplete='off' type='text' onkeyup='dataChange(event)' placeholder='dd/mm/yyyy' value='"
   		if (rDate = "31/12/1840"){s rDate = ""}
   		if (rDate'=""){
	   		//w $REPLACE(rDate,"/","-")
	   		w rDate
	   		
   		}
   		
   		w "'></td>",!
    	w "<td class='test-name"_nameCheck_"'><input autocomplete='off' type='text' onkeyup='dataChange(event)' onfocus='saveForm()' value='"_r2_"'></td>",!
    	w "<td class='result-value"
    	if ('$ISVALIDNUM(r3)){
	        if (r3="")!($EXTRACT(r3)="<")!($EXTRACT(r3)=">"){}
	        else{
	    		w " issue"
	        }
    	}
    	;$j(r3,0,2)
    	w "'><input autocomplete='off' type='text' onkeyup='dataChange(event)' value='"_r3_"'></td>",!
    	w "<td class='unit"_unitCheck_"'><input autocomplete='off' type='text' onkeyup='dataChange(event)' value='"_r4_"'></td>",!
    	w "<td class='l-range"
    	if ('$ISVALIDNUM(r5)){
	        if (r5="")!($EXTRACT(r5)="<")!($EXTRACT(r5)=">"){}
	        else{
		        w " issue"
	        }
    	}
    	else{
	    	if (r6<r5){
		        w " issue"
	    	}
    	}
    	;$j(r5,0,2)
    	w "'><input autocomplete='off' type='text' onkeyup='dataChange(event)' value='"_r5_"'></td>",!
    	w "<td class='u-range"
    	if ('$ISVALIDNUM(r6)){
	        if (r6="")!($EXTRACT(r6)="<")!($EXTRACT(r6)=">"){}
	    	else{
		    	w " issue"
	    	}
    	}
    	else{
	    	if (r6<r5){
		        w " issue"
	    	}
    	}
    	;$j(r6,0,2)
    	w "'><input autocomplete='off' type='text' onkeyup='dataChange(event)' value='"_r6_"'></td>",!
    	w "<td><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)'> <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)'></td>",!
    	w "</tr>",!	
    	;s count=count+1
	}
	q
WriteResultsAWS
	#import MX
	d INIT1^CSP999
	s rid = %session.Data("jxTransform","rid")
	&sql(SELECT Date(ReportDate) INTO :r1 FROM ResultBloodTest WHERE Record=:rid)
	n bk
	&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	s r7 = bk
	n count
	f count=1:1:$g(^AICLAUDE(rid,"rowCount")){   ;$o(^AICLAUDE(rid,""),-1)
		s rDate = $g(^AICLAUDE(rid,count,"testDate"))
		//i rDate="" s rDate=$replace($zdate(r1,4,,4),"/","-")
		i rDate="" s rDate=$zdate(r1,4,,4)
		s r2 = $g(^AICLAUDE(rid,count,"name"))
		s r3 = $g(^AICLAUDE(rid,count,"value")),r3=$replace($replace(r3,"*","")," ","")
		s r4 = $g(^AICLAUDE(rid,count,"unit"))
		s r6 = $g(^AICLAUDE(rid,count,"hiRange"))
		s r5 = $g(^AICLAUDE(rid,count,"loRange"))
		s (TName,TValue,TUnit,THiRange,TLoRange) = ""
			
		/*
		s TName = r2
		s TValue = r3
		s TUnit = r4
		s THiRange = r5
		s TLoRange = r6
		*/	
		d CleanData
			s ^FormData(userId, rid, count, "testDate")=rDate
			s ^FormData(userId, rid, count, "testName")=r2
			s ^FormData(userId, rid, count, "testValue")=r3
			s ^FormData(userId, rid, count, "testUnit")=r4
			s ^FormData(userId, rid, count, "testHiRange")=r6
			s ^FormData(userId, rid, count, "testLoRange")=r5
			
			
.
		/*&sql(SELECT SIName INTO :r8 FROM DiagnosticTest WHERE Name[:r2)
		if (r8=""){ 
			s nameCheck=" issue"
		}
		else{
			s nameCheck=""
		}
		&sql(SELECT count(*) INTO :r9 FROM DiagnosticTest WHERE Unit[:r4)
		if (r9=0){ 
			s unitCheck=" issue"
		}
		else{
			s unitCheck=""
		}*/
		s nameCheck=""
		s unitCheck=""
		if (r2 = ""){
			w "<tr>",!
			;w "<tr style=""display:none"" class=""deleted"">",!
		} else {
			w "<tr>",!
		}
		
		w "<td style='display:none' class='TName'>"_TName_"</td>"
    	w "<td style='display:none' class='TValue'>"_TValue_"</td>"
    	w "<td style='display:none' class='TUnit'>"_TUnit_"</td>"
    	w "<td style='display:none' class='THiRange'>"_THiRange_"</td>"
    	w "<td style='display:none' class='TLoRange'>"_TLoRange_"</td>"
.
   		w "<td class='date'><input autocomplete='off' type='text' onkeyup='dataChange(event)' placeholder='dd/mm/yyyy' value='"
   		if (rDate = "31/12/1840"){s rDate = ""}
   		if (rDate'=""){
	   		//w $REPLACE(rDate,"/","-")
	   		w rDate
	   		
   		}
   		
   		w "'></td>",!
    	w "<td class='test-name"_nameCheck_"'><input autocomplete='off' type='text' onkeyup='dataChange(event)' onfocus='saveForm()' value='"_r2_"'></td>",!
    	w "<td class='result-value"
    	if ('$ISVALIDNUM(r3)){
	        if (r3="")!($EXTRACT(r3)="<")!($EXTRACT(r3)=">"){}
	        else{
	    		w " issue"
	        }
    	}
    	;$j(r3,0,2)
    	w "'><input autocomplete='off' type='text' onkeyup='dataChange(event)' value='"_r3_"'></td>",!
    	w "<td class='unit"_unitCheck_"'><input autocomplete='off' type='text' onkeyup='dataChange(event)' value='"_r4_"'></td>",!
    	w "<td class='l-range"
    	if ('$ISVALIDNUM(r5)){
	        if (r5="")!($EXTRACT(r5)="<")!($EXTRACT(r5)=">"){}
	        else{
		        w " issue"
	        }
    	}
    	else{
	    	if (r6<r5){
		        w " issue"
	    	}
    	}
    	;$j(r5,0,2)
    	w "'><input autocomplete='off' type='text' onkeyup='dataChange(event)' value='"_r5_"'></td>",!
    	w "<td class='u-range"
    	if ('$ISVALIDNUM(r6)){
	        if (r6="")!($EXTRACT(r6)="<")!($EXTRACT(r6)=">"){}
	    	else{
		    	w " issue"
	    	}
    	}
    	else{
	    	if (r6<r5){
		        w " issue"
	    	}
    	}
    	;$j(r6,0,2)
    	w "'><input autocomplete='off' type='text' onkeyup='dataChange(event)' value='"_r6_"'></td>",!
    	w "<td><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)'> <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)'></td>",!
    	w "</tr>",!	
    	;s count=count+1
	}
	q	
WriteResults
	#import MX
	d INIT1^CSP999
	s rid = %session.Data("jxTransform","rid")
	s userId = $g(%session.Data("UserID"))
	i $g(%session.Data("jxTransform","rid","reportMethod"))="GPT",$d(^AIDATA(rid)),'$d(^FormData(userId, rid)) d WriteResultsGPT q
	i $g(%session.Data("jxTransform","rid","reportMethod"))="AWS",$d(^AICLAUDE(rid)),'$d(^FormData(userId, rid)) d WriteResultsAWS q
	&sql(SELECT ID 
		INTO :rbt
		FROM ResultBloodTest
		WHERE Record=:rid
	)
	&sql(DECLARE C1 CURSOR FOR
		SELECT Date(ResultBloodTest->ReportDate),Tests_TestName,Tests_Result,Tests_SIUnit,Tests_LowRange,Tests_HighRange,Date(ResultBloodTest->Record->ReportDate),Tests_TestDate
		INTO :r1,:r2,:r3,:r4,:r5,:r6,:r7,:testDate
		FROM ResultBloodTest_Tests 
		WHERE ResultBloodTest=:rbt
	)
	
	// START added by BoBo on Sep 14 
	n bk
	&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	/// added by BoBo on Sep13 to store in globals
	if ($d(^FormData(userId, rid)) = 10){
		s count = 1
		while ($d(^FormData(userId, rid, count)) = 10){
			s r7 = bk
			s rDate = $g(^FormData(userId, rid, count, "testDate"))
			s r2 = $g(^FormData(userId, rid, count, "testName"))
			s r3 = $g(^FormData(userId, rid, count, "testValue"))
			s r4 = $g(^FormData(userId, rid, count, "testUnit"))
			s r6 = $g(^FormData(userId, rid, count, "testHiRange"))
			s r5 = $g(^FormData(userId, rid, count, "testLoRange"))
			
			s TName = $g(^FormData(userId, rid, count, "TName"))
			s TValue = $g(^FormData(userId, rid, count, "TValue"))
			s TUnit = $g(^FormData(userId, rid, count, "TUnit"))
			s THiRange = $g(^FormData(userId, rid, count, "THiRange"))
			s TLoRange = $g(^FormData(userId, rid, count, "TLoRange"))
		
			
			/*&sql(SELECT SIName INTO :r8 FROM DiagnosticTest WHERE Name[:r2)
			if (r8=""){ 
				s nameCheck=" issue"
			}
			else{
				s nameCheck=""
			}
			&sql(SELECT count(*) INTO :r9 FROM DiagnosticTest WHERE Unit[:r4)
			if (r9=0){ 
				s unitCheck=" issue"
			}
			else{
				s unitCheck=""
			}*/
			s nameCheck=""
			s unitCheck=""
			if (r2 = ""){
				w "<tr style=""display:none"" class=""deleted"">",!
			} else {
				w "<tr>",!
			}
			
			w "<td style='display:none' class='TName'>"_TName_"</td>"
	    	w "<td style='display:none' class='TValue'>"_TValue_"</td>"
	    	w "<td style='display:none' class='TUnit'>"_TUnit_"</td>"
	    	w "<td style='display:none' class='THiRange'>"_THiRange_"</td>"
	    	w "<td style='display:none' class='TLoRange'>"_TLoRange_"</td>"
			
	   		w "<td class='date'><input autocomplete='off' type='text' onkeyup='dataChange(event)' placeholder='dd/mm/yyyy' value='"
	   		if (rDate = "31/12/1840"){s rDate = ""}
	   		if (rDate'=""){
		   		//w $REPLACE(rDate,"/","-")
		   		w rDate
		   		
	   		}
	   		
	   		w "'></td>",!
	    	w "<td class='test-name"_nameCheck_"'><input autocomplete='off' type='text' onkeyup='dataChange(event)' onfocus='saveForm()' value='"_r2_"'></td>",!
	    	w "<td class='result-value"
	    	if ('$ISVALIDNUM(r3)){
		        if (r3="")!($EXTRACT(r3)="<")!($EXTRACT(r3)=">"){}
		        else{
		    		w " issue"
		        }
	    	}
	    	w "'><input autocomplete='off' type='text' onkeyup='dataChange(event)' value='"_r3_"'></td>",!
	    	w "<td class='unit"_unitCheck_"'><input autocomplete='off' type='text' onkeyup='dataChange(event)' value='"_r4_"'></td>",!
	    	w "<td class='l-range"
	    	if ('$ISVALIDNUM(r5)){
		        if (r5="")!($EXTRACT(r5)="<")!($EXTRACT(r5)=">"){}
		        else{
			        w " issue"
		        }
	    	}
    		else{
	    		if (r6<r5){
		        	w " issue"
	    		}
    		}
	    	w "'><input autocomplete='off' type='text' onkeyup='dataChange(event)' value='"_r5_"'></td>",!
	    	w "<td class='u-range"
	    	if ('$ISVALIDNUM(r6)){
		        if (r6="")!($EXTRACT(r6)="<")!($EXTRACT(r6)=">"){}
		    	else{
			    	w " issue"
		    	}
	    	}
    		else{
	    		if (r6<r5){
		        	w " issue"
	    		}
    		}
	    	w "'><input autocomplete='off' type='text' onkeyup='dataChange(event)' value='"_r6_"'></td>",!
	    	w "<td><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)'> <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)'></td>",!
	    	
.
	    	
	    	w "</tr>",!
	        
	        s count = +count + 1
		}
	}
	// END added by Bo Bo
	
	else {
 //start of else
	&sql(OPEN C1)
	&sql(FETCH C1)
	WHILE SQLCODE=0{
		/*&sql(SELECT SIName INTO :r8 FROM DiagnosticTest WHERE Name[:r2)
		if (r8=""){ 
			s nameCheck=" issue"
		}
		else{
			s nameCheck=""
		}
		&sql(SELECT count(*) INTO :r9 FROM DiagnosticTest WHERE Unit[:r4)
		if (r9=0){ 
			s unitCheck=" issue"
		}
		else{
			s unitCheck=""
		}*/
		s nameCheck=""
		s unitCheck=""
		w "<tr>",!
   		w "<td class='date'><input autocomplete='off' type='text' onkeyup='dataChange(event)' placeholder='dd/mm/yyyy' value='"
   		if (testDate'=""){
	   		w $REPLACE($ZDate(testDate),"/","-")
   		}
   		w "'></td>",!
    	w "<td class='test-name"_nameCheck_"'><input autocomplete='off' type='text' onkeyup='dataChange(event)' value='"_r2_"'></td>",!
    	w "<td class='result-value"
    	if ('$ISVALIDNUM(r3)){
	        if (r3="")!($EXTRACT(r3)="<")!($EXTRACT(r3)=">"){}
	        else{
	    		w " issue"
	        }
    	}
    	w "'><input autocomplete='off' type='text' onkeyup='dataChange(event)' value='"_r3_"'></td>",!
    	w "<td class='unit"_unitCheck_"'><input autocomplete='off' type='text' onkeyup='dataChange(event)' value='"_r4_"'></td>",!
    	w "<td class='l-range"
    	if ('$ISVALIDNUM(r5)){
	        if (r5="")!($EXTRACT(r5)="<")!($EXTRACT(r5)=">"){}
	        else{
		        w " issue"
	        }
    	}
    	else{
	    	if (r6<r5){
		        w " issue"
	    	}
    	}
    	w "'><input autocomplete='off' type='text' onkeyup='dataChange(event)' value='"_r5_"'></td>",!
    	w "<td class='u-range"
    	if ('$ISVALIDNUM(r6)){
	        if (r6="")!($EXTRACT(r6)="<")!($EXTRACT(r6)=">"){}
	    	else{
		    	w " issue"
	    	}
    	}
    	else{
	    	if (r6<r5){
		        w " issue"
	    	}
    	}
    	w "'><input autocomplete='off' type='text' onkeyup='dataChange(event)' value='"_r6_"'></td>",!
    	w "<td><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)'> <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)'></td>",!
    	w "</tr>",!
    	&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	} //end of else
    q
.
WriteResultTypes
	s rid=%session.Data("jxTransform","rid")
	&sql(SELECT Type
		INTO :reportType
	 	FROM Record 
	 	WHERE ID=:rid)
	&sql(DECLARE C2 CURSOR FOR
		SELECT DISTINCT %EXACT(ResultType)
		INTO :r1
		FROM DiagnosticType
		WHERE DeletedDate IS NULL
	)
	&sql(OPEN C2)
	&sql(FETCH C2)
	s num=1
	WHILE SQLCODE=0{
		w "<div class='item'>",!
        w "<div class='round'>",!
        w "<input autocomplete='off' name='report' id='C"_num_"' type='checkbox' value='"_r1_"'"
	 	if (reportType=r1) || (num=1){
		 	w " checked"
	 	}
        w ">",!
        w "<label for='C"_num_"'></label>",!
        w "</div>",!
        w "<p>"_r1_"</p>",!
        w "</div>",!
        s num=num+1
        &sql(FETCH C2)
	}
	&sql(CLOSE C2)
	q
LoadTestNames
	#import MX
	d INIT1^CSP999
	s testNames = ""
	&sql(DECLARE C3 CURSOR FOR
	SELECT DISTINCT %EXACT(name)
	INTO :r1 
	FROM DiagnosticTest
	WHERE LOWER(name)[LOWER(:d1)
	ORDER BY name
	)
	&sql(OPEN C3)
	&sql(FETCH C3)
	if SQLCODE=100 s testNames = "<li class='no-result'>No result found</li>"
	WHILE SQLCODE=0{
		s testNames=testNames_"<li onclick='changeTestName(event)' tabindex='-1'>"_r1_"</li>\n"
		&sql(FETCH C3)
	}
	&sql(CLOSE C3)
	&js<document.querySelector(".testname-dropdown").firstElementChild.innerHTML = "#(testNames)#">
	q	
.
LoadUnits
	s units = ""
	&sql(DECLARE C4 CURSOR FOR
	SELECT DISTINCT %EXACT(SIName) 
	INTO :r1
	FROM SIUnit
	WHERE LOWER(SIName)[LOWER(:d1)
	)
	&sql(OPEN C4)
	&sql(FETCH C4)
	if SQLCODE=100 s units = "<li class='no-result'>No result found</li>"
	WHILE SQLCODE=0{
		s units=units_"<li onclick='changeUnit(event)' tabindex='-1'>"_r1_"</li>\n"
		&sql(FETCH C4)
	}
	&sql(CLOSE C4)
	&js<document.querySelector(".unit-dropdown").firstElementChild.innerHTML = "#(units)#">
	q
	
SaveReport
	s rid=$g(%session.Data("jxTransform","rid"))
	s sid=$g(%session.Data("SessionId"))
	i sid'="",rid="" s rid=$g(^jxTransform(sid,"cReviewResults"))
	&sql(UPDATE Record SET Type=:d1,ReportDate=Date(:d2) WHERE ID=:rid)
	&sql(UPDATE ResultBloodTest SET ReportDate=DATE(:d2) WHERE ID=:rbt)
	q
	
SaveResult
.
	// bobo added here
	
.
	if (d1=0){
		&sql(DELETE from ResultBloodTest_Tests WHERE ResultBloodTest=:rbt)
	}
	s objx=##class(ResultBloodTest).%OpenId(rbt)
	s objx1=##class(ResultBloodTestValue).%New()
	s objx1.TestName=d2
	s objx1.Result=d3
	s objx1.SIUnit=d4
	s objx1.LowRange=d5
	s objx1.HighRange=d6
	
	d objx.Tests.SetAt(objx1,d1+1)
	d objx.%Save()
	s objrbt=""
	q
	
SaveNonBloodResult
	q
.
CheckIncomingTestName(testName,testUnit)
	s testNameX=testName_" #"
	s testNameResult=""
	&sql(SELECT ID INTO :testNameResult FROM DiagnosticTest WHERE Name=:testNameX AND IsNull(DeletedDate,'')='' AND ApprovedDate IS NOT NULL AND ModifiedDate<=ApprovedDate)
	i testUnit'="%",testNameResult'="" s testName=testNameX
	q testName
    
    

cReviewResultsS2^MAC^^67158,27363.3402717^0
cReviewResultsS2	; old review system
InitMe
	#import MX
	d INIT1^CSP999
	i ($g(%session.Data("UserID"))=""){
		&js<window.open("cLockdown.csp","_self")>
		q 
	}
	s rid=$g(%session.Data("jxTransform","rid"))
	&js<document.getElementById("trans-id").innerHTML="Transaction ID. #(rid)#";rid=#(rid)#>
	&sql(SELECT Profile,BucketName,fExt
		INTO :cID,:tName,:fExt
	 	FROM Record 
	 	WHERE ID=:rid)
	&sql(SELECT ContactPerson,UserID INTO :cName,:uName FROM "User" WHERE ID=:cID)
	if ($LENGTH(cName)=0){
		s uName=$ZCONVERT($P(uName,"@",1),"s")
		&js<document.getElementById("cName").innerHTML = "#(uName)#">
		&js<document.getElementById("cName1").innerHTML = "#(uName)#">
	}
	else{
		&js<document.getElementById("cName").innerHTML = "#(cName)#">
		&js<document.getElementById("cName1").innerHTML = "#(cName)#">
	}
	&js<document.getElementById("tName").innerHTML = "#(tName)#">
	&js<document.getElementById("tName1").innerHTML = "#(tName)#">
	if (fExt="hl7")!(fExt="xml")!(fExt="json")!(fExt="xlsx"){
		&js<document.querySelector(".grey-btn").style.display="none">
	}
	s ^LastView("cReviewResults",UserID,rid)="cReviewResultsS2.csp"
	q
.
WriteResults
	#import MX
	d INIT1^CSP999
	i ($g(%session.Data("UserID"))=""){
		&js<window.open("cLockdown.csp","_self")>
		q 
	}
	s rid=$g(%session.Data("jxTransform","rid"))
	&sql(SELECT ID 
		INTO :rbt
		FROM ResultBloodTest
		WHERE Record=:rid
	)
	n bk
	&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	/// added by BoBo on Sep13 to store in globals
	s userId = $g(%session.Data("UserID"))
	if ($d(^FormData(userId, rid)) = 10){
		s count = 1
		while ($d(^FormData(userId, rid, count)) = 10){
			s r7 = bk
			//s rDate = $g(^FormData(userId, rid, count, "date"))
			s rDate = $g(^FormData(userId, rid, count, "testDate"))
			s r2 = $g(^FormData(userId, rid, count, "testName"))
			s r3 = $g(^FormData(userId, rid, count, "testValue"))
			s r4 = $g(^FormData(userId, rid, count, "testUnit"))
			s r6 = $g(^FormData(userId, rid, count, "testHiRange"))
			s r5 = $g(^FormData(userId, rid, count, "testLoRange"))
			
			s TName = $g(^FormData(userId, rid, count, "TName"))
			s TValue = $g(^FormData(userId, rid, count, "TValue"))
			s TUnit = $g(^FormData(userId, rid, count, "TUnit"))
			s THiRange = $g(^FormData(userId, rid, count, "THiRange"))
			s TLoRange = $g(^FormData(userId, rid, count, "TLoRange"))
			
			/*
			if ($L(r2)=0){
				s count = +count + 1
				continue
			}
			*/
			//SELECT ResultBloodTest->Record->ReportDate,Tests_TestName2,Tests_Result3,Tests_SIUnit4,Tests_LowRange5,Tests_HighRange6, rsultBloodTest->Record->BucketName7,ResultBloodTest->ReportDate8
			//INTO :r1,:r2,:r3,:r4,:r5,:r6,:r7,:rDate
			if (r2 = ""){
				w "<tr style=""display:none"" class=""deleted""></tr>",!
				s count = +count + 1
				continue
			} else {
				w "<tr>",!
			}
			
			//w "<tr>",!
	        w "<td class='date'>"
	      	
	      	if (rDate = "31/12/1840"){s rDate = ""}
	      	if (rDate '= 0){
		   		//w $REPLACE(rDate,"/","-")
		   		w rDate
	      	}
	        w "</td>",!
	        w "<td class='test-name'>"_r2_"</td>",!
	        /*&sql(SELECT ID,SIName
	        	INTO :ID,:SIName
	        	FROM DiagnosticTest 
	        	WHERE LOWER(name)[LOWER(:r2)
	        )
	        &sql(SELECT Name,UnitName
	        	INTO :r8,:r9
	        	FROM Template 
	        	WHERE DiagnosticTest=:SIName 
	        	AND BucketName=:r7
	        )*/
		    
	        //New form of Translation - 28th Sept,2023
	        s translation=$$BiomarkerTranslation1($$CheckIncomingTestName^cReviewResultsS1(r2,r4),bk) 
	        s SIName=$p(translation,$c(1),1)
	        s r8=$p(translation,$c(1),2)  	;template_name
	        s r9=$p(translation,$c(1),3) 	;template_unit
	        
		    s transVal=r3
		    s transLVal=r5
		    s transUVal=r6
		    s convertCheck = 0
		    //if (r4'=r9){
	    	if ($zconvert(r4,"l")'=$zconvert(r9,"l"))&(r9'=""){
		    	s convertCheck = 1
		        s transVal=$$U2U^WSP999(SIName,r3,r4,r9) ;$$CheckAndConvertNum(SIName,r3,r4,r9) ;changed on 2024-07-10 Martin
		        s transLVal=$$U2U^WSP999(SIName,r5,r4,r9) ;$$CheckAndConvertNum(SIName,r5,r4,r9)
		        s transUVal=$$U2U^WSP999(SIName,r6,r4,r9) ;$$CheckAndConvertNum(SIName,r6,r4,r9)
		        
		    }
		    if ($L(TName)>0){
			   w "<td class='transformed-name"
			   if (TName'=r2) w " converted"
			   w "'><input type='text' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"
		        _$$C2H^WSP999(TName)_"' placeholder='Translation missing'></td>",!
			}
	        elseif(($L(TName)=0)&(r8="")){
	        	w "<td class='transformed-name'><input type='text' autocomplete='off' onkeyup='dataChange(event)'  onfocus='saveToGlobals()' value='"
		        _$$C2H^WSP999(r2)_"' placeholder='Translation missing'></td>",!
	        }
	        else{
		       	w "<td class='transformed-name"
		       	if (r2'=r8) w " converted"
		       	w "'><input type='text' autocomplete='off' onkeyup='dataChange(event)'  onfocus='saveToGlobals()' value='"_$$C2H^WSP999(r8)_"'></td>",!
	        }
	        w "<td class='result'>"_$$C2H^WSP999(r3)_"</td>",!
	        w "<td class='from-unit'>"_$$C2H^WSP999(r4)_"</td>",!
	        w "<td class='convert-result-val"
		    if ($L(TValue)>0)&&($ISVALIDNUM(TValue)){
		    }
	        elseif ('$ISVALIDNUM(transVal)){
		        if ($EXTRACT(transVal)="<")!($EXTRACT(transVal)=">"){}		        
		        elseif  (transVal[":") {}
		        else{
			        w " issue"
		        }
	        }
	        if (convertCheck) w " converted"
	        w "'>"
	        if (r9=""){
		        s r9=r4
		        w "<img src='./assets/images/info.png' alt='Info' onclick='showInfo(event)'><p class='info-text'>Unit output not defined</p>"
	        }
	   //Transformed VALUE     
		    if ($L(TValue)>0){
			 	w "<input type='text' autocomplete='off' onkeyup='dataChange(event)' value='"_$$FormatNumber^cMain(TValue,2)_"'></td>",!
			} else {
		    	w "<input type='text' autocomplete='off' onkeyup='dataChange(event)' value='"_$$FormatNumber^cMain(transVal,2)_"'></td>",!
			}
			
	        w "<td class='convert-result-unit"
	        if ($ISVALIDNUM(r9)){
		        if (r9="")!($EXTRACT(r9)="<")!($EXTRACT(r9)=">"){}
		        else{
			        w " issue"
		        }
	        }
	        if (convertCheck) w " converted"
	   // Transformed Unit
	   		if ($L(TUnit)>0){
		   		w "'><div class='dropdown' onclick='openUnitSuggestions(event)' tabindex='-1'>"_TUnit_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>",!
	   		}else {     
	        	w "'><div class='dropdown' onclick='openUnitSuggestions(event)'tabindex='-1'>"_r9_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>",!
	   		}
	        w "<td class='l-range'>"_r5_" "_r4_"</td>",!
	        w "<td class='l-result-val"
	        if ('$ISVALIDNUM(transLVal)){
		        if (transLVal="")!($EXTRACT(transLVal)="<")!($EXTRACT(transLVal)=">"){}
		        elseif ($Length($ZSTRIP(transLVal,"<>W"))=0){
		        	w " issue"
		        }
		        else{
		        }
	        }
	        if (convertCheck) w " converted"
	   // Transformed LoRange
	   		if ($L(TLoRange)>0){
		   		w "'><input type='text' autocomplete='off' onkeyup='dataChange(event)' value='"_$$FormatNumber^cMain(TLoRange,2)_"'></td>",!
		   	} else {
	        	w "'><input type='text' autocomplete='off' onkeyup='dataChange(event)' value='"_$$FormatNumber^cMain(transLVal,2)_"'></td>",!
		   	}
		   	
		   	if ($L(TUnit)>0){
	        	w "<td class='l-result-unit'>"_TUnit_"</td>",!
		   	} else {
		   		w "<td class='l-result-unit'>"_r9_"</td>",!
		   	}
		   	
	        w "<td class='u-range'>"_r6_" "_r4_"</td>",!
	        w "<td class='u-result-val"
	        if ('$ISVALIDNUM(transUVal)){
		        if (transUVal="")!($EXTRACT(transUVal)="<")!($EXTRACT(transUVal)=">"){}
		        elseif ($Length($ZSTRIP(transUVal,"<>W"))=0){
		        	w " issue"
		        }
		        else{
		        }
	        }
	        if (convertCheck) w " converted"
	    // Transformed HiRange
	   		if ($L(THiRange)>0){
	   			 w "'><input type='text' autocomplete='off' onkeyup='dataChange(event)' value='"_$$FormatNumber^cMain(THiRange,2)_"'></td>",!
	   		} else {
	   			 w "'><input type='text' autocomplete='off' onkeyup='dataChange(event)' value='"_$$FormatNumber^cMain(transUVal,2)_"'></td>",!
	   		}
	       	if ($L(TUnit)>0){
	        	w "<td class='u-result-unit'>"_TUnit_"</td>",!
	       	} else {
	       		w "<td class='u-result-unit'>"_r9_"</td>",!
	       	}
	        w "</tr>",!
	        
	        s count = +count + 1
		}
	}
	/// END added by BoBo on Sep13
	
	else { //start of else
	&sql(DECLARE C1 CURSOR FOR
		SELECT ResultBloodTest->Record->ReportDate,Tests_TestName,Tests_Result,Tests_SIUnit,Tests_LowRange,Tests_HighRange,ResultBloodTest->Record->BucketName,ResultBloodTest->ReportDate
		INTO :r1,:r2,:r3,:r4,:r5,:r6,:r7,:rDate
		FROM ResultBloodTest_Tests 
		WHERE ResultBloodTest=:rbt
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	WHILE SQLCODE=0{
		w "<tr>",!
        w "<td class='date'>"
        if (r1=""){
	   		if (rDate'=""){
	   			w $REPLACE($ZDate(rDate),"/","-")
	   		}
   		}
   		else{
	   		w $REPLACE($ZDate(r1),"/","-")
   		}
        w "</td>",!
        w "<td class='test-name'>"_r2_"</td>",!
        /*&sql(SELECT ID,SIName
	        INTO :ID,:SIName
	        FROM DiagnosticTest 
	        WHERE LOWER(name)[LOWER(:r2)
	    )
	    &sql(SELECT Name,UnitName
	        INTO :r8,:r9
	        FROM Template 
	        WHERE DiagnosticTest=:SIName 
	        AND BucketName=:r7
	    )*/
		    
	    //New form of Translation - 28th Sept,2023
	    s translation=$$BiomarkerTranslation($$CheckIncomingTestName^cReviewResultsS1(r2,r4),bk)
	    s SIName=$p(translation,$c(1),1)
	    s r8=$p(translation,$c(1),2)
	    s r9=$p(translation,$c(1),3)
	    
	        
		s transVal=r3
		s transLVal=r5
		s transUVal=r6
		s convertCheck=0
		//if (r4'=r9){
	    if ($zconvert(r4,"l")'=$zconvert(r9,"l"))&(r9'=""){
		    s convertCheck=1
		    s transVal=$$U2U^WSP999(SIName,r3,r4,r9) ;changed on 2024-07-10 Martin
		    s transLVal=$$U2U^WSP999(SIName,r5,r4,r9)
		    s transUVal=$$U2U^WSP999(SIName,r6,r4,r9)
		}
        if (r8=""){
        	w "<td class='transformed-name'><input type='text' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"
	        _r2_"' placeholder='Translation missing'></td>",!
        }
        else{
	       	w "<td class='transformed-name"
	       	s TName=$g(TName)
	       	if (TName'=r8) w " converted"
			w "'><input type='text' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r8_"'></td>",!
        }
        w "<td class='result'>"_r3_"</td>",!
        w "<td class='from-unit'>"_r4_"</td>",!
        w "<td class='convert-result-val"
        if ('$ISVALIDNUM($$FormatNumber^cMain(transVal,2))){
	        if ($EXTRACT(transVal)="<")!($EXTRACT(transVal)=">"){}
	        elseif  (transVal[":") {}
	        else{
		        w " issue"
	        }
        }
        if (convertCheck) w " converted"
        w "'>"
        if (r9=""){
	        s r9=r4
	        w "<img src='./assets/images/info.png' alt='Info' onclick='showInfo(event)'><p class='info-text'>Unit output not defined</p>"
        }
	    w "<input type='text' autocomplete='off' onkeyup='dataChange(event)' value='"_$$FormatNumber^cMain(transVal,2)_"'></td>",!
        w "<td class='convert-result-unit"
        if ($ISVALIDNUM(r9)){w " issue"}
        if (convertCheck) w " converted"
        w "'><div class='dropdown' onclick='openUnitSuggestions(event)' tabindex='-1'>"_r9_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>",!
        w "<td class='l-range'>"_r5_" "_r4_"</td>",!
        w "<td class='l-result-val"
        if ('$ISVALIDNUM(transLVal)){
	        if (transLVal="")!($EXTRACT(transLVal)="<")!($EXTRACT(transLVal)=">"){}
	        elseif ($Length($ZSTRIP(transLVal,"<>W"))=0){
	        	w " issue"
	        }
	        else{
	        }
        }
	    if (convertCheck) w " converted"
        w "'><input type='text' autocomplete='off' onkeyup='dataChange(event)' value='"_$$FormatNumber^cMain(transLVal,2)_"'></td>",!
        w "<td class='l-result-unit'>"_r9_"</td>",!
        w "<td class='u-range'>"_r6_" "_r4_"</td>",!
        w "<td class='u-result-val"
        if ('$ISVALIDNUM(transUVal)){
	        if (transUVal="")!($EXTRACT(transUVal)="<")!($EXTRACT(transUVal)=">"){}
	        elseif ($Length($ZSTRIP(transUVal,"<>W"))=0){
	        	w " issue"
	        }
	        else{
	        }
        }
        if (convertCheck) w " converted"
        w "'><input type='text' autocomplete='off' onkeyup='dataChange(event)' value='"_$$FormatNumber^cMain(transUVal,2)_"'></td>",!
        w "<td class='u-result-unit'>"_r9_"</td>",!
        w "</tr>",!
        &sql(FETCH C1)
	}
	&sql(CLOSE C1)
	} // end of else
    q
.
FileStatusChange
	#import MX
	d INIT1^CSP999
	s rid=%session.Data("jxTransform","rid")
	if (d2="Failure"){
		&sql(UPDATE Record SET Note=:d1,Status=:d2,Reason=:d3,ReviewedDate=GETDATE() WHERE ID=:rid)
		
		// must add to error table based on the selection of reasion
		s errCode = "100"
		s errData = "test data"
		s errName = "test error from review"
		//The new errors are not populated yet, thus leads to '' in errCode,errData,errName
		&sql(SELECT Code,Description,Name INTO :errCode,:errData,:errName FROM ErrorCode WHERE FriendlyDescription=:d3)
		
		s dt = $zdatetime($h,3)
		&sql(SELECT BucketName,OrgFile INTO :bk,:fName FROM Record WHERE ID=:rid)
		s errData = $REPLACE(errData,"[yyyy-mm-dd hh:mm]",dt)
		s errData = $REPLACE(errData,"[filename]",fName)
		s errData = $REPLACE(errData,"[bucket]",bk)
		&sql(INSERT INTO MX.Error (Code, Data, Name, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :dt, :rid, :bk))
	}
	else{
		&sql(UPDATE Record SET Note=:d1,Status=:d2,Reason=:d3 WHERE ID=:rid)
	}
	
	q
	
ConvertResults
	#import MX
	d INIT1^CSP999
	&sql(SELECT SIName 
	INTO :r1
	FROM DiagnosticTest
	WHERE LOWER(Name)[LOWER(:d1)
	)
	s cVal = $$U2U^WSP999(r1,d2,d5,d6) ;$$CheckAndConvertNum(r1,d2,d5,d6)  ;changed on 2024-03-26 Martin
	s lVal = $$U2U^WSP999(r1,d3,d5,d6) ;$$CheckAndConvertNum(r1,d3,d5,d6) ;
	s uVal = $$U2U^WSP999(r1,d4,d5,d6) ;$$CheckAndConvertNum(r1,d4,d5,d6) ;
	&js<unitsCal.push("#($s(cVal="":"",1:$$FormatNumber^cMain(cVal,2)))#","#($s(lVal="":"",1:$$FormatNumber^cMain(lVal,2)))#","#($s(lVal="":"",1:$$FormatNumber^cMain(uVal,2)))#")>
	q
.
CheckAndConvertNum(SIName,value,fromUnit,toUnit) ;not use
	n x1,x2,x3,x4,val
	s (x1,x2,x3,x4,val,prefix)=""
	; value is null ;added by Martin 11/3/2024
	i value="" q value 
	; same unit
	i $zconvert(fromUnit,"l")=$zconvert(toUnit,"l") d  q value
	. i value["<=" s prefix="<=",value=$replace(value,"<=","")
	. i value[">=" s prefix=">=",value=$replace(value,">=","")
	. i value["</=" s prefix="</=",value=$replace(value,"</=","")
	. i value[">/=" s prefix=">/=",value=$replace(value,">/=","")
	. i value["<" s prefix="<",value=$replace(value,"<","")
	. i value[">" s prefix=">",value=$replace(value,">","")
	. s value=prefix_$fn(value,,2)
	; branch for Lipoprotein A
	if $zconvert(SIName,"l")="lipoprotein a",value="" q value ;added by Martin 11/3/2024
	if $zconvert(SIName,"l")="lipoprotein a",$zconvert(fromUnit,"l")="g/l",$zconvert(toUnit,"l")="nmol/l" set value=$fn(((value*100)*2.5),,2) quit value
	if $zconvert(SIName,"l")="lipoprotein a",$zconvert(fromUnit,"l")="mg/dl",$zconvert(toUnit,"l")="nmol/l" set value=$fn((value*2.5),,2) quit value
	; branch for HbA1c
	if $zconvert(SIName,"l")="hba1c",$zconvert(fromUnit,"l")="mmol/mol",$zconvert(toUnit,"l")="%" set value=$fn(((value/10.929)+2.15),,2) q value
	n xUnit,xtoUnit
	s xUnit="",xtoUnit=""
	i $zconvert(fromUnit,"l")=$zconvert(toUnit,"l") q value
	&sql(SELECT SIName INTO :xUnit FROM SIUnit WHERE SIName=:fromUnit)
	s xtoUnit=$$GetJXUnit^WSP999(toUnit)
	i xtoUnit="" s xtoUnit=$$GetSIUnit^WSP999(toUnit)
	;b:$g(DW)=1
	i xtoUnit'="" s toUnit=xtoUnit
	i xUnit=""	&sql(SELECT SIName INTO :xUnit FROM SIUnit WHERE Name=:fromUnit)
	i xUnit="" s xUnit=$$GetJXUnit^WSP999(fromUnit)
	i xUnit'="" s fromUnit=xUnit
	if ($ISVALIDNUM(value)){
		i $$U2U^WSP999(SIName,value,fromUnit,toUnit)'="ERROR CONVERTING" q $$U2U^WSP999(SIName,value,fromUnit,toUnit)
		; try getting a different test name
		&sql(SELECT TOP 1 DiagnosticTest INTO :SIName FROM SIUnitConversion WHERE ToUnit=:toUnit AND fromUnit=:fromUnit)	
		q $$U2U^WSP999(SIName,value,fromUnit,toUnit)
	}
	if (value=""){
		q ""
	}
	if ($EXTRACT(value)="<")!($EXTRACT(value)=">"){
		s fChar = $EXTRACT(value)
		q fChar_$$U2U^WSP999(SIName,$P(value,fChar,2),fromUnit,toUnit)
	}
	q value
	
WriteReasons
	#import MX
	d INIT1^CSP999
	&sql(DECLARE C3 CURSOR FOR
		SELECT FriendlyDescription 
		INTO :r1
		FROM ErrorCode
		WHERE IsReason=1
	)
	&sql(OPEN C3)
	&sql(FETCH C3)
	WHILE SQLCODE=0{
		w "<li onclick='selectReason(event)'>"_r1_"</li>"
		&sql(FETCH C3)
	}
	&sql(CLOSE C3)
	q
	
LoadTemplateNames
	#import MX
	d INIT1^CSP999
	&sql(SELECT Setting INTO :setting FROM "User" WHERE ID=:UserID)
	s testNames = ""
	&sql(DECLARE C4 CURSOR FOR
	SELECT DISTINCT %EXACT(name)
	INTO :r1 
	FROM Template
	WHERE LOWER(name)[LOWER(:d1)
	AND Setting=:setting
	ORDER BY name
	)
	&sql(OPEN C4)
	&sql(FETCH C4)
	if SQLCODE=100 s testNames = "<li class='no-result'>No result found</li>"
	WHILE SQLCODE=0{
		s testNames=testNames_"<li onclick='changeTestName(event)' tabIndex='-1'>"_r1_"</li>\n"
		&sql(FETCH C4)
	}
	&sql(CLOSE C4)
	&js<document.querySelector(".testname-dropdown").firstElementChild.innerHTML = "#(testNames)#">
	q
	
LoadUnitsBasedOnName
	s units=""
	s rid=$g(%session.Data("jxTransform","rid"))
	&sql(SELECT BucketName
	INTO :bk
	FROM Record
	WHERE id=:rid)
	
	&sql(SELECT UnitName 
	INTO :r1
	FROM Template
	WHERE LOWER(Name)[LOWER(:d1)
	AND BucketName=:bk
	)
	if (SQLCODE=0){
		s units="<li onclick='changeUnit(event)' tabindex='-1'>"_r1_"</li>\n"
	}
	if (r1'=d2){
		s units = units_"<li onclick='changeUnit(event)' tabindex='-1'>"_d2_"</li>\n"
	}
	&js<document.querySelector(".unit-dropdown").firstElementChild.innerHTML = "#(units)#">
	q
.
	
BiomarkerTranslation(name,bk)
	n flag
	s tempName=""
	s tempUnit=""
	s siName=""
	s name=$ZCONVERT(name,"l")
	//Rules for Matching Diagnostic Names:
	//1. Check for equals to SIName
	&sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(SIName)=:name AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	s flag=1
	//2. Check for equals to Name
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(Name)=:name AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	.s flag=2
	//name inside brackets
	s name1=$p($p(name,"(",2),")",1)
	
	//5. Check for %STARTSWITH SIName
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(SIName) %STARTSWITH :name AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	.s flag=3
	//6. Check for %STARTSWITH Name
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(Name) %STARTSWITH :name AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	.s flag=4
	//striping brackets,"-",#,trimming
	s name2=$ZSTRIP($REPLACE($REPLACE($REPLACE($REPLACE(name,"(",""),")",""),"-"," "),"#",""),"<>W")
	
	//7. Check for SIName = strip brackets and "-" and #
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(TRIM(REPLACE(REPLACE(REPLACE(REPLACE(SIName,'(',''),')',''),'-',' '),'#',''))) = :name2 AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	.s flag=5
	//8. Check for Name = strip brackets and "-" and #
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(TRIM(REPLACE(REPLACE(REPLACE(REPLACE(Name,'(',''),')',''),'-',' '),'#',''))) = :name2 AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	.s flag=6
	//3. Check for equals to (SIName = anything in bracket)
	//Potential failure for some words like 'PCV' which translates to Packed Cell Volume
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(SIName)=:name1 AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	.s flag=7
	//4. Check for equals to (Name = anything in bracket)
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(Name)=:name1 AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	.s flag=8
	//9. Check for SIName %CONTAINS x
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(SIName)[:name AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	.s flag=9
	//10. Check for Name %CONTAINS x
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(Name)[:name AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	.s flag=10
	/*//11. Check for x %CONTAINS SIName
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE :name[LOWER(SIName) HAVING LENGTH(SIName)>4)
	
	//12. Check for x %CONTAINS Name
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE :name[LOWER(Name) HAVING LENGTH(Name)>4)*/
	
	i siName'="" &sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:siName AND BucketName=:bk)
	q siName_$c(1)_tempName_$c(1)_tempUnit
	
BiomarkerTranslation1(name,bk)
	s tempName="",tempUnit=""
	s x=$$GetSIName^WSP999(name)
	i x'="" {
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:x AND BucketName=:bk )
		}
	q x_$c(1)_tempName_$c(1)_tempUnit
	
ClearTransformedData(userId,rid)
	//d ClearTransformedData^cReviewResultsS2(6,645)
	s count = 1
	while ($d(^FormData(userId, rid, count)) = 10){
		s ^FormData(userId, rid, count, "TName") = ""
		s ^FormData(userId, rid, count, "TValue") = ""
		s ^FormData(userId, rid, count, "TUnit") = ""
		s ^FormData(userId, rid, count, "THiRange") = ""
		s ^FormData(userId, rid, count, "TLoRange") = ""
	    s count = +count + 1
	}
	q
	
checkOutputFormat(d1)
	s format=""	
	&sql(SELECT Profile->Setting->OutputFormat INTO :format FROM MX.Record WHERE ID=:d1)
	;&js<let outputFormat=#(format)#>
	q format

cSIUnit^MAC^^67163,22162.5792085^0
cSIUnit		;Called from cSIUnit.csp
PopTab1
	// Fetch data from MX.SIUnit and Poppulate table
	#import MX
	d INIT1^CSP999
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID,Name,SIName,Description,UPPER(Name),ApprovedDate
		INTO :r1,:r2,:r3,:r4,:r5,:r6
		FROM SIUnit
		WHERE  DeletedDate IS NULL
		ORDER BY 5
	)
			/*
		WHERE ApprovedDate IS NOT NULL
		AND (ModifiedDate<=ApprovedDate OR ModifiedDate IS NULL) */
	&sql(OPEN C1)
	&sql(FETCH C1)
	s row=1
	WHILE SQLCODE=0{
		s row=row+1
		&js<document.getElementById("Tab1").insertRow(),
			document.getElementById("Tab1").rows[#(row)#].insertCell(0),
			document.getElementById("Tab1").rows[#(row)#].insertCell(1),
			document.getElementById("Tab1").rows[#(row)#].insertCell(2),
			document.getElementById("Tab1").rows[#(row)#].insertCell(3),
			document.getElementById("Tab1").rows[#(row)#].insertCell(4)>
		if r6="" &js<document.getElementById("Tab1").rows[#(row)#].cells[0].innerHTML="<span style='cursor:pointer' ><img src='./assets/images/Pending.png' style='width: 18%; height: 18%;' alt='Pending' title='Pending approval'></span>">
		else  &js<document.getElementById("Tab1").rows[#(row)#].cells[0].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r1)#</span>">	
		&js<
			document.getElementById("Tab1").rows[#(row)#].cells[1].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r2)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[2].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r3)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[3].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r4)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[4].innerHTML="<img style='cursor:pointer;height:15px' onclick='jDeleteMe(#(r1)#)' src='images/delete.gif'>"
		>
		&sql(FETCH C1)	
	}
	&sql(CLOSE C1)
	q
SortMe	;d1=5(By Name), d1=6(By SIName)
	#import MX
	d INIT1^CSP999
	s d1=+d1
	i d1=5 d PopTab1 q
	&sql(DECLARE C2 CURSOR FOR
		SELECT ID,Name,SIName,Description,UPPER(SIName)
		INTO :r1,:r2,:r3,:r4,:r5
		FROM SIUnit
		ORDER BY 5
	)
	&sql(OPEN C2)
	&sql(FETCH C2)
	s row=1
	WHILE SQLCODE=0{
		s row=row+1
		&js<document.getElementById("Tab1").insertRow(),
			document.getElementById("Tab1").rows[#(row)#].insertCell(0),
			document.getElementById("Tab1").rows[#(row)#].insertCell(1),
			document.getElementById("Tab1").rows[#(row)#].insertCell(2),
			document.getElementById("Tab1").rows[#(row)#].insertCell(3),
			document.getElementById("Tab1").rows[#(row)#].insertCell(4),
			document.getElementById("Tab1").rows[#(row)#].cells[0].innerHTML="<span style='cursor:pointer;font-color:black' onclick='jPopFields(#(r1)#)'>#(r1)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[1].innerHTML="<span style='cursor:pointer;font-color:black' onclick='jPopFields(#(r1)#)'>#(r2)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[2].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r3)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[3].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r4)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[4].innerHTML="<img style='cursor:pointer;height:15px' onclick='jDeleteMe(#(r1)#)' src='images/delete.gif'>"
		>
		&sql(FETCH C2)	
	}
	&sql(CLOSE C2)
	q
PopFields
	; Populate new input boxes with selected row data
	#import MX
	d INIT1^CSP999
	&sql(SELECT Name,SIName,Description
		INTO :r1,:r2,:r3
		FROM SIUnit
		WHERE ID=:d1
	)
	&js<T1.value="#(r1)#",T2.value="#(r2)#",T3.value="#(r3)#">
	q
DeleteMe
	; Delete the row of unit
	#import MX
	d INIT1^CSP999
	&sql(DELETE FROM SIUnit WHERE ID=:d1)
	q
SaveMe ; need to modify for pending approval :svaeUpdate from Diagnostic Test
	#import MX
	d INIT1^CSP999
	s date=$ZDATETIME($h,3)
	; strip double spaces
	f i=1:1:3 s @("d"_i)=$replace(@("d"_i),"  "," ")
	; end strip
	s id=""
	&sql(SELECT ID,Name INTO :id FROM SIUnit WHERE %EXACT(Name)=:d1)
	i id="" d
	.if (UserID=3)!(UserID=2){ &sql(INSERT INTO SIUnit (Name,SIName,Description,CreatedDate,ModifiedDate,ApprovedDate) VALUES (:d1,:d2,:d3,:date,:date,:date))}
	.&sql(INSERT INTO SIUnit (Name,SIName,Description,CreatedDate,ModifiedDate) VALUES (:d1,:d2,:d3,:date,:date))
	;i id'="" &sql(UPDATE SIUnit SET Name=:d1,SIName=:d2,Description=:d3 WHERE id=:id)
	
	q
	
.
	;ForUnitAPPROVAL
ApprovalInitMe
	#import MX
	d INIT1^CSP999
	d LoadUnapprovedUnits^cSIUnit(1)
	q	 
	
LoadUnapprovedUnits(orderCol)	; Fetch data and pop table, Default sorting(1) Name ASC
	#import MX
	d INIT1^CSP999
	n id,name,jxName,description
	s totalcount=0
	//Search for records that is approved since Last View
	&sql(DECLARE CU0 CURSOR FOR
		SELECT ID,Name,SIName,Description
		INTO :id,:name,:jxName,:description
		FROM SIUnit
		WHERE (ApprovedDate IS NULL
		OR ModifiedDate>ApprovedDate)
		AND DeletedDate IS NULL
		ORDER BY 
			CASE WHEN :orderCol=1 Then Name END,
			CASE WHEN :orderCol=2 Then Name END DESC,
			CASE WHEN :orderCol=3 Then SIName END,
			CASE WHEN :orderCol=3 Then SIName END DESC
			
	)
	s tbodyContent = ""
	&sql(OPEN CU0)
	&sql(FETCH CU0)
	if SQLCODE=100{
		&js<
		document.querySelector("table").remove();
		document.querySelector(".no-data").style.display="block";
		document.querySelector(".table-border").style.opacity=0;
		>
		q
	}
	WHILE SQLCODE=0{
		s tbodyContent = tbodyContent_$$WriteTr("unapproved",id,name,jxName,description,0,0)
		s totalcount=totalcount+1
		&sql(FETCH CU0)
	}
	&sql(CLOSE CU0)
	&js<
	document.querySelector("tbody").innerHTML="#(tbodyContent)#";
	document.getElementById("TotalCount").innerHTML="";
	setTableBorderPos();>
	i totalcount>0 &js<document.getElementById("TotalCount").innerHTML="&nbsp;(#(totalcount)# records)";>
	q
	
WriteTr(d1,id,name,jxName,description,highlight,pending)	; Inject js for table
	s tr = "<tr key='"_id_"'"
	if (highlight) s tr = tr_" class='highlight'"
	if (pending) s tr = tr_" class='pending'"
	s tr = tr_">\n<td class='id'"
	if (pending){
		s tr = tr_"><img src='./assets/images/Pending.png' alt='Pending' title='Pending approval'></td>\n"
	}
	else{ 
		s tr = tr_">"_id_"</td>\n"
	}
	s tr = tr_"<td class='name'>"_name_"</td>\n"
    s tr = tr_"<td class='jx-name'>"_jxName_"</td>\n"
    s tr = tr_"<td class='description'>"_description_"</td>\n"
    s tr = tr_"<td class='actions"
    if (d1="deleted") s tr = tr_" hidden"
    if (d1="unapproved"){
	    s tr = tr_"'><img class='edit-icon' src='./assets/images/edit.png' alt='Edit' onclick='editRow(event)'><img src='./assets/images/true.png' alt='True' onclick='approveRow(event)'><img src='./assets/images/false.png' alt='False' onclick='rejectRow(event)'></td>\n</tr>"
	}
	else{
		s tr = tr_"'><img class='edit-icon' src='./assets/images/edit.png' alt='Edit' onclick='editRow(event)'> <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)'></td>\n</tr>"
	}
	q tr	
	
.
SaveUpdateUnit
	#import MX
	d INIT1^CSP999
	; strip double spaces
	s name=$replace(d1,"  "," "),jxName=$replace(d2,"  "," "),description=$replace(d3,"  "," ")
	; strip trailing spaces
	i $e(name,$l(name))=" " s name=$e(name,1,$l(name)-1)
	i $e(jxName,$l(jxName))=" " s jxName=$e(jxName,1,$l(jxName)-1)
	i $e(description,$l(description))=" " s description=$e(description,1,$l(description)-1)
	; leading spaces
	i $e(name,1,1)=" " s name=$e(name,2,999)	; Name
	i $e(jxName,1,1)=" " s jxName=$e(jxName,2,999)	; SIName
	i $e(description,1,1)=" " s description=$e(description,2,999)	; SIUnit
	; tab
	s name=$replace(name,$c(9),"")
	s jxName=$replace(jxName,$c(9),"")
	s description=$replace(description,$c(9),"")
	; end strip
	s test=""
	&sql(SELECT ID INTO :test FROM SIUnit WHERE Name=:name AND SIName=:jxName AND description=:description AND ISNULL(DeletedDate,'')='')
	if (test'="")&(test'=id){
		&js<alert("The data already exists in the database");dataExist=true;>
		q
	}
	s date=$ZDATETIME($h,3)
	if (id=""){
		&sql(INSERT INTO SIUnit (Name,SIName,Description,CreatedDate,ModifiedDate) VALUES (:name,:jxName,:description,:date,:date))
	}
	else{
		&sql(UPDATE SIUnit SET Name=:name,SIName=:jxName,Description=:description,ModifiedDate=:date WHERE ID=:id)
	}
	if (SQLCODE=0){
		&sql(SELECT ID INTO :id FROM SIUnit WHERE Name=:name AND SIName=:jxName AND Description=:description AND ISNULL(DeletedDate,'')='')
		s date=$ZDATETIME($h,3)
		&js<
			currentTr.querySelector(".id").innerHTML = #(id)#;
			currentTr.setAttribute("key",#(id)#);
		>
		if (UserID=3)!(UserID=2){
			&sql(UPDATE SIUnit SET ApprovedDate=:date WHERE ID=:id)
		}
		else{
			&js<
				currentTr.querySelector(".id").innerHTML="<img src='./assets/images/Pending.png' alt='Pending' title='Pending approval'>";
			>
		}
	}
	else{
		&js<alert("Some errors occured during the saving process")>
	}
	q
	
ApproveUnit
	#import MX
	d INIT1^CSP999
	s date = $zdatetime($h,3)
	&sql(UPDATE SIUnit SET ApprovedDate=:date WHERE ID=:id)
	if (SQLCODE=0){
		&js<removePopup1();openPopup2();>
	}
	else{
		&js<alert("Some error occured while approving entry")>
	}
	q
.
RejectUnit
	#import MX
	d INIT1^CSP999
	s date = $zdatetime($h,3)
	&sql(UPDATE SIUnit SET DeletedDate=:date WHERE ID=:id)
	if (SQLCODE=0){
		&js<removePopup3();openPopup4();>
	}
	else{
		&js<alert("Some error occured while rejecting entry")>
	}
	q	
	
LoadJxUnit
	#import MX
	d INIT1^CSP999
	&sql(DECLARE CS4 CURSOR FOR
		SELECT DISTINCT BY(SIName) ID,%EXACT(SIName) 
		INTO :r1,:r2
		FROM MX.SIUnit
		WHERE SIName[:d1
		ORDER BY SIName
	)
	s JXUnits = ""
	&sql(OPEN CS4)
	&sql(FETCH CS4)
	WHILE SQLCODE=0{
		s JXUnits=JXUnits_"<li value='"_r1_"' onclick='changeUnit(event)'>"_r2_"</li>"
		&sql(FETCH CS4)	
	}
	&sql(CLOSE CS4)
	&js<document.querySelector(".unit ul").innerHTML = "#(JXUnits)#">
	q		
UpdateUnit		; not using
	#import MX
	d INIT1^CSP999
	; strip double spaces
	s name=$replace(name,"  "," "),jxName=$replace(jxName,"  "," "),description=$replace(description,"  "," ")
	; end strip
	s test=""
	&sql(SELECT ID INTO :test FROM SIUnit WHERE Name=:name AND SIName=:jxName AND description=:description AND ISNULL(DeletedDate,'')='')
	if (test'="")&(id=""){
		&js<alert("The data added is already existed in the database");dataExist=true;>
		q
	}
	s date=$ZDATETIME($h,3)
	&sql(UPDATE SIUnit SET Name=:name,SIName=:jxName,Description=:description,ModifiedDate=:date WHERE ID=:id)
	if (SQLCODE'=0){
		&js<alert("Some errors occured during the saving process")>
	}
	q
	

cShowResults^MAC^^67159,31969.2479166^0
cShowResults	; not used ; old review system	;called from cReviewResults1
PopResults
	#import MX
	d INIT1^CSP999
	s rid=%session.Data("ShowResults")
	;;;; d cAWSOCR ONLY IF Record has not been reviewed
	s ReviewedDate="" &sql(SELECT IsNull(ReviewedDate,''),IsNull(ReportDate,'') INTO :ReviewedDate,:ReportDate FROM Record WHERE ID=:rid)
	s:ReviewedDate=$c(0) ReviewedDate=""
	i ReviewedDate="" 
	s obj=##class(MX.Record).%OpenId(rid)
	i +obj.OCR.Count()=0 s obj="" q
	s obj=""
	d ^cAWSOCR	; run only if it has OCR
	k test
	d GetResult
	q
GetResult
	s obj=##class(MX.Record).%OpenId(rid)
	i obj.ReviewedDate'="",obj.Type["Blood Test" q ;d ^cShowReviewed q
	&sql(SELECT ID INTO :rbt FROM ResultBloodTest WHERE Record=:rid)
	&sql(DELETE from ResultBloodTest_Tests WHERE ResultBloodTest=:rbt)
	i obj.HasError &js<C1.checked=1>
	i +obj.OCR.Count()<1 g EndResult
	s i=0
GetResult1
	s i=i+1
	g:i>obj.OCR.Count() EndResult
	s rec=$zconvert(obj.OCR.GetAt(i),"U")
	d GetTest
	g GetResult1
EndResult
	s obj=""
	s res=""
	s r1=""
	i '$d(test) d
	. k TestType("Blood Test")
	. &sql(UPDATE Record SET Type=replace(Type,'Blood Test,','') WHERE ID=:rid)
	. &sql(UPDATE Record SET Type=replace(Type,'Blood Test','') WHERE ID=:rid)
	&sql(SELECT OrgFile INTO :r1 FROM Record WHERE ID=:rid)
	i r1'="" s res="<span style='font-weight:bold'>File: </span>"_r1_"<br>"
	i +$g(ReportDate)>0 s res=res_"<span style='font-weight:bold'>Record Date: </span>"_$zdate(ReportDate,3)_"<br>"
	e  s res=res_"<span style='font-weight:bold'>Record Date: </span>UNKNOWN<br>"
	i $d(TestType) s (ttype,x)="" f i=1:1 d  q:x="" 
	. s x=$o(TestType(x)) q:x=""
	. s ttype=ttype_$s(ttype'="":", ",1:"")_$zconvert(x,"W")
	i $d(TestType) s res=res_"<span style='font-weight:bold'>Record Type: </span>"_ttype_"<br><hr>"
	i $d(test) s (ttype,x)="" f i=1:1 d  q:x="" 
	. s x=$o(test(x)) q:x=""
	. s val=$replace(test(x)," ","&nbsp;")
	. s res=res_val_"<br>"
	&js<document.getElementById("Tab1").rows[1].cells[0].innerHTML="#(res)#">
	q
GetTest
	; check if its a Test Name
	s (testid,rule,siunit)=""
	&sql(SELECT ID,Rule,SIName INTO :testid,:rule,:siname FROM DiagnosticTest WHERE Name=:rec)
	i testid="" &sql(SELECT ID,Rule,SIName INTO :testid,:rule,:siname FROM DiagnosticTest WHERE :rec %STARTSWITH(Name))
	q:testid=""
	d UpdateRBT
	; get columns
	i +rule>3 d GetCol4A,UpdateRBTV q
	i +rule>2 d GetCol3A,UpdateRBTV q
	i +rule>1 d GetCol2A,UpdateRBTV q
	i +rule=1 d GetCol1A,UpdateRBTV q
	q
UpdateRBT
	; update MX.ResultBloodTest
	s IsReviewed=""
	&sql(SELECT IsNull(ReviewedDate,'') INTO :IsReviewed FROM Record WHERE ID=:rid)
	s IsReviewed=$replace(IsReviewed,$c(0),"") q:IsReviewed'=""
	s rbt=""
	&sql(SELECT ID INTO :rbt FROM ResultBloodTest WHERE Record=:rid)
	q:rbt'=""
	i $d(TestType) s (ttype,x)="" f iii=1:1 d  q:x="" 
	. s x=$o(TestType(x)) q:x=""
	. s ttype=ttype_$s(ttype'="":", ",1:"")_$zconvert(x,"W")
	s:+ReportDate=0 ReportDate=""
	&sql(INSERT INTO ResultBloodTest SET Record=:rid,Type=:ttype,ReportDate=:ReportDate)
	q
UpdateRBTV
	; final checks for validity
	
	;i $l($p(arr1,Q,1))>20 q
	s AIerr=0 d ^cAI2 q:AIerr>0
.
	s IsReviewed=""
	&sql(SELECT IsNull(ReviewedDate,'') INTO :IsReviewed FROM Record WHERE ID=:rid)
	s IsReviewed=$replace(IsReviewed,$c(0),"") q:IsReviewed'=""
	s rbt="" &sql(SELECT ID INTO :rbt FROM ResultBloodTest WHERE Record=:rid)
	q:rbt=""
	s objxcount="" &sql(SELECT COUNT(ID) INTO :objxcount FROM ResultBloodTest_Tests WHERE ResultBloodTest=:rbt)
	s objxcount=objxcount+1
	s objx=##class(ResultBloodTest).%OpenId(rbt)
	s objx1=##class(ResultBloodTestValue).%New()
	; get SI Name of test
	s xsiname="",tname=$p(arr1,Q,1) &sql(SELECT SIName INTO :xsiname FROM DiagnosticTest WHERE Name=:tname)
	i xsiname'="" s $p(arr1,Q,1)=xsiname
	s objx1.TestName=$p(arr1,Q,1)
	s objx1.Result=$p(arr1,Q,2)
	s objx1.SIUnit=$p(arr1,Q,3)
	s lowrange=$p(arr1,Q,4)
	s highrange=$p(arr1,Q,5)
	s objx1.LowRange=lowrange
	s objx1.HighRange=highrange
	
	d objx.Tests.SetAt(objx1,objxcount)
	d objx.%Save()
	s objrbt=""
	q
GetCol4A
.
	s sp="                                                       "
	k arr
	s arr1=""
	f ii=i+1:1:i+10 s arr1=arr1_$s(arr1'="":Q,1:"")_obj.OCR.GetAt(ii)
	d ^StripChar
.
	s arr1=$replace(arr1,"mo /","mmol/")
	s arr1=$replace(arr1,"mmo./","mmol/")
	s arr1=$replace(arr1,"mmo. /","mmol/")
	s arr1=$replace(arr1,"mmo 1/","mmol/")
	s arr1=$replace(arr1,"mmo1/","mmol/")
.
	; check if VALUE has UNITS
	i $p(arr1,Q,1)[" " d
	. i (+$p($p(arr1,Q,1)," ",1)=$p($p(arr1,Q,1)," ",1)),$p($p(arr1,Q,1)," ",2)'="" d
	.. s x=$p($p(arr1,Q,1)," ",1)_Q_$p($p(arr1,Q,1)," ",2)
	.. s x=x_Q_$p(arr1,Q,2,9)
	.. s arr1=x
	; confirm if test is valid
	; column 3 & 4 should be together
	
	; check if VALUE (piece 1) is valid
	s x=$p(arr1,Q,1) d
	. s $p(arr1,Q,1)=$replace(x,"*","")
	. i $e(arr1,Q,1)=" " s $p(arr1,Q,1)=$e($p(arr1,Q,1),2,99)
	. s x=$p(arr1,Q,1)
	. i $l(x)=1,+x=0,x'=0 s arr1=$p(arr1,Q,2,$l(arr1,Q)) q
	. i $e(x,1)'="<",$e(x,1)'=">",+x=0,x'=0 s arr1=$p(arr1,Q,2,$l(arr1,Q))
	. ;s $p(arr1,Q,1)=+$p(arr1,Q,1)
	. ;i $p(arr1,Q,1)<1,$p(arr1,Q,1)>0 s $p(arr1,Q,1)="0"_$p(arr1,Q,1)
	. i $p(arr1,Q,1)[" " s $p(arr1,Q,1)=$p($p(arr1,Q,1)," ",1)_Q_$p($p(arr1,Q,1)," ",2)_Q_$p(arr1,Q,2,10)
	;i +$p(arr1,Q,1)=0 q
	s x1=$p(arr1,Q,2),x2=$p(arr1,Q,3),x3=$p(arr1,Q,4) 
	i +x2>0,x2'=0,x2[" " s x3=$p(x2," ",2),x2=$p(x2," ",1)
	i x1["-",$p(x1,"-",2)="" d
	. s $p(arr1,Q,2)=x1_x2,$p(arr1,Q,3)=x3
	i x1'["-",x1'["/",+x1>0,+x2>0 s $p(arr1,Q,2)=x1_"-"_x2,$p(arr1,Q,3)=x3
	
	; check if piece 3 & 4 contains unit of measurement
	i $p(arr1,Q,2)="",$p(arr1,Q,3)'=0,+$p(arr1,Q,3)'=0,$p(arr1,Q,3)[" " d
	. s $p(arr1,Q,2)=$p($p(arr1,Q,3)," ",2)
	i $p(arr1,Q,2)="",$p(arr1,Q,4)'=0,+$p(arr1,Q,4)'=0,$p(arr1,Q,4)[" " d
	. s $p(arr1,Q,2)=$p($p(arr1,Q,4)," ",2)
	
	; check if piece 5 contains unit of measurement
	i $p(arr1,Q,2)="" d
	. s x=$p(arr1,Q,5),x1="" 
	. &sql(SELECT ID INTO :x1 FROM SIUnit WHERE Name=:x OR SIName=:x)
	. i x1'="" s $p(arr1,Q,2)=x
	
	; check if range is missing "-"
	i $p(arr1,Q,2)[" " d
	. i $p($p(arr1,Q,2)," ",1)>0,$p($p(arr1,Q,2)," ",2)>0 s $p(arr1,Q,2)=$replace($p(arr1,Q,2)," ","-")
		
	; strip double spaces
	s arr1=$replace($replace($replace(arr1,"  "," "),"  "," "),"  "," ")
	
	; check if VALUE (piece 1) is valid
	s x=$p(arr1,Q,1) d
	. s $p(arr1,Q,1)=$replace(x,"*","")
	. i $e(arr1,Q,1)=" " s $p(arr1,Q,1)=$e($p(arr1,Q,1),2,99)
	. s x=$p(arr1,Q,1)
	. i $l(x)=1,+x=0,x'=0 s arr1=$p(arr1,Q,2,$l(arr1,Q)) q
	. i $e(x,1)'="<",$e(x,1)'=">",+x=0,x'=0 s arr1=$p(arr1,Q,2,$l(arr1,Q))
	
	i $p(arr1,Q,1)[" H" s $p(arr1,Q,1)=$p($p(arr1,Q,1)," H",1)
	i $p(arr1,Q,1)[" L" s $p(arr1,Q,1)=$p($p(arr1,Q,1)," L",1)
	
	; check for missing Unit
	s x=$p(arr1,Q,2),xid="",IsMissing=1
	&sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	i xid'="" s IsMissing=0,$p(arr1,Q,2)=$replace($p(arr1,Q,2)," ","")
	
	i x[" " s x=$p(x," ",1)
	i IsMissing &sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	i xid'="" s IsMissing=0
.
	i IsMissing d
	. s x=$p(arr1,Q,4)
	. &sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	. i xid'="" s IsMissing=0
.
	i IsMissing d
	. s x=$p(arr1,Q,3)
	. &sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	. i xid'="" s IsMissing=0
	
	i IsMissing d
	. s x=$p(arr1,Q,2)
	. i x[" " s x=$p(x," ",2)
	. &sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	. i xid'="" s IsMissing=0
	. i IsMissing=0 s x1=$p($p(arr1,Q,2)," ",1),x2=$p($p(arr1,Q,2)," ",2),$p(arr1,Q,2)=x2_Q_x1
.
	i IsMissing d
	. s x=$p(arr1,Q,3)
	. i x[" " s x=$p(x," ",2)
	. &sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	. i xid'="" s IsMissing=0
	. ;i IsMissing=0 s x1=$p($p(arr1,Q,3)," ",1),x2=$p($p(arr1,Q,3)," ",2),$p(arr1,Q,2)=x2_Q_x1
	i IsMissing s arr1=$p(arr1,Q,1)_Q_$c(3)_Q_$p(arr1,Q,2,10)
	
	i $p(arr1,Q,2)'["up to ",$l($p(arr1,Q,2)," ")>1 d		; contains space in between
	. s $p(arr1,Q,3)=$p($p(arr1,Q,2)," ",2)
	. s $p(arr1,Q,2)=$p($p(arr1,Q,2)," ",1)
.
	; strip !,@,#,$,^,&,*,(,),[,],{,},|,\,?,;,:,~,`,'
	d StripChar
			;;; check if piece 2 (value) not a number and length 1
			;;i $l($p(arr1,Q,2))<2,+$p(arr1,Q,2)<=0 s arr1=$p(arr1,Q,1)_Q_$p(arr1,Q,3,999) 
	s arr1=$replace(arr1,$c(3),"")
	s $p(arr1,Q,2)=$replace($p(arr1,Q,2)," ","")
	s arr1=$replace(arr1,"mo /","mmol/")
	s arr1=$replace(arr1,"mmo./","mmol/")
	s arr1=$replace(arr1,"mmo. /","mmol/")
	s arr1=$replace(arr1,"mmo 1/","mmol/")
	s arr1=$replace(arr1,"mmo1/","mmol/")
	i $e($p(arr1,Q,1),1,1)=" " s arr1=$e(arr1,2,$l(arr1))
	i $p(arr1,Q,1)[" " s $p(arr1,Q,1)=$p($p(arr1,Q,1)," ",1)_Q_$p($p(arr1,Q,1)," ",2)
	s $p(arr1,Q,1)=$replace($p(arr1,Q,1)," ","")
	s arr1=$replace(arr1," - ","-")
	s arr1=$replace(arr1,"- ","-")
	s arr1=$replace(arr1," -","-")
	s arr1=$replace(arr1," . ",".")
	s arr1=$replace(arr1,". ",".")
	s arr1=$replace(arr1," .",".")
	i $zconvert($p(arr1,Q,3),"l")["up to " s $p(arr1,Q,3)=$replace($p(arr1,Q,3)," ",$c(2)) g GetCol4A1
	i $zconvert($p(arr1,Q,3),"l")["over " s $p(arr1,Q,3)=$replace($p(arr1,Q,3)," ",$c(2)) g GetCol4A1
	i $p(arr1,Q,3)[" " s $p(arr1,Q,3)=$p($p(arr1,Q,3)," ",1)_"-"_$p($p(arr1,Q,3)," ",2)
	s $p(arr1,Q,3)=$replace($p(arr1,Q,3)," ","")
	i $p(arr1,Q,4)[" " s $p(arr1,Q,4)=$p($p(arr1,Q,4)," ",1)_"-"_$p($p(arr1,Q,4)," ",2)
	s $p(arr1,Q,4)=$replace($p(arr1,Q,4)," ","")
	s arr1=$replace(arr1," ","-")
	f ii=1:1:$l(arr1,Q) i $e($p(arr1,Q,ii),$l($p(arr1,Q,ii)))="-" s $p(arr1,Q,ii)=$e($p(arr1,Q,ii),1,$l($p(arr1,Q,ii))-1) 
	i $p(arr1,Q,3)="" s arr1=$p(arr1,Q,1,2)_Q_$p(arr1,Q,4,10)
	s arr1=$replace(arr1," ","-")
GetCol4A1
	s arr1=$replace(arr1,Q," ")	; delimit with " "
	s arr1=$replace(arr1,"-"," ")	; replace "-" with " "
	;; place holder
	s arr1=obj.OCR.GetAt(i)_Q_$replace(arr1," ",Q)		; reset delimiter to Q
	s arr1=$replace(arr1,$c(2)," ")	
.
	; check which column is Unit & Convert if needed
	i $p(arr1,Q,4)="random" d
	. s $p(arr1,Q,4)=$p(arr1,Q,3),$p(arr1,Q,4)=$p(arr1,Q,5)
	. i $p(arr1,Q,5)'=0,+$p(arr1,Q,5)'=0 s $p(arr1,Q,4)=$p(arr1,Q,5),$p(arr1,Q,5)=$p(arr1,Q,6)
.
	i $d(TestType("Blood Test")) s IsError=0 d ^AMI i IsError q
	; SI Unit & Ref Range
	; check which column is Unit & Convert if needed
	i $p(arr1,Q,4)="random" d
	. s $p(arr1,Q,4)=$p(arr1,Q,3),$p(arr1,Q,4)=$p(arr1,Q,5)
	. i $p(arr1,Q,5)'=0,+$p(arr1,Q,5)'=0 s $p(arr1,Q,4)=$p(arr1,Q,5),$p(arr1,Q,5)=$p(arr1,Q,6)
.
	; test name
	s test(i)=$zconvert(siname,"W")
	;s test(i)=$zconvert($p(arr1,Q,1),"W")
	; result
	s test(i)=test(i)_$e(sp,1,25-$l(test(i)))_$zconvert($p(arr1,Q,2),"W")
.
	&sql(SELECT ID,SIName INTO :r1,:r2 FROM SIUnit WHERE Name=:x)
	i r1'="" d
	. s x=$p(arr1,Q,1,2)_Q_$p(arr1,Q,5)_Q_$p(arr1,Q,3)_Q_$p(arr1,Q,4),arr1=x
	i r1="" d
	. s x=$p(arr1,Q,3)
	. &sql(SELECT ID,SIName INTO :r1,:r2 FROM SIUnit WHERE Name=:x)
	. i r1'="" d
	.. s x=$p(arr1,Q,1,2)_Q_r2_Q_$p(arr1,Q,4,5)
	.. s arr1=x
	. i r1="" d
	.. s x=$p(arr1,Q,1,2)_Q_"???"_Q_$p(arr1,2,5)
	.. ;s arr1=x
	s test(i)=test(i)_$e(sp,1,32-$l(test(i)))_$p(arr1,Q,3)
.
	i $p(arr1,Q,4)["random" d
	. s test(i)=$replace(test(i),siname,siname_" (random)")  
	. s x=siname_" (random)"
	. s x1=$e(test(i),1,$l(x))
	. s x2=$e(test(i),$l(x)+10,999)
	. s test(i)=x1_x2
	. s $p(arr1,Q,4)=$replace($p(arr1,Q,4),"random","")
	
	i $p(arr1,Q,4)["up to " d  q
	. s $p(arr1,Q,4)=$replace($p(arr1,Q,4),"up to ","<=")
	. s test(i)=test(i)_$e(sp,1,45-$l(test(i)))_$p(arr1,Q,4)
.
	i $p(arr1,Q,4)["greater than " d  q
	. s $p(arr1,Q,4)=$replace($p(arr1,Q,4),"greater than ",">")
	. s test(i)=test(i)_$e(sp,1,45-$l(test(i)))_$p(arr1,Q,4)
.
	i $p(arr1,Q,4)["over " d  q
	. s $p(arr1,Q,4)=$replace($p(arr1,Q,4),"over ",">")
	. s test(i)=test(i)_$e(sp,1,45-$l(test(i)))_$p(arr1,Q,4)
.
	s test(i)=test(i)_$e(sp,1,45-$l(test(i)))_$p(arr1,Q,4)
	i $p(arr1,Q,4)["<"!($p(arr1,Q,4)[">") d  q
	. s x=$p(arr1,Q,4)
	. s x=$replace(x," ","")
	. i $l(x)>1 q
	. s test(i)=test(i)_$p(arr1,Q,5)
	i $p(arr1,Q,5)'="" s test(i)=test(i)_$s($p(arr1,Q,4)'="":" - ",1:"")_$p(arr1,Q,5)
	q
GetCol3A
	s sp="                                                       "
	k arr
	s arr1=""
	f ii=i+1:1:i+10 s arr1=arr1_$s(arr1'="":Q,1:"")_obj.OCR.GetAt(ii)
	d ^StripChar
	
	s arr1=$replace(arr1,"mo /","mmol/")
	s arr1=$replace(arr1,"mmo./","mmol/")
	s arr1=$replace(arr1,"mmo. /","mmol/")
	s arr1=$replace(arr1,"mmo 1/","mmol/")
	s arr1=$replace(arr1,"mmo1/","mmol/")
.
	; check if VALUE has UNITS
	i $p(arr1,Q,1)[" " d
	. i (+$p($p(arr1,Q,1)," ",1)=$p($p(arr1,Q,1)," ",1)),$p($p(arr1,Q,1)," ",2)'="" s arr1=$p($p(arr1,Q,1)," ",1)_Q_$p($p(arr1,Q,1)," ",2)_Q_$p(arr1,Q,2,9)
	; confirm if test is valid
	; column 3 & 4 should be together
	
	; check if VALUE (piece 1) is valid
	s x=$p(arr1,Q,1) d
	. s $p(arr1,Q,1)=$replace(x,"*","")
	. i $e(arr1,Q,1)=" " s $p(arr1,Q,1)=$e($p(arr1,Q,1),2,99)
	. s x=$p(arr1,Q,1)
	. i $l(x)=1,+x=0,x'=0 s arr1=$p(arr1,Q,2,$l(arr1,Q)) q
	. i $e(x,1)'="<",$e(x,1)'=">",+x=0,x'=0 s arr1=$p(arr1,Q,2,$l(arr1,Q))
	. s $p(arr1,Q,1)=+$p(arr1,Q,1)
	. i $p(arr1,Q,1)<1,$p(arr1,Q,1)>0 s $p(arr1,Q,1)="0"_$p(arr1,Q,1)
	i +$p(arr1,Q,1)=0 q
.
	s x1=$p(arr1,Q,2),x2=$p(arr1,Q,3),x3=$p(arr1,Q,4) 
	i +x2>0,x2'=0,x2[" " s x3=$p(x2," ",2),x2=$p(x2," ",1)
	i x1["-",$p(x1,"-",2)="" d
	. s $p(arr1,Q,2)=x1_x2,$p(arr1,Q,3)=x3
	i x1'["-",x1'["/",+x1>0,+x2>0 s $p(arr1,Q,2)=x1_"-"_x2,$p(arr1,Q,3)=x3
.
	; check if range is missing "-"
	i $p(arr1,Q,2)[" " d
	. i $p($p(arr1,Q,2)," ",1)>0,$p($p(arr1,Q,2)," ",2)>0 s $p(arr1,Q,2)=$replace($p(arr1,Q,2)," ","-")
		
	; strip double spaces
	s arr1=$replace($replace($replace(arr1,"  "," "),"  "," "),"  "," ")
	
	; check if VALUE (piece 1) is valid
	s x=$p(arr1,Q,1) d
	. s $p(arr1,Q,1)=$replace(x,"*","")
	. i $e(arr1,Q,1)=" " s $p(arr1,Q,1)=$e($p(arr1,Q,1),2,99)
	. s x=$p(arr1,Q,1)
	. i $l(x)=1,+x=0,x'=0 s arr1=$p(arr1,Q,2,$l(arr1,Q)) q
	. i $e(x,1)'="<",$e(x,1)'=">",+x=0,x'=0 s arr1=$p(arr1,Q,2,$l(arr1,Q))
	
	i $p(arr1,Q,1)[" H" s $p(arr1,Q,1)=$p($p(arr1,Q,1)," H",1)
	i $p(arr1,Q,1)[" L" s $p(arr1,Q,1)=$p($p(arr1,Q,1)," L",1)
	; check for missing Unit
	s x=$p(arr1,Q,2),xid="",IsMissing=1
.
	&sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	i xid'="" s IsMissing=0,$p(arr1,Q,2)=$replace($p(arr1,Q,2)," ","")
	
	i x[" " s x=$p(x," ",1)
	i IsMissing &sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	i xid'="" s IsMissing=0
.
	i IsMissing d
	. s x=$p(arr1,Q,3)
	. &sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	. i xid'="" s IsMissing=0
	
	i IsMissing d
	. s x=$p(arr1,Q,2)
	. i x[" " s x=$p(x," ",2)
	. &sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	. i xid'="" s IsMissing=0
	. i IsMissing=0 s x1=$p($p(arr1,Q,2)," ",1),x2=$p($p(arr1,Q,2)," ",2),$p(arr1,Q,2)=x2_Q_x1
	
	i IsMissing d
	. s x=$p(arr1,Q,3)
	. i x[" " s x=$p(x," ",2)
	. &sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	. i xid'="" s IsMissing=0
	. ;i IsMissing=0 s x1=$p($p(arr1,Q,3)," ",1),x2=$p($p(arr1,Q,3)," ",2),$p(arr1,Q,2)=x2_Q_x1
	i IsMissing s arr1=$p(arr1,Q,1)_Q_$c(3)_Q_$p(arr1,Q,2,10)
.
	i $p(arr1,Q,2)'["up to ",$l($p(arr1,Q,2)," ")>1 d		; contains space in between
	. s $p(arr1,Q,3)=$p($p(arr1,Q,2)," ",2)
	. s $p(arr1,Q,2)=$p($p(arr1,Q,2)," ",1)
	
	; strip !,@,#,$,^,&,*,(,),[,],{,},|,\,?,;,:,~,`,'
	d StripChar
			;;; check if piece 2 (value) not a number and length 1
			;;i $l($p(arr1,Q,2))<2,+$p(arr1,Q,2)<=0 s arr1=$p(arr1,Q,1)_Q_$p(arr1,Q,3,999) 
	s arr1=$replace(arr1,$c(3),"")
	s $p(arr1,Q,2)=$replace($p(arr1,Q,2)," ","")
	s arr1=$replace(arr1,"mo /","mmol/")
	s arr1=$replace(arr1,"mmo./","mmol/")
	s arr1=$replace(arr1,"mmo. /","mmol/")
	s arr1=$replace(arr1,"mmo 1/","mmol/")
	s arr1=$replace(arr1,"mmo1/","mmol/")
	i $e($p(arr1,Q,1),1,1)=" " s arr1=$e(arr1,2,$l(arr1))
	i $p(arr1,Q,1)[" " s $p(arr1,Q,1)=$p($p(arr1,Q,1)," ",1)_Q_$p($p(arr1,Q,1)," ",2)
	s $p(arr1,Q,1)=$replace($p(arr1,Q,1)," ","")
	s arr1=$replace(arr1," - ","-")
	s arr1=$replace(arr1,"- ","-")
	s arr1=$replace(arr1," -","-")
	s arr1=$replace(arr1," . ",".")
	s arr1=$replace(arr1,". ",".")
	s arr1=$replace(arr1," .",".")
	i $zconvert($p(arr1,Q,3),"l")["up to " s $p(arr1,Q,3)=$replace($p(arr1,Q,3)," ",$c(2)) g GetCol3A1
	i $zconvert($p(arr1,Q,3),"l")["over " s $p(arr1,Q,3)=$replace($p(arr1,Q,3)," ",$c(2)) g GetCol3A1
	i $p(arr1,Q,3)[" " s $p(arr1,Q,3)=$p($p(arr1,Q,3)," ",1)_"-"_$p($p(arr1,Q,3)," ",2)
	s $p(arr1,Q,3)=$replace($p(arr1,Q,3)," ","")
	i $p(arr1,Q,4)[" " s $p(arr1,Q,4)=$p($p(arr1,Q,4)," ",1)_"-"_$p($p(arr1,Q,4)," ",2)
	s $p(arr1,Q,4)=$replace($p(arr1,Q,4)," ","")
	s arr1=$replace(arr1," ","-")
	f ii=1:1:$l(arr1,Q) i $e($p(arr1,Q,ii),$l($p(arr1,Q,ii)))="-" s $p(arr1,Q,ii)=$e($p(arr1,Q,ii),1,$l($p(arr1,Q,ii))-1) 
	i $p(arr1,Q,3)="" s arr1=$p(arr1,Q,1,2)_Q_$p(arr1,Q,4,10)
	s arr1=$replace(arr1," ","-")
GetCol3A1
	s arr1=$replace(arr1,Q," ")	; delimit with " "
	s arr1=$replace(arr1,"-"," ")	; replace "-" with " "
	;; place holder
	s arr1=obj.OCR.GetAt(i)_Q_$replace(arr1," ",Q)		; reset delimiter to Q
	s arr1=$replace(arr1,$c(2)," ")	
	
	i $d(TestType("Blood Test")) s IsError=0 d ^AMI i IsError q
	; SI Unit & Ref Range
	; check which column is Unit & Convert if needed
	s x=$p(arr1,Q,5)
	s (r1,r2)=""
	i $p(arr1,Q,4)="random" s $p(arr1,Q,4)=$p(arr1,Q,3),$p(arr1,Q,4)=$p(arr1,Q,5)
.
	; test name
	s test(i)=$zconvert(siname,"W")
	;s test(i)=$zconvert($p(arr1,Q,1),"W")
	; result
	s test(i)=test(i)_$e(sp,1,25-$l(test(i)))_$zconvert($p(arr1,Q,2),"W")
.
	&sql(SELECT ID,SIName INTO :r1,:r2 FROM SIUnit WHERE Name=:x)
	i r1'="" d
	. s x=$p(arr1,Q,1,2)_Q_$p(arr1,Q,5)_Q_$p(arr1,Q,3)_Q_$p(arr1,Q,4),arr1=x
	i r1="" d
	. s x=$p(arr1,Q,3)
	. &sql(SELECT ID,SIName INTO :r1,:r2 FROM SIUnit WHERE Name=:x)
	. i r1'="" d
	.. s x=$p(arr1,Q,1,2)_Q_r2_Q_$p(arr1,Q,4,5)
	.. s arr1=x
	. i r1="" d
	.. s x=$p(arr1,Q,1,2)_Q_"???"_Q_$p(arr1,2,5)
	.. ;s arr1=x
	s test(i)=test(i)_$e(sp,1,32-$l(test(i)))_$p(arr1,Q,3)
.
	i $p(arr1,Q,4)["random" d
	. s test(i)=$replace(test(i),siname,siname_" (random)")  
	. s x=siname_" (random)"
	. s x1=$e(test(i),1,$l(x))
	. s x2=$e(test(i),$l(x)+10,999)
	. s test(i)=x1_x2
	. s $p(arr1,Q,4)=$replace($p(arr1,Q,4),"random","")
	
	i $p(arr1,Q,4)["up to " d  q
	. s $p(arr1,Q,4)=$replace($p(arr1,Q,4),"up to ","<=")
	. s test(i)=test(i)_$e(sp,1,45-$l(test(i)))_$p(arr1,Q,4)
.
	i $p(arr1,Q,4)["greater than " d  q
	. s $p(arr1,Q,4)=$replace($p(arr1,Q,4),"greater than ",">")
	. s test(i)=test(i)_$e(sp,1,45-$l(test(i)))_$p(arr1,Q,4)
.
	i $p(arr1,Q,4)["over " d  q
	. s $p(arr1,Q,4)=$replace($p(arr1,Q,4),"over ",">")
	. s test(i)=test(i)_$e(sp,1,45-$l(test(i)))_$p(arr1,Q,4)
.
	s test(i)=test(i)_$e(sp,1,45-$l(test(i)))_$p(arr1,Q,4)
	/*
	i $p(arr1,Q,4)["<"!($p(arr1,Q,4)[">") d  q
	. s x=$p(arr1,Q,4)
	. s x=$replace(x," ","")
	. i $l(x)>1 q
	. s test(i)=test(i)_$p(arr1,Q,5)
	i $p(arr1,Q,5)'="" s test(i)=test(i)_$s($p(arr1,Q,4)'="":" - ",1:"")_$p(arr1,Q,5)
	*/
	q
GetCol2A
	s sp="                                   "
	k arr
	s arr1=""
	f ii=i:1:i+10 s arr1=arr1_$s(arr1'="":Q,1:"")_obj.OCR.GetAt(ii)
	; strip double spaces
	s arr1=$replace($replace($replace(arr1,"  "," "),"  "," "),"  "," ")
	; strip !,@,#,$,^,&,*,(,),[,],{,},|,\,?,;,:,~,`,'
	s x="! @ # $ ^ & * ( ) [ ] { } | \ ? ; : ~ ` ' ,"
	f ii=1:1:$l(x," ") s arr1=$replace(arr1,$p(x," ",ii),"")
	; check if piece 2 (value) not a number and length 1
	i $l($p(arr1,Q,2))<2,+$p(arr1,Q,2)<=0 s arr1=$p(arr1,Q,1)_Q_$p(arr1,Q,3,999) 
.
	; test name
	s test(i)=$zconvert($p(arr1,Q,1),"W")
	; result
	s test(i)=test(i)_$e(sp,1,25-$l(test(i)))_$zconvert($p(arr1,Q,2),"W")
	; SI Unit & Ref Range
	;s test(i)=test(i)_$e(sp,1,35-$l(test(i)))_$zconvert($p(arr1,Q,3),"W")
	;s test(i)=test(i)_$e(sp,1,50-$l(test(i)))_$zconvert($p(arr1,Q,4),"W")
	;w test(i),!
	q
GetCol1A
	s sp="                                   "
	k arr
	s arr1=""
	f ii=i:1:i+10 s arr1=arr1_$s(arr1'="":Q,1:"")_obj.OCR.GetAt(ii)
	; strip double spaces
	s arr1=$replace($replace($replace(arr1,"  "," "),"  "," "),"  "," ")
	; strip !,@,#,$,^,&,*,(,),[,],{,},|,\,?,;,:,~,`,'
	s x="! @ # $ ^ & * ( ) [ ] { } | \ ? ; : ~ ` ' ,"
	f ii=1:1:$l(x," ") s arr1=$replace(arr1,$p(x," ",ii),"")
	; test name
	s test(i)=$zconvert($p(arr1,Q,1),"W")
	; result
	;s test(i)=test(i)_$e(sp,1,25-$l(test(i)))_$zconvert($p(arr1,Q,2),"W")
	; SI Unit & Ref Range
	;s test(i)=test(i)_$e(sp,1,35-$l(test(i)))_$zconvert($p(arr1,Q,3),"W")
	;s test(i)=test(i)_$e(sp,1,50-$l(test(i)))_$zconvert($p(arr1,Q,4),"W")
	;w test(i),!
	q
SetError
	#import MX
	d INIT1^CSP999
	s rid=%session.Data("ShowResults")
	&sql(UPDATE Record SET HasError=:d1 WHERE ID=:rid)
	q
PopOriginal
	#import MX
	d INIT1^CSP999
	s rid=%session.Data("ShowResults")
	s r1=""
	&sql(SELECT TempFile,fExt INTO :r1,:r2 FROM Record WHERE ID=:rid)
	s ffile="c:\intersystems\cache\jondax\upload\"_r1_"."_r2
	s tfile="c:\intersystems\cache\csp\jondax\temp\"_r1_"."_r2
	s x=##class(%File).CopyFile(ffile,tfile,1)
	s file="temp/"_r1_"."_r2
	&js<window.open("#(file)#","new")>
	;h 5 d ##class(%File).Delete(tfile)
	q
StripChar
	k x
	; strip "-"
	s arr1=$replace(arr1," - ","-")
	s arr1=$replace(arr1,"- ","-")
	s arr1=$replace(arr1," -","-")		; what about "something -10"?
	; strip "."
	s arr1=$replace(arr1," . ",".")
	s arr1=$replace(arr1,". ",".")
	s arr1=$replace(arr1," .",".")
	
	; strip "²" & 3
	s arr1=$replace(arr1,$c(178),""),arr1=$replace(arr1,$c(179),"")
	;i $p(arr1,Q,1)["²" s $p(arr1,Q,1)=$replace($p(arr1,Q,1),"²","") 
	; check if $p(1) contains non-value characters
	i $p(arr1,Q,1)["!" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)["@" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	;i $p(arr1,Q,1)["#" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)["$" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	;i $p(arr1,Q,1)["^" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)["&" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)["?" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)[";" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)[":" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)["~" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)["`" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)["\" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)["|" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	; strip !,@,#,$,^,&,*,(,),[,],{,},|,\,?,;,:,~,`,'
	f ii=1:1:$l(arr1,Q) d
	. s xx=$p(arr1,Q,ii)
	. i (Q_"!"_Q_"@"_Q_"#"_Q_"$"_Q_"&"_Q_"*"_Q_"("_Q_")"_Q_"["_Q_"]"_Q_"{"_Q_"}"_Q_"|"_Q_"\"_Q_"?"_Q_";"_Q_":"_Q_"~"_Q_"`"_Q_"'"_Q)'[(Q_xx_Q) s x(ii)=$p(arr1,Q,ii) 
	. i $d(x(ii)),$e(x(ii),$l(x(ii)))=" " s x(ii)=$e(x(ii),1,$l(x(ii))-1)
	s arr1=""
	s xx="" f ii=1:1 d  q:xx=""
	. s xx=$o(x(xx)) q:xx=""
	. s x(xx)=$replace(x(xx),"!","")
	. s x(xx)=$replace(x(xx),"@","")
	. s x(xx)=$replace(x(xx),"#","")
	. s x(xx)=$replace(x(xx),"$","")
	. ;s x(xx)=$replace(x(xx),"^","")
	. s x(xx)=$replace(x(xx),"&","")
	. s x(xx)=$replace(x(xx),"*","")
	. s x(xx)=$replace(x(xx),"(","")
	. s x(xx)=$replace(x(xx),")","")
	. s x(xx)=$replace(x(xx),"_","")
	. s x(xx)=$replace(x(xx),"+","")
	. s x(xx)=$replace(x(xx),"=","")
	. s x(xx)=$replace(x(xx),"[","")
	. s x(xx)=$replace(x(xx),"]","")
	. s x(xx)=$replace(x(xx),":","")
	. s x(xx)=$replace(x(xx),";","")
	. s x(xx)=$replace(x(xx),"'","")
	. s x(xx)=$replace(x(xx),"""","")
	. s x(xx)=$replace(x(xx),"~","")
	. s x(xx)=$replace(x(xx),"`","")
	. s arr1=arr1_$s(arr1'="":Q,1:"")_x(xx)
	s arr1=$replace(arr1,$c(1,1),Q)
	q
	

cUser^MAC^^67184,12369.2276032^0
cCountry
PopTab1
	// Fetch data for the initial load of User Details
	#import MX
	d INIT1^CSP999
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID,ContactPerson,Email,CompanyName,IsNull(Menu,''),IsAdmin
		INTO :r1,:r2,:r3,:r4,:r5,:r6
		FROM "User"
		ORDER BY 4,2
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	s row=1
	WHILE SQLCODE=0{
		s r6=$s(r6=1:"Yes",1:"No")
		&js<document.getElementById("Tab1").insertRow(),
			document.getElementById("Tab1").rows[#(row)#].insertCell(0),
			document.getElementById("Tab1").rows[#(row)#].insertCell(1),
			document.getElementById("Tab1").rows[#(row)#].insertCell(2),
			document.getElementById("Tab1").rows[#(row)#].insertCell(3),
			document.getElementById("Tab1").rows[#(row)#].insertCell(4),
			document.getElementById("Tab1").rows[#(row)#].insertCell(5),
			document.getElementById("Tab1").rows[#(row)#].insertCell(6),
			document.getElementById("Tab1").rows[#(row)#].cells[0].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r1)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[1].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r2)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[2].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r3)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[3].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r4)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[4].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r5)#</span>"
			document.getElementById("Tab1").rows[#(row)#].cells[5].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r6)#</span>"
			document.getElementById("Tab1").rows[#(row)#].cells[6].innerHTML="<img style='cursor:pointer;height:15px' onclick='jDeleteMe(#(r1)#)' src='images/delete.gif'>"
		>
		s row=row+1
		&sql(FETCH C1)	
	}
	&sql(CLOSE C1)
	q
	
SortMe
	#import MX
	d INIT1^CSP999
	&sql(DECLARE C2 CURSOR FOR
		SELECT ID,ContactPerson,Email,CompanyName,IsNull(Menu,''),IsAdmin
		INTO :r1,:r2,:r3,:r4,:r5,:r6
		FROM "User"
		ORDER BY 2,4
	)
	&sql(OPEN C2)
	&sql(FETCH C2)
	s row=1
	WHILE SQLCODE=0{
		s r6=$s(r6=1:"Yes",1:"No")
		&js<document.getElementById("Tab1").insertRow(),
			document.getElementById("Tab1").rows[#(row)#].insertCell(0),
			document.getElementById("Tab1").rows[#(row)#].insertCell(1),
			document.getElementById("Tab1").rows[#(row)#].insertCell(2),
			document.getElementById("Tab1").rows[#(row)#].insertCell(3),
			document.getElementById("Tab1").rows[#(row)#].insertCell(4),
			document.getElementById("Tab1").rows[#(row)#].insertCell(5),
			document.getElementById("Tab1").rows[#(row)#].insertCell(6),
			document.getElementById("Tab1").rows[#(row)#].cells[0].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r1)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[1].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r2)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[2].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r3)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[3].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r4)#</span>",
			document.getElementById("Tab1").rows[#(row)#].cells[4].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r5)#</span>"
			document.getElementById("Tab1").rows[#(row)#].cells[5].innerHTML="<span style='cursor:pointer' onclick='jPopFields(#(r1)#)'>#(r6)#</span>"
			document.getElementById("Tab1").rows[#(row)#].cells[6].innerHTML="<img style='cursor:pointer;height:15px' onclick='jDeleteMe(#(r1)#)' src='images/delete.gif'>"
		>
		s row=row+1
		&sql(FETCH C2)	
	}
	&sql(CLOSE C2)
	q
PopFields
	// Populate the fields upon clicking the specific user column
	#import MX
	d INIT1^CSP999
	&sql(SELECT ContactPerson,Email,UserID,Password,Password,CompanyName,IsAdmin,Menu
		INTO :r1,:r2,:r3,:r4,:r5,:r6,:r7,:r8
		FROM "User"
		WHERE ID=:d1
	)
	f i=1:1:8 s @("r"_i)=$s($a(@("r"_i))=-1:"",1:@("r"_i))
	s r6=$$C2H^CSP999(r6)
	&js<T1.value="#(r1)#",T2.value="#(r2)#",T3.value="#(r3)#",T4.value="#(r4)#",T5.value="#(r5)#",S1.value="#(r6)#">
	i r7=1 &js<C1.checked=true,S2.disabled=false,S2.value="#(r8)#">
	i r7'=1 &js<C1.checked=false,S2.disabled=true,S2.value="">
	q
DeleteMe
	// Delete a record
	#import MX
	d INIT1^CSP999
	&sql(DELETE FROM "User" WHERE UserID=:d1)
	q
SaveMe
	// Save the user record
	#import MX
	d INIT1^CSP999
	s dt=$zdatetime($h,3)
	s id=""
	&sql(SELECT ID INTO :id FROM "User" WHERE UserID=:d3)
	// Save new user
	i id="" &sql(INSERT INTO "User" (CreatedDate,ContactPerson,Email,UserID,Password,CompanyName,Menu,IsAdmin,CompanyLogo,IsTrial) 
				 VALUES (:dt,:d1,:d2,:d3,:d4,:d5,:d6,:d7,'default.png',0))
	// Update user details
	i id'="" &sql(UPDATE "User" SET ContactPerson=:d1,Email=:d2,Password=:d4,CompanyName=:d5,Menu=:d6,IsAdmin=:d7
			   	  WHERE UserID=:d3) 
 	q

cViewClientTemplate^MAC^^67160,65622.7263373^0
cViewClientTemplate		; same with cClient template but does not include admin actions(editing/ adding new) 
InitMe
	#import MX
	d INIT1^CSP999
	&sql(SELECT Top 1 BucketName INTO :bk From Template)
	s %session.Data("ClientTemplates","bk") = bk
	s lastViewDate = $s($g(^LastView("ClientTemplate",UserID,bk))="":"2023-03-01 00:00:01",1:$zdatetime($g(^LastView("ClientTemplate",UserID,bk)),3))
	&js<lastViewDate="#(lastViewDate)#";>
	s ^LastView("ClientTemplate",UserID,bk)=$h
	&js<document.querySelector(".temp-name").innerHTML="#(bk)#">
	d LoadTemplates^cViewClientTemplate("",1,lastViewDate)
	q
.
WriteTemplates		; Load data onto templates dropdown
	#import MX
	d INIT1^CSP999
	//CT for Client Template
	&sql(DECLARE CT CURSOR FOR
		SELECT DISTINCT BY (BucketName) %EXACT(Bucketname) 
		INTO :bk
		FROM Template
		WHERE ISNULL(DeletedDate,'')=''
		ORDER BY BucketName
	)
	&sql(OPEN CT)
	&sql(FETCH CT)
	WHILE SQLCODE=0{
		w "<li onclick='changeBK(event)'>"_bk_"</li>"
		&sql(FETCH CT)
	}
	&sql(CLOSE CT)
	q
	
LoadTemplates(searchVal,orderCol,lastViewDate)		; Load template table
	#import MX
	d INIT1^CSP999
	s bk=%session.Data("ClientTemplates","bk")
	//Search for Newly Added Client Templates based on Start letter
	&sql(DECLARE CN0 CURSOR FOR
		SELECT ID,DiagnosticTest,Name,UnitName
		INTO :id,:diagnosticTest,:name,:unitName
		FROM Template
		WHERE Name %STARTSWITH (:searchVal)
		AND BucketName=:bk
		AND ((ModifiedDate>=:lastViewDate) OR (IsNull(ModifiedDate,'')=''))
		AND ISNULL(DeletedDate,'')=''
		ORDER BY 
			CASE WHEN :orderCol=1 Then DiagnosticTest END,
			CASE WHEN :orderCol=2 Then DiagnosticTest END DESC,
			CASE WHEN :orderCol=3 Then Name END,
			CASE WHEN :orderCol=4 Then Name END DESC
	)
	
	//Search for Newly Added Client Templates based on Numeric
	&sql(DECLARE CN1 CURSOR FOR
		SELECT ID,DiagnosticTest,Name,UnitName
		INTO :id,:diagnosticTest,:name,:unitName
		FROM Template
		WHERE Name NOT BETWEEN 'A' AND 'Z' AND Name NOT BETWEEN 'a' AND 'z'
		AND BucketName=:bk
		AND ModifiedDate>=:lastViewDate
		AND ISNULL(DeletedDate,'')=''
		ORDER BY 
			CASE WHEN :orderCol=1 Then DiagnosticTest END,
			CASE WHEN :orderCol=2 Then DiagnosticTest END DESC,
			CASE WHEN :orderCol=3 Then Name END,
			CASE WHEN :orderCol=4 Then Name END DESC
	)
	
	//Search for Client Templates based on Start letter
	&sql(DECLARE CT0 CURSOR FOR
		SELECT ID,DiagnosticTest,Name,UnitName
		INTO :id,:diagnosticTest,:name,:unitName
		FROM Template
		WHERE Name %STARTSWITH (:searchVal)
		AND BucketName=:bk
		AND ModifiedDate<:lastViewDate
		AND ISNULL(DeletedDate,'')=''
		ORDER BY 
			CASE WHEN :orderCol=1 Then DiagnosticTest END,
			CASE WHEN :orderCol=2 Then DiagnosticTest END DESC,
			CASE WHEN :orderCol=3 Then Name END,
			CASE WHEN :orderCol=4 Then Name END DESC
	)
	//Search for Client Templates based on Numeric
	&sql(DECLARE CT1 CURSOR FOR
		SELECT ID,DiagnosticTest,Name,UnitName
		INTO :id,:diagnosticTest,:name,:unitName
		FROM Template
		WHERE Name NOT BETWEEN 'A' AND 'Z' AND Name NOT BETWEEN 'a' AND 'z'
		AND BucketName=:bk
		AND ModifiedDate<:lastViewDate
		AND ISNULL(DeletedDate,'')=''
		ORDER BY 
			CASE WHEN :orderCol=1 Then DiagnosticTest END,
			CASE WHEN :orderCol=2 Then DiagnosticTest END DESC,
			CASE WHEN :orderCol=3 Then Name END,
			CASE WHEN :orderCol=4 Then Name END DESC
	)
	s tbodyContent=""
	if (searchVal="num"){
		&sql(OPEN CN1)
		&sql(FETCH CN1)
	}
	else{
		&sql(OPEN CN0)
		&sql(FETCH CN0)
	}
	WHILE SQLCODE=0{
		s tbodyContent = tbodyContent_$$WriteTr(id,diagnosticTest,name,unitName,1)
		if (searchVal="num"){
			&sql(FETCH CN1)
		}
		else{
			&sql(FETCH CN0)
		}
	}
	if (searchVal="num"){
		&sql(CLOSE CN1)
	}
	else{
		&sql(CLOSE CN0)
	}
	if (searchVal="num"){
		&sql(OPEN CT1)
		&sql(FETCH CT1)
	}
	else{
		&sql(OPEN CT0)
		&sql(FETCH CT0)
	}
	WHILE SQLCODE=0{
		s isTransform=0 &sql(SELECT Buckets_Type FROM Setting_Buckets WHERE Buckets_Name=:bk)
		s tbodyContent = tbodyContent_$$WriteTr(id,diagnosticTest,name,unitName,0)
		if (searchVal="num"){
			&sql(FETCH CT1)
		}
		else{
			&sql(FETCH CT0)
		}
	}
	if (searchVal="num"){
		&sql(CLOSE CT1)
	}
	else{
		&sql(CLOSE CT0)
	}
	&js<document.querySelector("tbody").innerHTML="#(tbodyContent)#">
	q
	
WriteTr(id,diagnosticTest,name,unitName,highlight)	;Create HTML <tr><td>
	s tr = "<tr key='"_id_"'"
	if (highlight) s tr = tr_" class='highlight'"
	s tr = tr_">\n<td class='diagnostic-test'>"_diagnosticTest_"</td>\n"
    s tr = tr_"<td class='client-name'>"_name_"</td>\n"
    s tr = tr_"<td class='client-unit'>"_unitName_"</td>\n"
    s tr = tr_"<td class='actions'></td>\n</tr>"
	q tr
	
SearchData		// Fetch data for search results
	#import MX
	d INIT1^CSP999
	s bk=%session.Data("ClientTemplates","bk")
	//Search DiagnosticTest
	&sql(DECLARE CS3 CURSOR FOR
		SELECT ID,DiagnosticTest,Name
		INTO :id,:diagnosticTest,:cName
		FROM Template
		WHERE LOWER(DiagnosticTest)[LOWER(:searchVal)
		AND BucketName=:bk
		AND ISNULL(DeletedDate,'')=''
	)
	//Search Client Name
	&sql(DECLARE CS4 CURSOR FOR
		SELECT ID,Name,DiagnosticTest
		INTO :id,:cName,:diagnosticTest
		FROM Template
		WHERE LOWER(Name)[LOWER(:searchVal)
		AND BucketName=:bk
		AND ISNULL(DeletedDate,'')=''
	)
	//Search Client Units
	&sql(DECLARE CS5 CURSOR FOR
		SELECT ID,UnitName,Name,DiagnosticTest
		INTO :id,:cUnit,:cName,:diagnosticTest
		FROM Template
		WHERE LOWER(UnitName)[LOWER(:searchVal)
		AND BucketName=:bk
		AND ISNULL(DeletedDate,'')=''
	)
	d SearchDiagnosticTest
	d SearchClientName
	d SearchClientUnit
	q
	
SearchDiagnosticTest
	s bk=%session.Data("ClientTemplates","bk")
	&sql(OPEN CS3)
	&sql(FETCH CS3)
	&js<console.log("dTEst #(searchVal_":"_SQLCODE)#")>
	WHILE SQLCODE=0{
		s ^SearchDiagnosticTest(diagnosticTest,id)=""
		s ^SearchCName(cName,id)=""
		s ^SearchData(diagnosticTest) = "DiagnosticTest:"_id
		&sql(FETCH CS3)
	}
	&sql(CLOSE CS3)
	q
	
SearchClientName
	s bk=%session.Data("ClientTemplates","bk")
	&sql(OPEN CS4)
	&sql(FETCH CS4)
	WHILE SQLCODE=0{
		s ^SearchDiagnosticTest(diagnosticTest,id)=""
		s ^SearchCName(cName,id)=""
		s ^SearchData(cName) = "ClientName:"_id
		&sql(FETCH CS4)
	}
	&sql(CLOSE CS4)
	q
	
SearchClientUnit
	s bk=%session.Data("ClientTemplates","bk")
	&sql(OPEN CS5)
	&sql(FETCH CS5)
	&js<console.log("cUnit #(searchVal_":"_SQLCODE)#")>
	WHILE SQLCODE=0{
		s ^SearchDiagnosticTest(diagnosticTest,id)=""
		s ^SearchCName(cName,id)=""
		s ^SearchData(cUnit) = "ClientUnit:"_id
		&sql(FETCH CS5)
	}
	&sql(CLOSE CS5)
	q
	
	
LoadSearchSuggestions	; Featch data for search suggestions
	#import MX
	d INIT1^CSP999
	s searchContent=""
	s suggestion=$ORDER(^SearchData(""))
   	WHILE (suggestion'="") {
		s searchContent = searchContent_"<li value='"_^SearchData(suggestion)_"' onclick='jLoadSearchData(event)'>"_suggestion_"</li>"
		s suggestion=$ORDER(^SearchData(suggestion))
	}
	&js<document.querySelector(".search-data ul").innerHTML="#(searchContent)#">
	q
	
LoadSearchResults		; Load search result and inject into table contents
	#import MX
	d INIT1^CSP999
	s tableContent=""
	s sortName=""
	if (orderCol=1){
		s sortName=$ORDER(^SearchDiagnosticTest(""))
	}
	elseif (orderCol=2){
		s sortName=$ORDER(^SearchDiagnosticTest(""),-1)
	}
	elseif (orderCol=3){
		s sortName=$ORDER(^SearchCName(""))
	}
	elseif (orderCol=4){
		s sortName=$ORDER(^SearchCName(""),-1)
	}
	if (sortName=""){
		&js<alert("No results Found")>
		q
	}
   	WHILE (sortName'="") {
	   	if (orderCol<3){
			s id=$ORDER(^SearchDiagnosticTest(sortName,""))
	   	}
	   	else{
		   	s id=$ORDER(^SearchCName(sortName,""))
	   	}
	   	WHILE (id'=""){
			&sql(
				SELECT DiagnosticTest,Name,UnitName
				INTO :diagnosticTest,:name,:unitName
				FROM Template
				WHERE ID=:id
			)
			s tableContent = tableContent_$$WriteTr(id,diagnosticTest,name,unitName,0)
			if (orderCol<3){
				s id=$ORDER(^SearchDiagnosticTest(sortName,id))
	   		}
	   		else{
		   		s id=$ORDER(^SearchCName(sortName,id))
	   		}
	   	}
		if (orderCol=1){
			s sortName=$ORDER(^SearchDiagnosticTest(sortName))
		}
		elseif (orderCol=2){
			s sortName=$ORDER(^SearchDiagnosticTest(sortName),-1)
		}
		elseif (orderCol=3){
			s sortName=$ORDER(^SearchCName(sortName))
		}
		elseif (orderCol=4){
			s sortName=$ORDER(^SearchCName(sortName),-1)
		}
	}
	&js<document.querySelector("tbody").innerHTML="#(tableContent)#">
	q

cViewTemp^MAC^^67157,29481.9092627^0
cViewTemp
InitMe
	#import MX
	; Get Sid, UserId 
	d INIT1^CSP999
	s rid=%session.Data("jxTransform","rid")
	; Inject js to set bucket name in cViewTemp.csp
	&sql(SELECT BucketName INTO :bk FROM Record WHERE ID=:rid)
	&js<document.getElementById("tName").innerHTML="#(bk)#">
	; Populate template table
	d LoadTemplates("")
	q
	
LoadTemplates(d1)
	; d1 = filter letter or num or null
	; Populate template table
	s rid=%session.Data("jxTransform","rid")
	; Get bucket name/template
	&sql(SELECT BucketName INTO :bk FROM Record WHERE ID=:rid)
	s temp=""
	; Template data into r0,r1,r2,r3
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID,DiagnosticTest,Name,UnitName
		INTO :r0,:r1,:r2,:r3
		FROM Template
		WHERE BucketName=:bk AND Name %STARTSWITH(:d1)
		ORDER BY 3
	)
	; For Biomarkers start with number
	if (d1="num"){
		s d1=1
		while d1<10{
			&sql(OPEN C1)
			&sql(FETCH C1)
			WHILE SQLCODE=0{
				; Insert rows and columns : DiagnosticTest/JXName, Name/ClientTemplateName,UnitName
				s tr="<tr><td>"_r1_"</td><td>"_r2_"</td><td>"_r3_"</td></tr>"
				s temp=temp_tr
				&sql(FETCH C1)
			}
			&sql(CLOSE C1)
			s d1=d1+1
		}
	}
	; For Biomarkers start with letter
	else{
		&sql(OPEN C1)
		&sql(FETCH C1)
		WHILE SQLCODE=0{
			; Insert rows and columns : DiagnosticTest/JXName, Name/ClientTemplateName,UnitName
			s tr="<tr><td>"_r1_"</td><td>"_r2_"</td><td>"_r3_"</td></tr>"
			s temp=temp_tr
			&sql(FETCH C1)
		}
		&sql(CLOSE C1)
	}
	&js<document.querySelector("tbody").innerHTML="#(temp)#">
	q

getPII^MAC^^66910,13541.6227201^0
getPII(response)
	w !,"Getting Personal Identifiable Information...."
    Set json = $classmethod("%DynamicArray", "%FromJSON", response)
    do getTest //(json,namesArray)
    q
    return 1
.
getTest//(json,names)
	kill ^mBBox,^boxArray
	//set reportDate=["DATE","DATE REQUESTED","DATE RECEIVED","COLLECTION DATE","REPORT DATE","DATE OF REPORT","DATE OF VISIT","VISIT DATE","DATE:","DATE REQUESTED:","DATE RECEIVED:","COLLECTION DATE:","REPORT DATE:","DATE OF REPORT:","DATE OF VISIT:","VISIT DATE:"]
	set DataBlock =0
	set censorB=[]
	set date=[]
	set flag=0
	s match=""
	
	set blocks= json.Blocks
	Set count = blocks.%Size()
    For i = 0:1:(count-1) 
    {	
		Set block = blocks.%Get(i)
    	set text = block.%Get("Text")
    	Set Geometry = block.Geometry
		set boundingBox = Geometry.%Get("BoundingBox")
	    if block.%Get("BlockType")="LINE" 
		{
			         		
     		&sql(SELECT Name into :match FROM MX.DiagnosticTest where Name=:text or SIName=:text)
         	if match'="" 
         	{
	         	
         		set flag=flag+1  //w flag,!
         		set ^mBBox("lastBB") = boundingBox.%ToJSON()
         	}
         
         	//&sql(SELECT Name into :name FROM MX.DiagnosticTest where Name=(:text))
         	//w name,!
	         	
	 		if flag <1
			{
				;w !,"PII : ", text
				do censorB.%Push(boundingBox.%ToJSON())
				set ^mBBox("PII")=censorB.%ToJSON()
				do cleanDate(text)
				;w !,"Date is : ",x								
				set ^mBBox("Date")=date.%ToJSON()
.
			}
	         		
		}
    }
    
    if '$d(^mBBox("lastBB"))	s ^mBBox("lastBB")="[]"
    //if '$d(^mBBox("PII"))	s ^mBBox("PII")="[]"
	return 1
.
cleanDate(text)
	set x=text
	s dFlag = 0
	i x[":" d
	. s x=$p(x,":",2)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	d getDate
	
	if dFlag = 0 d
	. s x=text
	. d getDate
	
	q	
getDate(text)
	/*
	set x=text
	s dFlag = 0
	i x[":" d
	. s x=$p(x,":",2) 
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)	
	
	if $find(x,": ") 
	{
.
	set x=$extract(x,$find(x,": "), *) //for "Collection Date: 24 November, 2021" , ": 24 November, 2021" 
	}
	elseif $find(x,":")
	{
		 set x=$extract(x,$find(x,":"), *) //for "Collection Date:24 November, 2021" , ":24 November, 2021" 	  *Haemoglobin}
		}	
	*/
	
	for dft=1:1:9 
		{
			if $zdateh(x,dft,,2,,,,,"0") s dFlag=1 do date.%Push(boundingBox.%ToJSON()) q //w dft," 2",! q
			if $zdateh(x,dft,,4,,,,,"0") s dFlag=1 do date.%Push(boundingBox.%ToJSON()) q
		}
	if dFlag quit
	
	for dft=15:1:21 
		{
			if $zdateh(x,dft,,2,,,,,"0") s dFlag=1 do date.%Push(boundingBox.%ToJSON()) q
			if $zdateh(x,dft,,4,,,,,"0") s dFlag=1 do date.%Push(boundingBox.%ToJSON()) q	
		}
	if dFlag quit
	
	if $zdateh(x,13,,2,,,,,"0") do date.%Push(boundingBox.%ToJSON()) q
	if $zdateh(x,13,,4,,,,,"0") do date.%Push(boundingBox.%ToJSON()) q 
		
	quit
  

jxAWSBGPDF^MAC^^67165,47577.646749^0
jxAWSBGPDF
	w !,"IN jxAWSBGPDF"
	w !,"Processing PDF"
	
	d ##class(%File).CreateDirectory(docDir_d2) 
	
	; split PDF into per-page png
	s cmd="win2pdfd pdf2png """_docDir_d2_"."_ext_""" """_docDir_d2_"\"_d2_".png"" 0"
	s x=$zf(-1,cmd_" && exit")
	
	; get files in directory & deskew
	s removedir=docDir_d2
	d GetFiles
	d ##class(%File).RemoveDirectoryTree(removedir)
	d GPT^utilAWS(rid)
	q
.
GetFiles
	; Find per-page pngs in directory
	k filelist
	set dir = docDir_d2_"\"
	set dir = ##class(%File).NormalizeDirectory(dir)
	set file=$ZSEARCH(dir_"*")
	while file'="" {
		s x=$p(file,"\",$l(file,"\")) 
		i $zconvert($p(x,".",$l(x,".")),"l")="png" d
		. ; Add files to list "filelist"
		. s filelist(file)=""
		. ; added 10/06 - DW
		. s scale=100
		. ; File size check
		. s fsize=##class(%File).GetFileSize(file)
		. i fsize>9999999 d		; 10Mb limit for AWS
		.. s scale=$p(100-(fsize/99999999*100),".",1)-1
		. s cmd="convert "_file_" -scale "_scale_"% -deskew 40% "_file
		.
		. s cmd="convert """_file_""" -deskew 40% """_file_""""
		. s x=$zf(-1,cmd_" && exit")
		. ; Upload file to AWS S3 jonda bucket "jondaffr"
		. w ?3,!,"UploadToS3: ",file,!
		. s x=$zf(-1,"aws s3 cp """_file_""" "_textractBucket_" && exit")
		. &sql(Select PageCount into :pageCount from record where id=:rid)
		. ; Update page count	
		. if (pageCount = "") {s pageCount = 1} else {s pageCount = +pageCount + 1}
		. &sql(Update Record SET PageCount =:pageCount WHERE id=:rid)
		. h 3
.
		set file=$ZSEARCH("")
	}
	k arr
	s ProcessCount=0
	s dt=$zdatetime($h,3)
A	s file=$o(filelist(""))		; Get first subscript of filelist 
	i file="" k filelist &sql(UPDATE Record SET ProcessedDate=:dt WHERE ID=:rid) q		
	s fileid=$p($h,",",1)_$p($h,",",2)
	s ProcessCount=ProcessCount+1
	;;; TODO: check what the ProcessCount (Page Limit) is 
	i ProcessCount>24 &sql(UPDATE Record SET ProcessedDate=:dt WHERE ID=:rid) q
	d SDTD		; Calls Textract start-document-text-detection in SDTD
B	w ?3,"Getting JobID..." 
	i '##class(%File).Exists(docDir_d2_"\"_fileid_".txt") d
	. s ProcessCount=ProcessCount+1
	. i ProcessCount>24 &sql(UPDATE Record SET ProcessedDate=:dt WHERE ID=:rid) q
	. h 5	; Wait for 5 sec
	. g B	; Loop "B" getting JobID for 24 times at most if Textract fails
	; ---------------------
ReadJobID	; If Textract returns jobID
	s ProcessCount=ProcessCount+1
	; if Textract fails 24 times, go to EndReadResult
	i ProcessCount>24 g EndReadResult	
	w ?3,"Read JobID..."
	s fnam= docDir_d2_"\"_fileid_".txt"
	s $ztrap="EndReadJobID^jxAWSBGPDF"
	o fnam u fnam
	k arr
	s i=0
ReadJobID1		; Put each line into arr(i)
	u fnam r x
	s i=i+1
	s arr(i)=x	 ; s ^martin("arr",i)=x
	g ReadJobID1	
	; ---------------------
EndReadJobID	; End of reading file
	s $ztrap=""
	c fnam
	; TODO: add error log
	; s ^martin("ProcessedCount")=ProcessCount
	; arr(2) is JobID
	i '$d(arr(2)) &sql(UPDATE Record SET Type='Other' WHERE ID=:rid) g EndReadResult2  ;s ^martin("no jid")="Other" 
	; cleanup
	d ##class(%File).Delete(fnam)
	w ?3,"End JobID...",!
	s jobid=$p(arr(2),"""",4)		; Extract jobID
EndReadJobID1
	w !,"ERJ"
	d GDTD		; Textract get-document-text-detection using jobID
.
.
ReadResult
	w ?3,"Read Result..."
	s fnam=resultsDir_$p(file,"\",$l(file,"\"))_".txt"		; Result dir
	i '##class(%File).Exists(fnam) h 5 g EndReadJobID1		; Loop GDTD unless textract response
	o fnam u fnam
	s $ZERROR=""
	s $ztrap="EndReadResult^jxAWSBGPDF"
	;s pcs="^"_d2_"("""")"
	s (text,top,left,blocktype,confidence,page)=""
	;s i=$o(@(pcs),-1)
ReadResult1
	u fnam r x
	i x["IN_PROGRESS" d  g EndReadJobID1
	. c fnam 
	. w "   ",fnam," IN PROGRESS...",! 
	. s $ztrap="" 
	. w !,"deleting: ", fnam,!
	. d ##class(%File).Delete(fnam)
	. h 20 	;i x="" c fnam s $ztrap="" h 1 g EndReadJobID1
	i x["""BlockType"": " s blocktype=$p(x,"""BlockType"": ",2)
	i x["""Confidence"": " s confidence=$p(x,"""Confidence"": ",2)
	i x["""Page"": " s page=$p(x,"""Page"": ",2)
	i x["""Text"": " s text=$p(x,"""Text"": ",2),text=$e(text,1,$l(text)-1)
	i x["""Left"": " s left=$p(x,"""Left"": ",2),left=$e(left,1,$l(left)-1)
	i x["""Top"": " s top=$p(x,"""Top"": ",2),top=$e(top,1,$l(top)-1)
	i x["""Page"": " d
	. i text'="" d
	.. ;i +confidence<59 s text="",left="",top="" q
	.. s text=$replace(text,"""","")
	.. s text=$replace(text,"(","")
	.. s text=$replace(text,")","")
	.. i text="" s text="",left="",top="" q
	.. s blocktype=$zconvert($replace(blocktype,"""",""),"l")
	.. i blocktype'="line," q
	.. ;s i=i+1
	.. ;s arr(i)=text
	.. ;s gbl="^"_d2_"("_i_")"
	.. s obj=##class(MX.Record).%OpenId(rid)
	.. d obj.OCR.Insert(text)
	.. d obj.%Save()
	.. s obj=""
	.. s (text,top,left,blocktype,confidence,page)=""	
	g ReadResult1
.
.
#;ReadResult
#;	w ?3,"Read Result..."
#;	s fnam=resultsDir_$p(file,"\",$l(file,"\"))_".txt"
#;	i '##class(%File).Exists(fnam) h 5 g EndReadJobID1
#;	w !,"he",fnam
#;	s $ZERROR=""
#;	s $ztrap="EndReadResult^jxAWSBGPDF"
#;	
#;ReadResult1
#;
#;	#include %msql
#;	w !,fnam
#;	s fs = ##class(%Stream.FileCharacter).%New()
#;	s fs.Filename = fnam
#;	d fs.Rewind()
#;	s str = fs.Read($$$MaxLocalLength)
#;	i str["""JobStatus"": ""IN_PROGRESS"""  d ##class(%File).Delete(fnam) h 10 g EndReadJobID1
#;	;w str
#;	b
#;	s jsonObj = {}.%FromJSON(str)
#;	
#;	s Blocks = jsonObj.%Get("Blocks")
#;	s itr = Blocks.%GetIterator()
#;	
#;	while itr.%GetNext(.key,.val){
#;		s Block = Blocks.%Get(key)
#;		s BlockType = Block.BlockType
#;		if (BlockType = "WORD"){
#;			s word = $zcvt(Block.Text,"u")
#;			s word = $TRANSLATE(word, """()", "")
#;			w !,word
#;			s obj=##class(MX.Record).%OpenId(rid)
#;			d obj.OCR.Insert(word)
#;			d obj.%Save()
#;			s obj=""
#;		}
#;	}
#;	b
#;	g ReadResult1
EndReadResult
	s $ztrap=""
	c fnam
EndReadResult1
	w !
EndReadResult2
	; clean up
	s str="aws s3 rm "_textractBucket_file
	d ##class(%File).Delete(file)
	
	w !,"FILE: ", file
	
	s cmd="aws s3 rm "_textractBucket_$p(file,"\",*)
	s x=$zf(-1,cmd_" && exit")
	
	i $o(filelist(file))="" k filelist d ^jxAWSBGSave q
	k filelist(file)
	s file=""
.
	g A
SDTD	; Start Document Text Detection
	w "   Start Document Text Detection: ",file,!
	s cmd="aws textract start-document-text-detection --document ""{\""S3Object\"":{\""Bucket\"":\"""_textractBucketName_"\"",\""Name\"":\"""_$p(file,"\",$l(file,"\"))_"\""}}"" > """_docDir_d2_"\"_fileid_".txt"""
	;s ^martin("SDTD")=cmd
	s x=$zf(-1,cmd_" && exit")
	;s ^martin("SDTD","x")=x
	q
GDTD	; Get Document Text Detection
	w "   Get Document Text Detection: ",!
	s cmd="aws textract get-document-text-detection --job-id """_jobid_""" > """_resultsDir_$p(file,"\",$l(file,"\"))_".txt"""
	;s ^martin("GDTD")=cmd
	s x=$zf(-1,cmd_" && exit")
	;s ^martin("GDTD","x")=x
	q

jxAWSBGPDF01^MAC^^67285,25049.0771822^0
jxAWSBGPDF01
	w !,"IN jxAWSBGPDF01"
	w !,"Processing PDF"
	
	d ##class(%File).CreateDirectory(docDir_d2) 
	
	; get files in directory & deskew
	d GetFiles1
	if str'="FAILURE" d ^jxAWSBGSave
	s removedir=docDir_d2
	d ##class(%File).RemoveDirectoryTree(removedir)
	d GPT^utilAWS01(rid)
	q
GetFiles1
	s scale=100
	s file = docDir_d2_"."_ext
	; File size check
	s fsize=##class(%File).GetFileSize(file)
	i fsize>9999999 d		; 10Mb limit for AWS
	. s scale=$p(100-(fsize/99999999*100),".",1)-1
	
	s cmd="convert """_file_""" -deskew 40% """_file_""""
	s x=$zf(-1,cmd_" && exit")
	s pageCount = ##class(python.pdfhandler).pageCount(file)
	&sql(Select PageCount into :pageCount from record where id=:rid)
	
GDTD1
	w !,"   Get Document Text Detection: ",!
	s language="en"	
	s cmd="c:\InterSystems\Cache\bin\paddle_env\Scripts\activate && python c:\interSystems\cache\jondax\scripts\POCR_PDF_v1.3.py -i """_file_""" -l """_language_""" -p ""C:\data_transform\AI"""
	w "Performing OCR....",!
	s x=$zf(-1,cmd_" && exit")
	s resPath = "C:\data_transform\AI\"_$replace(d2,".pdf","")_".txt"
	;d ##class(%File).CopyFile(resPath,"D:\POCR\")
	
	if x=0
	{
		w "OCR Completed!",!
		#include %msql
.
		s fs = ##class(%Stream.FileCharacter).%New()
		s fs.Filename = resPath
		d fs.Rewind()
		s str = fs.Read($$$MaxLocalLength)
		s size=fs.SizeGet()
		
		if size=0 s str="FAILURE"
		;else  d ##class(%File).Delete(resultsDir_pngName_".txt")
	}
	else {
		s str="FAILURE"
	}
	
OCR2Table
	;set str= $replace(str,$c(9),"_$c(9)_")
	Set lineCount = $L(str, $C(13,10))
	s index=0
	For i=1:1:lineCount {
        Set line(i) = $P(str, $C(13,10), i)
        ;w "The line is ",line(i),! 
		s wordCount=$L(line(i),$c(9))
        For j=1:1:wordCount d
        . s index=index+1        
        . s word(index)=$P(line(i), $c(9),j) 
.
    }
	s wordCount=index
	s obj=##class(MX.Record).%OpenId(rid)
	
		for i=1:1:wordCount d
		.s value= word(i)
		.Do obj.OCR.Insert(value) 
		.d obj.%Save()
		
	s obj=""
	q

jxAWSBGSave^MAC^^67241,13516.1047977^0
jxAWSBGSave
	; ensure Record ID (rid) is set
	w !,"IN jxAWSBGSAVE",!
	d ^jxAWSOCR
	;i ($d(TestType("Blood Test"))!($d(TestType("Medication")))),'$d(^Automail(rid)) s ^Automail(rid)=$h d ^AutoMail	
	; clean up files
	&sql(SELECT TempFile,fExt INTO :d2,:ext FROM Record WHERE ID=:rid)
	s file=resultsDir_d2_"."_ext
	d ##class(%File).Delete(file)
	s file=docDir_d2_"."_ext
	d ##class(%File).Delete(file)
	s file=docDir_d2_".pdf"
	d ##class(%File).Delete(file)
	s file=docDir_d2_"\"
	d ##class(%File).RemoveDirectoryTree(file)
	
	s tRS=##class(%ResultSet).%New("%Library.File:FileSet")
	s tStatus=tRS.Execute(resultsDir)    
	while (tRS.Next()){
		d ##class(%File).Delete(tRS.Get("Name"))
	}
	w !,"Finished jxAWSBGSAVE",!
	q
.
.
GetDateType	; Date and Type of Record ;not use
	s ReportDate=""
	k TestType
	set obj=##class(MX.Record).%OpenId(rid)
	for i=1:1:obj.OCR.Count() {
		s rec=obj.OCR.GetAt(i)
		s rec=$zconvert(rec,"U")
		; DATE
		;i "*DATE REQUESTED*DATE RECEIVED*COLLECTION DATE*REPORT DATE*DATE OF REPORT*DATE OF VISIT*VISIT DATE*"[("*"_rec_"*") {
		i ((ReportDate="")&(rec["DATE")&(rec'["BIRTH"))!((ReportDate="")&(rec["COLLECTED")){
			s ReportDate=$replace(ReportDate," ","")
			s ReportDate=$p(rec,":",2) 
			i ReportDate="" s ReportDate=obj.OCR.GetAt(recno+1) i ReportDate[":" s ReportDate=$p(ReportDate,":",2) 
			i ReportDate="" s ReportDate=obj.OCR.GetAt(recno+2) i ReportDate[":" s ReportDate=$p(ReportDate,":",2)
			i $e(ReportDate,1,1)=" " s ReportDate=$e(ReportDate,2,999)	
			s ReportDate=$replace(ReportDate,","," ")
			;i +ReportDate=0 q
			s x=$zdateh(ReportDate,15,,,,,,,-1)					; dd-mm-yyyy
			i x=-1 s x=$zdateh(ReportDate,6,,,,,,,-1)		; mm-dd-yyyy
			i +x>1 s ReportDate=x,obj.ReportDate=ReportDate d obj.%Save() 
		}
		
		; TYPE
		s x=rec
		s x=$replace(x,"(",""),x=$replace(x,")","")
		s id=""
		&sql(SELECT ID,ResultType INTO :id,:r1 FROM DiagnosticType WHERE Name=:x)
		i id'="" d
		. s TestType(r1)=""
	}
	s test=""
	i $d(TestType) s x="" f i=1:1 d  q:x=""
	. s x=$o(TestType(x)) q:x=""
	. s test=test_$s(test'="":", ",1:"")_x
	i test'="" s obj.Type=$zconvert(test,"W") d obj.%Save()
	s obj=""
	q
.
.
GetType
	q
.
.

jxAWSBGXLSX^MAC^^66701,44232.659919^0
jxAWSBGXLSX
	
	w !,"Processing XLSX"
.
	&sql(SELECT ID INTO :rbt FROM ResultBloodTest WHERE Record=:rid)
	&sql(Update Record SET PageCount ='1' WHERE id=:rid)
	s sts = ##class(python.xlsxHandler).extractExcel(filePath,rid)
	if (sts = 0){
		&sql(SELECT BucketName,OrgFile INTO :bucketName, :fileName FROM MX.Record WHERE ID=:rid)
		
		s errCode = "JX1007"
		s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bucketName, "Wrong XLSX Format")
		s errName = $$GenerateErrorName^jxErrorReport(errCode)
		
		Throw ##class(%Exception.General).%New(errName,errCode ,"extractExcel^python.xlsxhandler",errData )
	}
	; clean up the file 
	d ##class(%File).Delete(filePath)
	q

jxAWSBGa^MAC^^67159,31448.0139323^0
jxAWSBGa		; 20th Dec 2021
	#import MX
	d INIT^CSP999
	w #,"--- DO NOT CLOSE THIS WINDOW ---",!
	;s k1=""
BG1	;w "BG1",!
	;s k1=$o(^UPLOAD(k1)) 
	;s rid=""
	;&sql(SELECT TOP 1 ID INTO :rid FROM Record WHERE IsNull(ProcessedDate,'')='' AND OrgFile<>'' ORDER BY CreatedDate)
	;s rid=fileId
	i rid="" q	
	&sql(SELECT Profile,Profile->UserID,TempFile,fExt,Profile->CompanyName,IsTrial INTO :pid,:k1,:d2,:ext,:CompanyName,:IsTrial FROM Record WHERE ID=:rid)
	w $zdatetime($h,3,,4),!
	s ProcessCount=0
BG2	
	w "Processing ",d2,!
	; call Textract Tables
	;;d TextractTables^utilAWS(rid)
	
	s ext=$zconvert(ext,"U")
	i ext="PDF" d ^jxAWSBGPDF w !,"--- DO NOT CLOSE THIS WINDOW ---",! q
	/*
	i ext="PDF" d
    . i IsTrial=1 d
        . w !,"--- DO NOT CLOSE THIS WINDOW ---",! 
        . d ^jxTrialAWSBGPDF  
    . e  d
        . d ^jxAWSBGPDF
        . w !,"--- DO NOT CLOSE THIS WINDOW ---",!
    q  */
	i ext="MP3" q
	i ext="MP4" q
	w !,"Get back to jxAWSBGa"
	; convert iPhone HEIC, Android AVIF/WebP & all files to png
	; and set limit to less than 5mb
	i (ext="HEIC")!(ext="AVIF")!(ext="WEBP") d
	. ;this doesn't work	;s cmd="mogrify -resize 50% -format png c:\intersystems\cache\jondax\"_CompanyName_"\"_d2_"."_ext
	. s cmd="mogrify -format png c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext
	. s x=$zf(-1,cmd_" && exit")
	. s ext="PNG"
	. ; set non-standard images to png in MX.Record
	. ; set OrgFile,fExt,BinaryData
	. ;&sql()
	
	; check for oversized files
	s scale=100
	s x=##class(%File).GetFileSize("c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext)
	i x>9999999 d		; 10Mb limit for AWS
	. s x=x-1	; to be sure
	. s scale=$p(100-(x/99999999*100),".",1)-1
	. w ?3,"File size too large: ",x,"   Scaling by ",scale,"%",!
	s cmd="convert c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext_" -scale "_scale_"% -deskew 40% c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_".png"
	s x=$zf(-1,cmd_" && exit")
	s ext="PNG"
	; run this twice to be sure
	s x=##class(%File).GetFileSize("c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext)
	i x>9999999 d		; 10Mb limit for AWS
	. s x=x-1	; to be sure
	. s scale=$p(100-(x/99999999*100),".",1)-1
	. w ?3,"File size too large: ",x,"   Scaling by ",scale,"%",!
	. s cmd="convert c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext_" -scale "_scale_"% -deskew 40% c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_".png"
	. s x=$zf(-1,cmd_" && exit")
	. s x=##class(%File).GetFileSize("c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext)
	. w ?3,"New File Size: ",x,!
	; Uploading file
	d UploadToS3
	h 10
	d ##class(%File).Delete(d2_"."_ext)
.
	; Decyphering text
Decypher1
	s fileid=$p($h,",",1)_$p($h,",",2)
	d SDTD
Decypher2	i '##class(%File).Exists("c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_fileid_".txt") h 5 g Decypher2	
ReadJobID
	s ProcessCount=ProcessCount+1
	i ProcessCount>11 g EndReadResult
	w ?3,"ReadJobID..."
	s $ZERROR=""
	s $ztrap="EndReadJobID^jxAWSBGa"
	s fnam="c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_fileid_".txt"
	o fnam u fnam
	k arr
	s i=0
ReadJobID1
	u fnam r x
	s i=i+1
	s arr(i)=x
	g ReadJobID1
	
EndReadJobID
	s $ztrap=""
	i $ZERROR'="",$ZERROR'["ENDOFFILE" u 0 w "ERROR: ",$ZERROR,!
	c fnam
	
	w ?3,"EndJobID..."
	s jobid=$p($g(arr(2)),"""",4)
	i jobid="" h 5 g ReadJobID
	; cleanup
	d ##class(%File).Delete(fnam)
	s readtries=0
EndReadJobID1
	s $ztrap=""
	d GDTD
ReadResult
	w ?3,!,"ReadResult..."	
	s fnam="c:\intersystems\cache\jondax\"_CompanyName_"\bucket\results\"_d2_".txt"
	s readtries=readtries+1
	i readtries>10 g EndReadResult
	i '##class(%File).Exists(fnam) h 5 g EndReadJobID1
	o fnam u fnam
	s $ZERROR=""
	s $ztrap="EndReadResult^jxAWSBGa"
	k arr
	s (text,top,left,blocktype,confidence,page)=""
	;s i=0
ReadResult1
	u fnam r x
	i x["INVALID_IMAGE_TYPE" s dt=$zdatetime($h,3) &sql(UPDATE Record SET ProcessedDate=:dt,Type='Invalid Image',ReviewedBy=9,ReviewedDate=:dt WHERE ID=:rid) q	
	; TODO: add error log
	i x["IN_PROGRESS" d  g EndReadJobID1
	. c fnam 
	. u 0 w "   ",fnam," IN PROGRESS...",! 
	. s $ztrap="" 
	. d ##class(%File).Delete(fnam)
	. h 10 
	i x="" c fnam s $ztrap="" h 2 g EndReadJobID1
	i x["""BlockType"": " s blocktype=$p(x,"""BlockType"": ",2)
	i x["""Confidence"": " s confidence=$p(x,"""Confidence"": ",2)
	i x["""Page"": " s page=$p(x,"""Page"": ",2)
	i x["""Text"": " s text=$p(x,"""Text"": ",2),text=$e(text,1,$l(text)-1)
	i x["""Left"": " s left=$p(x,"""Left"": ",2),left=$e(left,1,$l(left)-1)
	i x["""Top"": " s top=$p(x,"""Top"": ",2),top=$e(top,1,$l(top)-1)
	i x["""Page"": " d
	. i text'="" d
	.. ;i +confidence<59 s text="",left="",top="" q
	.. s text=$replace(text,"""","")
	.. s text=$replace(text,"(","")
	.. s text=$replace(text,")","")
	.. i text="" s text="",left="",top="" q
	.. s blocktype=$zconvert($replace(blocktype,"""",""),"l")
	.. i blocktype'="line," q
	.. ;u 0 w !,text
	.. s obj=##class(MX.Record).%OpenId(rid)
	.. d obj.OCR.Insert(text)
	.. d obj.%Save()
	.. s obj=""
	.. ;s i=i+1
	.. ;s gbl="^"_d2_"("_i_")"
	.. ;s @(gbl)=text
	.. s (text,top,left,blocktype,confidence,page)=""
	g ReadResult1
	
EndReadResult
	s $ztrap=""
	c fnam
	w !
	; DO ^DW3 PROCESSING
	;s ^UPLOAD(k1,d2)=$h
	s dt=$zdatetime($h,3)
	&sql(UPDATE Record SET ProcessedDate=:dt WHERE ID=:rid)
	d ^jxAWSBGSave
	; clean up
	s str="aws s3 rm s3://jondaffr/"_d2_".png"
	s x=$zf(-1,str_" && exit")	
	d ##class(%File).Delete(fnam)
	d ##class(%File).Delete("c:\intersystems\cache\jondax\"_CompanyName_"\bucket\upload\"_d2_".png")
	d GPT^utilAWS(rid)
	w !,"--- DO NOT CLOSE THIS WINDOW ---",!
	q
	
EndReadResult1
	w "  EndReadResult1..."
	k arr
	s $ztrap="ProcessResult^jxAWSBGa"
	s tempfile="c:\intersystems\cache\jonda\results\"_d2_".txt"
	o tempfile
	f i=1:1 u tempfile r x s file="^"_d2_"("_i_")",@(file)=x
.
ProcessResult
	s $ztrap="" c tempfile
	w "  ProcessResult..."
	s text="",top="",left="",prevtop=""
	s tempfile="c:\intersystems\cache\jonda\results\"_d2_".0sv"
	o tempfile:"(NWS)"
	s i=""
ProcessResult1
	s i=$o(arr(i)) i i="" k arr c tempfile g ShowResult 			;q:i=""
	i arr(i)["""Text"":" s text=$replace($p(arr(i),": ",2),"""","") i text="" s text=$replace($p(arr(i),": ",3),"""","")
	; strip ending comma and replace with $c(0)
	i arr(i)["""Text"":",text'="" s text=$e(text,1,$l(text)-1)_Q
	i arr(i)["""Left"":" s left=$e($p(arr(i),": ",2),1,5)
	i arr(i)["""Top"":" s top=$j($e($p(arr(i),": ",2),1,5),0,2) d
	. q:text=""
	. ;u tempfile w "Prev: ",prevtop," Top: ",top,"  Left: ",$j(left,0,2),"  ",text
	. i top'=prevtop s prevtop=top w !
	. u tempfile w text
	. i prevtop="" s prevtop=top
	. s text="",left="",top=""
	g ProcessResult1	
ShowResult
	w "ShowResult: ",d2_"."_ext,!
	;s ^UPLOAD(k1,d2)=$h
	g BG2
	
UploadToS3	; Upload file to AWS S3 jonda bucket
	w "   UploadToS3: ",d2_"."_ext,!
	s file="c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext
	s x=$zf(-1,"aws s3 cp "_file_" s3://jondaffr/ && exit")
	q
SDTD	; Start Document Text Detection
	w "   Start Document Text Detection: ",d2_"."_ext,!
	s str="aws textract start-document-text-detection --document ""{\""S3Object\"":{\""Bucket\"":\""jondaffr\"",\""Name\"":\"""_d2_"."_ext_"\""}}"" > c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_fileid_".txt"
	s x=$zf(-1,str_" && exit")
	q
GDTD	; Get Document Text Detection
	w "   Get Document Text Detection: ",!
	s str="aws textract get-document-text-detection --job-id """_jobid_""" > C:\InterSystems\Cache\Jondax\"_CompanyName_"\bucket\results\"_d2_".txt"
	s x=$zf(-1,str_" && exit")
	q
GNXT	; Get Next Token
	w "   Get Next Token: ",!
	s str="aws textract get-document-text-detection --job-id """_jobid_""" -- next-token """_tokenid_""" > C:\InterSystems\Cache\Jondax\"_CompanyName_"\bucket\results\"_tokenid_".txt"
	s x=$zf(-1,str_" && exit")
	q
.

jxAWSBGa01^MAC^^67226,39157.1178648^0
jxAWSBGa01		; 20th Dec 2021
	#import MX
	d INIT^CSP999
	w #,"--- DO NOT CLOSE THIS WINDOW ---",!
	;s k1=""
BG1	;w "BG1",!
	;s k1=$o(^UPLOAD(k1)) 
	;s rid=""
	;&sql(SELECT TOP 1 ID INTO :rid FROM Record WHERE IsNull(ProcessedDate,'')='' AND OrgFile<>'' ORDER BY CreatedDate)
	;s rid=fileId
	i rid="" q	
	&sql(SELECT Profile,Profile->UserID,TempFile,fExt,Profile->CompanyName,IsTrial INTO :pid,:k1,:d2,:ext,:CompanyName,:IsTrial FROM Record WHERE ID=:rid)
	w $zdatetime($h,3,,4),!
	s ProcessCount=0
BG2	
	w "Processing ",d2,!
	; call Textract Tables
	;;d TextractTables^utilAWS(rid)
	
	s ext=$zconvert(ext,"U")
	i ext="PDF" d ^jxAWSBGPDF01 w !,"--- DO NOT CLOSE THIS WINDOW ---",! q
	i ext="MP3" q
	i ext="MP4" q
	w !,"Get back to jxAWSBGa"
	; convert iPhone HEIC, Android AVIF/WebP & all files to png
	; and set limit to less than 5mb
	i (ext="HEIC")!(ext="AVIF")!(ext="WEBP") d
	. ;this doesn't work	;s cmd="mogrify -resize 50% -format png c:\intersystems\cache\jondax\"_CompanyName_"\"_d2_"."_ext
	. s cmd="mogrify -format png c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext
	. s x=$zf(-1,cmd_" && exit")
	. s ext="PNG"
	. ; set non-standard images to png in MX.Record
	. ; set OrgFile,fExt,BinaryData
	. ;&sql()
	
	; check for oversized files
	s scale=100
	s x=##class(%File).GetFileSize("c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext)
	i x>9999999 d		; 10Mb limit for AWS
	. s x=x-1	; to be sure
	. s scale=$p(100-(x/99999999*100),".",1)-1
	. w ?3,"File size too large: ",x,"   Scaling by ",scale,"%",!
	s cmd="convert c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext_" -scale "_scale_"% -deskew 40% c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_".png"
	s x=$zf(-1,cmd_" && exit")
	s ext="PNG"
	; run this twice to be sure
	s x=##class(%File).GetFileSize("c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext)
	i x>9999999 d		; 10Mb limit for AWS
	. s x=x-1	; to be sure
	. s scale=$p(100-(x/99999999*100),".",1)-1
	. w ?3,"File size too large: ",x,"   Scaling by ",scale,"%",!
	. s cmd="convert c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext_" -scale "_scale_"% -deskew 40% c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_".png"
	. s x=$zf(-1,cmd_" && exit")
	. s x=##class(%File).GetFileSize("c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext)
	. w ?3,"New File Size: ",x,!
	; Uploading file
	d UploadToS3
	h 10
	d ##class(%File).Delete(d2_"."_ext)
.
	; Decyphering text
Decypher1
	s fileid=$p($h,",",1)_$p($h,",",2)
	d SDTD
Decypher2	i '##class(%File).Exists("c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_fileid_".txt") h 5 g Decypher2	
ReadJobID
	s ProcessCount=ProcessCount+1
	i ProcessCount>11 g EndReadResult
	w ?3,"ReadJobID..."
	s $ZERROR=""
	s $ztrap="EndReadJobID^jxAWSBGa"
	s fnam="c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_fileid_".txt"
	o fnam u fnam
	k arr
	s i=0
ReadJobID1
	u fnam r x
	s i=i+1
	s arr(i)=x
	g ReadJobID1
	
EndReadJobID
	s $ztrap=""
	i $ZERROR'="",$ZERROR'["ENDOFFILE" u 0 w "ERROR: ",$ZERROR,!
	c fnam
	
	w ?3,"EndJobID..."
	s jobid=$p($g(arr(2)),"""",4)
	i jobid="" h 5 g ReadJobID
	; cleanup
	d ##class(%File).Delete(fnam)
	s readtries=0
EndReadJobID1
	s $ztrap=""
	d GDTD
ReadResult
	w ?3,!,"ReadResult..."	
	s fnam="c:\intersystems\cache\jondax\"_CompanyName_"\bucket\results\"_d2_".txt"
	s readtries=readtries+1
	i readtries>10 g EndReadResult
	i '##class(%File).Exists(fnam) h 5 g EndReadJobID1
	o fnam u fnam
	s $ZERROR=""
	s $ztrap="EndReadResult^jxAWSBGa"
	k arr
	s (text,top,left,blocktype,confidence,page)=""
	;s i=0
ReadResult1
	u fnam r x
	i x["INVALID_IMAGE_TYPE" s dt=$zdatetime($h,3) &sql(UPDATE Record SET ProcessedDate=:dt,Type='Invalid Image',ReviewedBy=9,ReviewedDate=:dt WHERE ID=:rid) q	
	; TODO: add error log
	i x["IN_PROGRESS" d  g EndReadJobID1
	. c fnam 
	. u 0 w "   ",fnam," IN PROGRESS...",! 
	. s $ztrap="" 
	. d ##class(%File).Delete(fnam)
	. h 10 
	i x="" c fnam s $ztrap="" h 2 g EndReadJobID1
	i x["""BlockType"": " s blocktype=$p(x,"""BlockType"": ",2)
	i x["""Confidence"": " s confidence=$p(x,"""Confidence"": ",2)
	i x["""Page"": " s page=$p(x,"""Page"": ",2)
	i x["""Text"": " s text=$p(x,"""Text"": ",2),text=$e(text,1,$l(text)-1)
	i x["""Left"": " s left=$p(x,"""Left"": ",2),left=$e(left,1,$l(left)-1)
	i x["""Top"": " s top=$p(x,"""Top"": ",2),top=$e(top,1,$l(top)-1)
	i x["""Page"": " d
	. i text'="" d
	.. ;i +confidence<59 s text="",left="",top="" q
	.. s text=$replace(text,"""","")
	.. s text=$replace(text,"(","")
	.. s text=$replace(text,")","")
	.. i text="" s text="",left="",top="" q
	.. s blocktype=$zconvert($replace(blocktype,"""",""),"l")
	.. i blocktype'="line," q
	.. ;u 0 w !,text
	.. s obj=##class(MX.Record).%OpenId(rid)
	.. d obj.OCR.Insert(text)
	.. d obj.%Save()
	.. s obj=""
	.. ;s i=i+1
	.. ;s gbl="^"_d2_"("_i_")"
	.. ;s @(gbl)=text
	.. s (text,top,left,blocktype,confidence,page)=""
	g ReadResult1
	
EndReadResult
	s $ztrap=""
	c fnam
	w !
	; DO ^DW3 PROCESSING
	;s ^UPLOAD(k1,d2)=$h
	s dt=$zdatetime($h,3)
	&sql(UPDATE Record SET ProcessedDate=:dt WHERE ID=:rid)
	d ^jxAWSBGSave
	; clean up
	s str="aws s3 rm s3://jondaffr/"_d2_".png"
	s x=$zf(-1,str_" && exit")	
	d ##class(%File).Delete(fnam)
	d ##class(%File).Delete("c:\intersystems\cache\jondax\"_CompanyName_"\bucket\upload\"_d2_".png")
	d GPT^utilAWS(rid)
	w !,"--- DO NOT CLOSE THIS WINDOW ---",!
	q
	
EndReadResult1
	w "  EndReadResult1..."
	k arr
	s $ztrap="ProcessResult^jxAWSBGa"
	s tempfile="c:\intersystems\cache\jonda\results\"_d2_".txt"
	o tempfile
	f i=1:1 u tempfile r x s file="^"_d2_"("_i_")",@(file)=x
.
ProcessResult
	s $ztrap="" c tempfile
	w "  ProcessResult..."
	s text="",top="",left="",prevtop=""
	s tempfile="c:\intersystems\cache\jonda\results\"_d2_".0sv"
	o tempfile:"(NWS)"
	s i=""
ProcessResult1
	s i=$o(arr(i)) i i="" k arr c tempfile g ShowResult 			;q:i=""
	i arr(i)["""Text"":" s text=$replace($p(arr(i),": ",2),"""","") i text="" s text=$replace($p(arr(i),": ",3),"""","")
	; strip ending comma and replace with $c(0)
	i arr(i)["""Text"":",text'="" s text=$e(text,1,$l(text)-1)_Q
	i arr(i)["""Left"":" s left=$e($p(arr(i),": ",2),1,5)
	i arr(i)["""Top"":" s top=$j($e($p(arr(i),": ",2),1,5),0,2) d
	. q:text=""
	. ;u tempfile w "Prev: ",prevtop," Top: ",top,"  Left: ",$j(left,0,2),"  ",text
	. i top'=prevtop s prevtop=top w !
	. u tempfile w text
	. i prevtop="" s prevtop=top
	. s text="",left="",top=""
	g ProcessResult1	
ShowResult
	w "ShowResult: ",d2_"."_ext,!
	;s ^UPLOAD(k1,d2)=$h
	g BG2
	
UploadToS3	; Upload file to AWS S3 jonda bucket
	w "   UploadToS3: ",d2_"."_ext,!
	s file="c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_d2_"."_ext
	s x=$zf(-1,"aws s3 cp "_file_" s3://jondaffr/ && exit")
	q
SDTD	; Start Document Text Detection
	w "   Start Document Text Detection: ",d2_"."_ext,!
	s str="aws textract start-document-text-detection --document ""{\""S3Object\"":{\""Bucket\"":\""jondaffr\"",\""Name\"":\"""_d2_"."_ext_"\""}}"" > c:\intersystems\cache\jondax\"_CompanyName_"\bucket\"_fileid_".txt"
	s x=$zf(-1,str_" && exit")
	q
GDTD	; Get Document Text Detection
	w "   Get Document Text Detection: ",!
	s str="aws textract get-document-text-detection --job-id """_jobid_""" > C:\InterSystems\Cache\Jondax\"_CompanyName_"\bucket\results\"_d2_".txt"
	s x=$zf(-1,str_" && exit")
	q
GNXT	; Get Next Token
	w "   Get Next Token: ",!
	s str="aws textract get-document-text-detection --job-id """_jobid_""" -- next-token """_tokenid_""" > C:\InterSystems\Cache\Jondax\"_CompanyName_"\bucket\results\"_tokenid_".txt"
	s x=$zf(-1,str_" && exit")
	q
.

jxAWSOCR^MAC^^67159,31881.5310577^0
jxAWSOCR	 ; pass in Record ID (rid) and get OCR text
GetDateType	; Date and Type of Record
	w !," In jxAWSOCR"
	n test
	s ReportDate=""
	k TestType
	s obj=##class(MX.Record).%OpenId(rid)
	q:$g(obj)=""
	f recno=1:1:obj.OCR.Count() {
		s rec=obj.OCR.GetAt(recno)
		s rec=$zconvert(rec,"U")
		; DATE
		;i "*DISCHARGE DATE*ADMISSION DATE*DATE RECEIVED*COLLECTION DATE*REPORT DATE*DATE OF REPORT*DATE OF VISIT*VISIT DATE*ADMITTED ON*"[("*"_rec_"*") {
		i ((ReportDate="")&(rec["DATE")&(rec'["BIRTH"))!((ReportDate="")&(rec["COLLECTED")&(rec["REPORTED")){
			s ReportDate=$replace(ReportDate," ","")
			s ReportDate=$p(rec,":",2) 
			i ReportDate="" s ReportDate=obj.OCR.GetAt(recno+1) i ReportDate[":" s ReportDate=$p(ReportDate,":",2) 
			i ReportDate="" s ReportDate=obj.OCR.GetAt(recno+2) i ReportDate[":" s ReportDate=$p(ReportDate,":",2)
			i $e(ReportDate,1,1)=" " s ReportDate=$e(ReportDate,2,999)	
			s ReportDate=$replace(ReportDate,","," ")
			;i +ReportDate=0 q
			s x=$zdateh(ReportDate,15,,,,,,,-1)					; dd-mm-yyyy
			i x=-1 s x=$zdateh(ReportDate,6,,,,,,,-1)		; mm-dd-yyyy
			; check for year (sliding scale)
			/*
			i +x>1 {
					s nowdt=$h
					s nowyr=$zdateh("01/01/"_$p($zdate($h,4,,4),"/",3),4,,4)
					i x<nowdt
			}
			*/
			; end check for year
			i +x>1 s ReportDate=x,obj.ReportDate=ReportDate d obj.%Save()
		}
		
		; BELOW DOES NOT WORK 08.03.22-DW
		; TYPE: CHECK MX.DiagnosticType
		;i obj.Type'="" d  g SkipTestType
		;. s x=obj.Type f iii=1:1 d  q:x1=""
		;.. s x1=$p(x,", ",iii) q:x1=""
		;.. s TestType(x1)=""
.
		s x=$zconvert(rec,"U")
.
		s x=$replace(x,"("," "),x=$replace(x,")"," "),x=$replace(x,":"," "),x=$replace(x,"-"," "),x=$replace(x,"*"," ")
		;;; TAKE ONLY COMPLETE WORDS
		s (id,r1,r2)=""
		&sql(SELECT ID,ResultType,Name INTO :id,:r1,:r2 FROM DiagnosticType WHERE :x[UPPER(Name))
		; check if space before 
		i id'="" d
		. s r2=$zconvert(r2,"U")
		. s err=0
		. s x1=$p(x,r2,1)
		. i $l(x1)>0,($e(x1,$l(x1),$l(x1))'=" ") s err=1
		. ; check if space after
		. s x1=$p(x,r2,2)
		. i $l(x1)>0,($e(x1,1,1)'=" ") s err=1
		. i err=0,id'="" s TestType(r1)=""
		
		; TYPE: CHECK DiagnosticTest->Type->Name
		s (id,r1,r2)=""
		&sql(SELECT ID,Type->ResultType,Type->Name,SIName INTO :id,:r1,:r2,:r3 FROM DiagnosticTest WHERE :x[UPPER(DiagnosticTest.Name))
		; check if space before 
		i id'="" d
		. s TestType(r1)=""
	}
SkipTestType
	s test1=""
	;i '$d(TestType) d ^MAI ; Medication AI 
.
	; if not BLOOD TEST, set to auto-reviewed
	;i '$d(TestType("Blood Test")),'$d(TestType("Medication")) d
	s dt=$zdatetime($h,3)
	
	//CHECK IF TYPE IS ALREADY ASSIGNED - JC 18-05-2023
	s GHRecID="",fExt=""
	&sql(SELECT Type,GHRecID,fExt INTO :PreType,:GHRecID,:fExt FROM MX.Record WHERE ID=:rid)
	
	
	i $o(TestType(""))="" d  s obj="" q
	. &sql(UPDATE Record SET ReviewedDate=:dt,ReviewedBy=1,Type='Other' WHERE ID=:rid)
.
	i $d(TestType) s x="" f ii=1:1 d  q:x=""
	. s x=$o(TestType(x)) q:x=""
	. s test1=test1_$s(test1'="":", ",1:"")_x
.
	;i test1="" s test1="Other" 
	;i obj.Type="" s obj.Type=test1 d obj.%Save()
	s obj.Type=test1 d obj.%Save()
	s obj=""
	s r1="" &sql(SELECT ID INTO :r1 FROM ResultBloodTest WHERE Record->ID=:rid)
	
	// fExt
	s ^JC3=PreType
	i GHRecID'="",PreType="Radiology",fExt'="html" &sql(UPDATE Record SET Type=:PreType,ReviewedDate=:dt,ReviewedBy=1 WHERE ID=:rid)
	i GHRecID'="",PreType="Urinalisys" &sql(UPDATE Record SET Type=:PreType,ReviewedDate=:dt,ReviewedBy=1 WHERE ID=:rid)
	q
	
	
	
	q:ReportDate'=""
	s obj=##class(MX.Record).%OpenId(rid)
	f i=1:1:obj.OCR.Count() {
		s rec=obj.OCR.GetAt(i)
		s rec=$zconvert(rec,"U")
		; DATE
		i "*DATE*"[("*"_rec_"*") {
			s ReportDate=$p(rec,":",2)
			i ReportDate="" s ReportDate=obj.OCR.GetAt(i+1) i ReportDate[":" s ReportDate=$p(ReportDate,":",2)
			i ReportDate="" s ReportDate=obj.OCR.GetAt(i+2) i ReportDate[":" s ReportDate=$p(ReportDate,":",2)
			i $e(ReportDate,1,1)=" " s ReportDate=$e(ReportDate,2,999)	
			s ReportDate=$replace(ReportDate,","," ")
			i +ReportDate=0 q
			s x=$zdateh(ReportDate,15,,,,,,,-1)					; dd-mm-yyyy
			i x=-1 s x=$zdateh(ReportDate,6,,,,,,,-1)		; mm-dd-yyyy
			q:+x<1 
			s ReportDate=x
			s obj.ReportDate=ReportDate d obj.%Save()
		}
	}
	q

jxAltConvertResultTable^MAC^^67087,22028.8222011^0
jxAltConvertResultTable
InitMe
	#import MX
	d INIT^WSP999
	s downloadFileType = $g(%session.Data("jxFormat"))
	&js<document.getElementById("file-type").innerHTML = "#(downloadFileType)#">
	i $d(^DoNotShow("ConvertResultTable",UserID)) &js<DoNotShow=1>
	q
.
WriteTable1
	#import MX
	d INIT^WSP999
	s Q=$c(9)	; tab
	i $g(%session.Data("jxAltConvertResultTable","Template"))="" s %session.Data("jxAltConvertResultTable","Template")="JondaX"
	s template=%session.Data("jxAltConvertResultTable","Template")
	s UserID=$g(%session.Data("UserID"))
	s fname=%session.Data("jxAltUploadRecord")
	s fext="."_%session.Data("jxAltUploadRecord","fext")
	s tmp=^jxAltUpload(fname)
	s %dev1="c:\intersystems\cache\jondax\elfie\ad-hoc\"_tmp_".csv"
	s fname=$replace(fname,fext,"")
	s %dev="c:\intersystems\cache\csp\jondax\elfieDemo\"_fname_".csv"
	o %dev:"wns"
	s c1="#405470"	; blue->same as original
	s c2="#e63876"	; pink->transformed but unsure
	s c3="#048f2a"	; green->successfully transformed
	s row=""
	s trow=1
	n d0
	s d0=1
	k ^martin
	s ^martin("NM")=0
WriteTable1a
	
	s row=$o(^AICLAUDE("alt"_UserID,row)) g:row="" WriteTable1End
	s r0=$g(^AICLAUDE("alt"_UserID,row,"date"))
	s r1=$g(^AICLAUDE("alt"_UserID,row,"name"))
	s r2=$g(^AICLAUDE("alt"_UserID,row,"unit"))
	s r3=$g(^AICLAUDE("alt"_UserID,row,"value"))
	s r4=$g(^AICLAUDE("alt"_UserID,row,"loRange"))
	s r5=$g(^AICLAUDE("alt"_UserID,row,"hiRange"))
	s r2x=r2
	s trowCount=$g(^Textract(%dev1,"rowCount"))
	s dCount=2*trowCount
	; test ^AICLAUDE vs ^AICLAUDE for duplicate rows
	if row>1 
	{	n pRow s pRow= row-1
		s r1p=$g(^AICLAUDE("alt"_UserID,pRow,"name"))
		if (r1=r1p),($g(^AICLAUDE("alt"_UserID,"rowCount"))'=dCount) s trow=trow+1  g WriteTable1a
		if ^AICLAUDE("alt"_UserID,row,"row"_row)= ^AICLAUDE("alt"_UserID,pRow,"row"_pRow) d ;g WriteTable1a ;d
		.s ^AICLAUDE("alt"_UserID,"rowCount")=$g(^AICLAUDE("alt"_UserID,"rowCount"))-1 
		.g WriteTable1a
		
	} 
	g:r1="" WriteTable1a
	; clean up units
		s r2=$replace(r2,"|","l")
		s r2=$replace(r2," ","")
		s r3=$replace(r3,",",".")
		i $e(r2,$l(r2)-1,$l(r2))="/1" s r2=$replace(r2,"/1","/l")
		i $e(r2,$l(r2))="_" s r2=r2_"l"
		s r2=$replace(r2," / ","/") 
		s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:r2 OR SIName=:r2)
		i x="",r2'="" s r2=r2_"/l"	; because of g. ; commented by DW 2024-03-14 ;uncommented by Martin 2024-03-20
		s x1="" &sql(SELECT ID INTO :x1 FROM SIUnit WHERE Name=:r2 OR SIName=:r2) 
		i x1="",r2'="" s r2=$replace(r2,"/l","")
	; end clean up
	; missing units- check textract
	;for unit is misplaced in value eg."0.10 10e9-l" by Martin 2024-04-08
	i r3[" " { 
	for i = 1:1:$length(r3, " ") 
	{   if $number($piece(r3, " ", i))  d
    	.if r2="" s r2=$piece(r3, " ", i+1)
    	.s r3= $piece(r3, " ", i)  
		}
	}
	; clean up value and range
		; test if units is included in value
		s r3=$p(r3," ",1)
		s r3=$replace(r3,",",".")
		s r3=$replace(r3,"*","")
		s r3=$replace(r3," ","")
		s r4=$replace(r4,",",".")
		s r4=$replace(r4," ","")
		i $p(r4,"-",1)'="",$p(r4,"-",2)'="" d	; cater for 1-3
		. s r5=$p(r4,"-",2),r4=$p(r4,"-",1)
		s r5=$replace(r5,",",".")
		s r5=$replace(r5," ","")
		i $p(r5,"-",1)'="",$p(r5,"-",2)'="" d	; cater for 1-3
		. s r4=$p(r5,"-",1),r5=$p(r5,"-",2)
	; end clean up
	;cater for "<", ">" signs column placement
	if (r4["<"),(r5="") s r5=r4 s r4=""
	if (r4=""),(r5[">") s r4=r5 s r5=""
	
	; Compare ^AICLAUDE vs ^Textract
	;Check rowCount
	
	
	i trow<=trowCount
	{
		s t1=$p(^Textract(%dev1,trow,"BB"),",",1) ; get testname from ^Textract
		if $e(t1,$l(t1))=" " s t1=$e(t1,1,$l(t1)-1) ;remove trailing space from testname
		;Check r1,r2,r3,r4,r5 all contain in ^Textract(%dev,row,"BB")
		if r1[t1, ^Textract(%dev1,trow,"BB")[r2, ^Textract(%dev1,trow,"BB")[r3, ^Textract(%dev1,trow,"BB")[r4, ^Textract(%dev1,trow,"BB")[r5 
		{	;s ^martin("match",row,trow)=r1_","_r2x_","_r3_" are match with "_^Textract(%dev1,trow,"BB") s ^martin("NM",trow)=0
			s match=1
			s trow=trow+1 }
		else
		{ 	
			if ($g(^AICLAUDE("alt"_UserID,"rowCount"))=dCount)
			{	//for 2 sets of result
				i r2="" s r2=$g(^AICLAUDE("alt"_UserID,row-1,"unit"))
				i r4="" s r4=$g(^AICLAUDE("alt"_UserID,row-1,"loRange"))
				i r5="" s r5=$g(^AICLAUDE("alt"_UserID,row-1,"hiRange"))
				s r2x=r2
				s match=0
				;s ^martin(row,r2,r4,r5)=$g(^AICLAUDE("alt"_UserID,row-1,"unit"))_" , "_$g(^AICLAUDE("alt"_UserID,row-1,"loRange"))_" , "_$g(^AICLAUDE("alt"_UserID,row-1,"hiRange"))
			    ;s ^martin("NM",trow)=1 s ^martin("not match1",row,trow)=r1_","_r2_","_r3_","_r4_","_r5_" is not match with "_^Textract(%dev1,trow,"BB")
				}
			elseif r1[t1 { s match=0 s trow=trow+1} ;s ^martin("NM")=1   s ^martin("NM",trow)=1 s ^martin("not match2",row,trow)=r1_","_r2_","_r3_","_r4_","_r5_" is not match with "_^Textract(%dev1,trow,"BB") 	
			elseif  trow<trowCount{
				s trow1=trow+1
				s t2=$p(^Textract(%dev1,trow1,"BB"),",",1) ;get next testname from ^Textract
				;s ^martin("tname2",trow1,trow)=t2_r1 ; 
				if $e(t2,$l(t2))=" " s t2=$e(t2,1,$l(t2)-1) ;remove trailing space from testname 
				if r1'=t2 s trow=trow+1 s match=1 ;g WriteTable1a 
				e  d 
				.;s ^martin("row Test",trow)=r1_" , "_t2
				.s match=0 ;s ^martin("NM")=1   s ^martin("NM",trow)=1 s ^martin("not match3",row,trow)=r1_","_r2_","_r3_","_r4_","_r5_" is not match with "_^Textract(%dev1,trow,"BB")
				.s trow=trow1
			
			}else{ s match=0}
		}
	}else { s match=0}	
.
	if match=0 w "<tr style='background-color: #F7D896;'>" 
	else  w "<tr>" 
	;END
	/*s rid= %session.Data("jxAltUploadRecord","ID")
	s ^OrgTestName(rid,row,"testDate")=r0
	s ^OrgTestName(rid,row,"testName")=r1
	s ^OrgTestName(rid,row,"testValue")=r3
	s ^OrgTestName(rid,row,"testUnit")=r2
	s ^OrgTestName(rid,row,"testHiRange")=r5
	s ^OrgTestName(rid,row,"testLoRange")=r4 */
	;&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	s bk="jondaffr2"
	
	
	w "<td style='color:"_c1_"'>"_r0_"</td>"
	w "<td class='test-name'>"_r1_"</td>"  
	s x=$$GetSIName^WSP999(r1)
	s r1a=""
	i x="" {
	 	s IsMatch=0,r1a=r1
		WHILE IsMatch=0&($l(r1a)'=0){
			s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE Name=:r1a OR SIName=:r1a AND IsNull(DeletedDate,'')<>'')
			i r0'="" s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
		i r1a'="" d
		.w "<td style='color:"_c2_"' title='No matching JX Name- Picking closest match'>"_r1a_"</td>" ;r1a
		e  w "<td style='color:"_c2_"; background-color: #e6f796' title='No matching JX Name- Using original'>"_r1_"</td>" ;r1
	}
	i x'="" d
	. i ($zconvert(x,"l")=$zconvert(r1,"l")) w "<td style='color:"_c1_"'>"_r1_"</td>" ;r1
	. e   s r1=x w "<td style='color:"_c3_"'>"_r1_"</td>" ;r1
.
	s x=$$GetJXUnit^WSP999(r2)
	i x'="" s r2=x
	s r2a=""
	i r2'="" s r2a=$$GetSIUnit^WSP999(r1)
	; more clean up
		i r2="%" d
		. i $l($p(r3,".",1))>3 s r3=$replace(r3,".",""),r3=$e(r3,1,2)_"."_$e(r3,3,999)
		. i $l($p(r4,".",1))>3 s r4=$replace(r4,".",""),r4=$e(r4,1,2)_"."_$e(r4,3,999)
		. i $l($p(r5,".",1))>3 s r5=$replace(r5,".",""),r5=$e(r5,1,2)_"."_$e(r5,3,999)
		; test if original unit can be converted
		s x="",x=$$U2U^WSP999(r1,r3,r2,r2a)
		i x["ERROR" s r2a=r2
	; end more
	d
	. s r3x=r3,r4x=r4,r5x=r5
	. s r3=$$U2U^WSP999(r1,r3,r2,r2a)
	. s r4=$$U2U^WSP999(r1,r4,r2,r2a)
	. s r5=$$U2U^WSP999(r1,r5,r2,r2a)
	s recalc=0
	i x["ERROR" w "<td  style='color:"_c2_"' title='No matching JXConversion : "_r2x_"'>"_r2_"</td>" ;r2
	i x'["ERROR" d
	. i (r2a="")!($zconvert(r2a,"l")=$zconvert(r2,"l")) w "<td style='color:"_c1_"'>"_r2_"</td>"
	. e  s recalc=1 s r2=r2a w "<td style='color:"_c3_"'>"_r2a_"</td>" 
	; below
	/*
	. i +r3'=+r3x w "<td style='color:"_c3_"'>"_$s(r3'="":r3,1:"")_"</td>"
	. e  w "<td style='color:"_c1_"'>"_$s(r3'="":r3,1:"")_"</td>"
	. i +r4'=+r4x w "<td style='color:"_c3_"'>"_$s(r4'="":r4,1:"")_"</td>"
	. e  w "<td style='color:"_c1_"'>"_$s(r4'="":r4,1:"")_"</td>"
	. i +r5'=+r5x w "<td style='color:"_c3_"'>"_$s(r5'="":r5,1:"")_"</td>"
	. e  w "<td style='color:"_c1_"'>"_$s(r5'="":r5,1:"")_"</td>"
	*/
	i recalc d
	. i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td style='color:"_c3_"'>"_$s(r3'="":r3,1:"")_"</td>" ;_ave_"// " s ave=$$AveRes^WSP999(r1,r3,r2,"")
	. i r3["ERROR" w "<td style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'>"_$s(r3'="":r3,1:"")_"</td>"
	.
	. i r4'["ERROR" w "<td style='color:"_c3_"'>"_$s(r4'="":r4,1:"")_"</td>"
	. i r4["ERROR" w "<td style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'>"_$s(r4'="":r4,1:"")_"</td>"
	. i r5'["ERROR" w "<td style='color:"_c3_"'>"_$s(r5'="":r5,1:"")_"</td>"
	. i r5["ERROR" w "<td style='color:"_c2_"' title='No matching JXConversion : "_r5x_"'>"_$s(r5'="":r5,1:"")_"</td>"
	. ;w "<td style='color:"_c3_"'>"_$s(r4'="":r4,1:"")_"</td>"
	. ;w "<td style='color:"_c3_"'>"_$s(r5'="":r5,1:"")_"</td>"
	e  d
	. i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td style='color:"_c1_"'>"_$s(r3'="":r3,1:"")_"</td>"
	. i r3["ERROR" w "<td style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'>"_$s(r3'="":r3,1:"")_"</td>"
	. i r4'["ERROR" w "<td style='color:"_c1_"'>"_$s(r4'="":r4,1:"")_"</td>"
	. i r4["ERROR" w "<td style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'>"_$s(r4'="":r4,1:"")_"</td>"
	. i r5'["ERROR" w "<td style='color:"_c1_"'>"_$s(r5'="":r5,1:"")_"</td>"
	. i r5["ERROR" w "<td style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'>"_$s(r5'="":r5,1:"")_"</td>"
	
	. ;w "<td style='color:"_c1_"'>"_$s(r4'="":r4,1:"")_"</td>"
	. ;w "<td style='color:"_c1_"'>"_$s(r5'="":r5,1:"")_"</td>"
	w "</tr>",!
	;i r3'="" s r3=$fn(r3,,2) 
	;i r4'="" s r4=$fn(r4,,2) 
	;i r5'="" s r5=$fn(r5,,2) 
	u %dev w r0_Q_r1_Q_r2_Q_r3_Q_r4_Q_r5,! u 0
	d SaveResult
	g WriteTable1a	
WriteTable1End
	c %dev
	u 0
	q
SIUnit(index)
	#import MX
	d INIT^WSP999
	k arrSIUnit
	s SIName=$g(%session.Data("jxTransform",index,"SIName"))
	&sql(DECLARE C1 CURSOR FOR
		SELECT ToUnit
		INTO :d1
		FROM SIUnitConversion  
		WHERE DiagnosticTest=:SIName AND IsNull(ToUnit,'')<>''
		ORDER BY 1
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	if SQLCODE'=0{
		; check if not SIName
		&sql(DECLARE C1A CURSOR FOR
			SELECT Name 
			INTO :d1a
			FROM DiagnosticTest
			WHERE SIName=:SIName
		)
		&sql(OPEN C1A)
		&sql(FETCH C1A)
		WHILE SQLCODE=0{
			&sql(DECLARE C1B CURSOR FOR
				SELECT ToUnit
				INTO :d1b
				FROM SIUnitConversion  
				WHERE DiagnosticTest=:d1a AND IsNull(ToUnit,'')<>''
				ORDER BY 1
			)
			&sql(OPEN C1B)
			&sql(FETCH C1B)
			WHILE SQLCODE=0{
		   		i '$d(arrSIUnit(d1b)) write "<li onclick='jChangeUnit(event)'>",d1b,"</li>"
		   		s arrSIUnit(d1b)=""
		    	&sql(FETCH C1B)
			}
			&sql(CLOSE C1B)
			&sql(FETCH C1A)
		}
		&sql(CLOSE C1A)
		; end check
		i '$d(arrSIUnit) write "<li class='no-result'>No Units</li>"
		q
	}
	WHILE SQLCODE=0{
   		i '$d(arrSIUnit(d1)) write "<li onclick='jChangeUnit(event)'>",d1,"</li>"
		s arrSIUnit(d1)=""
    	&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	q
LOINCName(index)
	#import MX
	d INIT^WSP999
	s SIName=$g(%session.Data("jxTransform",index,"SIName"))
	s nomenclature=%session.Data("jxNomenclature")
	s resultCount=0
	if (nomenclature="LOINC"){
		&sql(DECLARE C4 CURSOR FOR
			SELECT Name 
			INTO :d4
			FROM DiagnosticTest 
			WHERE SIName=:SIName
		)
		&sql(DECLARE C2 CURSOR FOR
			SELECT LOINCNUM,COMPONENT,LONGCOMMONNAME
			INTO :d1,:d2,:d3
			FROM LOINC 
			WHERE LOWER(COMPONENT)[LOWER(:d4)
			AND CLASSTYPE=1
			AND (ORDEROBS='Both' OR (ORDEROBS='Observation'))
			AND SCALETYP='Qn'
			AND ((SYSTEM='RBC') OR (SYSTEM['Ser') OR (SYSTEM['Bld') AND (SYSTEM NOT['Urine'))
			ORDER BY 1
		)
		;			WHERE COMPONENT[(SELECT Name FROM DiagnosticTest WHERE SIName=:SIName)
		&sql(OPEN C4)
		&sql(FETCH C4)
		WHILE SQLCODE=0{
			&sql(OPEN C2)
			&sql(FETCH C2)
			WHILE SQLCODE=0{
				write "<li onclick='jChangeName(event)' title='"_$$C2H^WSP999(d3)_"'>",d1," ",d2,"</li>"
    			s resultCount=resultCount+1
    			&sql(FETCH C2)
			}
			&sql(CLOSE C2)
			&sql(FETCH C4)
		}
		&sql(CLOSE C4)
		s d4=SIName
		&sql(OPEN C2)
		&sql(FETCH C2)
		WHILE SQLCODE=0{
			write "<li onclick='jChangeName(event)' title='"_$$C2H^WSP999(d3)_"'>",d1," ",d2,"</li>"
    		s resultCount=resultCount+1
    		&sql(FETCH C2)
		}
		&sql(CLOSE C2)
		if (resultCount=0){
			write "<li class='no-result'>No Result Found</li>"
		}
	}
	elseif (nomenclature="SNOMED"){
		write "<li class='no-result'>No Result Found</li>"
	}
	else{
		&sql(OPEN C4)
		&sql(FETCH C4)
		if SQLCODE'=0{
			write "<li class='no-result'>No Result Found</li>"
		}
		WHILE SQLCODE=0{
			write "<li onclick='jChangeName(event)'>",d4,"</li>"
    		&sql(FETCH C4)
		}
		&sql(CLOSE C4)
	}
	q
ChangeUnit
	#import MX
	d INIT^WSP999
	s fromUnit = $REPLACE($g(%session.Data("jxTransform",d2,"ResultValueUnits")),"*","^")
	s range = $g(%session.Data("jxTransform",d2,"ResultNormalRange"))
	s value = $g(%session.Data("jxTransform",d2,"ResultValue"))
	s SIName = $g(%session.Data("jxTransform",d2,"SIName"))
	s cValue=$$U2U^WSP999(SIName,value,fromUnit,d1)
	s cRangeV1=$$U2U^WSP999(SIName,$p(range,"-",1),fromUnit,d1)
	s cRangeV2=$$U2U^WSP999(SIName,$p(range,"-",2),fromUnit,d1)
	s %session.Data("jxTransform",d2,"ResultValueUnits") = d1
	s %session.Data("jxTransform",d2,"ResultValue") = cValue
	s %session.Data("jxTransform",d2,"ResultNormalRange") = cRangeV1_"-"_cRangeV2
	d ModifySDA^jxDataTransform
	&js<
	let tr = document.querySelector('[data-key="' + #(d2)# + '"]')
	tr.querySelector('.units .text').innerText = "#(d1)#";
	tr.querySelector('.units .text').style.fontWeight = 600;
	tr.querySelector('.value').innerText = "#($$FormatNumber(cValue))#";
	tr.querySelector('.value').style.fontWeight = 600;
	tr.querySelector('.range').innerText = "#($$FormatNumber(cRangeV1))#"+"-"+"#($$FormatNumber(cRangeV2))#"
	tr.querySelector('.range').style.fontWeight = 600;
	>
	q
	
ChangeName
	#import MX
	d INIT^WSP999
	s nomenclature=%session.Data("jxNomenclature")
	if (nomenclature="LOINC"){
		s %session.Data("jxTransform",d2,"Code") = $p(d1," ",1)
		s %session.Data("jxTransform",d2,"Description") = $p(d1,%session.Data("jxTransform",d2,"Code"),2)
	}
	elseif (nomenclature="Custom"){
		s %session.Data("jxTransform",d2,"Code") = d1
		s %session.Data("jxTransform",d2,"Description") = d1
	}
	d ModifySDA^jxDataTransform
	&js<
	let tr = document.querySelector('[data-key="' + #(d2)# + '"]')
	tr.querySelector('.name .text').innerText = "#(d1)#";
	tr.querySelector('.name .text').style.fontWeight = 600;
	>
	q
.
GetDifferentUnits
	#import MX
	d INIT^WSP999
	&sql(
		DECLARE C3 CURSOR FOR
		SELECT T1.SIUnit, T2.FromUnit, T1.SIName
		INTO :d1,:d2,:d3 
		FROM DiagnosticTest T1 
		INNER JOIN SIUnitConversion T2 
		ON T1.SIName = T2.DiagnosticTest
		WHERE T1.SIUnit != T2.FromUnit 
		GROUP BY(T1.SIName)
	)
	&sql(OPEN C3)
	&sql(FETCH C3)
	WHILE SQLCODE=0{
		w "SI Unit: "_d1_" | From Unit: "_d2_" | SI Name: "_d3,!
		&sql(FETCH C3)
	}
	&sql(CLOSE C3)
	q
.
FormatNumber(num)
	#import MX
	d INIT^WSP999
	if (num<1){
		if ($NUMBER(num)=0){
			s num = 0
		}
		else{
			s num = "0"_$NUMBER(num,2)
		}
	}
	else{
		s num = $NUMBER(num,2)
	}
	q num
	
ConvertResults
	s fext="."_%session.Data("jxAltUploadRecord","fext")
	s x=$replace(%session.Data("jxAltUploadRecord"),fext,"")
	s orgFileName=%session.Data("jxAltUploadRecord","fext")
	;s x="../elfieDemo/"_x
	&js<fileName='#(x)#',formalFileExt = '#(orgFileName)#'>
	;&js<window.open("#(x)#","_new")>
	
	q
DoNotShow
	#import MX
	d INIT^WSP999
	s ^DoNotShow("ConvertResultTable",UserID)=$h
	q	
.
SaveResult 
.
	if r0'="" d
	.s dft=$$checkDate^utilAWS(r0)
	.i dft'=0 s reportDate=$ZDATEH(r0,dft)
	.e  s reportDate=""
	s tmpName=tmp 
	&sql(SELECT ID 
		INTO :rID
		FROM ResultBloodTest1
		WHERE TmpName=:tmpName)
	&sql(UPDATE MX.ResultBloodTest1 SET ReportDate=:reportDate WHERE ID=:rID)
	s objx=##class(ResultBloodTest1).%OpenId(rID)
	s objx1=##class(ResultBloodTestValue).%New()
	s objx1.TestName=r1
	s objx1.SIUnit=r2
	s objx1.Result=r3
	s objx1.LowRange=r4
	s objx1.HighRange=r5
	
	d objx.Tests.SetAt(objx1,d0)
	d objx.%Save()
	s d0=d0+1
	q

jxAltConvertResultTable1^MAC^^67088,44518.6846888^0
jxAltConvertResultTable1
InitMe
	#import MX
	d INIT1^CSP999
	i ($g(%session.Data("UserID"))=""){
		&js<window.open("cLockdown.csp","_self")>
		q 
	}
	;s rid=$g(%session.Data("jxTransform","rid"))
	s rid=$g(%session.Data("jxAltUploadRecord","ID"))
	&js<document.getElementById("trans-id").innerHTML="Transaction ID. #(rid)#"; let rid=#(rid)#>
	;&sql(SELECT Profile,BucketName,fExt
	;	INTO :cID,:tName,:fExt
	; 	FROM Record 
	; 	WHERE ID=:rid)
	;&sql(SELECT ContactPerson,UserID INTO :cName,:uName FROM "User" WHERE ID=:cID)
	s tName="jondaffr2", uName="JondaX",cName="JondaX"
	;if $d(%session.Data("jxAltUpload","IND")),$g(%session.Data("jxAltUpload","IND"))=1 s tName="IND"
	
	if ($LENGTH(cName)=0){
		s uName=$ZCONVERT($P(uName,"@",1),"s")
		&js<document.getElementById("cName").innerHTML = "#(uName)#">
		&js<document.getElementById("cName1").innerHTML = "#(uName)#">
	}
	else{
		&js<document.getElementById("cName").innerHTML = "#(cName)#">
		&js<document.getElementById("cName1").innerHTML = "#(cName)#">
	}
	&js<document.getElementById("tName").innerHTML = "#(tName)#">
	&js<document.getElementById("tName1").innerHTML = "#(tName)#">
	/*
	if (fExt="hl7")!(fExt="xml")!(fExt="json")!(fExt="xlsx"){
		&js<document.querySelector(".grey-btn").style.display="none">
	} */
	s ^LastView("cReviewResults",UserID,rid)="jxAltConvertResultTable1.csp"
	;s ^LastView("cReviewResults",UserID,rid)="cReviewResultsS2.csp"
	s tmpname=^jxAltUpload($g(%session.Data("jxAltUploadRecord")))
	s path="c:\intersystems\cache\jondax\Groot\ad-hoc\"_tmpname_".csv"
	i $d(^Textract(path,"rowCount")) s trc=$g(^Textract(path,"rowCount"))
	e  s trc=0
	&js<document.getElementById('tRowCount').innerHTML = "OCR - " +#(trc)#+ " row(s)";>
	q
WriteResults ;not used ; use WriteTable^jxAltConvertResultTable2
	#import MX
	d INIT1^CSP999
	i ($g(%session.Data("UserID"))=""){
		&js<window.open("cLockdown.csp","_self")>
		q 
	}
	s rid=$g(%session.Data("jxAltUploadRecord","ID"))
	;s rid=27
	/*
	&sql(SELECT ID 
		INTO :rbt
		FROM ResultBloodTest
		WHERE Record=:rid
	)
	n bk*/
	s bk=""
	;&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	s count=0
	s userId = $g(%session.Data("UserID"))
	/*
	if ($d(^OrgTestName(rid,count)) = 10){
		s count = 1
		while ($d(^OrgTestName(rid,count)) = 10){
			s r7 = bk
			//s rDate = $g(^FormData(userId, rid, count, "date"))
			s rDate = $g(^OrgTestName(rid,count,"testDate"))
			s r2 = $g(^OrgTestName(rid,count, "testName"))
			s r3 = $g(^OrgTestName(rid,count, "testValue"))
			s r4 = $g(^OrgTestName(rid,count, "testUnit"))
			s r6 = $g(^OrgTestName(rid,count, "testHiRange"))
			s r5 = $g(^OrgTestName(rid,count, "testLoRange"))
			
			s TName = $g(^FormData(userId, rid, count, "TName"))
			s TValue = $g(^FormData(userId, rid, count, "TValue"))
			s TUnit = $g(^FormData(userId, rid, count, "TUnit"))
			s THiRange = $g(^FormData(userId, rid, count, "THiRange"))
			s TLoRange = $g(^FormData(userId, rid, count, "TLoRange"))
			
			//SELECT ResultBloodTest->Record->ReportDate,Tests_TestName2,Tests_Result3,Tests_SIUnit4,Tests_LowRange5,Tests_HighRange6, rsultBloodTest->Record->BucketName7,ResultBloodTest->ReportDate8
			//INTO :r1,:r2,:r3,:r4,:r5,:r6,:r7,:rDate
			if (r2 = ""){
				w "<tr style=""display:none"" class=""deleted""></tr>",!
				s count = +count + 1
				continue
			} else {
				w "<tr>",!
			}
			
			//w "<tr>",!
	        w "<td class='date'>"
	      	
	      	if (rDate = "31/12/1840"){s rDate = ""}
	      	if (rDate '= 0){
		   		//w $REPLACE(rDate,"/","-")
		   		w rDate
	      	}
	        w "</td>",!
	        w "<td class='test-name'>"_r2_"</td>",!
		    
	        //New form of Translation - 28th Sept,2023
	        s translation=$$BiomarkerTranslation($$CheckIncomingTestName^cReviewResultsS1(r2,r4),bk)
	        s SIName=$p(translation,$c(1),1)
	        s r8=$p(translation,$c(1),2)  	;template_name
	        s r9=$p(translation,$c(1),3)	;template_unit
	        
		    s transVal=r3
		    s transLVal=r5
		    s transUVal=r6
		    s convertCheck = 0
		    //if (r4'=r9){
	    	if ($zconvert(r4,"l")'=$zconvert(r9,"l"))&(r9'=""){
		    	s convertCheck = 1
		        s transVal=$$CheckAndConvertNum(SIName,r3,r4,r9)
		        s transLVal=$$CheckAndConvertNum(SIName,r5,r4,r9)
		        s transUVal=$$CheckAndConvertNum(SIName,r6,r4,r9)
		    }
		    if ($L(TName)>0){
			   w "<td class='transformed-name"
			   if (TName'=r2) w " converted"
			   w "'><input type='text' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"
		        _$$C2H^WSP999(TName)_"' placeholder='Translation missing'></td>",!
			}
	        elseif(($L(TName)=0)&(r8="")){
	        	w "<td class='transformed-name'><input type='text' autocomplete='off' onkeyup='dataChange(event)'  onfocus='saveToGlobals()' value='"
		        _$$C2H^WSP999(r2)_"' placeholder='Translation missing'></td>",!
	        }
	        else{
		       	w "<td class='transformed-name"
		       	if (r2'=r8) w " converted"
		       	w "'><input type='text' autocomplete='off' onkeyup='dataChange(event)'  onfocus='saveToGlobals()' value='"_$$C2H^WSP999(r8)_"'></td>",!
	        }
	        w "<td class='result'>"_$$C2H^WSP999(r3)_"</td>",!
	        w "<td class='from-unit'>"_$$C2H^WSP999(r4)_"</td>",!
	        w "<td class='convert-result-val"
		    if ($L(TValue)>0)&&($ISVALIDNUM(TValue)){
		    }
	        elseif ('$ISVALIDNUM(transVal)){
		        if ($EXTRACT(transVal)="<")!($EXTRACT(transVal)=">"){}
		        else{
			        w " issue"
		        }
	        }
	        if (convertCheck) w " converted"
	        w "'>"
	        if (r9=""){
		        s r9=r4
		        w "<img src='./assets/images/info.png' alt='Info' onclick='showInfo(event)'><p class='info-text'>Unit output not defined</p>"
	        }
	   //Transformed VALUE     
		    if ($L(TValue)>0){
			 	w "<input type='text' autocomplete='off' onkeyup='dataChange(event)' value='"_$$FormatNumber^cMain(TValue,2)_"'></td>",!
			} else {
		    	w "<input type='text' autocomplete='off' onkeyup='dataChange(event)' value='"_$$FormatNumber^cMain(transVal,2)_"'></td>",!
			}
			
	        w "<td class='convert-result-unit"
	        if ($ISVALIDNUM(r9)){
		        if (r9="")!($EXTRACT(r9)="<")!($EXTRACT(r9)=">"){}
		        else{
			        w " issue"
		        }
	        }
	        if (convertCheck) w " converted"
	   // Transformed Unit
	   		if ($L(TUnit)>0){
		   		w "'><div class='dropdown' onclick='openUnitSuggestions(event)' tabindex='-1'>"_TUnit_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>",!
	   		}else {     
	        	w "'><div class='dropdown' onclick='openUnitSuggestions(event)'tabindex='-1'>"_r9_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>",!
	   		}
	        w "<td class='l-range'>"_r5_" "_r4_"</td>",!
	        w "<td class='l-result-val"
	        if ('$ISVALIDNUM(transLVal)){
		        if (transLVal="")!($EXTRACT(transLVal)="<")!($EXTRACT(transLVal)=">"){}
		        elseif ($Length($ZSTRIP(transLVal,"<>W"))=0){
		        	w " issue"
		        }
		        else{
		        }
	        }
	        if (convertCheck) w " converted"
	   // Transformed LoRange
	   		if ($L(TLoRange)>0){
		   		w "'><input type='text' autocomplete='off' onkeyup='dataChange(event)' value='"_$$FormatNumber^cMain(TLoRange,2)_"'></td>",!
		   	} else {
	        	w "'><input type='text' autocomplete='off' onkeyup='dataChange(event)' value='"_$$FormatNumber^cMain(transLVal,2)_"'></td>",!
		   	}
		   	
		   	if ($L(TUnit)>0){
	        	w "<td class='l-result-unit'>"_TUnit_"</td>",!
		   	} else {
		   		w "<td class='l-result-unit'>"_r9_"</td>",!
		   	}
		   	
	        w "<td class='u-range'>"_r6_" "_r4_"</td>",!
	        w "<td class='u-result-val"
	        if ('$ISVALIDNUM(transUVal)){
		        if (transUVal="")!($EXTRACT(transUVal)="<")!($EXTRACT(transUVal)=">"){}
		        elseif ($Length($ZSTRIP(transUVal,"<>W"))=0){
		        	w " issue"
		        }
		        else{
		        }
	        }
	        if (convertCheck) w " converted"
	    // Transformed HiRange
	   		if ($L(THiRange)>0){
	   			 w "'><input type='text' autocomplete='off' onkeyup='dataChange(event)' value='"_$$FormatNumber^cMain(THiRange,2)_"'></td>",!
	   		} else {
	   			 w "'><input type='text' autocomplete='off' onkeyup='dataChange(event)' value='"_$$FormatNumber^cMain(transUVal,2)_"'></td>",!
	   		}
	       	if ($L(TUnit)>0){
	        	w "<td class='u-result-unit'>"_TUnit_"</td>",!
	       	} else {
	       		w "<td class='u-result-unit'>"_r9_"</td>",!
	       	}
	        w "</tr>",!
	        
	        s count = +count + 1
		}
	}
	/// END added by BoBo on Sep13
	else { 
	*/
	//start of else
	&sql(DECLARE C1 CURSOR FOR
		SELECT ResultBloodTest1->ReportDate,Tests_TestName,Tests_Result,Tests_SIUnit,Tests_LowRange,Tests_HighRange,ResultBloodTest1->ReportDate
		INTO :r1,:r2,:r3,:r4,:r5,:r6,:rDate
		FROM ResultBloodTest1_Tests 
		WHERE ResultBloodTest1=:rid
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	WHILE SQLCODE=0{
		w "<tr>",!
        w "<td class='date'>"
        if (r1=""){
	   		if (rDate'=""){
	   			w $REPLACE($ZDate(rDate),"/","-")
	   		}
   		}
   		else{
	   		w $REPLACE($ZDate(r1),"/","-")
   		}
        w "</td>",!
        w "<td class='test-name'>"_r2_"</td>",!
		    
	    //New form of Translation - 28th Sept,2023
	    
	    s bk=""
	    s translation=$$BiomarkerTranslation($$CheckIncomingTestName^cReviewResultsS1(r2,r4),bk)
	    s SIName=$p(translation,$c(1),1)
	    s r8=$p(translation,$c(1),2)
	    s r9=$p(translation,$c(1),3)
	        
		s transVal=r3
		s transLVal=r5
		s transUVal=r6
		s convertCheck=0
		//if (r4'=r9){
	    if ($zconvert(r4,"l")'=$zconvert(r9,"l"))&(r9'=""){
		    s convertCheck=1
		    s transVal=$$CheckAndConvertNum(SIName,r3,r4,r9)
		    s transLVal=$$CheckAndConvertNum(SIName,r5,r4,r9)
		    s transUVal=$$CheckAndConvertNum(SIName,r6,r4,r9)
		}
		
        if (r8=""){
        	w "<td class='transformed-name'><input type='text' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"
	        _r2_"' placeholder='Translation missing'></td>",!
        }
        else{
	       	w "<td class='transformed-name"
	       	s TName=$g(TName)
	       	if (TName'=r8) w " converted"
			w "'><input type='text' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r8_"'></td>",!
        }
        w "<td class='result'>"_r3_"</td>",! //result
        w "<td class='from-unit'>"_r4_"</td>",! //from unit
        w "<td class='convert-result-val"
        if ('$ISVALIDNUM($$FormatNumber^cMain(transVal,2))){
	        if ($EXTRACT(transVal)="<")!($EXTRACT(transVal)=">"){}
	        else{
		        w " issue"
	        }
        }
        if (convertCheck) w " converted"
        w "'>"
        if (r9=""){
	        s r9=r4
	        w "<img src='./assets/images/info.png' alt='Info' onclick='showInfo(event)'><p class='info-text'>Unit output not defined</p>"
        }
	    w "<input type='text' autocomplete='off' onkeyup='dataChange(event)' value='"_$$FormatNumber^cMain(transVal,2)_"'></td>",!
        w "<td class='convert-result-unit"
        if ($ISVALIDNUM(r9)){w " issue"}
        if (convertCheck) w " converted"
        w "'><div class='dropdown' onclick='openUnitSuggestions(event)' tabindex='-1'>"_r9_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>",!
        w "<td class='l-range'>"_r5_" "_r4_"</td>",!
        w "<td class='l-result-val"
        if ('$ISVALIDNUM(transLVal)){
	        if (transLVal="")!($EXTRACT(transLVal)="<")!($EXTRACT(transLVal)=">"){}
	        elseif ($Length($ZSTRIP(transLVal,"<>W"))=0){
	        	w " issue"
	        }
	        else{
	        }
        }
	    if (convertCheck) w " converted"
        w "'><input type='text' autocomplete='off' onkeyup='dataChange(event)' value='"_$$FormatNumber^cMain(transLVal,2)_"'></td>",!
        w "<td class='l-result-unit'>"_r9_"</td>",!
        w "<td class='u-range'>"_r6_" "_r4_"</td>",!
        w "<td class='u-result-val"
        if ('$ISVALIDNUM(transUVal)){
	        if (transUVal="")!($EXTRACT(transUVal)="<")!($EXTRACT(transUVal)=">"){}
	        elseif ($Length($ZSTRIP(transUVal,"<>W"))=0){
	        	w " issue"
	        }
	        else{
	        }
        }
        if (convertCheck) w " converted"
        w "'><input type='text' autocomplete='off' onkeyup='dataChange(event)' value='"_$$FormatNumber^cMain(transUVal,2)_"'></td>",!
        w "<td class='u-result-unit'>"_r9_"</td>",!
        w "</tr>",!
        &sql(FETCH C1)
	}
	&sql(CLOSE C1)
	//} // end of else 
	
    q
.
FileStatusChange
	#import MX
	d INIT1^CSP999
	;s rid=%session.Data("jxTransform","rid")
	s rid=$g(%session.Data("jxAltUploadRecord","ID"))
	if (d2="Failure"){
		&sql(UPDATE Record SET Note=:d1,Status=:d2,Reason=:d3,ReviewedDate=GETDATE() WHERE ID=:rid)
		
		// must add to error table based on the selection of reasion
		s errCode = "100"
		s errData = "test data"
		s errName = "test error from review"
		//The new errors are not populated yet, thus leads to '' in errCode,errData,errName
		&sql(SELECT Code,Description,Name INTO :errCode,:errData,:errName FROM ErrorCode WHERE FriendlyDescription=:d3)
		
		s dt = $zdatetime($h,3)
		&sql(SELECT BucketName,OrgFile INTO :bk,:fName FROM Record WHERE ID=:rid)
		s errData = $REPLACE(errData,"[yyyy-mm-dd hh:mm]",dt)
		s errData = $REPLACE(errData,"[filename]",fName)
		s errData = $REPLACE(errData,"[bucket]",bk)
		&sql(INSERT INTO MX.Error (Code, Data, Name, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :dt, :rid, :bk))
	}
	else{
		&sql(UPDATE Record SET Note=:d1,Status=:d2,Reason=:d3 WHERE ID=:rid)
	}
	
	q
	
ConvertResults
	#import MX
	d INIT1^CSP999
	&sql(SELECT SIName 
	INTO :r1
	FROM DiagnosticTest
	WHERE LOWER(Name)[LOWER(:d1)
	)
	s cVal = $$U2U^WSP999(r1,d2,d5,d6) ;$$CheckAndConvertNum(r1,d2,d5,d6)  ;changed on 2024-03-26 Martin
	s lVal = $$U2U^WSP999(r1,d3,d5,d6) ;$$CheckAndConvertNum(r1,d3,d5,d6) ;
	s uVal = $$U2U^WSP999(r1,d4,d5,d6) ;$$CheckAndConvertNum(r1,d4,d5,d6) ;
	&js<unitsCal.push("#($s(cVal="":"",1:$$FormatNumber^cMain(cVal,2)))#","#($s(lVal="":"",1:$$FormatNumber^cMain(lVal,2)))#","#($s(lVal="":"",1:$$FormatNumber^cMain(uVal,2)))#")>
	q
.
ConvertNewResults
	#import MX
	d INIT1^CSP999
	&sql(SELECT DiagnosticTest 
	INTO :r1
	FROM Template
	WHERE LOWER(Name)[LOWER(:d1)
	)
	
	s cVal = $$U2U^WSP999(r1,d2,d5,d6) ;$$CheckAndConvertNum(r1,d2,d5,d6)  ;changed on 2024-03-26 Martin
	s lVal = $$U2U^WSP999(r1,d3,d5,d6) ;$$CheckAndConvertNum(r1,d3,d5,d6) ;
	s uVal = $$U2U^WSP999(r1,d4,d5,d6) ;$$CheckAndConvertNum(r1,d4,d5,d6) ;
	&js<unitsCal.push("#($s(cVal="":"",1:$$FormatNumber^cMain(cVal,2)))#","#($s(lVal="":"",1:$$FormatNumber^cMain(lVal,2)))#","#($s(lVal="":"",1:$$FormatNumber^cMain(uVal,2)))#")>
	q	
.
CheckAndConvertNum(SIName,value,fromUnit,toUnit) ;not use
	n x1,x2,x3,x4,val
	s (x1,x2,x3,x4,val,prefix)=""
	; value is null ;added by Martin 11/3/2024
	i value="" q value 
	; same unit
	i $zconvert(fromUnit,"l")=$zconvert(toUnit,"l") d  q value
	. i value["<=" s prefix="<=",value=$replace(value,"<=","")
	. i value[">=" s prefix=">=",value=$replace(value,">=","")
	. i value["</=" s prefix="</=",value=$replace(value,"</=","")
	. i value[">/=" s prefix=">/=",value=$replace(value,">/=","")
	. i value["<" s prefix="<",value=$replace(value,"<","")
	. i value[">" s prefix=">",value=$replace(value,">","")
	. s value=prefix_$fn(value,,2)
	; branch for Lipoprotein A
	if $zconvert(SIName,"l")="lipoprotein a",value="" q value ;added by Martin 11/3/2024
	if $zconvert(SIName,"l")="lipoprotein a",$zconvert(fromUnit,"l")="g/l",$zconvert(toUnit,"l")="nmol/l" set value=$fn(((value*100)*2.5),,2) quit value
	if $zconvert(SIName,"l")="lipoprotein a",$zconvert(fromUnit,"l")="mg/dl",$zconvert(toUnit,"l")="nmol/l" set value=$fn((value*2.5),,2) quit value
	; branch for HbA1c
	if $zconvert(SIName,"l")="hba1c",$zconvert(fromUnit,"l")="mmol/mol",$zconvert(toUnit,"l")="%" set value=$fn(((value/10.929)+2.15),,2) q value
	n xUnit,xtoUnit
	s xUnit="",xtoUnit=""
	i $zconvert(fromUnit,"l")=$zconvert(toUnit,"l") q value
	&sql(SELECT SIName INTO :xUnit FROM SIUnit WHERE SIName=:fromUnit)
	s xtoUnit=$$GetJXUnit^WSP999(toUnit)
	i xtoUnit="" s xtoUnit=$$GetSIUnit^WSP999(toUnit)
	;b:$g(DW)=1
	i xtoUnit'="" s toUnit=xtoUnit
	i xUnit=""	&sql(SELECT SIName INTO :xUnit FROM SIUnit WHERE Name=:fromUnit)
	i xUnit="" s xUnit=$$GetJXUnit^WSP999(fromUnit)
	i xUnit'="" s fromUnit=xUnit
	if ($ISVALIDNUM(value)){
		i $$U2U^WSP999(SIName,value,fromUnit,toUnit)'="ERROR CONVERTING" q $$U2U^WSP999(SIName,value,fromUnit,toUnit)
		; try getting a different test name
		&sql(SELECT TOP 1 DiagnosticTest INTO :SIName FROM SIUnitConversion WHERE ToUnit=:toUnit AND fromUnit=:fromUnit)	
		q $$U2U^WSP999(SIName,value,fromUnit,toUnit)
	}
	if (value=""){
		q ""
	}
	if ($EXTRACT(value)="<")!($EXTRACT(value)=">"){
		s fChar = $EXTRACT(value)
		q fChar_$$U2U^WSP999(SIName,$P(value,fChar,2),fromUnit,toUnit)
	}
	q value
	
WriteReasons
	#import MX
	d INIT1^CSP999
	&sql(DECLARE C3 CURSOR FOR
		SELECT FriendlyDescription 
		INTO :r1
		FROM ErrorCode
		WHERE IsReason=1
	)
	&sql(OPEN C3)
	&sql(FETCH C3)
	WHILE SQLCODE=0{
		w "<li onclick='selectReason(event)'>"_r1_"</li>"
		&sql(FETCH C3)
	}
	&sql(CLOSE C3)
	q
	
LoadTemplateNames
	#import MX
	d INIT1^CSP999
	&sql(SELECT Setting INTO :setting FROM "User" WHERE ID=:UserID)
	s testNames = ""
	&sql(DECLARE C4 CURSOR FOR
	SELECT DISTINCT %EXACT(name)
	INTO :r1 
	FROM Template
	WHERE LOWER(name)[LOWER(:d1)
	AND Setting=:setting
	ORDER BY name
	)
	&sql(OPEN C4)
	&sql(FETCH C4)
	if SQLCODE=100 s testNames = "<li class='no-result'>No result found</li>"
	WHILE SQLCODE=0{
		s testNames=testNames_"<li onclick='changeTestName(event)' tabIndex='-1'>"_r1_"</li>\n"
		&sql(FETCH C4)
	}
	&sql(CLOSE C4)
	&js<document.querySelector(".testname-dropdown").firstElementChild.innerHTML = "#(testNames)#">
	q
LoadJXNames(d1)
	#import MX
	s UserID=$g(%session.Data("UserID"))
	&sql(SELECT Setting INTO :setting FROM "User" WHERE ID=:UserID)
	n tempName,tempUnit,IsMatch,ro,r1,r1a
	s testName = ""
	s cTestName=$$GetSIName^WSP999(d1)
	; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
	;if cTestName["#",r2="%" s cTestName=$p(cTestName," ",1)
	s r1a=""
	i cTestName="" {
	 	s IsMatch=0,r1a=d1
		WHILE IsMatch=0&($l(r1a)'=0){
			s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
			i r0'="" s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
		i r1a'="" d
		.&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:r1a AND Setting=:setting)
		.s testName=tempName &js<newTestname="#(testName)#">
		;w "<td class='transformed-name issue' style='color:"_c2_"' title='No matching JX Name- Picking closest match'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1a
		e  s tempUnit="" s testName=d1 &js<newTestname="#(testName)#"> ;s testName="No Result" ;w "<td class='transformed-name issue' style='color:"_c2_"; background-color: #e6f796' title='No matching  Template1- Using original'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>"
		
	}
	i cTestName'="" {
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:cTestName AND Setting=:setting)
		i tempName'="" d
		.i $zconvert(tempName,"l")=$zconvert(d1,"l") s testName=tempName &js< newTestname="#(testName)#"> ;w "<td class='transformed-name converted' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1	
		.e  s d1=cTestName s testName=tempName &js< newTestname="#(testName)#"> ;w "<td class='transformed-name converted' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>"
		e  s testName=d1 &js< newTestname="#(testName)#"> ;s testName="No Result" ;w "<td class='transformed-name issue' style='color:"_c2_"; background-color: #e6f796' title='No matching Template- Using original'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>"
		}
	q testName
	
LoadUnitsBasedOnName
	s units=""
	;s rid=$g(%session.Data("jxTransform","rid"))
	s rid=$g(%session.Data("jxAltUploadRecord","ID"))
	&sql(SELECT BucketName
	INTO :bk
	FROM Record
	WHERE id=:rid)
	s bk="jondaffr2"
	&sql(SELECT UnitName 
	INTO :r1
	FROM Template
	WHERE LOWER(Name)[LOWER(:d1)
	AND BucketName=:bk
	)
	if (SQLCODE=0){
		s units="<li onclick='changeUnit(event)' tabindex='-1'>"_r1_"</li>\n"
	}
	if (r1'=d2){
		;s units="<li onclick='changeUnit(event)' tabindex='-1'>"_r1_"</li>\n"
		s units = units_"<li onclick='changeUnit(event)' tabindex='-1'>"_d2_"</li>\n"
	}
	&js<document.querySelector(".unit-dropdown").firstElementChild.innerHTML = "#(units)#">
	
	q
unitCleanUp
	n x,x1,d1x,x2
	s d1x=d1
	;s rid=$g(%session.Data("jxTransform","rid"))
	s rid=$g(%session.Data("jxAltUploadRecord","ID"))
	s d1=$replace(d1," / ","/")
	s d1=$replace(d1,"|","l")
	s d1=$replace(d1," ","")
	s d1=$replace(d1,".","")
    i $e(d1,$l(d1))="_" s d1=d1_"l"  ;for "g_"
    i $e(d1,$l(d1)-1,$l(d1))="/1" s d1=$replace(d1,"/1","/l")
	s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:d1 OR SIName=:d1)
	i x="",(d1["lU")!(d1["Ul") s d1=$replace(d1,"l","I")
	i x="",d1'="" s d1=d1_"/l"	; because of g. ; commented by DW 2024-03-14 ;uncommented by Martin 2024-03-20
	s x1="" &sql(SELECT ID INTO :x1 FROM SIUnit WHERE Name=:d1 OR SIName=:d1) 
	i x1="",d1'="" s d1=$replace(d1,"/l","")
	i x'="" &sql(SELECT SIName INTO :x2 FROM SIUnit WHERE ID=:x) s d1=x2
	i x1'="" &sql(SELECT SIName INTO :x2 FROM SIUnit WHERE ID=:x1) s d1=x2
	if d1'=d1x &js<newFromUnit1= "#(d1)#">
	e  &js<newFromUnit1= "#(d1x)#">
	q
	
BiomarkerTranslation(name,bk)
	s tempName=""
	s tempUnit=""
	s siName=""
	s name=$ZCONVERT(name,"l")
	//Rules for Matching Diagnostic Names:
	//1. Check for equals to SIName
	&sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(SIName)=:name)
	
	//2. Check for equals to Name
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(Name)=:name)
	
	//name inside brackets
	s name1=$p($p(name,"(",2),")",1)
	
	//5. Check for %STARTSWITH SIName
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(SIName) %STARTSWITH :name)
	
	//6. Check for %STARTSWITH Name
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(Name) %STARTSWITH :name)
	
	//striping brackets,"-",#,trimming
	s name2=$ZSTRIP($REPLACE($REPLACE($REPLACE($REPLACE(name,"(",""),")",""),"-"," "),"#",""),"<>W")
	
	//7. Check for SIName = strip brackets and "-" and #
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(TRIM(REPLACE(REPLACE(REPLACE(REPLACE(SIName,'(',''),')',''),'-',' '),'#',''))) = :name2)
	
	//8. Check for Name = strip brackets and "-" and #
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(TRIM(REPLACE(REPLACE(REPLACE(REPLACE(Name,'(',''),')',''),'-',' '),'#',''))) = :name2)
	
	//3. Check for equals to (SIName = anything in bracket)
	//Potential failure for some words like 'PCV' which translates to Packed Cell Volume
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(SIName)=:name1)
	
	//4. Check for equals to (Name = anything in bracket)
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(Name)=:name1)
	
	//9. Check for SIName %CONTAINS x
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(SIName)[:name)
	
	//10. Check for Name %CONTAINS x
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(Name)[:name)
	
	/*//11. Check for x %CONTAINS SIName
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE :name[LOWER(SIName) HAVING LENGTH(SIName)>4)
	
	//12. Check for x %CONTAINS Name
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE :name[LOWER(Name) HAVING LENGTH(Name)>4)*/
	
	i siName'="" &sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:siName AND BucketName=:bk)
	q siName_$c(1)_tempName_$c(1)_tempUnit
	
ClearTransformedData(userId,rid)
	//d ClearTransformedData^cReviewResultsS2(6,645)
	s count = 1
	while ($d(^FormData(userId, rid, count)) = 10){
		s ^FormData(userId, rid, count, "TName") = ""
		s ^FormData(userId, rid, count, "TValue") = ""
		s ^FormData(userId, rid, count, "TUnit") = ""
		s ^FormData(userId, rid, count, "THiRange") = ""
		s ^FormData(userId, rid, count, "TLoRange") = ""
	    s count = +count + 1
	}
	q
.
PopOriginal
	
	#import MX
	d INIT1^CSP999
	n extIndex
	;s rid=%session.Data("jxTransform","rid")
	s rid=%session.Data("jxAltUploadRecord","ID")
	s r1="",r2=""
	&sql(SELECT OrgName,TmpName INTO :r1,:r2 FROM ResultBloodTest1 WHERE ID=:rid)
	s extIndex=$LENGTH(r1)+3-$FIND($REVERSE(r1),$REVERSE("."))
	s fileExt=$e(r1,extIndex,$l(r1))
	s temp=r2_"."_fileExt
	s ffile="c:\intersystems\cache\csp\review\"_rid_"\"_temp
	s file="../Review/"_rid_"/"_temp
	s fileExt=$zconvert(fileExt,"l")
	
	;i r2="heic"!(r2="webp")!(r2="avif")!(r2="jpg")!(r2="jpeg") d	
	i fileExt="heic"!(fileExt="webp")!(fileExt="avif") d
	. s cmd="mogrify -resize 50% -format png "_ffile
	. s x=$zf(-1,cmd_" && exit")
	. s fileExt="PNG"
	. s file="../Review/"_rid_"/"_r2_"."_fileExt
	
	//html result
	i fileExt="html" d
	. s file="../Review/"_rid_"/"_r2_"."_fileExt
	
	s %session.Data("jxAltPreview","File")="Review/"_rid
	&js<window.open("#(file)#","_blank")>
	
	;d ##class(%File).Delete(^INST("CSPDir")_"\"_^INST("NS")_"\"_file)
	q	
removeReviewFile
	#import MX
	s rid=%session.Data("jxAltUploadRecord","ID")
	s dir="c:\intersystems\cache\csp\review\"_rid_"\"	
	s dir1="C:\InterSystems\Cache\CSP\jondax\groot\"_rid_"\"
	s status= ##class(%File).RemoveDirectoryTree(dir)
	s status1= ##class(%File).RemoveDirectoryTree(dir1)
	q
ClearRBT(rid)
	#import MX
	&sql(SELECT ID INTO :rbt from MX.ResultBloodTest1 WHERE ID=:rid)
	if ($L(rbt)=0){q}
	&sql(DELETE FROM MX.ResultBloodTest1_Tests WHERE ResultBloodTest1=:rbt)
	q	
UpdateRBT(rid, testName, testValue, testUnit, testHiRange, testLoRange, testDate)
	#import MX
	
	&sql(SELECT ID INTO :rbt FROM ResultBloodTest1 WHERE ID=:rid)
	if ($L(rbt)=0){q}
	&sql(SELECT COUNT(ID) INTO :objCount FROM ResultBloodTest1_Tests WHERE ResultBloodTest1=:rbt)
	s objxcount = +objCount
	s objxcount=objxcount+1
	s objx=##class(MX.ResultBloodTest1).%OpenId(rbt)
	s objx1=##class(MX.ResultBloodTestValue).%New()
	s objx1.TestName= testName
	s objx1.Result=testValue
	s objx1.SIUnit=testUnit
	s objx1.LowRange=testLoRange
	s objx1.HighRange=testHiRange
	if testDate'="" d
	.s dft=$$checkDate^utilAWS(testDate)
	.i dft'=0 s reportDate=$ZDATEH(testDate,dft)
	.e  s reportDate=""
	e  s reportDate=""
	s objx1.TestDate = reportDate
	/*
	if ($L(testDate)>0){
		s testDate = $replace(testDate, "-","/")
		s testDateInternal = $zdateh(testDate, 4)
		//s objx1.TestDate = $zdate(testDateInternal, 1)
		//s objx1.TestDate = $zdateh(testDate,6,,,,,,,-1)
		s objx1.TestDate = $zdateh(testDate, 4)
		
		//database wants mm/dd/yyyy
	}
	*/
	
	d objx.Tests.SetAt(objx1,objxcount)
.
	s sts = objx.%Save()
.
	q	

jxAltConvertResultTable2^MAC^^67134,46837.9552632^0
jxAltConvertResultTable2
InitMe
	#import MX
	d INIT^WSP999
	s downloadFileType = $g(%session.Data("jxFormat"))
	&js<document.getElementById("file-type").innerHTML = "#(downloadFileType)#">
	i $d(^DoNotShow("ConvertResultTable",UserID)) &js<DoNotShow=1>
.
InitMe2 ;test
	
	if %session.Data("UserID")=16 w "<link rel='stylesheet' href='assets/styles/jxConvertResultTableB2B.css'><link rel='stylesheet' href='assets/styles/jxReviewResultsS2.css'>"
	else  w "<link rel='stylesheet' href='assets/styles/jxConvertResultTableB2B.css'>"
	q
.
WriteTable1
	#import MX
	d INIT^WSP999
	s Q=$c(9)	; tab
	i $g(%session.Data("jxAltConvertResultTable","Template"))="" s %session.Data("jxAltConvertResultTable","Template")="JondaX"
	s template=%session.Data("jxAltConvertResultTable","Template")
	s UserID=$g(%session.Data("UserID"))
	s fname=$g(%session.Data("jxAltUploadRecord"))
	;s fname="depii.jpg"
	s fext="."_$g(%session.Data("jxAltUploadRecord","fext"))
	;s fext="jpg"
	s tmp=^jxAltUpload(fname)
	s %dev1="c:\intersystems\cache\jondax\Groot\ad-hoc\"_tmp_".csv"
	s fname=$replace(fname,fext,"")
	s %dev="c:\intersystems\cache\csp\jondax\elfieDemo\"_fname_".csv"
	o %dev:"wns"
	s c1="#405470"	; blue
	s c2="#e63876"	; pink
	s c3="#048f2a"	; green
	s row=""
	s trow=1
	n d0,tempName,tempUnit
	s d0=1,tempName="",tempUnit=""
	k ^martin
	;s ^martin("NM")=0
WriteTable1a
	
	s row=$o(^AICLAUDE("alt"_UserID,row)) g:row="" WriteTable1End
	s r0=$g(^AICLAUDE("alt"_UserID,row,"date"))
	s r1=$g(^AICLAUDE("alt"_UserID,row,"name"))
	s r2=$g(^AICLAUDE("alt"_UserID,row,"unit"))
	s r3=$g(^AICLAUDE("alt"_UserID,row,"value"))
	s r4=$g(^AICLAUDE("alt"_UserID,row,"loRange"))
	s r5=$g(^AICLAUDE("alt"_UserID,row,"hiRange"))
	s r2x=r2
	s trowCount=$g(^Textract(%dev1,"rowCount"))
	s dCount=2*trowCount
	; test ^AICLAUDE vs ^AICLAUDE for duplicate rows
	if row>1 
	{	n pRow s pRow= row-1
		s r1p=$g(^AICLAUDE("alt"_UserID,pRow,"name"))
		if (r1=r1p),($g(^AICLAUDE("alt"_UserID,"rowCount"))'=dCount) d
		.s ^martin("dup",row)=$g(^AICLAUDE("alt"_UserID,"rowCount"))_"//"_dCount_"//"_r1_"//"_r1p
		.s trow=trow+1  g WriteTable1a
		if ^AICLAUDE("alt"_UserID,row,"row"_row)= ^AICLAUDE("alt"_UserID,pRow,"row"_pRow) d ;g WriteTable1a ;d
		.s ^AICLAUDE("alt"_UserID,"rowCount")=$g(^AICLAUDE("alt"_UserID,"rowCount"))-1 
		.s ^martin("Remove")=row_", "_pRow
		.g WriteTable1a
		
	} 
	g:r1="" WriteTable1a
.
	; clean up units
		s r2=$replace(r2,"|","l")
		s r2=$replace(r2," ","")
		s r3=$replace(r3,",",".")
		i $e(r2,$l(r2)-1,$l(r2))="/1" s r2=$replace(r2,"/1","/l")
		i $e(r2,$l(r2))="_" s r2=r2_"l"
		s r2=$replace(r2," / ","/") 
		s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:r2 OR SIName=:r2)
		i x="",(r2["lU")!(r2["Ul") s r2=$replace(r2,"l","I")
		i x="",r2'="" s r2=r2_"/l"	; because of g. ; commented by DW 2024-03-14 ;uncommented by Martin 2024-03-20
		s x1="" &sql(SELECT ID INTO :x1 FROM SIUnit WHERE Name=:r2 OR SIName=:r2) 
		i x1="",r2'="" s r2=$replace(r2,"/l","")
	; end clean up
	; missing units- check textract
	;for unit is misplaced in value eg."0.10 10e9-l" or "H 3.60 mmol/L" by Martin 2024-04-08
	;s ^martin(row,"1")=r3_", "_r2
	i r3[" " { 
		for i = 1:1:$length(r3, " ") 
		{   if $number($piece(r3, " ", i))  d
	    	.if r2="" s r2=$piece(r3, " ", i+1)
	    	.s r3= $piece(r3, " ", i)  
			}
	}
	;s ^martin(row,"2")=r3_", "_r2
	; clean up value and range
		s r3=$replace(r3,",",".")
		s r3=$replace(r3,"*","")
		s r3=$replace(r3," ","")
		s r4=$replace(r4,",",".")
		s r4=$replace(r4," ","")
		i $p(r4,"-",1)'="",$p(r4,"-",2)'="" d	; cater for 1-3
		. s r5=$p(r4,"-",2),r4=$p(r4,"-",1)
		s r5=$replace(r5,",",".")
		s r5=$replace(r5," ","")
		i $p(r5,"-",1)'="",$p(r5,"-",2)'="" d	; cater for 1-3
		. s r4=$p(r5,"-",1),r5=$p(r5,"-",2)
	; end clean up
	;cater for "<", ">" signs column placement
	if (r4["<"),(r5="") s r5=r4 s r4=""
	if (r4=""),(r5[">") s r4=r5 s r5=""
	
	; Compare ^AICLAUDE vs ^Textract
	i trow<=trowCount
	{
		s t1=$p(^Textract(%dev1,trow,"BB"),",",1) ; get testname from ^Textract
		if $e(t1,$l(t1))=" " s t1=$e(t1,1,$l(t1)-1) ;remove trailing space from testname
		;Check r1,r2,r3,r4,r5 all contain in ^Textract(%dev,row,"BB")
		if r1[t1, ^Textract(%dev1,trow,"BB")[r2, ^Textract(%dev1,trow,"BB")[r3, ^Textract(%dev1,trow,"BB")[r4, ^Textract(%dev1,trow,"BB")[r5 
		{	;s ^martin("match",row,trow)=r1_","_r2x_","_r3_" are match with "_^Textract(%dev1,trow,"BB") s ^martin("NM",trow)=0
			s match=1
			s trow=trow+1 }
		else
		{ 	
			if ($g(^AICLAUDE("alt"_UserID,"rowCount"))=dCount)
			{	//for 2 sets of result
				i r2="" s r2=$g(^AICLAUDE("alt"_UserID,row-1,"unit"))
				i r4="" s r4=$g(^AICLAUDE("alt"_UserID,row-1,"loRange"))
				i r5="" s r5=$g(^AICLAUDE("alt"_UserID,row-1,"hiRange"))
				s r2x=r2
				s match=0
				;s ^martin(row,r2,r4,r5)=$g(^AICLAUDE("alt"_UserID,row-1,"unit"))_" , "_$g(^AICLAUDE("alt"_UserID,row-1,"loRange"))_" , "_$g(^AICLAUDE("alt"_UserID,row-1,"hiRange"))
			    ;s ^martin("NM",trow)=1 s ^martin("not match1",row,trow)=r1_","_r2_","_r3_","_r4_","_r5_" is not match with "_^Textract(%dev1,trow,"BB")
				}
			elseif r1[t1 { s match=0 s trow=trow+1} ;s ^martin("NM")=1   s ^martin("NM",trow)=1 s ^martin("not match2",row,trow)=r1_","_r2_","_r3_","_r4_","_r5_" is not match with "_^Textract(%dev1,trow,"BB") 	
			elseif  trow<trowCount{
				s trow1=trow+1
				s t2=$p(^Textract(%dev1,trow1,"BB"),",",1) ;get next testname from ^Textract
				;s ^martin("tname2",trow1,trow)=t2_r1 ; 
				if $e(t2,$l(t2))=" " s t2=$e(t2,1,$l(t2)-1) ;remove trailing space from testname 
				if r1'=t2 s trow=trow+1 s match=1 ;g WriteTable1a 
				e  d 
				.;s ^martin("row Test",trow)=r1_" , "_t2
				.s match=0 ;s ^martin("NM")=1   s ^martin("NM",trow)=1 s ^martin("not match3",row,trow)=r1_","_r2_","_r3_","_r4_","_r5_" is not match with "_^Textract(%dev1,trow,"BB")
				.s trow=trow1
			
			}else{ s match=0}
		}
	}else { s match=0}
	
	if match=0 w "<tr class='' style='background-color: #F7D896;'>" 
	if match=1 w "<tr class=''>" 
	;END
	/*
	s rid= %session.Data("jxAltUploadRecord","ID")
	s ^OrgTestName(rid,row,"testDate")=r0
	s ^OrgTestName(rid,row,"testName")=r1
	s ^OrgTestName(rid,row,"testValue")=r3
	s ^OrgTestName(rid,row,"testUnit")=r2
	s ^OrgTestName(rid,row,"testHiRange")=r5
	s ^OrgTestName(rid,row,"testLoRange")=r4 */
	;&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	;if $d(%session.Data("jxAltUpload","IND")),$g(%session.Data("jxAltUpload","IND"))=1 s bk="IND"
	s bk="jondaffr2"
	
	w "<td class='actions'><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)' > <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)' >  <img class='add-row-icon' src='./assets/images/row.png' alt='add row' onclick='addNewRow(event)' ></td>"
	w "<td class='date' style='color:"_c1_"'>"_r0_"</td>"
	w "<td class='test-name'>"_r1_"</td>"
	s x=$$GetSIName^WSP999(r1)
	; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
	if x["#",r2="%" s x=$p(x," ",1)
	/*&sql(select ID INTO x2 from template where DiagnosticTest[:x_" #")
	if x2'="",r2'="%" s x=x_" #" */
	s r1a=""
	i x="" {
	 	s IsMatch=0,r1a=r1
		WHILE IsMatch=0&($l(r1a)'=0){
			s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
			i r0'="" s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
		
		i r1a'="" d
		.&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:r1a AND BucketName=:bk)
		.i tempName'="" w "<td class='transformed-name issue' style='color:"_c2_"' title='No matching JX Name- Picking closest match'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1a
		.e  w "<td class='transformed-name issue' style='color:"_c2_"' title='No matching JX Name & Template -Using Original'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>" ;r1a
		e  s tempUnit="" w "<td class='transformed-name issue' style='color:"_c2_";' title='No matching  Template1- Using original'><input type='text' style='color:"_c1_"; background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>"
		
	}
	i x'="" {
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:x AND BucketName=:bk)
		i tempName'="" d
		.i tempName["(percent)",r2'="%" d
		..s x=x_" #" ;s tempName=$replace(tempName,"(percent)","(Abs)") 
		..&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:x AND BucketName=:bk)
		.i $zconvert(tempName,"l")=$zconvert(r1,"l") w "<td class='transformed-name converted' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1	
		.e  s r1=x w "<td class='transformed-name converted' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>"
		e  w "<td class='transformed-name issue' style='color:"_c2_"; ' title='No matching Template- Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>"
		}
	w "<td class='result'>"_r3_"</td>"
	w "<td class='from-unit'>"_r2_"</td>"
	if tempUnit'="" {
	s x=$$GetJXUnit^WSP999(r2)
	s r2a=tempUnit
	i x'="" s r2=x 
 
	; more clean up
		i r2="%" d
		. i $l($p(r3,".",1))>3 s r3=$replace(r3,".",""),r3=$e(r3,1,2)_"."_$e(r3,3,999)
		. i $l($p(r4,".",1))>3 s r4=$replace(r4,".",""),r4=$e(r4,1,2)_"."_$e(r4,3,999)
		. i $l($p(r5,".",1))>3 s r5=$replace(r5,".",""),r5=$e(r5,1,2)_"."_$e(r5,3,999)
		; test if original unit can be converted
		s x="",x=$$U2U^WSP999(r1,r3,r2,r2a)
		;s ^martin("t",row,r1)=r3_","_r2_" ; "_r2a_","_x
		i x["ERROR" s r2a=tempUnit 
	; end more
	d
	. s r3x=r3,r4x=r4,r5x=r5
	. s r3=$$U2U^WSP999(r1,r3,r2,r2a)
	. s r4=$$U2U^WSP999(r1,r4,r2,r2a)
	. s r5=$$U2U^WSP999(r1,r5,r2,r2a)
	;s ^martin(row,"t2")=r1_r5_r2_r2a
	}else  {s x="ERROR Converting" s r2a=r2,r3x=r3,r4x=r4,r5x=r5  }
	s recalc=0
	i tempUnit="" ,x["ERROR" d
	.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching Template Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
	i tempUnit'="" ,x["ERROR" d
	.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching JX Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
	i x'["ERROR" d
	. i (r2a="")!($zconvert(r2a,"l")=$zconvert(r2,"l")) w "<td class='convert-result-unit' style='color:"_c1_"'><div class='dropdown' style='color:"_c1_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>"
	. e  s recalc=1 s r2=r2a w "<td class='convert-result-unit' style='color:"_c3_"'><div class='dropdown' style='color:"_c3_"' onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td></td>" 
.
	i recalc d
	. i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"   ;_ave_"// " s ave=$$AveRes^WSP999(r1,r3,r2,"")
	. i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
	. w "<td class='l-range'>"_r4x_" "_r2x_"</td>",!
	. i r4'["ERROR" w "<td  class='l-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
	. i r4["ERROR" w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
	. w "<td class='l-result-unit'>"_r2a_"</td>",!
	. w "<td class='u-range'>"_r5x_" "_r2x_"</td>",!
	. i r5'["ERROR" w "<td class='u-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"
	. i r5["ERROR" w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"
	. w "<td class='u-result-unit'>"_r2a_"</td>",!
	. ;w "<td style='color:"_c3_"'>"_$s(r4'="":r4,1:"")_"</td>"
	. ;w "<td style='color:"_c3_"'>"_$s(r5'="":r5,1:"")_"</td>"
	e  d
	. i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$fn($s(r3'="":r3,1:""),,2)_"'></td>"
	. i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
	. w "<td class='l-range'>"_r4x_" "_r2x_"</td>",!
	. i r4'["ERROR" w "<td class='l-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
	. i r4["ERROR" w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
	. w "<td class='l-result-unit'>"_r2a_"</td>",!
	. w "<td class='u-range'>"_r5x_" "_r2x_"</td>",!
	. i r5'["ERROR" w "<td class='u-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"  //"_$s(r5'="":r5,1:"")
	. i r5["ERROR" w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"  //$s(r5'="":r5,1:"")
	. w "<td class='u-result-unit'>"_r2a_"</td>",!
	. ;w "<td style='color:"_c1_"'>"_$s(r4'="":r4,1:"")_"</td>"
	. ;w "<td style='color:"_c1_"'>"_$s(r5'="":r5,1:"")_"</td>"
	//w "<td class='actions'><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)' > <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)' ></td>"
	w "</tr>",!
	;i r3'="" s r3=$fn(r3,,2) 
	;i r4'="" s r4=$fn(r4,,2) 
	;i r5'="" s r5=$fn(r5,,2) 
	u %dev w r0_Q_r1_Q_r2_Q_r3_Q_r4_Q_r5,! u 0
	d SaveResult
	g WriteTable1a	
WriteTable1End
	c %dev
	u 0
	q
SIUnit(index)
	#import MX
	d INIT^WSP999
	k arrSIUnit
	s SIName=$g(%session.Data("jxTransform",index,"SIName"))
	&sql(DECLARE C1 CURSOR FOR
		SELECT ToUnit
		INTO :d1
		FROM SIUnitConversion  
		WHERE DiagnosticTest=:SIName AND IsNull(ToUnit,'')<>''
		ORDER BY 1
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	if SQLCODE'=0{
		; check if not SIName
		&sql(DECLARE C1A CURSOR FOR
			SELECT Name 
			INTO :d1a
			FROM DiagnosticTest
			WHERE SIName=:SIName
		)
		&sql(OPEN C1A)
		&sql(FETCH C1A)
		WHILE SQLCODE=0{
			&sql(DECLARE C1B CURSOR FOR
				SELECT ToUnit
				INTO :d1b
				FROM SIUnitConversion  
				WHERE DiagnosticTest=:d1a AND IsNull(ToUnit,'')<>''
				ORDER BY 1
			)
			&sql(OPEN C1B)
			&sql(FETCH C1B)
			WHILE SQLCODE=0{
		   		i '$d(arrSIUnit(d1b)) write "<li onclick='jChangeUnit(event)'>",d1b,"</li>"
		   		s arrSIUnit(d1b)=""
		    	&sql(FETCH C1B)
			}
			&sql(CLOSE C1B)
			&sql(FETCH C1A)
		}
		&sql(CLOSE C1A)
		; end check
		i '$d(arrSIUnit) write "<li class='no-result'>No Units</li>"
		q
	}
	WHILE SQLCODE=0{
   		i '$d(arrSIUnit(d1)) write "<li onclick='jChangeUnit(event)'>",d1,"</li>"
		s arrSIUnit(d1)=""
    	&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	q
LOINCName(index)
	#import MX
	d INIT^WSP999
	s SIName=$g(%session.Data("jxTransform",index,"SIName"))
	s nomenclature=%session.Data("jxNomenclature")
	s resultCount=0
	if (nomenclature="LOINC"){
		&sql(DECLARE C4 CURSOR FOR
			SELECT Name 
			INTO :d4
			FROM DiagnosticTest 
			WHERE SIName=:SIName
		)
		&sql(DECLARE C2 CURSOR FOR
			SELECT LOINCNUM,COMPONENT,LONGCOMMONNAME
			INTO :d1,:d2,:d3
			FROM LOINC 
			WHERE LOWER(COMPONENT)[LOWER(:d4)
			AND CLASSTYPE=1
			AND (ORDEROBS='Both' OR (ORDEROBS='Observation'))
			AND SCALETYP='Qn'
			AND ((SYSTEM='RBC') OR (SYSTEM['Ser') OR (SYSTEM['Bld') AND (SYSTEM NOT['Urine'))
			ORDER BY 1
		)
		;			WHERE COMPONENT[(SELECT Name FROM DiagnosticTest WHERE SIName=:SIName)
		&sql(OPEN C4)
		&sql(FETCH C4)
		WHILE SQLCODE=0{
			&sql(OPEN C2)
			&sql(FETCH C2)
			WHILE SQLCODE=0{
				write "<li onclick='jChangeName(event)' title='"_$$C2H^WSP999(d3)_"'>",d1," ",d2,"</li>"
    			s resultCount=resultCount+1
    			&sql(FETCH C2)
			}
			&sql(CLOSE C2)
			&sql(FETCH C4)
		}
		&sql(CLOSE C4)
		s d4=SIName
		&sql(OPEN C2)
		&sql(FETCH C2)
		WHILE SQLCODE=0{
			write "<li onclick='jChangeName(event)' title='"_$$C2H^WSP999(d3)_"'>",d1," ",d2,"</li>"
    		s resultCount=resultCount+1
    		&sql(FETCH C2)
		}
		&sql(CLOSE C2)
		if (resultCount=0){
			write "<li class='no-result'>No Result Found</li>"
		}
	}
	elseif (nomenclature="SNOMED"){
		write "<li class='no-result'>No Result Found</li>"
	}
	else{
		&sql(OPEN C4)
		&sql(FETCH C4)
		if SQLCODE'=0{
			write "<li class='no-result'>No Result Found</li>"
		}
		WHILE SQLCODE=0{
			write "<li onclick='jChangeName(event)'>",d4,"</li>"
    		&sql(FETCH C4)
		}
		&sql(CLOSE C4)
	}
	q
ChangeUnit
	#import MX
	d INIT^WSP999
	s fromUnit = $REPLACE($g(%session.Data("jxTransform",d2,"ResultValueUnits")),"*","^")
	s range = $g(%session.Data("jxTransform",d2,"ResultNormalRange"))
	s value = $g(%session.Data("jxTransform",d2,"ResultValue"))
	s SIName = $g(%session.Data("jxTransform",d2,"SIName"))
	s cValue=$$U2U^WSP999(SIName,value,fromUnit,d1)
	s cRangeV1=$$U2U^WSP999(SIName,$p(range,"-",1),fromUnit,d1)
	s cRangeV2=$$U2U^WSP999(SIName,$p(range,"-",2),fromUnit,d1)
	s %session.Data("jxTransform",d2,"ResultValueUnits") = d1
	s %session.Data("jxTransform",d2,"ResultValue") = cValue
	s %session.Data("jxTransform",d2,"ResultNormalRange") = cRangeV1_"-"_cRangeV2
	d ModifySDA^jxDataTransform
	&js<
	let tr = document.querySelector('[data-key="' + #(d2)# + '"]')
	tr.querySelector('.units .text').innerText = "#(d1)#";
	tr.querySelector('.units .text').style.fontWeight = 600;
	tr.querySelector('.value').innerText = "#($$FormatNumber(cValue))#";
	tr.querySelector('.value').style.fontWeight = 600;
	tr.querySelector('.range').innerText = "#($$FormatNumber(cRangeV1))#"+"-"+"#($$FormatNumber(cRangeV2))#"
	tr.querySelector('.range').style.fontWeight = 600;
	>
	q
	
ChangeName
	#import MX
	d INIT^WSP999
	s nomenclature=%session.Data("jxNomenclature")
	if (nomenclature="LOINC"){
		s %session.Data("jxTransform",d2,"Code") = $p(d1," ",1)
		s %session.Data("jxTransform",d2,"Description") = $p(d1,%session.Data("jxTransform",d2,"Code"),2)
	}
	elseif (nomenclature="Custom"){
		s %session.Data("jxTransform",d2,"Code") = d1
		s %session.Data("jxTransform",d2,"Description") = d1
	}
	d ModifySDA^jxDataTransform
	&js<
	let tr = document.querySelector('[data-key="' + #(d2)# + '"]')
	tr.querySelector('.name .text').innerText = "#(d1)#";
	tr.querySelector('.name .text').style.fontWeight = 600;
	>
	q
.
GetDifferentUnits
	#import MX
	d INIT^WSP999
	&sql(
		DECLARE C3 CURSOR FOR
		SELECT T1.SIUnit, T2.FromUnit, T1.SIName
		INTO :d1,:d2,:d3 
		FROM DiagnosticTest T1 
		INNER JOIN SIUnitConversion T2 
		ON T1.SIName = T2.DiagnosticTest
		WHERE T1.SIUnit != T2.FromUnit 
		GROUP BY(T1.SIName)
	)
	&sql(OPEN C3)
	&sql(FETCH C3)
	WHILE SQLCODE=0{
		w "SI Unit: "_d1_" | From Unit: "_d2_" | SI Name: "_d3,!
		&sql(FETCH C3)
	}
	&sql(CLOSE C3)
	q
.
FormatNumber(num)
	#import MX
	d INIT^WSP999
	if (num<1){
		if ($NUMBER(num)=0){
			s num = 0
		}
		else{
			s num = "0"_$NUMBER(num,2)
		}
	}
	else{
		s num = $NUMBER(num,2)
	}
	q num
	
ConvertResults
	s fext="."_%session.Data("jxAltUploadRecord","fext")
	s x=$replace(%session.Data("jxAltUploadRecord"),fext,"")
	s orgFileName=%session.Data("jxAltUploadRecord","fext")
	;s x="../elfieDemo/"_x
	&js<fileName='#(x)#',formalFileExt = '#(orgFileName)#'>
	;&js<window.open("#(x)#","_new")>
	
	q
DoNotShow
	#import MX
	d INIT^WSP999
	s ^DoNotShow("ConvertResultTable",UserID)=$h
	q	
.
SaveResult 
	if r0'="" d
	.s dft=$$checkDate^utilAWS(r0)
	.i dft'=0 s reportDate=$ZDATEH(r0,dft)
	.e  s reportDate=""
	s tmpName=tmp 
	&sql(SELECT ID 
		INTO :rID
		FROM ResultBloodTest1
		WHERE TmpName=:tmpName)
	&sql(UPDATE MX.ResultBloodTest1 SET ReportDate=:reportDate WHERE ID=:rID)
	s objx=##class(ResultBloodTest1).%OpenId(rID)
	s objx1=##class(ResultBloodTestValue).%New()
	s objx1.TestName=r1
	s objx1.SIUnit=r2
	s objx1.Result=r3
	s objx1.LowRange=r4
	s objx1.HighRange=r5
	
	d objx.Tests.SetAt(objx1,d0)
	d objx.%Save()
	s d0=d0+1
	q

jxAltConvertResultTableIND^MAC^^67183,14275.3897622^0
jxAltConvertResultTable1
InitMe
	#import MX
	d INIT1^CSP999
	i ($g(%session.Data("UserID"))=""){
		&js<window.open("cLockdown.csp","_self")>
		q 
	}
	;s rid=$g(%session.Data("jxTransform","rid"))
	s rid=$g(%session.Data("jxAltUploadRecord","ID"))
	&js<document.getElementById("trans-id").innerHTML="Transaction ID. #(rid)#"; let rid=#(rid)#>
	;&sql(SELECT Profile,BucketName,fExt
	;	INTO :cID,:tName,:fExt
	; 	FROM Record 
	; 	WHERE ID=:rid)
	;&sql(SELECT ContactPerson,UserID INTO :cName,:uName FROM "User" WHERE ID=:cID)
	s uName="JondaX",cName="JondaX"
	;if $d(%session.Data("jxAltUpload","IND")),$g(%session.Data("jxAltUpload","IND"))=1
	s tName="IND"
	
	if ($LENGTH(cName)=0){
		s uName=$ZCONVERT($P(uName,"@",1),"s")
		&js<document.getElementById("cName").innerHTML = "#(uName)#">
		&js<document.getElementById("cName1").innerHTML = "#(uName)#">
	}
	else{
		&js<document.getElementById("cName").innerHTML = "#(cName)#">
		&js<document.getElementById("cName1").innerHTML = "#(cName)#">
	}
	&js<document.getElementById("tName").innerHTML = "#(tName)#">
	&js<document.getElementById("tName1").innerHTML = "#(tName)#">
	/*
	if (fExt="hl7")!(fExt="xml")!(fExt="json")!(fExt="xlsx"){
		&js<document.querySelector(".grey-btn").style.display="none">
	} */
	s ^LastView("cReviewResults",UserID,rid)="jxAltConvertResultTable1.csp"
	;s ^LastView("cReviewResults",UserID,rid)="cReviewResultsS2.csp"
	s tmpname=^jxAltUpload($g(%session.Data("jxAltUploadRecord")))
	s path="c:\intersystems\cache\jondax\elfie\ad-hoc\"_tmpname_".csv"
	i $d(^Textract(path,"rowCount")) s trc=$g(^Textract(path,"rowCount"))
	e  s trc=0
	&js<document.getElementById('tRowCount').innerHTML = "OCR - " +#(trc)#+ " row(s)";>
	q
WriteTable1
	#import MX
	d INIT^WSP999
	s Q=$c(9)	; tab
	i $g(%session.Data("jxAltConvertResultTable","Template"))="" s %session.Data("jxAltConvertResultTable","Template")="JondaX"
	s template=%session.Data("jxAltConvertResultTable","Template")
	s UserID=$g(%session.Data("UserID"))
	s fname=$g(%session.Data("jxAltUploadRecord"))
	;s fname="depii.jpg"
	s fext="."_%session.Data("jxAltUploadRecord","fext")
	;s fext="jpg"
	s tmp=^jxAltUpload(fname)
	s %dev1="c:\intersystems\cache\jondax\elfie\ad-hoc\"_tmp_".csv"
	s fname=$replace(fname,fext,"")
	s %dev="c:\intersystems\cache\csp\jondax\elfieDemo\"_fname_".csv"
	o %dev:"wns"
	s c1="#405470"	; blue
	s c2="#e63876"	; pink
	s c3="#048f2a"	; green
	s row=""
	s trow=1
	n d0,tempName,tempUnit
	s d0=1,tempName="",tempUnit=""
	k ^martin
	s ^martin("NM")=0
WriteTable1a
	
	s row=$o(^AICLAUDE("alt"_UserID,row)) g:row="" WriteTable1End
	s r0=$g(^AICLAUDE("alt"_UserID,row,"date"))
	s r1=$g(^AICLAUDE("alt"_UserID,row,"name"))
	s r2=$g(^AICLAUDE("alt"_UserID,row,"unit"))
	s r3=$g(^AICLAUDE("alt"_UserID,row,"value"))
	s r4=$g(^AICLAUDE("alt"_UserID,row,"loRange"))
	s r5=$g(^AICLAUDE("alt"_UserID,row,"hiRange"))
	s r2x=r2
	s trowCount=$g(^Textract(%dev1,"rowCount"))
	s dCount=2*trowCount
	; test ^AICLAUDE vs ^AICLAUDE for duplicate rows
	if row>1 
	{	n pRow s pRow= row-1
		s r1p=$g(^AICLAUDE("alt"_UserID,pRow,"name"))
		if (r1=r1p),($g(^AICLAUDE("alt"_UserID,"rowCount"))'=dCount) s trow=trow+1  g WriteTable1a
		if ^AICLAUDE("alt"_UserID,row,"row"_row)= ^AICLAUDE("alt"_UserID,pRow,"row"_pRow) d ;g WriteTable1a ;d
		.s ^AICLAUDE("alt"_UserID,"rowCount")=$g(^AICLAUDE("alt"_UserID,"rowCount"))-1 
		.g WriteTable1a
		
	} 
	g:r1="" WriteTable1a
.
	; clean up units
		
		s r2=$replace(r2,"|","l")
		s r2=$replace(r2," ","")
		s r3=$replace(r3,",",".")
		i $e(r2,$l(r2)-1,$l(r2))="/1" s r2=$replace(r2,"/1","/l")
		i $e(r2,$l(r2))="_" s r2=r2_"l"
		s r2=$replace(r2," / ","/") 
		s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:r2 OR SIName=:r2)
		i x="",(r2["lU")!(r2["Ul") s r2=$replace(r2,"l","I")
		i x="",r2'="" s r2=r2_"/l"	; because of g. ; commented by DW 2024-03-14 ;uncommented by Martin 2024-03-20
		s x1="" &sql(SELECT ID INTO :x1 FROM SIUnit WHERE Name=:r2 OR SIName=:r2) 
		i x1="",r2'="" s r2=$replace(r2,"/l","")
		;IND
		;s ^testing("Red",row)=r2_", "_r3_", "_r4_", "_r5
		if r3[".",($zconvert(r2,"l")="/ul")!($zconvert(r2,"l")="ul/") d
		.s r3=$replace(r3,".",""),r4=$replace(r4,".",""),r5=$replace(r5,".","")
		
	; end clean up
	; missing units- check textract
	;for unit is misplaced in value eg."0.10 10e9-l" or "H 3.60 mmol/L" by Martin 2024-04-08
	;s ^martin(row,"1")=r3_", "_r2
	i r3[" " { 
		for i = 1:1:$length(r3, " ") 
		{   if $number($piece(r3, " ", i))  d
	    	.if r2="" s r2=$piece(r3, " ", i+1)
	    	.s r3= $piece(r3, " ", i)  
			}
	}
	;s ^martin(row,"2")=r3_", "_r2
	; clean up value and range
		s r3=$replace(r3,",",".")
		s r3=$replace(r3,"*","")
		s r3=$replace(r3," ","")
		s r4=$replace(r4,",",".")
		s r4=$replace(r4," ","")
		i $p(r4,"-",1)'="",$p(r4,"-",2)'="" d	; cater for 1-3
		. s r5=$p(r4,"-",2),r4=$p(r4,"-",1)
		s r5=$replace(r5,",",".")
		s r5=$replace(r5," ","")
		i $p(r5,"-",1)'="",$p(r5,"-",2)'="" d	; cater for 1-3
		. s r4=$p(r5,"-",1),r5=$p(r5,"-",2)
	; end clean up
	;cater for "<", ">" signs column placement
	if (r4["<"),(r5="") s r5=r4 s r4=""
	if (r4=""),(r5[">") s r4=r5 s r5=""
	
	; Compare ^AICLAUDE vs ^Textract
	i trow<=trowCount
	{
		s t1=$p(^Textract(%dev1,trow,"BB"),",",1) ; get testname from ^Textract
		if $e(t1,$l(t1))=" " s t1=$e(t1,1,$l(t1)-1) ;remove trailing space from testname
		;Check r1,r2,r3,r4,r5 all contain in ^Textract(%dev,row,"BB")
		if r1[t1, ^Textract(%dev1,trow,"BB")[r2, ^Textract(%dev1,trow,"BB")[r3, ^Textract(%dev1,trow,"BB")[r4, ^Textract(%dev1,trow,"BB")[r5 
		{	;s ^martin("match",row,trow)=r1_","_r2x_","_r3_" are match with "_^Textract(%dev1,trow,"BB") s ^martin("NM",trow)=0
			s match=1
			s trow=trow+1 }
		else
		{ 	
			if ($g(^AICLAUDE("alt"_UserID,"rowCount"))=dCount)
			{	//for 2 sets of result
				i r2="" s r2=$g(^AICLAUDE("alt"_UserID,row-1,"unit"))
				i r4="" s r4=$g(^AICLAUDE("alt"_UserID,row-1,"loRange"))
				i r5="" s r5=$g(^AICLAUDE("alt"_UserID,row-1,"hiRange"))
				s r2x=r2
				s match=0
				;s ^martin(row,r2,r4,r5)=$g(^AICLAUDE("alt"_UserID,row-1,"unit"))_" , "_$g(^AICLAUDE("alt"_UserID,row-1,"loRange"))_" , "_$g(^AICLAUDE("alt"_UserID,row-1,"hiRange"))
			    ;s ^martin("NM",trow)=1 s ^martin("not match1",row,trow)=r1_","_r2_","_r3_","_r4_","_r5_" is not match with "_^Textract(%dev1,trow,"BB")
				}
			elseif r1[t1 { s match=0 s trow=trow+1} ;s ^martin("NM")=1   s ^martin("NM",trow)=1 s ^martin("not match2",row,trow)=r1_","_r2_","_r3_","_r4_","_r5_" is not match with "_^Textract(%dev1,trow,"BB") 	
			elseif  trow<trowCount{
				s trow1=trow+1
				s t2=$p(^Textract(%dev1,trow1,"BB"),",",1) ;get next testname from ^Textract
				;s ^martin("tname2",trow1,trow)=t2_r1 ; 
				if $e(t2,$l(t2))=" " s t2=$e(t2,1,$l(t2)-1) ;remove trailing space from testname 
				if r1'=t2 s trow=trow+1 s match=1 ;g WriteTable1a 
				e  d 
				.;s ^martin("row Test",trow)=r1_" , "_t2
				.s match=0 ;s ^martin("NM")=1   s ^martin("NM",trow)=1 s ^martin("not match3",row,trow)=r1_","_r2_","_r3_","_r4_","_r5_" is not match with "_^Textract(%dev1,trow,"BB")
				.s trow=trow1
			
			}else{ s match=0}
		}
	}else { s match=0}
	
	if match=0 w "<tr class=''>" //style='background-color: #F7D896;'>" 
	if match=1 w "<tr class=''>" 
	;END
	/*
	s rid= %session.Data("jxAltUploadRecord","ID")
	s ^OrgTestName(rid,row,"testDate")=r0
	s ^OrgTestName(rid,row,"testName")=r1
	s ^OrgTestName(rid,row,"testValue")=r3
	s ^OrgTestName(rid,row,"testUnit")=r2
	s ^OrgTestName(rid,row,"testHiRange")=r5
	s ^OrgTestName(rid,row,"testLoRange")=r4 */
	;&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	;if $d(%session.Data("jxAltUpload","IND")),$g(%session.Data("jxAltUpload","IND"))=1 s bk="IND"
	s bk="IND"
	
	w "<td class='actions'><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)' > <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)' >  <img class='add-row-icon' src='./assets/images/row.png' alt='add row' onclick='addNewRow(event)' ></td>"
	w "<td class='date' style='color:"_c1_";'>"_r0_"</td>"
	w "<td class='test-name'>"_r1_"</td>"
	s x=$$GetSIName^WSP999(r1)
	s ^testing("SINAme",row)=r1_","_x
	; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
	if x["#",r2="%" s x=$p(x," ",1)
	/*&sql(select ID INTO x2 from template where DiagnosticTest[:x_" #")
	if x2'="",r2'="%" s x=x_" #" */
	s r1a=""
	i x="" {
	 	s IsMatch=0,r1a=r1
		WHILE IsMatch=0&($l(r1a)'=0){
			s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
			i r0'="" s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
		
		i r1a'="" d
		.&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:r1a AND BucketName=:bk)
		.i tempName'="" w "<td class='transformed-name issue' style='color:"_c2_"' title='No matching JX Name- Picking closest match'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1a
		.e  w "<td class='transformed-name issue' style='color:"_c2_"' title='No matching JX Name & Template -Using Original'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>" ;r1a
		e  s tempUnit="" w "<td class='transformed-name issue' style='color:"_c2_";' title='No matching  Template1- Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>"
		
	}
	i x'="" {
		;s ^testing("kp","x",row)=r1_","_x
		i r2'="%",(x="Eosinophils")!(x="Basophils")!(x="Monocytes")!(x="Lymphocytes") d
		.;s tempName=r1,tempUnit=r2 ;s x=x_" #" ;s tempName=$replace(tempName,"(percent)","(Abs)")
		.s x=x_" #" ;s ^testing("kp",row)=x
		
		/*.i r2'="%",(tempName="Eosinophils")!(tempName="Basophils")!(tempName="Monocytes")!(tempName="Lymphocytes") d
		..;s tempName=r1,tempUnit=r2 ;s x=x_" #" ;s tempName=$replace(tempName,"(percent)","(Abs)")
		..s x=x_" #" s ^testing("kp")=x
		..&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:x AND BucketName=:bk) */
		;s ^martin("x",row)=r1_", "_x_bk
		
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:x AND BucketName=:bk)
		i tempName'="" d
		.i $zconvert(tempName,"l")=$zconvert(r1,"l") w "<td class='transformed-name converted' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1	
		.e  s r1=x w "<td class='transformed-name converted' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>"
		e  w "<td class='transformed-name issue' style='color:"_c2_"; ' title='No matching Template- Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>"
		}
	w "<td class='result'>"_r3_"</td>"
	w "<td class='from-unit'>"_r2_"</td>"
	if tempUnit'="" {
	s x=$$GetJXUnit^WSP999(r2)
	s r2a=tempUnit
	i x'="" s r2=x 
 
	; more clean up
		i r2="%" d
		. i $l($p(r3,".",1))>3 s r3=$replace(r3,".",""),r3=$e(r3,1,2)_"."_$e(r3,3,999)
		. i $l($p(r4,".",1))>3 s r4=$replace(r4,".",""),r4=$e(r4,1,2)_"."_$e(r4,3,999)
		. i $l($p(r5,".",1))>3 s r5=$replace(r5,".",""),r5=$e(r5,1,2)_"."_$e(r5,3,999)
		; test if original unit can be converted
		
		s x="",x=$$U2U^WSP999(r1,r3,r2,r2a)
		;s ^martin("x0",row)=r1_","_r3_","_r2_","_r2a_","_x
		i x["ERROR" s r2a=tempUnit 
	; end more
	d
	. s r3x=r3,r4x=r4,r5x=r5
	. s r3=$$U2U^WSP999(r1,r3,r2,r2a)
	. s r4=$$U2U^WSP999(r1,r4,r2,r2a)
	. s r5=$$U2U^WSP999(r1,r5,r2,r2a)
	;s ^martin("x2",row)=r1_", "_r3_", "_r2_", "_r2a_", "_r3
	}else  {s x="ERROR Converting" s r2a=r2,r3x=r3,r4x=r4,r5x=r5  s ^martin("x",row)=r1_", "_r3_", "_x}
	s recalc=0
	i tempUnit="" ,x["ERROR" d
	.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching Template Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
	i tempUnit'="" ,x["ERROR" d
	.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching JX Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
	
	i x'["ERROR" d
	. i (r2a="")!($zconvert(r2a,"l")=$zconvert(r2,"l")) w "<td class='convert-result-unit' style='color:"_c1_"'><div class='dropdown' style='color:"_c1_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>"
	. e  s recalc=1 s r2=r2a w "<td class='convert-result-unit' style='color:"_c3_"'><div class='dropdown' style='color:"_c3_"' onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td></td>" 
.
	i recalc d
	. i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"   ;_ave_"// " s ave=$$AveRes^WSP999(r1,r3,r2,"")
	. i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
	. w "<td class='l-range'>"_r4x_" "_r2x_"</td>",!
	. i r4'["ERROR" w "<td  class='l-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
	. i r4["ERROR" w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
	. w "<td class='l-result-unit'>"_r2a_"</td>",!
	. w "<td class='u-range'>"_r5x_" "_r2x_"</td>",!
	. i r5'["ERROR" w "<td class='u-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"
	. i r5["ERROR" w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"
	. w "<td class='u-result-unit'>"_r2a_"</td>",!
	. ;w "<td style='color:"_c3_"'>"_$s(r4'="":r4,1:"")_"</td>"
	. ;w "<td style='color:"_c3_"'>"_$s(r5'="":r5,1:"")_"</td>"
	e  d
	. i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$fn($s(r3'="":r3,1:""),,2)_"'></td>"
	. i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
	. w "<td class='l-range'>"_r4x_" "_r2x_"</td>",!
	. i r4'["ERROR" w "<td class='l-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
	. i r4["ERROR" w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
	. w "<td class='l-result-unit'>"_r2a_"</td>",!
	. w "<td class='u-range'>"_r5x_" "_r2x_"</td>",!
	. i r5'["ERROR" w "<td class='u-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"  //"_$s(r5'="":r5,1:"")
	. i r5["ERROR" w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"  //$s(r5'="":r5,1:"")
	. w "<td class='u-result-unit'>"_r2a_"</td>",!
	. ;w "<td style='color:"_c1_"'>"_$s(r4'="":r4,1:"")_"</td>"
	. ;w "<td style='color:"_c1_"'>"_$s(r5'="":r5,1:"")_"</td>"
	//w "<td class='actions'><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)' > <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)' ></td>"
	w "</tr>",!
	;i r3'="" s r3=$fn(r3,,2) 
	;i r4'="" s r4=$fn(r4,,2) 
	;i r5'="" s r5=$fn(r5,,2) 
	u %dev w r0_Q_r1_Q_r2_Q_r3_Q_r4_Q_r5,! u 0
	d SaveResult
	g WriteTable1a	
WriteTable1End
	c %dev
	u 0
	q	
.
FileStatusChange
	#import MX
	d INIT1^CSP999
	;s rid=%session.Data("jxTransform","rid")
	s rid=$g(%session.Data("jxAltUploadRecord","ID"))
	if (d2="Failure"){
		&sql(UPDATE Record SET Note=:d1,Status=:d2,Reason=:d3,ReviewedDate=GETDATE() WHERE ID=:rid)
		
		// must add to error table based on the selection of reasion
		s errCode = "100"
		s errData = "test data"
		s errName = "test error from review"
		//The new errors are not populated yet, thus leads to '' in errCode,errData,errName
		&sql(SELECT Code,Description,Name INTO :errCode,:errData,:errName FROM ErrorCode WHERE FriendlyDescription=:d3)
		
		s dt = $zdatetime($h,3)
		&sql(SELECT BucketName,OrgFile INTO :bk,:fName FROM Record WHERE ID=:rid)
		s errData = $REPLACE(errData,"[yyyy-mm-dd hh:mm]",dt)
		s errData = $REPLACE(errData,"[filename]",fName)
		s errData = $REPLACE(errData,"[bucket]",bk)
		&sql(INSERT INTO MX.Error (Code, Data, Name, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :dt, :rid, :bk))
	}
	else{
		&sql(UPDATE Record SET Note=:d1,Status=:d2,Reason=:d3 WHERE ID=:rid)
	}
	
	q
	
ConvertResults
	#import MX
	d INIT1^CSP999
	&sql(SELECT SIName 
	INTO :r1
	FROM DiagnosticTest
	WHERE LOWER(Name)[LOWER(:d1)
	)
	s cVal = $$U2U^WSP999(r1,d2,d5,d6) ;$$CheckAndConvertNum(r1,d2,d5,d6)  ;changed on 2024-03-26 Martin
	s lVal = $$U2U^WSP999(r1,d3,d5,d6) ;$$CheckAndConvertNum(r1,d3,d5,d6) ;
	s uVal = $$U2U^WSP999(r1,d4,d5,d6) ;$$CheckAndConvertNum(r1,d4,d5,d6) ;
	&js<unitsCal.push("#($s(cVal="":"",1:$$FormatNumber^cMain(cVal,2)))#","#($s(lVal="":"",1:$$FormatNumber^cMain(lVal,2)))#","#($s(lVal="":"",1:$$FormatNumber^cMain(uVal,2)))#")>
	q
.
ConvertNewResults
	#import MX
	d INIT1^CSP999
	&sql(SELECT DiagnosticTest 
	INTO :r1
	FROM Template
	WHERE LOWER(Name)[LOWER(:d1)
	)
	
	s cVal = $$U2U^WSP999(r1,d2,d5,d6) ;$$CheckAndConvertNum(r1,d2,d5,d6)  ;changed on 2024-03-26 Martin
	s lVal = $$U2U^WSP999(r1,d3,d5,d6) ;$$CheckAndConvertNum(r1,d3,d5,d6) ;
	s uVal = $$U2U^WSP999(r1,d4,d5,d6) ;$$CheckAndConvertNum(r1,d4,d5,d6) ;
	&js<unitsCal.push("#($s(cVal="":"",1:$$FormatNumber^cMain(cVal,2)))#","#($s(lVal="":"",1:$$FormatNumber^cMain(lVal,2)))#","#($s(lVal="":"",1:$$FormatNumber^cMain(uVal,2)))#")>
	q	
.
CheckAndConvertNum(SIName,value,fromUnit,toUnit) ;not use
	n x1,x2,x3,x4,val
	s (x1,x2,x3,x4,val,prefix)=""
	; value is null ;added by Martin 11/3/2024
	i value="" q value 
	; same unit
	i $zconvert(fromUnit,"l")=$zconvert(toUnit,"l") d  q value
	. i value["<=" s prefix="<=",value=$replace(value,"<=","")
	. i value[">=" s prefix=">=",value=$replace(value,">=","")
	. i value["</=" s prefix="</=",value=$replace(value,"</=","")
	. i value[">/=" s prefix=">/=",value=$replace(value,">/=","")
	. i value["<" s prefix="<",value=$replace(value,"<","")
	. i value[">" s prefix=">",value=$replace(value,">","")
	. s value=prefix_$fn(value,,2)
	; branch for Lipoprotein A
	if $zconvert(SIName,"l")="lipoprotein a",value="" q value ;added by Martin 11/3/2024
	if $zconvert(SIName,"l")="lipoprotein a",$zconvert(fromUnit,"l")="g/l",$zconvert(toUnit,"l")="nmol/l" set value=$fn(((value*100)*2.5),,2) quit value
	if $zconvert(SIName,"l")="lipoprotein a",$zconvert(fromUnit,"l")="mg/dl",$zconvert(toUnit,"l")="nmol/l" set value=$fn((value*2.5),,2) quit value
	; branch for HbA1c
	if $zconvert(SIName,"l")="hba1c",$zconvert(fromUnit,"l")="mmol/mol",$zconvert(toUnit,"l")="%" set value=$fn(((value/10.929)+2.15),,2) q value
	n xUnit,xtoUnit
	s xUnit="",xtoUnit=""
	i $zconvert(fromUnit,"l")=$zconvert(toUnit,"l") q value
	&sql(SELECT SIName INTO :xUnit FROM SIUnit WHERE SIName=:fromUnit)
	s xtoUnit=$$GetJXUnit^WSP999(toUnit)
	i xtoUnit="" s xtoUnit=$$GetSIUnit^WSP999(toUnit)
	;b:$g(DW)=1
	i xtoUnit'="" s toUnit=xtoUnit
	i xUnit=""	&sql(SELECT SIName INTO :xUnit FROM SIUnit WHERE Name=:fromUnit)
	i xUnit="" s xUnit=$$GetJXUnit^WSP999(fromUnit)
	i xUnit'="" s fromUnit=xUnit
	if ($ISVALIDNUM(value)){
		i $$U2U^WSP999(SIName,value,fromUnit,toUnit)'="ERROR CONVERTING" q $$U2U^WSP999(SIName,value,fromUnit,toUnit)
		; try getting a different test name
		&sql(SELECT TOP 1 DiagnosticTest INTO :SIName FROM SIUnitConversion WHERE ToUnit=:toUnit AND fromUnit=:fromUnit)	
		q $$U2U^WSP999(SIName,value,fromUnit,toUnit)
	}
	if (value=""){
		q ""
	}
	if ($EXTRACT(value)="<")!($EXTRACT(value)=">"){
		s fChar = $EXTRACT(value)
		q fChar_$$U2U^WSP999(SIName,$P(value,fChar,2),fromUnit,toUnit)
	}
	q value
	
WriteReasons
	#import MX
	d INIT1^CSP999
	&sql(DECLARE C3 CURSOR FOR
		SELECT FriendlyDescription 
		INTO :r1
		FROM ErrorCode
		WHERE IsReason=1
	)
	&sql(OPEN C3)
	&sql(FETCH C3)
	WHILE SQLCODE=0{
		w "<li onclick='selectReason(event)'>"_r1_"</li>"
		&sql(FETCH C3)
	}
	&sql(CLOSE C3)
	q
	
LoadTemplateNames
	#import MX
	d INIT1^CSP999
	&sql(SELECT Setting INTO :setting FROM "User" WHERE ID=:UserID)
	s testNames = ""
	&sql(DECLARE C4 CURSOR FOR
	SELECT DISTINCT %EXACT(name)
	INTO :r1 
	FROM Template
	WHERE LOWER(name)[LOWER(:d1)
	AND Setting=:setting
	ORDER BY name
	)
	&sql(OPEN C4)
	&sql(FETCH C4)
	if SQLCODE=100 s testNames = "<li class='no-result'>No result found</li>"
	WHILE SQLCODE=0{
		s testNames=testNames_"<li onclick='changeTestName(event)' tabIndex='-1'>"_r1_"</li>\n"
		&sql(FETCH C4)
	}
	&sql(CLOSE C4)
	&js<document.querySelector(".testname-dropdown").firstElementChild.innerHTML = "#(testNames)#">
	q
LoadJXNames(d1)
	#import MX
	s UserID=$g(%session.Data("UserID"))
	&sql(SELECT Setting INTO :setting FROM "User" WHERE ID=:UserID)
	n tempName,tempUnit,IsMatch,ro,r1,r1a
	s testName = ""
	s cTestName=$$GetSIName^WSP999(d1)
	; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
	;if cTestName["#",r2="%" s cTestName=$p(cTestName," ",1)
	s r1a=""
	i cTestName="" {
	 	s IsMatch=0,r1a=d1
		WHILE IsMatch=0&($l(r1a)'=0){
			s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
			i r0'="" s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
		i r1a'="" d
		.&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:r1a AND Setting=:setting)
		.s testName=tempName &js<newTestname="#(testName)#">
		;w "<td class='transformed-name issue' style='color:"_c2_"' title='No matching JX Name- Picking closest match'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1a
		e  s tempUnit="" s testName=d1 &js<newTestname="#(testName)#"> ;s testName="No Result" ;w "<td class='transformed-name issue' style='color:"_c2_"; background-color: #e6f796' title='No matching  Template1- Using original'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>"
		
	}
	i cTestName'="" {
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:cTestName AND Setting=:setting)
		i tempName'="" d
		.i $zconvert(tempName,"l")=$zconvert(d1,"l") s testName=tempName &js< newTestname="#(testName)#"> ;w "<td class='transformed-name converted' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1	
		.e  s d1=cTestName s testName=tempName &js< newTestname="#(testName)#"> ;w "<td class='transformed-name converted' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>"
		e  s testName=d1 &js< newTestname="#(testName)#"> ;s testName="No Result" ;w "<td class='transformed-name issue' style='color:"_c2_"; background-color: #e6f796' title='No matching Template- Using original'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>"
		}
	q testName
	
LoadUnitsBasedOnName
	s units=""
	;s rid=$g(%session.Data("jxTransform","rid"))
	s rid=$g(%session.Data("jxAltUploadRecord","ID"))
	&sql(SELECT BucketName
	INTO :bk
	FROM Record
	WHERE id=:rid)
	s bk="jondaffr2"
	&sql(SELECT UnitName 
	INTO :r1
	FROM Template
	WHERE LOWER(Name)[LOWER(:d1)
	AND BucketName=:bk
	)
	if (SQLCODE=0){
		s units="<li onclick='changeUnit(event)' tabindex='-1'>"_r1_"</li>\n"
	}
	if (r1'=d2){
		;s units="<li onclick='changeUnit(event)' tabindex='-1'>"_r1_"</li>\n"
		s units = units_"<li onclick='changeUnit(event)' tabindex='-1'>"_d2_"</li>\n"
	}
	&js<document.querySelector(".unit-dropdown").firstElementChild.innerHTML = "#(units)#">
	
	q
unitCleanUp
	n x,x1,d1x,x2
	s d1x=d1
	;s rid=$g(%session.Data("jxTransform","rid"))
	s rid=$g(%session.Data("jxAltUploadRecord","ID"))
	s d1=$replace(d1," / ","/")
	s d1=$replace(d1,"|","l")
	s d1=$replace(d1," ","")
	s d1=$replace(d1,".","")
    i $e(d1,$l(d1))="_" s d1=d1_"l"  ;for "g_"
    i $e(d1,$l(d1)-1,$l(d1))="/1" s d1=$replace(d1,"/1","/l")
	s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:d1 OR SIName=:d1)
	i x="",(d1["lU")!(d1["Ul") s d1=$replace(d1,"l","I")
	i x="",d1'="" s d1=d1_"/l"	; because of g. ; commented by DW 2024-03-14 ;uncommented by Martin 2024-03-20
	s x1="" &sql(SELECT ID INTO :x1 FROM SIUnit WHERE Name=:d1 OR SIName=:d1) 
	i x1="",d1'="" s d1=$replace(d1,"/l","")
	i x'="" &sql(SELECT SIName INTO :x2 FROM SIUnit WHERE ID=:x) s d1=x2
	i x1'="" &sql(SELECT SIName INTO :x2 FROM SIUnit WHERE ID=:x1) s d1=x2
	if d1'=d1x &js<newFromUnit1= "#(d1)#">
	e  &js<newFromUnit1= "#(d1x)#">
	q
	
BiomarkerTranslation(name,bk)
	s tempName=""
	s tempUnit=""
	s siName=""
	s name=$ZCONVERT(name,"l")
	//Rules for Matching Diagnostic Names:
	//1. Check for equals to SIName
	&sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(SIName)=:name)
	
	//2. Check for equals to Name
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(Name)=:name)
	
	//name inside brackets
	s name1=$p($p(name,"(",2),")",1)
	
	//5. Check for %STARTSWITH SIName
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(SIName) %STARTSWITH :name)
	
	//6. Check for %STARTSWITH Name
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(Name) %STARTSWITH :name)
	
	//striping brackets,"-",#,trimming
	s name2=$ZSTRIP($REPLACE($REPLACE($REPLACE($REPLACE(name,"(",""),")",""),"-"," "),"#",""),"<>W")
	
	//7. Check for SIName = strip brackets and "-" and #
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(TRIM(REPLACE(REPLACE(REPLACE(REPLACE(SIName,'(',''),')',''),'-',' '),'#',''))) = :name2)
	
	//8. Check for Name = strip brackets and "-" and #
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(TRIM(REPLACE(REPLACE(REPLACE(REPLACE(Name,'(',''),')',''),'-',' '),'#',''))) = :name2)
	
	//3. Check for equals to (SIName = anything in bracket)
	//Potential failure for some words like 'PCV' which translates to Packed Cell Volume
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(SIName)=:name1)
	
	//4. Check for equals to (Name = anything in bracket)
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(Name)=:name1)
	
	//9. Check for SIName %CONTAINS x
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(SIName)[:name)
	
	//10. Check for Name %CONTAINS x
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(Name)[:name)
	
	/*//11. Check for x %CONTAINS SIName
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE :name[LOWER(SIName) HAVING LENGTH(SIName)>4)
	
	//12. Check for x %CONTAINS Name
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE :name[LOWER(Name) HAVING LENGTH(Name)>4)*/
	
	i siName'="" &sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:siName AND BucketName=:bk)
	q siName_$c(1)_tempName_$c(1)_tempUnit
	
ClearTransformedData(userId,rid)
	//d ClearTransformedData^cReviewResultsS2(6,645)
	s count = 1
	while ($d(^FormData(userId, rid, count)) = 10){
		s ^FormData(userId, rid, count, "TName") = ""
		s ^FormData(userId, rid, count, "TValue") = ""
		s ^FormData(userId, rid, count, "TUnit") = ""
		s ^FormData(userId, rid, count, "THiRange") = ""
		s ^FormData(userId, rid, count, "TLoRange") = ""
	    s count = +count + 1
	}
	q
.
PopOriginal
	
	#import MX
	d INIT1^CSP999
	n extIndex
	;s rid=%session.Data("jxTransform","rid")
	s rid=%session.Data("jxAltUploadRecord","ID")
	s r1="",r2=""
	&sql(SELECT OrgName,TmpName INTO :r1,:r2 FROM ResultBloodTest1 WHERE ID=:rid)
	s extIndex=$LENGTH(r1)+3-$FIND($REVERSE(r1),$REVERSE("."))
	s fileExt=$e(r1,extIndex,$l(r1))
	s temp=r2_"."_fileExt
	s ffile="c:\intersystems\cache\csp\review\"_rid_"\"_temp
	s file="../Review/"_rid_"/"_temp
	s fileExt=$zconvert(fileExt,"l")
	
	;i r2="heic"!(r2="webp")!(r2="avif")!(r2="jpg")!(r2="jpeg") d	
	i fileExt="heic"!(fileExt="webp")!(fileExt="avif") d
	. s cmd="mogrify -resize 50% -format png "_ffile
	. s x=$zf(-1,cmd_" && exit")
	. s fileExt="PNG"
	. s file="../Review/"_rid_"/"_r2_"."_fileExt
	
	//html result
	i fileExt="html" d
	. s file="../Review/"_rid_"/"_r2_"."_fileExt
	
	s %session.Data("jxAltPreview","File")="Review/"_rid
	&js<window.open("#(file)#","_blank")>
	
	;d ##class(%File).Delete(^INST("CSPDir")_"\"_^INST("NS")_"\"_file)
	q	
removeReviewFile
	q
	#import MX
	s rid=%session.Data("jxAltUploadRecord","ID")
	s dir="c:\intersystems\cache\csp\review\"_rid_"\"	
	s dir1="C:\InterSystems\Cache\CSP\jondax\groot\"_rid_"\"
	s status= ##class(%File).RemoveDirectoryTree(dir)
	s status1= ##class(%File).RemoveDirectoryTree(dir1)
	q
ClearRBT(rid)
	#import MX
	&sql(SELECT ID INTO :rbt from MX.ResultBloodTest1 WHERE ID=:rid)
	if ($L(rbt)=0){q}
	&sql(DELETE FROM MX.ResultBloodTest1_Tests WHERE ResultBloodTest1=:rbt)
	q	
UpdateRBT(rid, testName, testValue, testUnit, testHiRange, testLoRange, testDate)
	#import MX
	
	&sql(SELECT ID INTO :rbt FROM ResultBloodTest1 WHERE ID=:rid)
	if ($L(rbt)=0){q}
	&sql(SELECT COUNT(ID) INTO :objCount FROM ResultBloodTest1_Tests WHERE ResultBloodTest1=:rbt)
	s objxcount = +objCount
	s objxcount=objxcount+1
	s objx=##class(MX.ResultBloodTest1).%OpenId(rbt)
	s objx1=##class(MX.ResultBloodTestValue).%New()
	s objx1.TestName= testName
	s objx1.Result=testValue
	s objx1.SIUnit=testUnit
	s objx1.LowRange=testLoRange
	s objx1.HighRange=testHiRange
	if testDate'="" d
	.s dft=$$checkDate^utilAWS(testDate)
	.i dft'=0 s reportDate=$ZDATEH(testDate,dft)
	.e  s reportDate=""
	e  s reportDate=""
	s objx1.TestDate = reportDate
	/*
	if ($L(testDate)>0){
		s testDate = $replace(testDate, "-","/")
		s testDateInternal = $zdateh(testDate, 4)
		//s objx1.TestDate = $zdate(testDateInternal, 1)
		//s objx1.TestDate = $zdateh(testDate,6,,,,,,,-1)
		s objx1.TestDate = $zdateh(testDate, 4)
		
		//database wants mm/dd/yyyy
	}
	*/
	
	d objx.Tests.SetAt(objx1,objxcount)
.
	s sts = objx.%Save()
.
	q
SaveResult 
	if r0'="" d
	.s dft=$$checkDate^utilAWS(r0)
	.i dft'=0 s reportDate=$ZDATEH(r0,dft)
	.e  s reportDate=""
	s tmpName=tmp 
	&sql(SELECT ID 
		INTO :rID
		FROM ResultBloodTest1
		WHERE TmpName=:tmpName)
	&sql(UPDATE MX.ResultBloodTest1 SET ReportDate=:reportDate WHERE ID=:rID)
	&sql(SELECT COUNT(ID) INTO :d0 FROM ResultBloodTest1_Tests WHERE ResultBloodTest1=:rID)
	s objxcount = +d0
	s objxcount=objxcount+1
	s objx=##class(ResultBloodTest1).%OpenId(rID)
	s objx1=##class(ResultBloodTestValue).%New()
	s objx1.TestName=r1
	s objx1.SIUnit=r2
	s objx1.Result=r3
	s objx1.LowRange=r4
	s objx1.HighRange=r5
	
	d objx.Tests.SetAt(objx1,objxcount)
	d objx.%Save()
	s d0=d0+1
	q		

jxAltUploadRecord^MAC^^66906,22729.0340656^0
jxAltUploadRecord
InitMe
	q
.
Save	
	#import MX
	d INIT^WSP999
	s UserID=$g(%session.Data("UserID"))
	s tmpname=$$ATTNAME^WSP999
	s FName=%request.Data("FName",1)
	s FName=$zconvert(FName,"l")
	k ^jxAltUpload(FName)
	k %session.Data("jxUploadRecord")
	
	s fext=$p(FName,".",$l(FName,".")),fext=$zconvert(fext,"l")
	; check file extension
	s allowedext="*bmp*pdf*heic*png*jpg*jpeg*gif*webp*hl7*xml*json*ttl*"
	i allowedext'[("*"_fext_"*") s ^jxAltUpload(FName)=0 q
	s dt=$zdatetime($h,3,1)
	
  	new bytes
.
    s fsize=%request.MimeData("fileupload",1).Size	
	i +fsize=0 s ^jxAltUpload(FName)=0 q	; no file uploaded
	
	s stream=##class(%Stream.FileBinary).%New()
	s x=""
	while 1{
		s bytes=%request.MimeData("fileupload",1).Read(.a)
		;s bytes=%request.MimeData("fileupload",1).Read(fsize)
		d stream.Write(bytes)
		quit:%request.MimeData("fileupload",1).AtEnd
		s x=x+bytes
	}
	d stream.%Save()
	;s %dev="c:\intersystems\cache\jondax\jxUpload\Alt\"_FName
	;o %dev:"wns" u %dev
	;s status=stream.OutputToDevice()
	;c %dev
	; test to see if file extension matches content
	i fext="hl7" d IsHL7 q
	i fext="xml"!(fext="json")!(fext="ttl") d IsFHIR q
	s ^jxAltUpload(FName)=tmpname
	s ^jxAltUpload(FName,"Uploaded")=$h
	s %session.Data("jxAltUploadRecord")=FName
	s %session.Data("jxAltUploadRecord","fext")=fext
	s %dev="c:\intersystems\cache\jondax\elfie\ad-hoc\"_tmpname_"."_fext
	o %dev:"wns" u %dev
	s status=stream.OutputToDevice()
	c %dev
	s x=$zf(-1,"aws s3 cp "_%dev_" s3://jondaffr2/ && exit")
	s %dev=$replace(%dev,"\","/")
	k ^AICLAUDE(0)
	k ^ClaudeError(0)
	s upload=0
	s upload=##class(python.s3Utils).uploadFile("default",%dev,"jondaffr2","")
	q:upload=0
	s jobid=""
	s jobid=##class(python.textractUtils).SDTDTables(%dev)	; textract tables
	q:jobid=""
	s csv=0
	s %dev1="c:\intersystems\cache\jondax\elfie\ad-hoc\"_tmpname
	;h 15
	s csv=##class(python.textractUtils).GenerateCSVFromJobID(jobid,%dev1)
	d CleanCSV^utilAWS(%dev1_".csv")
	;q:csv=0
	;s rid="0"
	;d ##class(python.Claude).AiCompletion($replace(%dev1,"\","/")_".csv",0)
	d ##class(python.testClaude).AiCompletion($replace(%dev1,"\","/")_".csv",UserID)
	q
IsHL7
	q
IsFHIR
	q

jxAltViewTemp^MAC^^67067,16303.8797569^0
jxAltViewTemp
InitMe
	#import MX
	d INIT1^CSP999
	s rid=%session.Data("jxAltUploadRecord","ID")
	;&sql(SELECT BucketName INTO :bk FROM Record WHERE ID=:rid)
	s bk=$g(^jxAltUpload("temp",rid))
	&js<document.getElementById("tName").innerHTML="#(bk)#">
	d LoadTemplates("")
	q
LoadTemplates(d1)
	s rid=%session.Data("jxAltUploadRecord","ID")
	;&sql(SELECT BucketName INTO :bk FROM Record WHERE ID=:rid)
	s bk=$g(^jxAltUpload("temp",rid))
	s temp=""
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID,DiagnosticTest,Name,UnitName
		INTO :r0,:r1,:r2,:r3
		FROM Template
		WHERE BucketName=:bk AND Name %STARTSWITH(:d1)
		ORDER BY 3
	)
	if (d1="num"){
		s d1=1
		while d1<10{
			&sql(OPEN C1)
			&sql(FETCH C1)
			WHILE SQLCODE=0{
				s tr="<tr><td>"_r1_"</td><td>"_r2_"</td><td>"_r3_"</td></tr>"
				s temp=temp_tr
				&sql(FETCH C1)
			}
			&sql(CLOSE C1)
			s d1=d1+1
		}
	}
	else{
		&sql(OPEN C1)
		&sql(FETCH C1)
		WHILE SQLCODE=0{
			s tr="<tr><td>"_r1_"</td><td>"_r2_"</td><td>"_r3_"</td></tr>"
			s temp=temp_tr
			&sql(FETCH C1)
		}
		&sql(CLOSE C1)
	}
	&js<document.querySelector("tbody").innerHTML="#(temp)#">
	q

jxBGTask^MAC^^67249,9621.2471329^0
jxBGTask
	/*
	&sql(DECLARE cBGTask1 CURSOR FOR
		SELECT DISTINCT BY (Setting) ID 
		INTO :userid
		FROM MX."User"
		WHERE IsNull(Setting,'')<>''
	)
	&sql(OPEN cBGTask1)
	&sql(FETCH cBGTask1)
	WHILE SQLCODE=0{
		s x="" &sql(SELECT ID INTO :x FROM Subscription WHERE Profile=:userid)
		i x'="" d ^jxBiolytica
		&sql(FETCH cBGTask1)
	}
	&sql(CLOSE cBGTask1)
	
	*/
	
	; jxRedaction
	; Biolytica
	s userid=1,(r1,r2,r3)="" &sql(SELECT RemainingRedactionUnit,EndDate INTO :r1,:r2 FROM MX.Subscription WHERE Profile=:userid AND Type='Redaction' AND Subscription<>8)
	;i r2<=+$h!(+r1>0) d ^jxRedact
.
	; Jonda Health
	s userid=9,(r1,r2,r3)="" &sql(SELECT RemainingRedactionUnit,EndDate INTO :r1,:r2 FROM MX.Subscription WHERE Profile=:userid AND Type='Redaction' AND Subscription<>8)
	;i r2<=+$h!(+r1>0) d ^jxRedact
.
	; Klinik Pintar
	;s userid=13,(r1,r2,r3)="" &sql(SELECT RemainingRedactionUnit,EndDate INTO :r1,:r2 FROM MX.Subscription WHERE Profile=:userid AND Type='Redaction' AND Subscription<>8)
	;i r2<=+$h!(+r1>0) d ^jxRedact
.
	; ---------------------------------------------------------------------------------------
.
	; jxTransformation
	; Biolytica
	s userid=1,(r1,r2,r3)="" &sql(SELECT RemainingOCRUnit,RemainingTransformationUnit,EndDate INTO :r1,:r2,:r3 FROM MX.Subscription WHERE Profile=:userid AND Type='Transformation' AND Subscription<>8)
	i r3<=+$h!(r1+r2>0) d ^jxBiolytica01
	if shutdown=1 w "Time to shutdown the server. Qutting...",! q
	
	; Jonda Health
	s userid=9,(r1,r2,r3)="" &sql(SELECT RemainingOCRUnit,RemainingTransformationUnit,EndDate INTO :r1,:r2,:r3 FROM MX.Subscription WHERE Profile=:userid AND Type='Transformation' AND Subscription<>8)
	i r3<=+$h!(r1+r2>0) d ^jxBiolytica01
	if shutdown=1 w "Time to shutdown the server. Qutting...",! q
.
#;	; Klinik Pintar
#;	;s userid=18,(r1,r2,r3)="" &sql(SELECT RemainingOCRUnit,RemainingTransformationUnit,EndDate INTO :r1,:r2,:r3 FROM MX.Subscription WHERE Profile=:userid AND Type='Transformation' AND Subscription<>8)
#;	;i r3<=+$h!(r1+r2>0) d ^jxBiolytica01	
#;	
	; Medicia-frankie
	s userid=27,(r1,r2,r3)="" &sql(SELECT RemainingOCRUnit,RemainingTransformationUnit,EndDate INTO :r1,:r2,:r3 FROM MX.Subscription WHERE Profile=:userid AND Type='Transformation' AND Subscription<>8)
	i r3<=+$h!(r1+r2>0) d ^jxBiolytica01
	if shutdown=1 w "Time to shutdown the server. Qutting...",! q
	
	; Medicia-quan
	s userid=29,(r1,r2,r3)="" &sql(SELECT RemainingOCRUnit,RemainingTransformationUnit,EndDate INTO :r1,:r2,:r3 FROM MX.Subscription WHERE Profile=:userid AND Type='Transformation' AND Subscription<>8)
	i r3<=+$h!(r1+r2>0) d ^jxBiolytica01
	if shutdown=1 w "Time to shutdown the server. Qutting...",! q
	
	; AssistID-Wendo
	s userid=30,(r1,r2,r3)="" &sql(SELECT RemainingOCRUnit,RemainingTransformationUnit,EndDate INTO :r1,:r2,:r3 FROM MX.Subscription WHERE Profile=:userid AND Type='Transformation' AND Subscription<>8)
	i r3<=+$h!(r1+r2>0) d ^jxBiolytica01
	if shutdown=1 w "Time to shutdown the server. Qutting...",! q
	
	; Assist-muhammad.farabi
	s userid=31,(r1,r2,r3)="" &sql(SELECT RemainingOCRUnit,RemainingTransformationUnit,EndDate INTO :r1,:r2,:r3 FROM MX.Subscription WHERE Profile=:userid AND Type='Transformation' AND Subscription<>8)
	i r3<=+$h!(r1+r2>0) d ^jxBiolytica01
	if shutdown=1 w "Time to shutdown the server. Qutting...",! q
.
	; Onward Research
	s userid=32,(r1,r2,r3)="" &sql(SELECT RemainingOCRUnit,RemainingTransformationUnit,EndDate INTO :r1,:r2,:r3 FROM MX.Subscription WHERE Profile=:userid AND Type='Transformation' AND Subscription<>8)
	i r3<=+$h!(r1+r2>0) d ^jxBiolytica01
	if shutdown=1 w "Time to shutdown the server. Qutting...",! q
.
	; Trial files processing
	; Trial Users
	;BeHealthcare
#;	s userid=33,(r1,r2,r3)="" &sql(SELECT RemainingOCRUnit,RemainingTransformationUnit,EndDate INTO :r1,:r2,:r3 FROM MX.Subscription WHERE Profile=:userid AND Type='Transformation' AND Subscription<>8)
#;	i r3<=+$h!(r1+r2>0) d ^trialBGProcessing01
#;	
#;	;dr Anywhere
#;	s userid=34,(r1,r2,r3)="" &sql(SELECT RemainingOCRUnit,RemainingTransformationUnit,EndDate INTO :r1,:r2,:r3 FROM MX.Subscription WHERE Profile=:userid AND Type='Transformation' AND Subscription<>8)
#;	i r3<=+$h!(r1+r2>0) d ^trialBGProcessing01
	
	; Trial files processing
	; Trial Users
	s userid=""
	&sql(DECLARE cBGTask1 CURSOR FOR
		 SELECT Profile
		 INTO :userid 
		 FROM MX.Subscription 
		 WHERE  Subscription=8 AND IsNull(CancelRequest,'')='' AND Profile->IsTrial=1
	)
	&sql(OPEN cBGTask1)
	&sql(FETCH cBGTask1)
	WHILE SQLCODE=0{
		s (r1,r2,r3)="" 
		&sql(SELECT RemainingOCRUnit,RemainingTransformationUnit,EndDate 
			 INTO :r1,:r2,:r3 FROM MX.Subscription WHERE Profile=:userid AND Type='Transformation')
		i r3<=+$h!(r1+r2>0) d ^trialBGProcessing01
		&sql(FETCH cBGTask1)
	}
	&sql(CLOSE cBGTask1) 
	
	
	
	
		
#;	for i=0:1:4 d
#;	. d CheckShutdownTime^jxBiolytica
#;	. if shutdown=0 w "HANG State....." h 60 ; 1min
#;	. e  q 
	w !,"HANG State....."
	h (60*5) 
	g jxBGTask 	; 5 min 
	
	
	/*
.
	*/
	

jxBiolytica^MAC^^67241,65594.6277154^0
jxBiolytica
	; call from ^jxBGTask
	s devMode = 1
	d INIT1^WSP999	; background task, so no %session or usernames
	#import MX
	i devMode=1 w !,"TRANSFORMING..."
	s shutdown=0
	; loop through "User" to process multiple users
	; loop  is in ^jxBGTask
	; passed userid fron ^jxBGTask , 1 for Biolytica, 9 for JondaX
	
	; get a list of Biolytica AWS buckets to process and set to array buckets
	k buckets k bucketIds d GetBuckets	
	q:'$d(buckets)
	s bkRoot=""
	
	s FileCounter=0
	
Step1
.
	; check subscription
	s TransSubId = $$GetTransSubscription^jxSubscriptionUtils(userid)
	if (TransSubId = 0 ){
		i (devMode) { w "No subscription. Quitting..."}
		q
	}
	
	s downloadLimit = 10
.
	s bkRoot=$o(buckets(bkRoot)) 
.
GetNextFolder
	d CheckShutdownTime	if shutdown=1 q
	if (bkRoot = ""){
		i (devMode){w !,"NO MORE BUCKET TO PROCESS. QUITTING",!}
		if (CompanyName '[ "Jonda"){
			i FileCounter>0 d SendReviewMail^AutoMail if (devMode) {w !,"sent review email to the reviewer team.",!}	
		}
		
		q
	}	
		
	i (devMode){w !,"current Bucket: ",bkRoot,!}
	s bucketFolder = $o(buckets(bkRoot,""))
	i (devMode){w !,"current Folder: ",bucketFolder,!}
	s CliProfileName = $o(buckets(bkRoot,bucketFolder,""))
		
	if (bucketFolder = "-"){
		s bk = bkRoot
		s bksys = bk
	} else {
		s bk = bkRoot_"/"_bucketFolder
		s bksys = bkRoot_"\"_$replace(bucketFolder,"/","\")
	}	
		
	s systemDir = "c:\intersystems\cache\jondax\"
	s companyDir = systemDir_CompanyName_"\"
	if (bucketFolder '= "-"){
		d CreateDir(companyDir_"\"_bkRoot_"\")
	}
	if (bucketFolder["/"){
		s folder1=$p(bucketFolder,"/",1)
		s folder2=$p(bucketFolder,"/",2)
		d CreateDir(companyDir_"\"_bkRoot_"\"_folder1_"\")
		d CreateDir(companyDir_"\"_bkRoot_"\"_folder1_"\"_folder2_"\")
	}
	s devDir = systemDir_CompanyName_"\"_bksys_"\"
	s stdDir = systemDir_CompanyName_"\"_bksys_"\stdOutputs\"
	s docDir = systemDir_CompanyName_"\"_bksys_"\documents\"
	s outputsDir = systemDir_CompanyName_"\"_bksys_"\outputs\"
	s resultsDir = systemDir_CompanyName_"\"_bksys_"\results\"
	d CreateDir(companyDir)
	d CreateDir(devDir)
	d CreateDir(stdDir)
	d CreateDir(docDir)
	d CreateDir(outputsDir)
	d CreateDir(resultsDir)
	
	s stagingBucket = "s3://"_bk_"/Staging/"
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"
	
	s textractBucketName = "jondaffr"
	s textractBucket = "s3://"_textractBucketName_"/"
	
Step2
.
	try{	
		s stdoutDir = stdDir_"log.txt"
		s stderrDir = stdDir_"err.txt" 
	
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_"""" 
		s status = $ZF(-100, cmdflag, "aws","s3","ls", stagingBucket, "--profile",  CliProfileName)
		i (status = 0) { ; remove ghost files in s3 bucket
			
			s str = $$ReadFile(stdoutDir)
			s secLine = $p(str, $c(13,10), 2)
			if (secLine '= ""){
				w "Removing ghost files",!
				s status = $ZF(-100, cmdflag, "aws", "s3", "rm", stagingBucket, "--profile", CliProfileName)}
		} 
		
		s numOfDownloads = 0
		
Step2GetDocuments
		
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_"""" 
		s status = $ZF(-100, cmdflag, "aws","s3","ls", stagingBucket , "--profile", CliProfileName)
.
		s fileName = ""
		s fileName = $$ExtractFileNameFromBucketLog(stdoutDir)	
		
		i (devMode) {w !,"Number of downloads = ", numOfDownloads}
		
		i ((fileName = "") ! (numOfDownloads = downloadLimit)){ ;empty bucket returns as error
			i (devMode & (fileName = "")){w !,"EMPTY BUCKET"}	
			
			; recreating staging folder regardless of it exists or not
			i (fileName = "") {
				if (bucketFolder = "-"){s stagingFolder = "Staging/"} else {s stagingFolder = bucketFolder_"/Staging/"}
				s status = $ZF(-100, cmdflag, "aws","s3api","put-object", "--bucket" , bkRoot, "--key", stagingFolder, "--profile", CliProfileName)
			}
			
			;g Step5
			g SubscriptionCheck
		}
		
		if (devMode){w !,"current file name from bucket: ", fileName}
		
		s tempFile = $$ATTNAME^WSP999()
		
		g Step3PdfCheck
.
Step2InProgress	
		; copy file to dev env
		
		s fileExt = $p(fileName,".",*)
		s status = $ZF(-100, cmdflag, "aws", "s3", "cp", stagingBucket_fileName, docDir_tempFile_"."_fileExt, "--profile", CliProfileName)
		if (status '= 0){
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLIError", "JX2006","Step2InProgress^jxBiolytica",errData)
		}
		
		; obtain file binary
		s binaryFs = ##class(%Stream.FileBinary).%New()
		s binaryFs.Filename = docDir_tempFile_"."_fileExt
		s binaryFs2 = ##class(%Stream.FileBinary).%New()
		WHILE 'binaryFs.AtEnd{
			s fileBinaryStream = binaryFs.Read()
			d binaryFs2.Write(fileBinaryStream)
		}
		d binaryFs2.%Save()
		s binaryName = binaryFs2.Filename
		; log the download to table
		s dt = $zdatetime($h,3)
		
		&sql(INSERT INTO MX.Record (OrgFile,Status, fExt,Profile,TempFile, CreatedDate, BucketName, BinaryData, BinaryName) VALUES (:fileName, 'In-Process', :fileExt, :userid, :tempFile, :dt, :bk, :binaryFs2, :binaryName))
		
		; move file from staging to in-progress 
		s status = $ZF(-100, cmdflag, "aws", "s3", "mv", stagingBucket_fileName, inProcessBucket, "--profile", CliProfileName)
		if (status '= 0) {
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLIError", "JX2006","Step2InProgress^jxBiolytica",errData)
		}
		if (devMode){w !,"moved file to in-process"}
	} catch(err){
		d ErrorHandler(err)
	}
	
	s numOfDownloads = +numOfDownloads + 1
	d CheckShutdownTime	if shutdown=1 q
	g Step2GetDocuments
	q
	
Step3PdfCheck
	try {
		; file usability check		
		s fileExt = $p(fileName,".",*)
		s fileExtUpper = $zconvert(fileExt, "U")
		
		i ((fileExtUpper'="PDF")&(fileExtUpper'="XLSX")&(fileExtUpper'="PNG")&(fileExtUpper'="JPEG")&(fileExtUpper'="JPG")&(fileExtUpper'="HEIC")&(fileExtUpper'="AVIF")&(fileExtUpper'="WEBP")&(fileExtUpper'="HL7") & (fileExtUpper'="XML") & (fileExtUpper'="JSON")) {
						
			i (devMode){w !,"Not supported file. Moving to Failure"}
			
			; log and report to the db table
			s dt = $zdatetime($h,3)
			&sql(INSERT INTO MX.Record (OrgFile,Status, fExt,Profile,TempFile, CreatedDate, ProcessedDate) VALUES (:fileName, 'Failure', :fileExt, :userId, :tempFile, :dt, :dt))			
			&sql(SELECT ID INTO :rid FROM MX.Record WHERE OrgFile=:fileName AND TempFile=:tempFile)
			
			s errCode = "JX1002"
			s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
			s errName = $$GenerateErrorName^jxErrorReport(errCode)
			s errLocation = "Step3PdfCheck^jxBiolytica"
			&sql(INSERT INTO MX.Error (Code, Data, Name, Location, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :dt, :rid, :bk))
			
			; move file from staging to failure
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv", stagingBucket_fileName, failureBucket, "--profile", CliProfileName)
			i (status '= 0){
				s errData = $$ReadFile(stderrDir)
				s errCode = "JX2006"
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step3PdfCheck^jxBiolytica",errData)
			}
			g Step2GetDocuments
		}
	} catch(err){
		d ErrorHandler(err)
	}
	g Step2InProgress
	q
	
SubscriptionCheck
	d CheckShutdownTime	if shutdown=1 q
	
	s TransSubId = $$GetTransSubscription^jxSubscriptionUtils(userid)
	if (TransSubId = 0 ){
		i (devMode) { w "No Transformation subscription. Quitting..."}
		; ENABLE THIS AFTER SUBSCRIPTION BUYING PAGE IS COMPLETED
		;d SendSubscriptionOverMail^jxSubscriptionUtils(contactEmail, contactPerson)
		q
	}
	
	s OcrSubId = $$GetOcrSubscription^jxSubscriptionUtils(userid)
	i (devMode){
		w !,"Ocr Sub ID: ",OcrSubId
		w !,"Trans Sub ID: ",TransSubId
	}
	d SubscriptionPoolDetails^jxSubscriptionUtils(userid)
	
Step5
	
	try{ 
		
		s rid=""
		
		if ((OcrSubId = 0)&(TransSubId'=0)){
			&sql(SELECT TOP 1 ID,TempFile,fExt, OrgFile INTO :rid,:tempFile, :fExt, :fileName FROM Record WHERE IsNull(ProcessedDate,'')='' AND OrgFile<>'' AND Status='In-Process' AND BucketName=:bk AND fExt NOT IN ('pdf','jpeg','png','heic','avif','webp') ORDER BY CreatedDate) 
		} elseif((OcrSubId '= 0)&(TransSubId '=0)){
			&sql(SELECT TOP 1 ID,TempFile,fExt, OrgFile INTO :rid,:tempFile, :fExt, :fileName FROM Record WHERE IsNull(ProcessedDate,'')='' AND OrgFile<>'' AND Status='In-Process' AND BucketName=:bk ORDER BY CreatedDate) 
		} elseif ((OcrSubId = 0) & (TransSubId = 0)){
			if (devMode) {w !,"No subscription available. Quitting..." }
			q
		}
		
		w !,"RID: ",rid
Step5ProcessFile
		if rid="" {
			i (devMode) {w !,"NO MORE FILE TO PROCESS.",!}
			
			i (numOfDownloads = downloadLimit){
				g Step2
			} else {
				d ^jxErrorReport 
				
				k buckets(bkRoot,bucketFolder)
				
				if ($d(buckets(bkRoot)) = 11){g GetNextFolder}
				else {
					k buckets(bkRoot)
					s bkRoot="" 
			
					g Step1
				}
			}
		}
		
		s FileCounter=1
		
		s maxFileSize = 4999999 ;5MB
		s fileSize =  ##class(%File).GetFileSize(docDir_tempFile_"."_fExt)
		if (fileSize > maxFileSize){
			s errCode = "JX1003"
			s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
			s errName = $$GenerateErrorName^jxErrorReport(errCode)
			Throw ##class(%Exception.General).%New(errName,errCode,"Step5ProcessFile^jxBiolytica",errData)
		}
		
		; insert resultbloodtest
		&sql(INSERT INTO ResultBloodTest (Record,Type) VALUES (:rid, 'Blood Test'))
		
		s ext=$zconvert(fExt,"U")
		if (ext = "PDF"){
			d ^jxAWSBGa
			
			&sql(SELECT OCR INTO :ocrstr FROM Record WHERE ID=:rid)
			/*	; commented by DW 2024-01-30 to bypass AWS textract slow return of values
			if ($L(ocrstr) = 0){
				s errCode = "JX2003"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step5ProcessFile^jxBiolytica",errData)
			}
			*/
			d ^jxShowResults
		}
		if (ext = "XLSX"){
			s filePath = docDir_tempFile_"."_fExt
			
			d ^jxAWSBGXLSX
		
		}
		if (ext="PNG")!(ext="JPG")!(ext="JPEG")!(ext="HEIC")!(ext="AVIF")!(ext="WEBP"){
			
			if (ext'="PNG"){ ; change format to png
				s cmd="mogrify -format png """_docDir_tempFile_"."_fExt_""""
				s x=$zf(-1,cmd_" && exit")
				w !,"Convert to png : ",x,!	
				d ##class(%File).Delete(docDir_tempFile_"."_fExt)
				s fExt = "png"
			}
			&sql(Update Record SET PageCount ='1' WHERE id=:rid)
			s OCRstr = $$jxOCRPNG^jxOCRPNG(docDir_tempFile_"."_fExt)
			
			i ($L(OCRstr)=0){
				s errCode = "JX2003"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step5ProcessFile^jxBiolytica",errData)
			}
			
			i ((OCRstr '["WORD") ! (OCRstr '["LINE")){
				s errCode = "JX2005"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step5ProcessFile^jxBiolytica",errData)
			}
.
			i (OCRstr="FAILURE"){
				s errCode = "JX2001"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode,"Step5ProcessFile^jxBiolytica",errData)
			}
			d OCR2Table^jxOCRPNG(OCRstr, rid)
			d GPT^utilAWS(rid)
			d ^jxShowResults
		}
		if (ext="HL7"){
			s HL7StandardizedStr = $$StandardizeHL7^jxSDAToResults(docDir_tempFile_"."_fExt)
			s SDAStr = $$HL7ToSDA^jxSDAToResults(HL7StandardizedStr)
			s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
			d jxSDAToResults^jxSDAToResults(sda, rid, 1)
		}
		if (ext="JSON"){
			s SDAStr = $$FHIRJsonToSDA^jxSDAToResults(docDir_tempFile_"."_fExt)
			s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
			d jxSDAToResults^jxSDAToResults(sda, rid, 1)
		}
		if (ext= "XML"){
			s fContent = $$ReadFile(docDir_tempFile_"."_fExt)
			if (fContent["ClinicalDocument"){
				; CDA
				s SDAStr = $$CDAToSDA^jxSDAToResults(docDir_tempFile_"."_fExt)
				s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
				d jxSDAToResults^jxSDAToResults(sda, rid, 1)
			}
			elseif (fContent["Bundle"){
				; FHIR
				s SDAStr = $$FHIRXmlToSDA^jxSDAToResults(docDir_tempFile_"."_fExt)
				s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
				d jxSDAToResults^jxSDAToResults(sda, rid, 1)
			}
			else {
				s errCode = "JX1007"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk,"Neither CDA or FHIR file")
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step5ProcessFile^jxBiolytica",errData)
			}
		}
		
		s processedDate = $zdatetime($h,3)
		&sql(UPDATE MX.Record SET ProcessedDate=:processedDate WHERE ID = :rid)
		
		// update the subscription pool
		s recordPageCount = 0
		&sql(SELECT Status, PageCount, fExt INTO :recordStatus, :recordPageCount, fileExtension FROM Record WHERE id = :rid)
		if (recordStatus = "In-Process"){
			s status = $$DeductUnit^jxSubscriptionUtils(TransSubId, "T", 1)
			if ((fileExtension ="pdf") !(fileExtension = "jpg") ! (fileExtension = "jpeg") ! (fileExtension="png") ! (fileExtension="heic") ! (fileExtension = "avif" ) ! (fileExtension = "webp")){
				s status2 = $$DeductUnit^jxSubscriptionUtils(OcrSubId, "O", +recordPageCount)
			}
			d AdjustSubscriptionPool^jxSubscriptionUtils(userid)
		}
		
		d ##class(%File).Delete(docDir_tempFile_"."_fExt)
		
		i (devMode){ w !,"DONE PROCESSING - RID: ",rid, "  ","RBT: ",rbt, "  ProcessedDate: ", processedDate}
		
		s errorCSV = $$GenerateErrorReportByRid^jxErrorReport(rid)
		if (errorCSV '=0){
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",errorCSV, failureBucket, "--profile", CliProfileName)
			s errFname=##class(%File).GetFilename(errorCSV)
			d ##class(%File).Delete(errorCSV)
		}
		d CheckShutdownTime	if shutdown=1 q
	} catch(err){
		d ErrorHandler(err)
	}
	;g Step5	; get next file
	g SubscriptionCheck
	
GetBuckets
	; get list of root buckets
	&sql(SELECT Setting, CompanyName,  ContactPerson, Email INTO :setting, :CompanyName, :contactPerson, :contactEmail FROM "User" WHERE ID=:userid)
	i (devMode) {w !, "Setting ID: ",setting, !,"CompanyName: ",CompanyName,!}
	&sql(DECLARE cBucket CURSOR FOR
		SELECT Buckets_Name, Buckets_Folder, Buckets_CliProfileName
		INTO :r2, :bfd, :bcp
		FROM Setting_Buckets
		WHERE Setting=:setting AND Buckets_Type['Transformation' AND ISNULL(Buckets_DeletedDate,'')=''
	)  ;'jonda-bucket-development'
	&sql(OPEN cBucket)
	&sql(FETCH cBucket)
	WHILE SQLCODE=0{
		s buckets(r2)=""
		s buckets(r2, bfd) = ""
		s buckets(r2, bfd, bcp) = ""
		&sql(FETCH cBucket)
	}
	&sql(CLOSE cBucket)
	q
END
	;cleanup and quit
	
	return
	
CreateDir(dirFullPath)
	try{
		if (##class(%File).DirectoryExists(dirFullPath) = 0){
			d ##class(%File).CreateDirectory(dirFullPath)
		}
	} catch(err){
		d ErrorHandler(err)
	}
	q
.
	
ExtractFileNameFromBucketLog(logPath)
	s str = $$ReadFile(logPath)
	s topLine = $p(str, $c(13,10), 1)
	s fileName = $E(topLine, 32,*)
	q fileName
	
ReadFile(fileFullPath)
	
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = fileFullPath
	try {
		s str = fs.Read($$$MaxLocalLength)
	}catch(err){
		d ErrorHandler(err)
	}
	q str
.
ExtractJobId(fullFilePath)
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = fullFilePath
	s str = fs.Read($$$MaxLocalLength)
	i (str=""){
		q ""
	}
	s jobIdObj = ##class(%DynamicAbstractObject).%FromJSON(str)
	s jobId = jobIdObj."JobId"
	q jobId
	
	
ErrorHandler(err)
		
	s dt = $zdatetime($h, 3)
	
	i (devMode){
		w !,"------ ERROR MESSAGE ------"
		w !,"Name: ",err.Name
		w !,"Code: ",err.Code
		w !,"Location: ",err.Location
		w !,"Data: ",err.Data
		w !,"------ END ERROR MESSAGE ------"
	}
	d ErrorMail
	i err.Name="" {s errName=""} else {s errName=err.Name}
	i err.Location="" {s errLocation=""} else {s errLocation = err.Location}
	i err.Code ="" {s errCode=""} else {s errCode = err.Code}
	i err.Data ="" {s errData=""} else {s errData = err.Data}
	i err.iStack="" {s erriStack=""} else {s erriStack = err.iStack}
	
	i ($d(tempFile) && $L(tempFile)>0){
		if (($d(rid)) && (rid="")){s bucketName = "" s recordName = "" } else {s bucketName = bk s recordName=fileName}
		&sql(INSERT INTO MX.Error (Code, Data, Name, Location, Stack, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :erriStack, :dt, :rid, :bucketName))
		
		&sql(UPDATE MX.Record SET Status='Failure', ProcessedDate=:dt WHERE ID = :rid)
		s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",inProcessBucket_fileName, failureBucket, "--profile", CliProfileName)
		
		s errorCSV = $$GenerateErrorReportByRid^jxErrorReport(rid)
		if (errorCSV '=0){
			
			// For Trial Env from Client portal
			if (setting'=5),(setting'=6){
				s errFname=##class(%File).GetFilename(errorCSV)
				s copyDir= "C:/InterSystems/Cache/JondaX/ClientDownload/"_userid
				d CreateDir^jxBiolytica(copyDir)
				d CreateDir^jxBiolytica(copyDir_"/Failure")
				d CreateDir^jxBiolytica(copyDir_"/Failure/"_rid)
				d ##class(%File).CopyFile(errorCSV,copyDir_"/Failure/"_rid_"/"_errFname)
				}
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",errorCSV, failureBucket, "--profile", CliProfileName)
			d ##class(%File).Delete(errorCSV)
		}
		
		d CleanFiles(rid)
		d StripTables(rid)
		
	} else {
		&sql(INSERT INTO MX.Error (Code, Data, Location, Name, Stack, CreatedDate) VALUES (:errCode, :errData, :errLocation, :errName, :erriStack, :dt))
	}
	
	
	hang 1
	q
	
CleanFiles(rid)
	q
	&sql(SELECT TempFile,fExt, OrgFile,Profile->CompanyName,BucketName INTO :tempFile,:ext,:fileName, :comName, :bkName FROM Record WHERE ID=:rid)
	
	s resDir = "C:\InterSystems\Cache\JondaX\"_comName_"\"_$replace(bkName,"/","\")_"\results\"
	s dcDir = "C:\InterSystems\Cache\JondaX\"_comName_"\"_$replace(bkName,"/","\")_"\documents\"
	
	s file=resDir_tempFile_"."_ext
	d ##class(%File).Delete(file)
	s file=dcDir_tempFile_"."_ext
	d ##class(%File).Delete(file)
	s file=dcDir_tempFile_"\"
	d ##class(%File).RemoveDirectoryTree(file)
	s tRS=##class(%ResultSet).%New("%Library.File:FileSet")
	s tStatus=tRS.Execute(resDir)    
	while (tRS.Next()){
		d ##class(%File).Delete(tRS.Get("Name"))
	}
	
	q	
	
	
StripTables(rid)
	#import MX
	&sql(SELECT ID INTO :rbt From ResultBloodTest WHERE Record->ID=:rid)
	&sql(SELECT BinaryName INTO :binaryName FROM Record WHERE ID=:rid)
	&sql(DELETE FROM ResultBloodTest_Tests WHERE ResultBloodTest = :rbt)
	&sql(DELETE FROM ResultBloodTest WHERE Record->ID=:rid)
	//&sql(UPDATE Record SET BinaryData=NULL, OrgFile=NULL, OCR=NULL, BinaryName=NULL WHERE ID = :rid)
	&sql(UPDATE Record SET BinaryData=NULL, OCR=NULL, BinaryName=NULL WHERE ID = :rid)
	d ##class(%File).Delete(binaryName)
	q
.
.
CLEANALLTABLES ; only for testing, DO NOT USE THIS
	q
	&sql(DELETE FROM Record)
	&sql(DELETE FROM ResultBloodTest)
	&sql(DELETE FROM ResultBloodTest_Tests)
	&sql(DELETE FROM Error)
.
	s CliProfileName = "default"
	s bk = "jondaffr2"
	s CompanyName = "JondaX"
	s systemDir = "c:\intersystems\cache\jondax\"
	s cmdflag = "/SHELL"
	s devDir = systemDir_CompanyName_"\"_bk_"\"
	
	s stagingBucket = "s3://"_bk_"/Staging/"
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"
.
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", inProcessBucket, "--profile", CliProfileName)
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", failureBucket, "--profile", CliProfileName)
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", completedBucket, "--profile", CliProfileName)
.
	d ##class(%File).RemoveDirectoryTree(devDir)
.
	q
ErrorMail	; Notify JondaX of error
	s EmailAddress="notifications@jonda.health"
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	;do mail.Cc.Clear()
	;do mail.Cc.Insert("nan@jonda.health")
	set mail.Subject="ERROR JondaX Frankfurt ^jxBiolytica encountered an error"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	set status=mail.TextData.Write("<html><body>------ ERROR MESSAGE ------<br><br>RecId: "_$g(rid)_"<br>Name: "_err.Name_"<br>Code: "_err.Code_"<br>Location: "_err.Location_"<br>Data: "_err.Data_"<br><br>This is an automated message. Do no reply to this message.</body></html>")
	set status=mailserver.Send(mail)
	q
.
CheckShutdownTime
 	if $p($h,",",2)>=56700 { ;56700 = 5:45pm 
		;w !,!,"SHUTDOWN TIME. QUITTING....",!,!
		;s shutdown=1
	}
 q	

jxBiolytica01^MAC^^67304,40113.5764493^0
jxBiolytica
	; call from ^jxBGTask
	s devMode = 1
	d INIT1^WSP999	; background task, so no %session or usernames
	#import MX
	i devMode=1 w !,"TRANSFORMING..."
	s shutdown=0
	; loop through "User" to process multiple users
	; loop  is in ^jxBGTask
	; passed userid fron ^jxBGTask , 1 for Biolytica, 9 for JondaX
	
	; get a list of Biolytica AWS buckets to process and set to array buckets
	k buckets k bucketIds d GetBuckets	
	q:'$d(buckets)
	s bkRoot=""
	
	s FileCounter=0
	
Step1
.
	; check subscription
	s TransSubId = $$GetTransSubscription^jxSubscriptionUtils(userid)
	if (TransSubId = 0 ){
		i (devMode) { w "No subscription. Quitting..."}
		q
	}
	
	s downloadLimit = 10
.
	s bkRoot=$o(buckets(bkRoot)) 
.
GetNextFolder
	d CheckShutdownTime	if shutdown=1  q
	if (bkRoot = ""){
		
		i (devMode){w !,"NO MORE BUCKET TO PROCESS. QUITTING",!}
		if (CompanyName '[ "Jonda"){
			i FileCounter>0 d SendReviewMail^AutoMail if (devMode) {w !,"sent review email to the reviewer team.",!}	
		}
		
		q
	}	
		
	i (devMode){w !,"current Bucket: ",bkRoot,!}
	s bucketFolder = $o(buckets(bkRoot,""))
	i (devMode){w !,"current Folder: ",bucketFolder,!}
	s CliProfileName = $o(buckets(bkRoot,bucketFolder,""))
		
	if (bucketFolder = "-"){
		s bk = bkRoot
		s bksys = bk
	} else {
		s bk = bkRoot_"/"_bucketFolder
		s bksys = bkRoot_"\"_bucketFolder
	}	
		
	s systemDir = "c:\intersystems\cache\jondax\"
	s companyDir = systemDir_CompanyName_"\"
	if (bucketFolder '= "-"){
		d CreateDir(companyDir_"\"_bkRoot_"\")
	}
	if (bucketFolder["/"){
		s folder1=$p(bucketFolder,"/",1)
		s folder2=$p(bucketFolder,"/",2)
		d CreateDir(companyDir_"\"_bkRoot_"\"_folder1_"\")
		d CreateDir(companyDir_"\"_bkRoot_"\"_folder1_"\"_folder2_"\")
	}
	s devDir = systemDir_CompanyName_"\"_bksys_"\"
	s stdDir = systemDir_CompanyName_"\"_bksys_"\stdOutputs\"
	s docDir = systemDir_CompanyName_"\"_bksys_"\documents\"
	s outputsDir = systemDir_CompanyName_"\"_bksys_"\outputs\"
	s resultsDir = systemDir_CompanyName_"\"_bksys_"\results\"
	d CreateDir(companyDir)
	d CreateDir(devDir)
	d CreateDir(stdDir)
	d CreateDir(docDir)
	d CreateDir(outputsDir)
	d CreateDir(resultsDir)
	
	s stagingBucket = "s3://"_bk_"/Staging/"
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"
	
	s textractBucketName = "jondaffr"
	s textractBucket = "s3://"_textractBucketName_"/"
	
Step2
.
	try{	
		s stdoutDir = stdDir_"log.txt"
		s stderrDir = stdDir_"err.txt" 
	
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_"""" 
		s status = $ZF(-100, cmdflag, "aws","s3","ls", stagingBucket, "--profile",  CliProfileName)
		i (status = 0) { ; remove ghost files in s3 bucket
			
			s str = $$ReadFile(stdoutDir)
			s secLine = $p(str, $c(13,10), 2)
			if (secLine '= ""){
				w "Removing ghost files",!
				s status = $ZF(-100, cmdflag, "aws", "s3", "rm", stagingBucket, "--profile", CliProfileName)}
		} 
		
		s numOfDownloads = 0
		
Step2GetDocuments
		
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_"""" 
		s status = $ZF(-100, cmdflag, "aws","s3","ls", stagingBucket , "--profile", CliProfileName)
.
		s fileName = ""
		s fileName = $$ExtractFileNameFromBucketLog(stdoutDir)	
		
		i (devMode) {w !,"Number of downloads = ", numOfDownloads}
		
		i ((fileName = "") ! (numOfDownloads = downloadLimit)){ ;empty bucket returns as error
			i (devMode & (fileName = "")){w !,"EMPTY BUCKET",!}	
			
			; recreating staging folder regardless of it exists or not
			i (fileName = "") {
				if (bucketFolder = "-"){s stagingFolder = "Staging/"} else {s stagingFolder = bucketFolder_"/Staging/"}
				s status = $ZF(-100, cmdflag, "aws","s3api","put-object", "--bucket" , bkRoot, "--key", stagingFolder, "--profile", CliProfileName)
			}
			
			;g Step5
			g SubscriptionCheck
		}
		
		if (devMode){w !,"current file name from bucket: ", fileName}
		
		s tempFile = $$ATTNAME^WSP999()
		
		g Step3PdfCheck
.
Step2InProgress	
		; copy file to dev env
		
		s fileExt = $p(fileName,".",*)
		s status = $ZF(-100, cmdflag, "aws", "s3", "cp", stagingBucket_fileName, docDir_tempFile_"."_fileExt, "--profile", CliProfileName)
		if (status '= 0){
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLIError", "JX2006","Step2InProgress^jxBiolytica",errData)
		}
		
		; obtain file binary
		s binaryFs = ##class(%Stream.FileBinary).%New()
		s binaryFs.Filename = docDir_tempFile_"."_fileExt
		s binaryFs2 = ##class(%Stream.FileBinary).%New()
		WHILE 'binaryFs.AtEnd{
			s fileBinaryStream = binaryFs.Read()
			d binaryFs2.Write(fileBinaryStream)
		}
		d binaryFs2.%Save()
		s binaryName = binaryFs2.Filename
		; log the download to table
		s dt = $zdatetime($h,3)
		
		&sql(INSERT INTO MX.Record (OrgFile,Status, fExt,Profile,TempFile, CreatedDate, BucketName, BinaryData, BinaryName) VALUES (:fileName, 'In-Process', :fileExt, :userid, :tempFile, :dt, :bk, :binaryFs2, :binaryName))
		
		; move file from staging to in-progress 
		s status = $ZF(-100, cmdflag, "aws", "s3", "mv", stagingBucket_fileName, inProcessBucket, "--profile", CliProfileName)
		if (status '= 0) {
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLIError", "JX2006","Step2InProgress^jxBiolytica",errData)
		}
		if (devMode){w !,"moved file to in-process"}
	} catch(err){
		d ErrorHandler(err)
	}
	
	s numOfDownloads = +numOfDownloads + 1
	d CheckShutdownTime	if shutdown=1 q
	g Step2GetDocuments
	q
	
Step3PdfCheck
	try {
		; file usability check		
		s fileExt = $p(fileName,".",*)
		s fileExtUpper = $zconvert(fileExt, "U")
		
		i ((fileExtUpper'="PDF")&(fileExtUpper'="XLSX")&(fileExtUpper'="PNG")&(fileExtUpper'="JPEG")&(fileExtUpper'="JPG")&(fileExtUpper'="HEIC")&(fileExtUpper'="AVIF")&(fileExtUpper'="WEBP")&(fileExtUpper'="HL7") & (fileExtUpper'="XML") & (fileExtUpper'="JSON")) {
						
			i (devMode){w !,"Not supported file. Moving to Failure"}
			
			; log and report to the db table
			s dt = $zdatetime($h,3)
			&sql(INSERT INTO MX.Record (OrgFile,Status, fExt,Profile,TempFile, CreatedDate, ProcessedDate) VALUES (:fileName, 'Failure', :fileExt, :userId, :tempFile, :dt, :dt))			
			&sql(SELECT ID INTO :rid FROM MX.Record WHERE OrgFile=:fileName AND TempFile=:tempFile)
			
			s errCode = "JX1002"
			s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
			s errName = $$GenerateErrorName^jxErrorReport(errCode)
			s errLocation = "Step3PdfCheck^jxBiolytica"
			&sql(INSERT INTO MX.Error (Code, Data, Name, Location, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :dt, :rid, :bk))
			
			; move file from staging to failure
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv", stagingBucket_fileName, failureBucket, "--profile", CliProfileName)
			i (status '= 0){
				s errData = $$ReadFile(stderrDir)
				s errCode = "JX2006"
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step3PdfCheck^jxBiolytica",errData)
			}
			g Step2GetDocuments
		}
	} catch(err){
		d ErrorHandler(err)
	}
	g Step2InProgress
	q
	
SubscriptionCheck
	d CheckShutdownTime	if shutdown=1 q
	s TransSubId = $$GetTransSubscription^jxSubscriptionUtils(userid)
	if (TransSubId = 0 ){
		i (devMode) { w "No Transformation subscription. Quitting..."}
		; ENABLE THIS AFTER SUBSCRIPTION BUYING PAGE IS COMPLETED
		;d SendSubscriptionOverMail^jxSubscriptionUtils(contactEmail, contactPerson)
		q
	}
	
	s OcrSubId = $$GetOcrSubscription^jxSubscriptionUtils(userid)
	i (devMode){
		w !,"Ocr Sub ID: ",OcrSubId
		w !,"Trans Sub ID: ",TransSubId
	}
	d SubscriptionPoolDetails^jxSubscriptionUtils(userid)
.
Step5
	
	try{ 
		
		s rid=""
		
		if ((OcrSubId = 0)&(TransSubId'=0)){
			&sql(SELECT TOP 1 ID,TempFile,fExt, OrgFile INTO :rid,:tempFile, :fExt, :fileName FROM Record WHERE IsNull(ProcessedDate,'')='' AND OrgFile<>'' AND Status='In-Process' AND BucketName=:bk AND fExt NOT IN ('pdf','jpeg','png','heic','avif','webp') ORDER BY CreatedDate) 
		} elseif((OcrSubId '= 0)&(TransSubId '=0)){
			&sql(SELECT TOP 1 ID,TempFile,fExt, OrgFile INTO :rid,:tempFile, :fExt, :fileName FROM Record WHERE IsNull(ProcessedDate,'')='' AND OrgFile<>'' AND Status='In-Process' AND BucketName=:bk ORDER BY CreatedDate) 
		} elseif ((OcrSubId = 0) & (TransSubId = 0)){
			if (devMode) {w !,"No subscription available. Quitting..." }
			q
		}
		
		w !,!,"RID: ",rid,!
Step5ProcessFile
		if rid="" {
			i (devMode) {w !,"NO MORE FILE TO PROCESS.",!}
			
			i (numOfDownloads = downloadLimit){
				g Step2
			} else {
				d ^jxErrorReport 
				
				k buckets(bkRoot,bucketFolder)
				
				if ($d(buckets(bkRoot)) = 11){g GetNextFolder}
				else {
					k buckets(bkRoot)
					s bkRoot="" 
			
					g Step1
				}
			}
		}
		
		s FileCounter=1
		
		s maxFileSize = 4999999 ;5MB
		s fileSize =  ##class(%File).GetFileSize(docDir_tempFile_"."_fExt)
		if (fileSize > maxFileSize){
			s errCode = "JX1003"
			s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
			s errName = $$GenerateErrorName^jxErrorReport(errCode)
			Throw ##class(%Exception.General).%New(errName,errCode,"Step5ProcessFile^jxBiolytica",errData)
		}
		
		; insert resultbloodtest
		&sql(INSERT INTO ResultBloodTest (Record,Type) VALUES (:rid, 'Blood Test'))
		
		s ext=$zconvert(fExt,"U")
		if (ext = "PDF"){
			w "Started jxGemini...",!
			d ^jxGemini
			d ^jxAWSBGa01
			
			&sql(SELECT OCR INTO :ocrstr FROM Record WHERE ID=:rid)
			d ^jxShowResults
			;d ^jxDataMappingTransformation(rid)
		}
		if (ext = "XLSX"){
			s filePath = docDir_tempFile_"."_fExt
			
			d ^jxAWSBGXLSX
		
		}
		if (ext="PNG")!(ext="JPG")!(ext="JPEG")!(ext="HEIC")!(ext="AVIF")!(ext="WEBP"){
			
			if (ext'="PNG"){ ; change format to png
				s cmd="mogrify -format png """_docDir_tempFile_"."_fExt_""""
				s x=$zf(-1,cmd_" && exit")	
				d ##class(%File).Delete(docDir_tempFile_"."_fExt)
				s fExt = "png"
			}
			&sql(Update Record SET PageCount ='1' WHERE id=:rid)
Gemini
			s gIndex = ##class(python.GeminiAi).AiCompletion(docDir_tempFile_"."_fExt,rid,0, "png")
			i gIndex=-429 h 5 g Gemini
			
			s OCRstr = $$jxOCRPNG^jxOCRPNG01(docDir_tempFile_"."_fExt)
			i ($L(OCRstr)=0){
				s errCode = "JX2003"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step5ProcessFile^jxBiolytica",errData)
			}
			i (OCRstr="FAILURE"){
				s errCode = "JX2001"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode,"Step5ProcessFile^jxBiolytica",errData)
			}
			d OCR2Table^jxOCRPNG01(OCRstr, rid)
			d GPT^utilAWS01(rid)
			d ^jxShowResults
			;d ^jxDataMappingTransformation(rid)
		}
		if (ext="HL7"){
			s HL7StandardizedStr = $$StandardizeHL7^jxSDAToResults(docDir_tempFile_"."_fExt)
			s SDAStr = $$HL7ToSDA^jxSDAToResults(HL7StandardizedStr)
			s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
			d jxSDAToResults^jxSDAToResults(sda, rid, 1)
		}
		if (ext="JSON"){
			s SDAStr = $$FHIRJsonToSDA^jxSDAToResults(docDir_tempFile_"."_fExt)
			s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
			d jxSDAToResults^jxSDAToResults(sda, rid, 1)
		}
		if (ext= "XML"){
			s fContent = $$ReadFile(docDir_tempFile_"."_fExt)
			if (fContent["ClinicalDocument"){
				; CDA
				s SDAStr = $$CDAToSDA^jxSDAToResults(docDir_tempFile_"."_fExt)
				s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
				d jxSDAToResults^jxSDAToResults(sda, rid, 1)
			}
			elseif (fContent["Bundle"){
				; FHIR
				s SDAStr = $$FHIRXmlToSDA^jxSDAToResults(docDir_tempFile_"."_fExt)
				s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
				d jxSDAToResults^jxSDAToResults(sda, rid, 1)
			}
			else {
				s errCode = "JX1007"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk,"Neither CDA or FHIR file")
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step5ProcessFile^jxBiolytica",errData)
			}
		}
		d ^jxDataMappingTransformation(rid)
		s processedDate = $zdatetime($h,3)
		
		&sql(UPDATE MX.Record SET ProcessedDate=:processedDate WHERE ID = :rid)
		
		// update the subscription pool
		s recordPageCount = 0
		&sql(SELECT Status, PageCount, fExt INTO :recordStatus, :recordPageCount, fileExtension FROM Record WHERE id = :rid)
		if (recordStatus = "In-Process"){
			s status = $$DeductUnit^jxSubscriptionUtils(TransSubId, "T", 1)
			if ((fileExtension ="pdf") ! (fileExtension = "jpeg") ! (fileExtension="png") ! (fileExtension="heic") ! (fileExtension = "avif" ) ! (fileExtension = "webp")){
				s status2 = $$DeductUnit^jxSubscriptionUtils(OcrSubId, "O", +recordPageCount)
			}
			d AdjustSubscriptionPool^jxSubscriptionUtils(userid)
		}
		
		d ##class(%File).Delete(docDir_tempFile_"."_fExt)
		
		i (devMode){ w !,"DONE PROCESSING - RID: ",rid, "  ","RBT: ",rbt, "  ProcessedDate: ", processedDate}
		
		s errorCSV = $$GenerateErrorReportByRid^jxErrorReport(rid)
		if (errorCSV '=0){
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",errorCSV, failureBucket, "--profile", CliProfileName)
			s errFname=##class(%File).GetFilename(errorCSV)
			d ##class(%File).Delete(errorCSV)
		}
		d CheckShutdownTime	if shutdown=1 q
	} catch(err){
		d ErrorHandler(err)
	}
	;g Step5	; get next file
	g SubscriptionCheck
	
GetBuckets
	; get list of root buckets
	&sql(SELECT Setting, CompanyName,  ContactPerson, Email INTO :setting, :CompanyName, :contactPerson, :contactEmail FROM "User" WHERE ID=:userid)
	i (devMode) {w !, "Setting ID: ",setting, !,"CompanyName: ",CompanyName,!}
	&sql(DECLARE cBucket CURSOR FOR
		SELECT Buckets_Name, Buckets_Folder, Buckets_CliProfileName
		INTO :r2, :bfd, :bcp
		FROM Setting_Buckets
		WHERE Setting=:setting AND Buckets_Type['Transformation' AND ISNULL(Buckets_DeletedDate,'')=''
	)  ;'jonda-bucket-development'
	&sql(OPEN cBucket)
	&sql(FETCH cBucket)
	WHILE SQLCODE=0{
		s buckets(r2)=""
		s buckets(r2, bfd) = ""
		s buckets(r2, bfd, bcp) = ""
		&sql(FETCH cBucket)
	}
	&sql(CLOSE cBucket)
	q
END
	;cleanup and quit
	
	return
	
CreateDir(dirFullPath)
	try{
		if (##class(%File).DirectoryExists(dirFullPath) = 0){
			d ##class(%File).CreateDirectory(dirFullPath)
		}
	} catch(err){
		d ErrorHandler(err)
	}
	q
.
	
ExtractFileNameFromBucketLog(logPath)
	s str = $$ReadFile(logPath)
	s topLine = $p(str, $c(13,10), 1)
	s fileName = $E(topLine, 32,*)
	q fileName
	
ReadFile(fileFullPath)
	
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = fileFullPath
	try {
		s str = fs.Read($$$MaxLocalLength)
	}catch(err){
		d ErrorHandler(err)
	}
	q str
.
ExtractJobId(fullFilePath)
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = fullFilePath
	s str = fs.Read($$$MaxLocalLength)
	i (str=""){
		q ""
	}
	s jobIdObj = ##class(%DynamicAbstractObject).%FromJSON(str)
	s jobId = jobIdObj."JobId"
	q jobId
	
	
ErrorHandler(err)
		
	s dt = $zdatetime($h, 3)
	
	i (devMode){
		w !,"------ ERROR MESSAGE ------"
		w !,"Name: ",err.Name
		w !,"Code: ",err.Code
		w !,"Location: ",err.Location
		w !,"Data: ",err.Data
		w !,"------ END ERROR MESSAGE ------"
	}
	d ErrorMail
	i err.Name="" {s errName=""} else {s errName=err.Name}
	i err.Location="" {s errLocation=""} else {s errLocation = err.Location}
	i err.Code ="" {s errCode=""} else {s errCode = err.Code}
	i err.Data ="" {s errData=""} else {s errData = err.Data}
	i err.iStack="" {s erriStack=""} else {s erriStack = err.iStack}
	
	i ($d(tempFile) && $L(tempFile)>0){
		if (($d(rid)) && (rid="")){s bucketName = "" s recordName = "" } else {s bucketName = bk s recordName=fileName}
		&sql(INSERT INTO MX.Error (Code, Data, Name, Location, Stack, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :erriStack, :dt, :rid, :bucketName))
		
		&sql(UPDATE MX.Record SET Status='Failure', ProcessedDate=:dt WHERE ID = :rid)
		s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",inProcessBucket_fileName, failureBucket, "--profile", CliProfileName)
		
		s errorCSV = $$GenerateErrorReportByRid^jxErrorReport(rid)
		if (errorCSV '=0){
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",errorCSV, failureBucket, "--profile", CliProfileName)
			s errFname=##class(%File).GetFilename(errorCSV)
			d ##class(%File).Delete(errorCSV)
		}
		
		d CleanFiles(rid)
		d StripTables(rid)
		
	} else {
		&sql(INSERT INTO MX.Error (Code, Data, Location, Name, Stack, CreatedDate) VALUES (:errCode, :errData, :errLocation, :errName, :erriStack, :dt))
	}
	
	
	hang 1
	q
	
CleanFiles(rid)
	q
	&sql(SELECT TempFile,fExt, OrgFile,Profile->CompanyName,BucketName INTO :tempFile,:ext,:fileName, :comName, :bkName FROM Record WHERE ID=:rid)
	
	s resDir = "C:\InterSystems\Cache\JondaX\"_comName_"\"_$replace(bkName,"/","\")_"\results\"
	s dcDir = "C:\InterSystems\Cache\JondaX\"_comName_"\"_$replace(bkName,"/","\")_"\documents\"
	
	s file=resDir_tempFile_"."_ext
	d ##class(%File).Delete(file)
	s file=dcDir_tempFile_"."_ext
	d ##class(%File).Delete(file)
	s file=dcDir_tempFile_"\"
	d ##class(%File).RemoveDirectoryTree(file)
	s tRS=##class(%ResultSet).%New("%Library.File:FileSet")
	s tStatus=tRS.Execute(resDir)    
	while (tRS.Next()){
		d ##class(%File).Delete(tRS.Get("Name"))
	}
	
	q	
	
	
StripTables(rid)
	#import MX
	&sql(SELECT ID INTO :rbt From ResultBloodTest WHERE Record->ID=:rid)
	&sql(SELECT BinaryName INTO :binaryName FROM Record WHERE ID=:rid)
	&sql(DELETE FROM ResultBloodTest_Tests WHERE ResultBloodTest = :rbt)
	&sql(DELETE FROM ResultBloodTest WHERE Record->ID=:rid)
	//&sql(UPDATE Record SET BinaryData=NULL, OrgFile=NULL, OCR=NULL, BinaryName=NULL WHERE ID = :rid)
	&sql(UPDATE Record SET BinaryData=NULL, OCR=NULL, BinaryName=NULL WHERE ID = :rid)
	d ##class(%File).Delete(binaryName)
	q
.
.
CLEANALLTABLES ; only for testing, DO NOT USE THIS
	q
	&sql(DELETE FROM Record)
	&sql(DELETE FROM ResultBloodTest)
	&sql(DELETE FROM ResultBloodTest_Tests)
	&sql(DELETE FROM Error)
.
	s CliProfileName = "default"
	s bk = "jondaffr2"
	s CompanyName = "JondaX"
	s systemDir = "c:\intersystems\cache\jondax\"
	s cmdflag = "/SHELL"
	s devDir = systemDir_CompanyName_"\"_bk_"\"
	
	s stagingBucket = "s3://"_bk_"/Staging/"
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"
.
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", inProcessBucket, "--profile", CliProfileName)
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", failureBucket, "--profile", CliProfileName)
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", completedBucket, "--profile", CliProfileName)
.
	d ##class(%File).RemoveDirectoryTree(devDir)
.
	q
ErrorMail	; Notify JondaX of error
	q
	s EmailAddress="notifications@jonda.health"
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	;do mail.Cc.Clear()
	;do mail.Cc.Insert("nan@jonda.health")
	set mail.Subject="ERROR JondaX TestSrvSG ^jxBiolytica encountered an error"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	set status=mail.TextData.Write("<html><body>------ ERROR MESSAGE ------<br><br>RecId: "_$g(rid)_"<br>Name: "_err.Name_"<br>Code: "_err.Code_"<br>Location: "_err.Location_"<br>Data: "_err.Data_"<br><br>This is an automated message. Do no reply to this message.</body></html>")
	set status=mailserver.Send(mail)
	q
.
CheckShutdownTime
 if $p($h,",",2)>=56400  {
		;w !,!,"SHUTDOWN TIME. QUITTING....",!,!
		s shutdown=0
	}
 q	

jxBiolytica1^MAC^^67172,12803.6581533^0
jxBiolytica1			; beta process for tokenization
	; NOT USING
	; call from ^jxBGTask
	s devMode = 1
	d INIT1^WSP999	; background task, so no %session or usernames
	#import MX
	i devMode=1 w !,"TRANSFORMING..."
	
	; loop through "User" to process multiple users
	; loop  is in ^jxBGTask
	s userid = 9 ; 1 for Biolytica, 9 for JondaX
	
	k buckets k bucketIds d GetBuckets	; get a list of Biolytica AWS buckets to process and set to array buckets
	q:'$d(buckets)
	s bkRoot=""
	
	s FileCounter=0
	
Step1
.
	; check subscription
	s TokenSubId = $$GetSubscription^jxSubscriptionUtils1(userid)
	if (TokenSubId = 0 ){
		i (devMode) { w "No subscription. Quitting..."}
		q
	}
	
	s downloadLimit = 10
.
	s bkRoot=$o(buckets(bkRoot)) 
	
GetNextFolder
.
	if (bkRoot = ""){
		i (devMode){w !,"NO MORE BUCKET TO PROCESS. QUITTING",!}
		if (CompanyName '= "JondaX"){
			i FileCounter>0 w "SendMail",! if (devMode) {w !,"sent review email to the reviewer team.",!}	;SendReviewMail^AutoMail 
		}
		
		q
	}	
		
	i (devMode){w !,"current Bucket: ",bkRoot,!}
	s bucketFolder = $o(buckets(bkRoot,""))
	i (devMode){w !,"current Folder: ",bucketFolder,!}
	s CliProfileName = $o(buckets(bkRoot,bucketFolder,""))
		
	if (bucketFolder = "-"){
		s bk = bkRoot
		s bksys = bk
	} else {
		s bk = bkRoot_"/"_bucketFolder
		s bksys = bkRoot_"\"_bucketFolder
	}	
		
	s systemDir = "c:\intersystems\cache\jondax\"
	s companyDir = systemDir_CompanyName_"\"
	if (bucketFolder '= "-"){
		d CreateDir(companyDir_"\"_bkRoot_"\")
	}
	s devDir = systemDir_CompanyName_"\"_bksys_"\"
	s stdDir = systemDir_CompanyName_"\"_bksys_"\stdOutputs\"
	s docDir = systemDir_CompanyName_"\"_bksys_"\documents\"
	s outputsDir = systemDir_CompanyName_"\"_bksys_"\outputs\"
	s resultsDir = systemDir_CompanyName_"\"_bksys_"\results\"
	
	d CreateDir(companyDir)
	d CreateDir(devDir)
	d CreateDir(stdDir)
	d CreateDir(docDir)
	d CreateDir(outputsDir)
	d CreateDir(resultsDir)
	
	s stagingBucket = "s3://"_bk_"/Staging/"
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"
	
	s textractBucketName = "jondaffr"
	s textractBucket = "s3://"_textractBucketName_"/"	
	
Step2
.
	try{	
		s stdoutDir = stdDir_"log.txt"
		s stderrDir = stdDir_"err.txt" 
	
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_"""" 
		s status = $ZF(-100, cmdflag, "aws","s3","ls", stagingBucket, "--profile",  CliProfileName)
		i (status = 0) { ; remove ghost files in s3 bucket
			
			s str = $$ReadFile(stdoutDir)
			s secLine = $p(str, $c(13,10), 2)
			if (secLine '= ""){
				w "Removing ghost files",!
				s status = $ZF(-100, cmdflag, "aws", "s3", "rm", stagingBucket, "--profile", CliProfileName)}
		} 
		
		s numOfDownloads = 0
		
Step2GetDocuments
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_"""" 
		s status = $ZF(-100, cmdflag, "aws","s3","ls", stagingBucket , "--profile", CliProfileName)
.
		s fileName = ""
		s fileName = $$ExtractFileNameFromBucketLog(stdoutDir)	
		
		i (devMode) {w !,"Number of downloads = ", numOfDownloads}
		
		i ((fileName = "") ! (numOfDownloads = downloadLimit)){ ;empty bucket returns as error
			i (devMode & (fileName = "")){w !,"EMPTY BUCKET"}	
			
			; recreating staging folder regardless of it exists or not
			i (fileName = "") {
				if (bucketFolder = "-"){s stagingFolder = "Staging/"} else {s stagingFolder = bucketFolder_"/Staging/"}
				s status = $ZF(-100, cmdflag, "aws","s3api","put-object", "--bucket" , bkRoot, "--key", stagingFolder, "--profile", CliProfileName)
			}
			
			;g Step5
			g SubscriptionCheck
		}
		
		if (devMode){w !,"current file name from bucket: ", fileName}
		
		s tempFile = $$ATTNAME^WSP999()
		
		g Step3PdfCheck
.
Step2InProgress	
		; copy file to dev env
		
		s fExt = $p(fileName,".",*)
		s status = $ZF(-100, cmdflag, "aws", "s3", "cp", stagingBucket_fileName, docDir_tempFile_"."_fExt, "--profile", CliProfileName)
		
		if (status '= 0){
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLIError", "JX2006","Step2InProgress^jxBiolytica",errData)
		}
		
		; obtain file binary
		s binaryFs = ##class(%Stream.FileBinary).%New()
		s binaryFs.Filename = docDir_tempFile_"."_fExt
		s binaryFs2 = ##class(%Stream.FileBinary).%New()
		WHILE 'binaryFs.AtEnd{
			s fileBinaryStream = binaryFs.Read()
			d binaryFs2.Write(fileBinaryStream)
		}
		d binaryFs2.%Save()
		s binaryName = binaryFs2.Filename
		; log the download to table
		s dt = $zdatetime($h,3)
		
		&sql(INSERT INTO MX.Record (OrgFile,Status, fExt,Profile,TempFile, CreatedDate, BucketName, BinaryData, BinaryName) VALUES (:fileName, 'In-Process', :fExt, :userid, :tempFile, :dt, :bk, :binaryFs2, :binaryName))
		
		; move file from staging to in-progress 
		s status = $ZF(-100, cmdflag, "aws", "s3", "mv", stagingBucket_fileName, inProcessBucket, "--profile", CliProfileName)
		if (status '= 0) {
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLIError", "JX2006","Step2InProgress^jxBiolytica",errData)
		}
		if (devMode){w !,"moved file to in-process"}
		/*;chekTokenrequired 
		s tokenCheck=$$CheckToken^martin3(userid,docDir_tempFile_"."_fExt)
		i tokenCheck=0 {
			s errData = "No enough subscription"
			s errCode = "JX2007"  ;need to create new errorcode
			s errName = $$GenerateErrorName^jxErrorReport(errCode)
			Throw ##class(%Exception.General).%New(errName,errCode ,"Step2InProgress^jxBiolytica",errData)
			w !,"No Transformation subscription. Getting Next Folder..."
			g NextFolder
				
				} */
	} catch(err){
		d ErrorHandler(err)
	}
	
	s numOfDownloads = +numOfDownloads + 1
	
	g Step2GetDocuments
	q
	
Step3PdfCheck
	try {
		; file usability check		
		s fExt = $p(fileName,".",*)
		s fileExtUpper = $zconvert(fExt, "U")
		
		i ((fileExtUpper'="PDF")&(fileExtUpper'="XLSX")&(fileExtUpper'="PNG")&(fileExtUpper'="JPG")&(fileExtUpper'="HEIC")&(fileExtUpper'="AVIF")&(fileExtUpper'="WEBP")&(fileExtUpper'="HL7") & (fileExtUpper'="XML") & (fileExtUpper'="JSON")) {
						
			i (devMode){w !,"Not supported file. Moving to Failure"}
			
			; log and report to the db table
			s dt = $zdatetime($h,3)
			&sql(INSERT INTO MX.Record (OrgFile,Status, fExt,Profile,TempFile, CreatedDate, ProcessedDate) VALUES (:fileName, 'Failure', :fExt, :userId, :tempFile, :dt, :dt))			
			&sql(SELECT ID INTO :rid FROM MX.Record WHERE OrgFile=:fileName AND TempFile=:tempFile)
			
			s errCode = "JX1002"
			s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
			s errName = $$GenerateErrorName^jxErrorReport(errCode)
			s errLocation = "Step3PdfCheck^jxBiolytica"
			&sql(INSERT INTO MX.Error (Code, Data, Name, Location, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :dt, :rid, :bk))
			
			; move file from staging to failure
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv", stagingBucket_fileName, failureBucket, "--profile", CliProfileName)
			i (status '= 0){
				s errData = $$ReadFile(stderrDir)
				s errCode = "JX2006"
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step3PdfCheck^jxBiolytica",errData)
			}
			g Step2GetDocuments
		}
	} catch(err){
		d ErrorHandler(err)
	}
	g Step2InProgress
	q
	
SubscriptionCheck
	i (devMode){
		w !,"Sub ID: ",TokenSubId
		}
		d SubscriptionPoolDetails^jxSubscriptionUtils1(userid)
		s TokenSubId = $$GetSubscription^jxSubscriptionUtils1(userid)
		&sql(SELECT TOP 1 ID INTO :nextrid FROM Record WHERE IsNull(ProcessedDate,'')='' AND OrgFile<>'' AND Status='In-Process' AND BucketName=:bk ORDER BY CreatedDate) 	
		i nextrid'=""{
		i TokenSubId '= 0 s TokenSubId=$$CheckToken^martin3(userid,docDir_tempFile_"."_fExt)
		e  s TokensRequired=0 g Step5 q
		}
		i TokenSubId = 0 
		{	s TokensRequired=0
			s errData = "No enough subscription"
			s errCode = "JX2007"  ;need to create new errorcode
			s errName = $$GenerateErrorName^jxErrorReport(errCode)
			s errLocation= "SubscriptionCheck^jxBiolytica1"
			d ##class(%Exception.General).%New(errName,errCode ,errLocation ,errData)
			&sql(INSERT INTO MX.Error (BucketName,Code, Data, Location, Name, CreatedDate) VALUES (:bk, :errCode, :errData, :errLocation, :errName, :dt))
			w !,"Not enough tokens. QUITTING..." q
			}
	
		
		
		/* 
		i $d(tokenCheck),tokenCheck=0 {
			s errData = "No enough subscription"
			s errCode = "JX2007"  ;need to create new errorcode
			s errName = $$GenerateErrorName^jxErrorReport(errCode)
			;Throw ##class(%Exception.General).%New(errName,errCode ,"SubscriptionCheck^jxBiolytica1",errData)
			w !,"No Transformation subscription2. Getting Next Folder..." q
			
		}
	*/
			
	/*s TokenSubId = $$GetSubscription^jxSubscriptionUtils1(userid)
	if (TokenSubId = 0 ){
		i (devMode) { w "No Transformation subscription. Quitting..."}
		; ENABLE THIS AFTER SUBSCRIPTION BUYING PAGE IS COMPLETED
		;d SendSubscriptionOverMail^jxSubscriptionUtils(contactEmail, contactPerson)
		q
	} 
	
	i (devMode){
		w !,"Sub ID: ",TokenSubId
	}
	d SubscriptionPoolDetails^jxSubscriptionUtils1(userid)
	*/
Step5
	
	try{ 
		
		s rid=""
		
		if (TokenSubId'=0){
			&sql(SELECT TOP 1 ID,TempFile,fExt, OrgFile INTO :rid,:tempFile, :fExt, :fileName FROM Record WHERE IsNull(ProcessedDate,'')='' AND OrgFile<>'' AND Status='In-Process' AND BucketName=:bk ORDER BY CreatedDate) 
		}
		elseif(TokenSubId=0),(nextrid'=""){	
			&sql(SELECT TOP 1 ID,TempFile,fExt, OrgFile INTO :rid,:tempFile, :fExt, :fileName FROM Record WHERE IsNull(ProcessedDate,'')='' AND OrgFile<>'' AND Status='In-Process' AND BucketName=:bk ORDER BY CreatedDate) 			
			s errData = "No enough subscription"
			s errCode = "JX2005"  ;need to create new errorcode
			s errName = $$GenerateErrorName^jxErrorReport(errCode)
			s errLocation= "Step5-1^jxBiolytica1"
			Throw ##class(%Exception.General).%New(errName,errCode ,errLocation ,errData)  
			
		}
		else {
			if (devMode) {
				s errData = "No enough subscription"
				s errCode = "JX2004"  ;need to create new errorcode
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				s errLocation= "Step5-2^jxBiolytica1"
				Throw ##class(%Exception.General).%New(errName,errCode ,errLocation ,errData)
				;&sql(INSERT INTO MX.Error (Code, Data, Location, Name, CreatedDate) VALUES (:errCode, :errData, :errLocation, :errName, :dt))
				w !,"No subscription available. Quitting..." }
		}
.
		w !,"RID: ",rid,!
Step5ProcessFile
		if rid="" {
			i (devMode) {w !,"NO MORE FILE TO PROCESS.",!}
			
			i (numOfDownloads = downloadLimit){
				g Step2
			} else {
				d ^jxErrorReport 
				
				k buckets(bkRoot,bucketFolder)
				
				if ($d(buckets(bkRoot)) = 11){g GetNextFolder}
				else {
					k buckets(bkRoot)
					s bkRoot="" 
			
					g Step1
				}
			}
		}
		
		s FileCounter=1
		
		s maxFileSize = 4999999 ;5MB
		s fileSize =  ##class(%File).GetFileSize(docDir_tempFile_"."_fExt)
		if (fileSize > maxFileSize){
			s errCode = "JX1003"
			s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
			s errName = $$GenerateErrorName^jxErrorReport(errCode)
			Throw ##class(%Exception.General).%New(errName,errCode,"Step5ProcessFile^jxBiolytica1",errData)
		}
		
		; insert resultbloodtest
		&sql(INSERT INTO ResultBloodTest (Record,Type) VALUES (:rid, 'Blood Test'))
		
		s ext=$zconvert(fExt,"U")
		if (ext = "PDF"){
	 
			d ^jxAWSBGa
			&sql(SELECT OCR INTO :ocrstr FROM Record WHERE ID=:rid)
			/*	; commented by DW 2024-01-30 to bypass AWS textract slow return of values
			if ($L(ocrstr) = 0){
				s errCode = "JX2003"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step5ProcessFile^jxBiolytica",errData)
			}
			*/ 
			 d ^jxShowResults
		}
		if (ext = "XLSX"){
			s filePath = docDir_tempFile_"."_fExt
			
			d ^jxAWSBGXLSX
		
		}
		if (ext="PNG")!(ext="JPG")!(ext="HEIC")!(ext="AVIF")!(ext="WEBP"){
			
			if (ext'="PNG"){ ; change format to png
				s cmd="mogrify -format png "_docDir_tempFile_"."_fExt
				s x=$zf(-1,cmd_" && exit")	
				d ##class(%File).Delete(docDir_tempFile_"."_fExt)
				s fExt = "png"
			}
			&sql(Update Record SET PageCount ='1' WHERE id=:rid)
			s OCRstr = $$jxOCRPNG^jxOCRPNG(docDir_tempFile_"."_fExt)
			
			i ((OCRstr '["WORD") ! (OCRstr '["LINE")){
				s errCode = "JX2005"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step5ProcessFile^jxBiolytica",errData)
			}
			
			i ($L(OCRstr)=0){
				s errCode = "JX2003"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step5ProcessFile^jxBiolytica",errData)
			}
			i (OCRstr="FAILURE"){
				s errCode = "JX2001"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode,"Step5ProcessFile^jxBiolytica",errData)
			}
			d OCR2Table^jxOCRPNG(OCRstr, rid)
			d GPT^utilAWS(rid)
			d ^jxShowResults
		}
		if (ext="HL7"){
			s HL7StandardizedStr = $$StandardizeHL7^jxSDAToResults(docDir_tempFile_"."_fExt)
			s SDAStr = $$HL7ToSDA^jxSDAToResults(HL7StandardizedStr)
			s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
			d jxSDAToResults^jxSDAToResults(sda, rid, 1)
		}
		if (ext="JSON"){
			s SDAStr = $$FHIRJsonToSDA^jxSDAToResults(docDir_tempFile_"."_fExt)
			s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
			d jxSDAToResults^jxSDAToResults(sda, rid, 1)
		}
		if (ext= "XML"){
			s fContent = $$ReadFile(docDir_tempFile_"."_fExt)
			if (fContent["ClinicalDocument"){
				; CDA
				s SDAStr = $$CDAToSDA^jxSDAToResults(docDir_tempFile_"."_fExt)
				s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
				d jxSDAToResults^jxSDAToResults(sda, rid, 1)
			}
			elseif (fContent["Bundle"){
				; FHIR
				s SDAStr = $$FHIRXmlToSDA^jxSDAToResults(docDir_tempFile_"."_fExt)
				s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
				d jxSDAToResults^jxSDAToResults(sda, rid, 1)
			}
			else {
				s errCode = "JX1007"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk,"Neither CDA or FHIR file")
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step5ProcessFile^jxBiolytica",errData)
			}
		}
		
		s processedDate = $zdatetime($h,3)
		&sql(UPDATE MX.Record SET ProcessedDate=:processedDate WHERE ID = :rid)
		
		// update the subscription pool
		s recordPageCount = 0
		&sql(SELECT Status, PageCount, fExt INTO :recordStatus, :recordPageCount, fileExtension FROM Record WHERE id = :rid)
		if (recordStatus = "In-Process"){
			&sql(UPDATE Record SET Status='Completed' WHERE id=:rid)  ;remove when this goes live
			s status = $$DeductUnit^jxSubscriptionUtils1(TokenSubId, TokensRequired)
			&sql(INSERT INTO TokenUsage(Record,TokenCount,OCRUnit,TransUnit) VALUES(:rid,:TokensRequired,:OCRUnit,:transToken))
			/*s status1 = $$DeductUnit^jxSubscriptionUtils(TokenSubId, "T", 1)
			if ((fileExtension ="pdf") ! (fileExtension = "jpeg") ! (fileExtension="png") ! (fileExtension="heic") ! (fileExtension = "avif" ) ! (fileExtension = "webp")){
				s status2 = $$DeductUnit^jxSubscriptionUtils(OcrSubId, "O", +recordPageCount)
			} */
			d AdjustSubscriptionPool^jxSubscriptionUtils1(userid)
		}
		
		d ##class(%File).Delete(docDir_tempFile_"."_fExt)
		
		i (devMode){ w !,"DONE PROCESSING - RID: ",rid, "  ","RBT: ",rbt, "  ProcessedDate: ", processedDate,!}
		
		s errorCSV = $$GenerateErrorReportByRid^jxErrorReport(rid)
		if (errorCSV '=0){
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",errorCSV, failureBucket, "--profile", CliProfileName)
			d ##class(%File).Delete(errorCSV)
		}
	} catch(err){
		d ErrorHandler(err)
	}
	;g Step5	; get next file
.
	g SubscriptionCheck
	
GetBuckets
	; NOTE: WE NEED TO CREATE A TABLE TO STORE BUCKET NAMES AND DETAILS
	; get list of Biolytica root buckets
	&sql(SELECT Setting, CompanyName,  ContactPerson, Email INTO :setting, :CompanyName, :contactPerson, :contactEmail FROM "User" WHERE ID=:userid)
	i (devMode) {w !, "Setting ID: ",setting, !,"CompanyName: ",CompanyName,!}
	&sql(DECLARE cBucket CURSOR FOR
		SELECT Buckets_Name, Buckets_Folder, Buckets_CliProfileName
		INTO :r2, :bfd, :bcp
		FROM Setting_Buckets
		WHERE Setting=:setting AND Buckets_Name='jondatesting'   
	)  ;Buckets_Type['Transformation'
	&sql(OPEN cBucket)
	&sql(FETCH cBucket)
	WHILE SQLCODE=0{
		s buckets(r2)=""
		s buckets(r2, bfd) = ""
		s buckets(r2, bfd, bcp) = ""
		&sql(FETCH cBucket)
	}
	&sql(CLOSE cBucket)
	q
END
	;cleanup and quit
	
	return
	
CreateDir(dirFullPath)
	try{
		if (##class(%File).DirectoryExists(dirFullPath) = 0){
			d ##class(%File).CreateDirectory(dirFullPath)
		}
	} catch(err){
		d ErrorHandler(err)
	}
	q
.
	
ExtractFileNameFromBucketLog(logPath)
	s str = $$ReadFile(logPath)
	s topLine = $p(str, $c(13,10), 1)
	s fileName = $E(topLine, 32,*)
	q fileName
	
ReadFile(fileFullPath)
	
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = fileFullPath
	try {
		s str = fs.Read($$$MaxLocalLength)
	}catch(err){
		d ErrorHandler(err)
	}
	q str
.
ExtractJobId(fullFilePath)
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = fullFilePath
	s str = fs.Read($$$MaxLocalLength)
	i (str=""){
		q ""
	}
	s jobIdObj = ##class(%DynamicAbstractObject).%FromJSON(str)
	s jobId = jobIdObj."JobId"
	q jobId
	
	
ErrorHandler(err)
		
	s dt = $zdatetime($h, 3)
	
	i (devMode){
		w !,"------ ERROR MESSAGE ------"
		w !,"Name: ",err.Name
		w !,"Code: ",err.Code
		w !,"Location: ",err.Location
		w !,"Data: ",err.Data
		w !,"------ END ERROR MESSAGE ------"
	}
	;d ErrorMail
	i err.Name="" {s errName=""} else {s errName=err.Name}
	i err.Location="" {s errLocation=""} else {s errLocation = err.Location}
	i err.Code ="" {s errCode=""} else {s errCode = err.Code}
	i err.Data ="" {s errData=""} else {s errData = err.Data}
	i err.iStack="" {s erriStack=""} else {s erriStack = err.iStack}
	i ($d(tempFile) && $L(tempFile)>0){
		if (($d(rid)) && (rid="")){s bucketName = "" s recordName = "" } else {s bucketName = bk s recordName=fileName}
		&sql(INSERT INTO MX.Error (Code, Data, Name, Location, Stack, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :erriStack, :dt, :rid, :bucketName))
		
		&sql(UPDATE MX.Record SET Status='Failure', ProcessedDate=:dt WHERE ID = :rid)
		s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",inProcessBucket_fileName, failureBucket, "--profile", CliProfileName)
		
		s errorCSV = $$GenerateErrorReportByRid^jxErrorReport(rid)
		if (errorCSV '=0){
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",errorCSV, failureBucket, "--profile", CliProfileName)
			d ##class(%File).Delete(errorCSV)
		}
		
		d CleanFiles(rid)
		d StripTables(rid)
		
	} else {
		&sql(INSERT INTO MX.Error (Code, Data, Location, Name, Stack, CreatedDate) VALUES (:errCode, :errData, :errLocation, :errName, :erriStack, :dt))
	}
	
	
	hang 1
	q
	
CleanFiles(rid)
	q
	&sql(SELECT TempFile,fExt, OrgFile,Profile->CompanyName,BucketName INTO :tempFile,:ext,:fileName, :comName, :bkName FROM Record WHERE ID=:rid)
	
	s resDir = "C:\InterSystems\Cache\JondaX\"_comName_"\"_$replace(bkName,"/","\")_"\results\"
	s dcDir = "C:\InterSystems\Cache\JondaX\"_comName_"\"_$replace(bkName,"/","\")_"\documents\"
	
	s file=resDir_tempFile_"."_ext
	d ##class(%File).Delete(file)
	s file=dcDir_tempFile_"."_ext
	d ##class(%File).Delete(file)
	s file=dcDir_tempFile_"\"
	d ##class(%File).RemoveDirectoryTree(file)
	s tRS=##class(%ResultSet).%New("%Library.File:FileSet")
	s tStatus=tRS.Execute(resDir)    
	while (tRS.Next()){
		d ##class(%File).Delete(tRS.Get("Name"))
	}
	
	q	
	
	
StripTables(rid)
	#import MX
	&sql(SELECT ID INTO :rbt From ResultBloodTest WHERE Record->ID=:rid)
	&sql(SELECT BinaryName INTO :binaryName FROM Record WHERE ID=:rid)
	&sql(DELETE FROM ResultBloodTest_Tests WHERE ResultBloodTest = :rbt)
	&sql(DELETE FROM ResultBloodTest WHERE Record->ID=:rid)
	//&sql(UPDATE Record SET BinaryData=NULL, OrgFile=NULL, OCR=NULL, BinaryName=NULL WHERE ID = :rid)
	&sql(UPDATE Record SET BinaryData=NULL, OCR=NULL, BinaryName=NULL WHERE ID = :rid)
	d ##class(%File).Delete(binaryName)
	q
.
.
CLEANALLTABLES ; only for testing, DO NOT USE THIS
	q
	&sql(DELETE FROM Record)
	&sql(DELETE FROM ResultBloodTest)
	&sql(DELETE FROM ResultBloodTest_Tests)
	&sql(DELETE FROM Error)
.
	s CliProfileName = "default"
	s bk = "jondaffr2"
	s CompanyName = "JondaX"
	s systemDir = "c:\intersystems\cache\jondax\"
	s cmdflag = "/SHELL"
	s devDir = systemDir_CompanyName_"\"_bk_"\"
	
	s stagingBucket = "s3://"_bk_"/Staging/"
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"
.
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", inProcessBucket, "--profile", CliProfileName)
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", failureBucket, "--profile", CliProfileName)
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", completedBucket, "--profile", CliProfileName)
.
	d ##class(%File).RemoveDirectoryTree(devDir)
.
	q
ErrorMail
	q	; Notify Jonda of error
	s EmailAddress="notifications@jonda.health"
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	do mail.Cc.Clear()
	do mail.Cc.Insert("nan@jonda.health")
	set mail.Subject="ERROR JondaX Frankfurt ^jxBiolytica encountered an error"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	set status=mail.TextData.Write("<html><body>------ ERROR MESSAGE ------<br><br>RecId: "_$g(rid)_"<br>Name: "_err.Name_"<br>Code: "_err.Code_"<br>Location: "_err.Location_"<br>Data: "_err.Data_"<br><br>This is an automated message. Do no reply to this message.</body></html>")
	set status=mailserver.Send(mail)
	q
.

jxBuckets^MAC^^67163,57753.5876282^0
jxBuckets		; not using, old routine for jxS3Upload.csp
InitMe
	#import MX
	d INIT1^CSP999
	s UserID=$g(%session.Data("UserID"))
	/*
	s (setting,bk,bkfd)=""
	&sql(SELECT Setting->ID INTO :setting FROM "User" WHERE ID=:UserID)
	&sql(SELECT Top 1 Buckets_Name,Buckets_Folder INTO :bk,:bkfd FROM Setting_Buckets WHERE Setting=:setting ORDER BY Buckets_Name DESC)
	&js<document.querySelector(".bucket-name").innerHTML="#(bk)#">
	
	if bkfd'="-" s ^jxS3Bk(UserID)=bk_"/"_bkfd
	e  s ^jxS3Bk(UserID)=bk
	*/
	&js<document.getElementById("iFrame1").src="jxS3Upload1.csp">
	s ^jxS3Upload(UserID,"Upload","Success")=0
	s ^jxS3Upload(UserID,"Upload","Fail")=""
	q	
	
UploadFiles
	#import MX
	d INIT^WSP999
	s UserID=$g(%session.Data("UserID"))
	s FName=%request.Data("FName",1)
	s stream=##class(%Stream.FileBinary).%New()
	s x=""
	while 1{
		s bytes=%request.MimeData("fileupload",1).Read(.a)
		;s bytes=%request.MimeData("fileupload",1).Read(fsize)
		d stream.Write(bytes)
		quit:%request.MimeData("fileupload",1).AtEnd
		s x=x+bytes
	}
	d stream.%Save()
	s %dev="c:\intersystems\cache\jondax\S3\ad-hoc\"_UserID
	d CreateDir(%dev)
	s %dev="c:\intersystems\cache\jondax\S3\ad-hoc\"_UserID_"\Upload"
	d CreateDir(%dev)
	s %dev1=%dev_"\"_FName
	o %dev1:"wns" u %dev1
	s output=stream.OutputToDevice()
	c %dev1
	/*
	;s sts1 = ##class(python.s3Utils).uploadFile(CliProfileName, %dev, bk, destinationFolderStaging)
	s sts1 = ##class(python.s3Utils).uploadFile(CliProfileName, UserID, bk, destinationFolderStaging, %dev)
	i (+sts1=0) s ^jxS3Upload(UserID,"Upload","Fail")=$g(^jxS3Upload(UserID,"Upload","Fail"))_FName_","
	e  s ^jxS3Upload(UserID,"Upload","Success")=$g(^jxS3Upload(UserID,"Upload","Success"))+1
	d ##class(%File).Delete(%dev1)
	*/
	q
	
S3Upload
	s UserID=$g(%session.Data("UserID"))
	n userSetting,CliProfileName
	s dir="c:\intersystems\cache\jondax\S3\ad-hoc\"_UserID_"\Upload"
	&sql(SELECT Setting INTO :userSetting FROM "User" WHERE ID=:UserID)
	&sql(SELECT Buckets_Name,Buckets_Folder, Buckets_CliProfileName 
		 INTO :bkn,:bkfd,:CliProfileName 
		 FROM MX.Setting_buckets  
		 WHERE setting=:userSetting)
	if userSetting=5 s bkn="jondatesting",bkfd="-"
	s bk= bkn_"/"_bkfd
	
	
	if (bkfd'["-"){
		s destinationFolderStaging = $p(bk,"/",2,*)_"/Failure"
		;s bk = $p(bk,"/",1)	
	} else {
		s destinationFolderStaging = "Failure"
	}
	d FileCount(dir)
	s sts1 = ##class(python.s3Utils).uploadMultiFiles(CliProfileName, UserID, bkn, destinationFolderStaging, dir)
	i (+sts1>0) s ^jxS3Upload(UserID,"Upload","Success")= sts1
	e  s ^jxS3Upload(UserID,"Upload","Fail")="Files upload failed"
	;d ##class(%File).RemoveDirectoryTree(%dev)
	q	
	
FileCount(path)
	s tries=0
	s fCount= ##class(python.pdfhandler).fileCount(path)
	while tries<5,(fCount+1)'= d1  {
		s fCount= ##class(python.pdfhandler).fileCount(path)
		&js<console.log("f count is "+`#(fCount)#`)> h 3
		s tries=tries+1
	}
	q
CreateDir(dirFullPath)
	if (##class(%File).DirectoryExists(dirFullPath) = 0){
		d ##class(%File).CreateDirectory(dirFullPath)
	}
	q	
	
	
WriteBuckets ;not using
	#import MX
	d INIT1^CSP999
	s UserID=$g(%session.Data("UserID"))
	;s UserID=1
	s (setting,bk,bkfd)=""
	&sql(SELECT Setting->ID INTO :setting FROM "User" WHERE ID=:UserID)
	
	&sql(DECLARE CT CURSOR FOR
		SELECT Buckets_Name,Buckets_Folder 
		INTO :bk,:bkfd
		FROM Setting_Buckets
		WHERE ISNULL(Buckets_DeletedDate,'')='' AND Setting=:setting
		ORDER BY Buckets_Name
	)
	&sql(OPEN CT)
	&sql(FETCH CT)
	WHILE SQLCODE=0{
		if bkfd="-" w "<li onclick='changeBK(event)'>"_bk_"</li>"
		e  w "<li onclick='changeBK(event)'>"_bk_"/"_bkfd_"</li>"
		&sql(FETCH CT)
	}
	&sql(CLOSE CT)
	q	

jxChangePassword^MAC^^67176,43127.9865771^0
jxChangePassword
	q
CheckNUpdatePW
	// Checks and update password
	#import MX
	d INIT^WSP999
	&sql(SELECT count(*)
		INTO :loginCount
		FROM User_LastLogin
		WHERE "User"=:UserID)
		
	&sql(SELECT Count(ID) INTO :count FROM "User" WHERE ID=:UserID AND %Exact(Password)=:d1)
	if (count=0){
		&js<document.getElementById("org-pass").querySelector(".error-text").classList.add("active")>
		q
	}
	//Update password SQL and alert messages
	&sql(UPDATE "User" SET Password=:d2 WHERE ID=:UserID)
	if (SQLCODE=0){
		if loginCount=1 &js<document.getElementById("popup1").classList.remove("inactive")>
		e  &js<document.getElementById("popup").classList.remove("inactive")>
		q
	}
	else{
		&js<alert("Some errors occur while updating the password")>
	}
	q

jxConvertResultTable^MAC^^66736,39924.7588314^0
jxConvertResultTable
InitMe
	#import MX
	d INIT^WSP999
	s downloadFileType = $g(%session.Data("jxFormat"))
	&js<document.getElementById("file-type").innerHTML = "#(downloadFileType)#">
	i $d(^DoNotShow("ConvertResultTable",UserID)) &js<DoNotShow=1>
	q
WriteTable
	#import MX
	d INIT^WSP999
	for index=1:1:%session.Data("jxTransform","Count"){
		s resultValue = $g(%session.Data("jxTransform",index,"ResultValue"))
		s resultUnits = $g(%session.Data("jxTransform",index,"ResultValueUnits"))
		s resultRange = $g(%session.Data("jxTransform",index,"ResultNormalRange"))
		s code = $g(%session.Data("jxTransform",index,"Code"))
		s name = $g(%session.Data("jxTransform",index,"Description"))
		if ($FIND(resultValue,"Comment") '= 0){
		}
		elseif (code="15430-2"){
		}
		else{
			if (%session.Data("jxTransform",index,"SIName")=""){
				&sql(SELECT SIName into :d1 FROM DiagnosticTest WHERE Name=:name OR Name=:code)
				s %session.Data("jxTransform",index,"SIName") = d1
			}
			write "<tr data-key='" 
			write index
			write "'>"
			write "<td class='orgName'>"
			if (%session.Data("jxTransform",index,"OrgCode")'=%session.Data("jxTransform",index,"OrgDescription")){
				write %session.Data("jxTransform",index,"OrgCode")_" "_%session.Data("jxTransform",index,"OrgDescription")
			}
			else{
				write %session.Data("jxTransform",index,"OrgDescription")
			}
		    write "</td>"
		    write "<td class='name' onclick='openDropdown(event)'>"
		    write "<div class='collapse'>"
		    write "<div class='text'>"
		    if (code'=name){
		    	write code_" "_name
		    }
		    else{
			    write name
		    }
		    write "</div><img src='./assets/images/dropDownBlack.png' alt='DropDown'>"
		    write "</div>"
		    write "<div class='collapse-data'>"
		    write "<ul>"
			d LOINCName^jxConvertResultTable(index)
		    write "</ul>"
		    write "</div>"
		    write "</td>"
			write "<td class='orgUnit'>"
			write %session.Data("jxTransform",index,"OrgResultValueUnits")
		    write "</td>"
		    if (resultUnits = ""){
			    write "<td class='units'></td>"
		    }
		    else{
		    	write "<td class='units' onclick='openDropdown(event)'>"
		    	write "<div class='collapse'>"
		    	write "<div class='text'>"
		    	write resultUnits
		    	write "</div><img src='./assets/images/dropDownBlack.png' alt='DropDown'>"
		    	write "</div>"
		    	write "<div class='collapse-data'>"
		    	write "<ul>"
				d SIUnit^jxConvertResultTable(index)
		    	write "</ul>"
		    	write "</div>"
		    	write "</td>"
		    }
		    write "<td class='value'>"
		    write $$FormatNumber(resultValue)
		    write "</td>"
		    write "<td class='range'>"
			write $$FormatNumber($p(resultRange,"-",1))_"-"_$$FormatNumber($p(resultRange,"-",2))
			write "</td>"
			write "</tr>"
		}
		}
	q
WriteTable1
	#import MX
	d INIT^WSP999
	for index=1:1:%session.Data("jxTransform","Count"){
		s resultValue = $g(%session.Data("jxTransform",index,"ResultValue"))
		s resultUnits = $g(%session.Data("jxTransform",index,"ResultValueUnits"))
		s resultRange = $g(%session.Data("jxTransform",index,"ResultNormalRange"))
		s code = $g(%session.Data("jxTransform",index,"Code"))
		s name = $g(%session.Data("jxTransform",index,"Description"))
		if ($FIND(resultValue,"Comment") '= 0){
		}
		elseif (code="15430-2"){
		}
		else{
			if (%session.Data("jxTransform",index,"SIName")=""){
				&sql(SELECT SIName into :d1 FROM DiagnosticTest WHERE Name=:name OR Name=:code)
				s %session.Data("jxTransform",index,"SIName") = d1
			}
			write "<tr data-key='" 
			write index
			write "'>"
			write "<td class='orgName'>"
			if (%session.Data("jxTransform",index,"OrgCode")'=%session.Data("jxTransform",index,"OrgDescription")){
				write %session.Data("jxTransform",index,"OrgCode")_" "_%session.Data("jxTransform",index,"OrgDescription")
			}
			else{
				write %session.Data("jxTransform",index,"OrgDescription")
			}
			write "</td>"
		    write "<td class='name' onclick='openDropdown(event)'>"
		    write "<div class='collapse'>"
		    write "<div class='text'>"
		    if (code'=name){
		    	write code_" "_name
		    }
		    else{
			    write name
		    }
		    write "</div><img src='./assets/images/dropDownBlack.png' alt='DropDown'>"
		    write "</div>"
		    write "<div class='collapse-data'>"
		    write "<ul>"
			d LOINCName^jxConvertResultTable(index)
		    write "</ul>"
		    write "</div>"
		    write "</td>"
			write "<td class='orgUnit'>"
			write %session.Data("jxTransform",index,"OrgResultValueUnits")
		    write "</td>"
		    if (resultUnits = ""){
			    write "<td class='units'></td>"
		    }
		    else{
		    	write "<td class='units' onclick='openDropdown(event)'>"
		    	write "<div class='collapse'>"
		    	write "<div class='text'>"
		    	write resultUnits
		    	write "</div><img src='./assets/images/dropDownBlack.png' alt='DropDown'>"
		    	write "</div>"
		    	write "<div class='collapse-data'>"
		    	write "<ul>"
				d SIUnit^jxConvertResultTable(index)
		    	write "</ul>"
		    	write "</div>"
		    	write "</td>"
		    }
		    
		    write "<td class='value'>"
		    write $$FormatNumber(resultValue)
		    write "</td>"
		    write "<td class='range'>"
			write $$FormatNumber($p(resultRange,"-",1))_"-"_$$FormatNumber($p(resultRange,"-",2))
			write "</td>"
			write "</tr>"
		}
		}
	q
SIUnit(index)
	#import MX
	d INIT^WSP999
	k arrSIUnit
	s SIName=$g(%session.Data("jxTransform",index,"SIName"))
	&sql(DECLARE C1 CURSOR FOR
		SELECT ToUnit
		INTO :d1
		FROM SIUnitConversion  
		WHERE DiagnosticTest=:SIName AND IsNull(ToUnit,'')<>''
		ORDER BY 1
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	if SQLCODE'=0{
		; check if not SIName
		&sql(DECLARE C1A CURSOR FOR
			SELECT Name 
			INTO :d1a
			FROM DiagnosticTest
			WHERE SIName=:SIName
		)
		&sql(OPEN C1A)
		&sql(FETCH C1A)
		WHILE SQLCODE=0{
			&sql(DECLARE C1B CURSOR FOR
				SELECT ToUnit
				INTO :d1b
				FROM SIUnitConversion  
				WHERE DiagnosticTest=:d1a AND IsNull(ToUnit,'')<>''
				ORDER BY 1
			)
			&sql(OPEN C1B)
			&sql(FETCH C1B)
			WHILE SQLCODE=0{
		   		i '$d(arrSIUnit(d1b)) write "<li onclick='jChangeUnit(event)'>",d1b,"</li>"
		   		s arrSIUnit(d1b)=""
		    	&sql(FETCH C1B)
			}
			&sql(CLOSE C1B)
			&sql(FETCH C1A)
		}
		&sql(CLOSE C1A)
		; end check
		i '$d(arrSIUnit) write "<li class='no-result'>No Units</li>"
		q
	}
	WHILE SQLCODE=0{
   		i '$d(arrSIUnit(d1)) write "<li onclick='jChangeUnit(event)'>",d1,"</li>"
		s arrSIUnit(d1)=""
    	&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	q
LOINCName(index)
	#import MX
	d INIT^WSP999
	s SIName=$g(%session.Data("jxTransform",index,"SIName"))
	s nomenclature=%session.Data("jxNomenclature")
	s resultCount=0
	if (nomenclature="LOINC"){
		&sql(DECLARE C4 CURSOR FOR
			SELECT Name 
			INTO :d4
			FROM DiagnosticTest 
			WHERE SIName=:SIName
		)
		&sql(DECLARE C2 CURSOR FOR
			SELECT LOINCNUM,COMPONENT,LONGCOMMONNAME
			INTO :d1,:d2,:d3
			FROM LOINC 
			WHERE LOWER(COMPONENT)[LOWER(:d4)
			AND CLASSTYPE=1
			AND (ORDEROBS='Both' OR (ORDEROBS='Observation'))
			AND SCALETYP='Qn'
			AND ((SYSTEM='RBC') OR (SYSTEM['Ser') OR (SYSTEM['Bld') AND (SYSTEM NOT['Urine'))
			ORDER BY 1
		)
		;			WHERE COMPONENT[(SELECT Name FROM DiagnosticTest WHERE SIName=:SIName)
		&sql(OPEN C4)
		&sql(FETCH C4)
		WHILE SQLCODE=0{
			&sql(OPEN C2)
			&sql(FETCH C2)
			WHILE SQLCODE=0{
				write "<li onclick='jChangeName(event)' title='"_$$C2H^WSP999(d3)_"'>",d1," ",d2,"</li>"
    			s resultCount=resultCount+1
    			&sql(FETCH C2)
			}
			&sql(CLOSE C2)
			&sql(FETCH C4)
		}
		&sql(CLOSE C4)
		s d4=SIName
		&sql(OPEN C2)
		&sql(FETCH C2)
		WHILE SQLCODE=0{
			write "<li onclick='jChangeName(event)' title='"_$$C2H^WSP999(d3)_"'>",d1," ",d2,"</li>"
    		s resultCount=resultCount+1
    		&sql(FETCH C2)
		}
		&sql(CLOSE C2)
		if (resultCount=0){
			write "<li class='no-result'>No Result Found</li>"
		}
	}
	elseif (nomenclature="SNOMED"){
		write "<li class='no-result'>No Result Found</li>"
	}
	else{
		&sql(OPEN C4)
		&sql(FETCH C4)
		if SQLCODE'=0{
			write "<li class='no-result'>No Result Found</li>"
		}
		WHILE SQLCODE=0{
			write "<li onclick='jChangeName(event)'>",d4,"</li>"
    		&sql(FETCH C4)
		}
		&sql(CLOSE C4)
	}
	q
ChangeUnit
	#import MX
	d INIT^WSP999
	s fromUnit = $REPLACE($g(%session.Data("jxTransform",d2,"ResultValueUnits")),"*","^")
	s range = $g(%session.Data("jxTransform",d2,"ResultNormalRange"))
	s value = $g(%session.Data("jxTransform",d2,"ResultValue"))
	s SIName = $g(%session.Data("jxTransform",d2,"SIName"))
	s cValue=$$U2U^WSP999(SIName,value,fromUnit,d1)
	s cRangeV1=$$U2U^WSP999(SIName,$p(range,"-",1),fromUnit,d1)
	s cRangeV2=$$U2U^WSP999(SIName,$p(range,"-",2),fromUnit,d1)
	s %session.Data("jxTransform",d2,"ResultValueUnits") = d1
	s %session.Data("jxTransform",d2,"ResultValue") = cValue
	s %session.Data("jxTransform",d2,"ResultNormalRange") = cRangeV1_"-"_cRangeV2
	d ModifySDA^jxDataTransform
	&js<
	let tr = document.querySelector('[data-key="' + #(d2)# + '"]')
	tr.querySelector('.units .text').innerText = "#(d1)#";
	tr.querySelector('.units .text').style.fontWeight = 600;
	tr.querySelector('.value').innerText = "#($$FormatNumber(cValue))#";
	tr.querySelector('.value').style.fontWeight = 600;
	tr.querySelector('.range').innerText = "#($$FormatNumber(cRangeV1))#"+"-"+"#($$FormatNumber(cRangeV2))#"
	tr.querySelector('.range').style.fontWeight = 600;
	>
	q
	
ChangeName
	#import MX
	d INIT^WSP999
	s nomenclature=%session.Data("jxNomenclature")
	if (nomenclature="LOINC"){
		s %session.Data("jxTransform",d2,"Code") = $p(d1," ",1)
		s %session.Data("jxTransform",d2,"Description") = $p(d1,%session.Data("jxTransform",d2,"Code"),2)
	}
	elseif (nomenclature="Custom"){
		s %session.Data("jxTransform",d2,"Code") = d1
		s %session.Data("jxTransform",d2,"Description") = d1
	}
	d ModifySDA^jxDataTransform
	&js<
	let tr = document.querySelector('[data-key="' + #(d2)# + '"]')
	tr.querySelector('.name .text').innerText = "#(d1)#";
	tr.querySelector('.name .text').style.fontWeight = 600;
	>
	q
.
GetDifferentUnits
	#import MX
	d INIT^WSP999
	&sql(
		DECLARE C3 CURSOR FOR
		SELECT T1.SIUnit, T2.FromUnit, T1.SIName
		INTO :d1,:d2,:d3 
		FROM DiagnosticTest T1 
		INNER JOIN SIUnitConversion T2 
		ON T1.SIName = T2.DiagnosticTest
		WHERE T1.SIUnit != T2.FromUnit 
		GROUP BY(T1.SIName)
	)
	&sql(OPEN C3)
	&sql(FETCH C3)
	WHILE SQLCODE=0{
		w "SI Unit: "_d1_" | From Unit: "_d2_" | SI Name: "_d3,!
		&sql(FETCH C3)
	}
	&sql(CLOSE C3)
	q
.
FormatNumber(num)
	#import MX
	d INIT^WSP999
	if (num<1){
		if ($NUMBER(num)=0){
			s num = 0
		}
		else{
			s num = "0"_$NUMBER(num,2)
		}
	}
	else{
		s num = $NUMBER(num,2)
	}
	q num
	
ConvertResults
	#import MX
	d INIT^WSP999
	d ModifySDA^jxDataTransform
	s d1=$g(%session.Data("jxFormat"))
	s orgFileName=%session.Data("jxUploadRecord","fext")
	if (d1="FHIR xml"){
		d SDAToFHIRXml^jxDataTransform
	}
	elseif (d1="FHIR json"){
		d SDAToFHIRJson^jxDataTransform
	}
	elseif (d1="C-CDA"){
		d SDAToCDA^jxDataTransform
	}
	elseif (d1="HL7"){
		d SDAToHL7^jxDataTransform
	}
	s rid = %session.Data("jxTransform","rid")
	if ($LENGTH(%session.Data("jxTransform","downloadStr"))>0){
		s dt = $zdatetime($h,3)
		s uid = %session.Data("UserID")
		&sql(UPDATE MX.Record SET Status='Completed', ReviewedDate=:dt, ReviewedBy=:UserID WHERE ID = :rid)
	}
	else{
		//Failure
	}
	&js<fileType ='#(d1)#'>
	&js<formalFileExt = '#(orgFileName)#'>
	q
DoNotShow
	#import MX
	d INIT^WSP999
	s ^DoNotShow("ConvertResultTable",UserID)=$h
	q	

jxDashboard^MAC^^67164,56410.1948599^0
jxDashboard		; not use , using jxDashboard2
InitMe
	#import MX
	d INIT^WSP999
	s id=$g(%session.Data("UserID"))
	//Activity Chart
	&sql(
		SELECT count(*)
		INTO :r1
		FROM Record
		WHERE Profile=:id
		AND status='Completed'
	)
	&js<
	document.getElementById("total-trans-count").innerHTML="#(r1)#";
	localStorage.setItem("trans-count",#(r1)#);
	>
	if (r1>0){
		s d1=0
		WHILE d1>-5{
		&sql(
			SELECT count(*),Convert(char(3), DateAdd(Month,:d1,GetDate()), 0),Year(CreatedDate)
			INTO :r2,:r3,:r4
			FROM Record 
			WHERE Month(CreatedDate)=Month(DateAdd(Month,:d1,GetDate()))
			AND Profile=:id
			AND status='Completed'
		)
		if (r2="") s r2=0
		if (d1=0){
			&js<document.getElementById("current-trans-count").innerHTML="#(r2)#">
		}
		if (SQLCODE=100){
			&sql(SELECT Convert(char(3), DateAdd(Month,:d1,GetDate()), 0),Year(GetDate()) INTO :r3,:r4)
		}
		&js<
			transformCount.unshift("#(r2)#");
			monthLabel.unshift("#(r3_" "_r4)#");
		>
		if (d1=-1){
			&js<document.getElementById("prev-trans-count").innerHTML="#(r2)#";>
		}
		s d1=d1-1
		}
		&js<
		if(Math.max(...transformCount)==0){
			maxNum=1
		}
		else{
			maxNum=Math.max(...transformCount)
		}
		activityConfig.options.scales.y.max = maxNum;
		activityConfig.options.scales.y.ticks.stepSize = maxNum/2;
		activityChart.update()
		>
	
		//successChart
		&sql(
			SELECT count(*)
			INTO :r5
			FROM Record
			WHERE Profile=:id
		)
		&js<document.querySelector(".success-rate .num").innerHTML=Math.ceil(#(r1/r5*100)#)+"%">
	
		//TempUsedChart
		&sql(DECLARE C1 CURSOR FOR
			SELECT %Exact(BucketName)
			INTO :r6
			FROM Record
			WHERE Profile=:id
			GROUP BY BucketName
		)
		&sql(OPEN C1)
		&sql(FETCH C1)
		WHILE SQLCODE=0{
			&sql(SELECT Count(*)
				INTO :r7
				FROM Record
				WHERE Profile=:id
				AND BucketName=:r6
				AND Status='Completed'
			)
			if (r7>0){
				&js<tempUsageLabel.push("#(r6)#")>
				&js<tempUsageRate.push(#(r7)#)>
			}
			
			&sql(FETCH C1)
		}
		&sql(CLOSE C1)
		
		&js<tempChart.update()>
		
		//UsageChart
		/*s d1=0
		WHILE d1>-5{
		;&sql(
			;SELECT count(*),Convert(char(3), DateAdd(Month,:d1,GetDate()), 0),Year(CreatedDate)
			;INTO :r2,:r3,:r4
			;FROM Record 
			;WHERE Month(CreatedDate)=Month(DateAdd(Month,:d1,GetDate()))
			;AND Profile=:id
		;)
		;if (SQLCODE=100){
			&sql(SELECT Convert(char(3), DateAdd(Month,:d1,GetDate()), 0),Year(GetDate()) INTO :r4,:r5)
			s r2=$RANDOM(1000)
			s r3=$RANDOM(1000)
		;}
		
		&js<
			usageCount.unshift(#(r2/10)#);
			usageCountOpp.unshift(#(r3/10)#);
			usageLabel.unshift("#(r4_" "_r5)#");
		>
		s d1=d1-1
		}
		&js<
		usageChart.update()
		>*/
		&sql(DECLARE C2 CURSOR FOR
			SELECT StartDate,EndDate INTO :startDate,:endDate FROM Subscription
			WHERE Profile=:UserID
			GROUP BY StartDate
			ORDER BY 1)
		&sql(OPEN C2)
		&sql(FETCH C2)
		if (SQLCODE=100){
			q
		}
		WHILE SQLCODE=0{
			s sumOCR=0,sumTransformation=0,sumRemainOCR=0,sumRemainTransformation = 0
			&sql(DECLARE C3 CURSOR FOR 
				SELECT RemainingOCRUnit,RemainingTransformationUnit,Subscription->OCRUnit,Subscription->TransformationUnit
				INTO :remainingOCR,:remainingTransformation,:totalOCR,:totalTransformation
				FROM Subscription
				WHERE Profile=:UserID
				AND StartDate=:startDate)
				&sql(OPEN C3)
				&sql(FETCH C3)
			WHILE SQLCODE=0{
				s sumOCR = sumOCR + totalOCR
				s sumTransformation = sumTransformation + totalTransformation
				s sumRemainOCR = sumRemainOCR + remainingOCR
				s sumRemainTransformation = sumRemainTransformation + remainingTransformation
				&sql(FETCH C3)
			}
			&sql(CLOSE C3)
			i sumOCR>0 &js<
			usageOCRCount.push(#((sumOCR-sumRemainOCR)/sumOCR*100)#)
			usageTransformationCount.push(#(sumTransformation-sumRemainTransformation/sumTransformation*100)#)
			usageLabel.push(["#($ZDATE(startDate,2))#","- #($ZDATE(endDate,2))#"]);
			>
			&sql(FETCH C2)
		}
		&sql(CLOSE C2)
		&js<
		usageCurrentOCR.push(#(sumOCR)#,#(sumOCR-sumRemainOCR)#);
		usageCurrentTransformation.push(#(sumTransformation)#,#(sumTransformation-sumRemainTransformation)#);
		>
	}
	q

jxDashboard2^MAC^^67168,60512.5315731^0
jxDashboard2
InitMe
	#import MX
	d INIT^WSP999
	s id=$g(%session.Data("UserID"))
	;if id'=1 s id=9 //for data retrieve
	
	//Activity Chart 
	//Count the records with complete status of the user
	&sql(
		SELECT count(*)
		INTO :r1
		FROM Record
		WHERE Profile=:id
		AND status='Completed'
	)
	&js<
	document.getElementById("total-trans-count").innerHTML="#(r1)#";
	localStorage.setItem("trans-count",#(r1)#);
	>
	if (r1>0){
		s d1=0
		WHILE d1>-5{
		&sql(
			SELECT count(*),Convert(char(3), DateAdd(Month,:d1,GetDate()), 0),Year(CreatedDate)
			INTO :r2,:r3,:r4
			FROM Record 
			WHERE Month(CreatedDate)=Month(DateAdd(Month,:d1,GetDate()))
			AND Profile=:id
			AND status='Completed'
		)
		if (r2="") s r2=0
		if (d1=0){
			&js<document.getElementById("current-trans-count").innerHTML="#(r2)#">
		}
		if (SQLCODE=100){
			&sql(SELECT Convert(char(3), DateAdd(Month,:d1,GetDate()), 0),Year(GetDate()) INTO :r3,:r4)
		}
		&js<
			transformCount.unshift("#(r2)#");
			monthLabel.unshift("#(r3_" "_r4)#");
		>
		if (d1=-1){
			&js<document.getElementById("prev-trans-count").innerHTML="#(r2)#";>
		}
		s d1=d1-1
		}
		&js<
		if(Math.max(...transformCount)==0){
			maxNum=1
		}
		else{
			maxNum=Math.max(...transformCount)
		}
		activityConfig.options.scales.y.max = maxNum;
		activityConfig.options.scales.y.ticks.stepSize = maxNum/2;
		activityChart.update()
		>
	
		//successChart
		//Count the records of the user for the success rate
		&sql(
			SELECT count(*)
			INTO :r5
			FROM Record
			WHERE Profile=:id
		)
		&js<document.querySelector(".success-rate .num").innerHTML=Math.ceil(#(r1/r5*100)#)+"%">
	
		//TempUsedChart
		//Count the records with complete status of the user, groupded by bucketname
		&sql(DECLARE C1 CURSOR FOR
			SELECT %Exact(BucketName)
			INTO :r6
			FROM Record
			WHERE Profile=:id
			GROUP BY BucketName
		)
		&sql(OPEN C1)
		&sql(FETCH C1)
		WHILE SQLCODE=0{
			&sql(SELECT Count(*)
				INTO :r7
				FROM Record
				WHERE Profile=:id
				AND BucketName=:r6
				AND Status='Completed'
			)
			if (r7>0){
				&js<tempUsageLabel.push("#(r6)#")>
				&js<tempUsageRate.push(#(r7)#)>
			}
			
			&sql(FETCH C1)
		}
		&sql(CLOSE C1)
		
		&js<tempChart.update()>
		
		//UsageChart
		
		/*s d1=0
		WHILE d1>-5{
		;&sql(
			;SELECT count(*),Convert(char(3), DateAdd(Month,:d1,GetDate()), 0),Year(CreatedDate)
			;INTO :r2,:r3,:r4
			;FROM Record 
			;WHERE Month(CreatedDate)=Month(DateAdd(Month,:d1,GetDate()))
			;AND Profile=:id
		;)
		;if (SQLCODE=100){
			&sql(SELECT Convert(char(3), DateAdd(Month,:d1,GetDate()), 0),Year(GetDate()) INTO :r4,:r5)
			s r2=$RANDOM(1000)
			s r3=$RANDOM(1000)
		;}
		
		&js<
			usageCount.unshift(#(r2/10)#);
			usageCountOpp.unshift(#(r3/10)#);
			usageLabel.unshift("#(r4_" "_r5)#");
		>
		s d1=d1-1
		}
		&js<
		usageChart.update()
		>*/
		&sql(DECLARE C2 CURSOR FOR
			SELECT StartDate,EndDate INTO :startDate,:endDate FROM Subscription
			WHERE Profile=:UserID
			GROUP BY StartDate
			ORDER BY 1)
		&sql(OPEN C2)
		&sql(FETCH C2)
		if (SQLCODE=100){
			q
		}
		WHILE SQLCODE=0{
			s sumOCR=0,sumTransformation=0,sumRemainOCR=0,sumRemainTransformation = 0
			&sql(DECLARE C3 CURSOR FOR 
				SELECT RemainingOCRUnit,RemainingTransformationUnit,Subscription->OCRUnit,Subscription->TransformationUnit
				INTO :remainingOCR,:remainingTransformation,:totalOCR,:totalTransformation
				FROM Subscription
				WHERE Profile=:UserID
				AND StartDate=:startDate)
				&sql(OPEN C3)
				&sql(FETCH C3)
			WHILE SQLCODE=0{
				s sumOCR = sumOCR + totalOCR
				s sumTransformation = sumTransformation + totalTransformation
				s sumRemainOCR = sumRemainOCR + remainingOCR
				s sumRemainTransformation = sumRemainTransformation + remainingTransformation
				&sql(FETCH C3)
			}
			&sql(CLOSE C3)
			/*updated by Talen 5/16/2024
			lines: 153,154,155,161 and 162
			For the usage quota Pre - processing units and transformation units
			*/
			i sumOCR>0 &js<
			usageOCRCount.push(#((sumRemainOCR-sumOCR)/(sumOCR*100))#)
			usageTransformationCount.push(#(sumRemainTransformation-sumTransformation/(sumTransformation*100))#)
			usageLabel.push(["#($ZDATE(startDate,2))#","- #($ZDATE(endDate,2))#"])
			>
			&sql(FETCH C2)
		}
		&sql(CLOSE C2)
		&js<
		usageCurrentOCR.push(#(sumOCR)#,#(sumRemainOCR-sumOCR)#);
		usageCurrentTransformation.push(#(sumTransformation)#,#(sumRemainTransformation-sumTransformation)#);
		>
	}
	q

jxDashboardActivity^MAC^^67176,60626.7453205^0
jxDashboardActivity
	q
LoadChart
	//Selects and displays the Completed Data transformatio count
	d INIT^WSP999
	s id=$g(%session.Data("UserID"))
	s d1=0
	WHILE d1>-5{
	&sql(
		SELECT count(*),Convert(char(3), DateAdd(Month,:d1,GetDate()), 0),Year(CreatedDate)
		INTO :r2,:r3,:r4
		FROM Record 
		WHERE Month(CreatedDate)=Month(DateAdd(Month,:d1,GetDate()))
		AND Status='Completed'
		AND Profile=:id
	)
	if (SQLCODE=100){
		&sql(SELECT Convert(char(3), DateAdd(Month,:d1,GetDate()), 0),Year(GetDate()) INTO :r3,:r4)
		s r2=0
	}
	&js<
		transformCount.unshift("#(r2)#");
		monthLabel.unshift("#(r3_" "_r4)#");
	>
	s d1=d1-1
	}
	&js<
	if(Math.max(...transformCount)==0){
		maxNum=1
	}
	else{
		maxNum=Math.max(...transformCount)
	}
	activityConfig.options.scales.y.max = maxNum;
	activityConfig.options.scales.y.ticks.stepSize = maxNum/2;
	activityChart.update()
	>
	q
WriteMonthlyStat
	//displays the monthly status of completed activities (Data Transformation)
	d INIT^WSP999
	s id=$g(%session.Data("UserID"))
	s maxNum=0
	s maxNumKey = 1
	s stat=[]
	for i=-4:1:1{
		&sql(
			SELECT count(*)
			INTO :r2
			FROM Record 
			WHERE Month(CreatedDate)=Month(DateAdd(Month,:i,GetDate()))
			AND Status='Completed'
			AND Profile=:id
		)
		if (SQLCODE=100){
			s r2=0
		}
		d stat.%Set(i+5,r2)
		if (r2>maxNum){
			s maxNum=r2
			s maxNumKey=i+5
		}
	}
	s d1=-4
	WHILE d1<1{
		&sql(SELECT Convert(char(3), DateAdd(Month,:d1,GetDate()), 0),Year(GetDate()) INTO :r3,:r4)
		w "<div class='monthly-stat"
		if (d1=0){
			w " stat-active"
		}
		if (maxNumKey=(d1+5)){
			w " max-stat"
		}
		w "' data-key='"_(d1+5)_"'"
		w ">"
		w "<p class='num'>"_stat.%Get(d1+5)_"</p>"
		w "<p>Data <br> Transformations <br><span>"
		w r3_" "_r4
		w "</span></p></div>"
		s d1=d1+1
		}
		s d1=0
	q

jxDashboardSuccess^MAC^^67180,37218.1797557^0
jxDashboardSuccess
	q
InitMe
	//This selects the top created date onthe Record basd onthe Profile
	d INIT^WSP999
	&sql(SELECT Top 1 CreatedDate
		INTO :r1
		FROM Record 
		WHERE Profile=:UserID
		AND CreatedDate IS NOT NULL
		ORDER BY CreatedDate)
    &js<startDate=new Date("#(r1)#")>
    //successChart
	&sql(
		SELECT count(*)
		INTO :r1
		FROM Record
		WHERE Profile=:UserID
	)
	&sql(
		SELECT count(*)
		INTO :r2
		FROM Record
		WHERE Profile=:UserID
		AND STATUS='Completed'
	)
	&js<document.querySelector(".overview-stat .num").innerHTML=Math.ceil(#(r2/r1*100)#)+"%">
	&sql(SELECT count(ID) 
	INTO :r3 
	FROM Error
	WHERE Record->Profile=:UserID
	ORDER BY 1 DESC)
	&js<failCount=#(r3)#>
	q
	
WriteTemplates
	// This function selects the bucketname based on the logged in userid and writes the  selected bucket.
	d INIT^WSP999
	s index=2
	&sql(DECLARE C1 CURSOR FOR
			SELECT BucketName
			INTO :r6
			FROM Record
			WHERE Profile=:UserID
			GROUP BY BucketName
		)
	&sql(OPEN C1)
	&sql(FETCH C1)
	WHILE SQLCODE=0{
		s r6=$ZCONVERT(r6,"S")
		w "<div class='item'>",!
		w "<div class='round'>",!
		w "<input name='temp' id='C"_index_"' type='checkbox' onclick='addChart(event)' value='"_r6_"'>",!
		w "<label for='C"_index_"'></label>",!
		w "</div>",!
		w "<p>"_r6_"</p>",!
		w "</div>",!
		&sql(FETCH C1)
		s index=index+1
	}
	&sql(CLOSE C1)
	q
	
WriteErrors
	//This function selects and display the errors or Transaction Failure details
	&sql(DECLARE C2 CURSOR FOR 
	SELECT CreatedDate,Record,BucketName,Code,Data
	INTO :dt,:rid,:bk,:code,:data
	FROM Error
	WHERE Record->Profile=:UserID
	GROUP BY Data
	ORDER BY 1 DESC)
	&sql(OPEN C2)
	&sql(FETCH C2)
	WHILE SQLCODE=0{
		if (code'=""){
			&sql(SELECT FriendlyDescription INTO :fDesc FROM ErrorCode WHERE Code=:code)
			w "<tr>",!
			w "<td class='date'>"_$REPLACE($ZDATE($ZDATEH(dt,3),2)," ","-")_"</td>",!
            w "<td class='trans-no'>"_rid_"</td>",!
			w "<td class='temp-type'>"_bk_"</td>",!
			w "<td class='err-Details'>Error "_code_": "_data_"</td>",!
			w "</tr>",!
		}
	&sql(FETCH C2)
	}
	&sql(CLOSE C2)
	q
.
ChangeChartBasedOnTime
	// This function performs the select range for displaying the graphs based on the selected range
	d INIT^WSP999
	s colorArr = ["#586D93","#4DCEC9","#F39CBB","#E63876","#ADAFC1"]
	if (d2=d4){
		s monthDiff = d3-d1 +1
	}
	else{
		s monthDiff = (d4-d2)*12+d3-d1+1
	}
	&js<
		labels=[];
		dataset.splice(0,dataset.length);
		premadeChart.splice(0,premadeChart.length);
	>
	s k=0
	while k<monthDiff{
		s d5=d2_"-"_(d1+k)_"-01"
		&sql(SELECT Convert(char(3),{fn MonthName(:d5)}) INTO :r1)
		&js<labels.push("#(r1_" "_d2)#");>
		s k=k+1
	}
	s i=0
	&sql(OPEN C1)
	&sql(FETCH C1)
	while SQLCODE=0{
		s data=[]
		s cDataset={}
		s j=0
		while j<monthDiff{
			&sql(
				SELECT count(*)
				INTO :r1
				FROM Record
				WHERE Profile=:UserID
				AND Month(CreatedDate)=:d1+:j
				AND BucketName=:r6
			)
			&sql(
				SELECT count(*)
				INTO :r2
				FROM Record
				WHERE Profile=:UserID
				AND STATUS='Completed'
				AND Month(CreatedDate)=:d1+:j
				AND BucketName=:r6
			)
			if (r1=0){
				d data.%Set(j,"null")
			}
			else{
				d data.%Set(j,r2/r1*100)
			}
			s j=j+1
		}
		s cDataset.label=$ZCONVERT(r6,"S")
		s cDataset.backgroundColor=colorArr.%Get(i)
		s cDataset.borderColor=colorArr.%Get(i)
		s cDataset.radius=6
		s cDataset.data=data
		&js<dataset.push(#(cDataset.%ToJSON())#)>
		s i=i+1
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	//successChart
	&sql(
		SELECT count(*)
		INTO :r1
		FROM Record
		WHERE Profile=:UserID
		AND MONTH(CreatedDate) BETWEEN :d1 AND :d3
	)
	&sql(
		SELECT count(*)
		INTO :r2
		FROM Record
		WHERE Profile=:UserID
		AND STATUS='Completed'
		AND MONTH(CreatedDate) BETWEEN :d1 AND :d3
	)
	if (r1=0){
		&js<document.querySelector(".overview-stat .num").innerHTML="0%">
	}
	else{
		&js<document.querySelector(".overview-stat .num").innerHTML=Math.ceil(#(r2/r1*100)#)+"%">
	}
	&js<data.labels=labels>
	&js<premadeChart.push(...dataset)>
	&js<successChart.update();>
	q

jxDashboardTempUsage^MAC^^66744,18447.1560648^0
jxDashboardTempUsage
	q
GetStartDate
	d INIT^WSP999
	&sql(SELECT Top 1 CreatedDate
		INTO :r1
		FROM Record 
		WHERE Profile=:UserID
		AND CreatedDate IS NOT NULL
		ORDER BY CreatedDate)
    &js<startDate=new Date("#(r1)#")>
	q
	
.
WriteTempStat
	d INIT^WSP999
	s colorArr = ["#586D93","#4DCEC9","#F39CBB","#E63876","#ADAFC1"]
	s index=0
	&sql(DECLARE C1 CURSOR FOR
			SELECT BucketName
			INTO :r6
			FROM Record
			WHERE Profile=:UserID
			GROUP BY BucketName
		)
	&sql(OPEN C1)
	&sql(FETCH C1)
	WHILE SQLCODE=0{
		s r6=$ZCONVERT(r6,"S")
		&sql(
			SELECT count(*)
			INTO :r1
			FROM Record
			WHERE Profile=:UserID
			AND Status='Completed'
			AND BucketName=:r6
		)
		w "<div class='temp-stat"
		if (index=0){
			w " stat-active"
		}
		w "' data-key='"_(index+1)_"' style='background:"_colorArr.%Get(index)_"'>",!
        w "<p class='num'>"_r1_"</p>",!
        w "<p>"_r6_"</p>"
        w "</div>"
       	&sql(FETCH C1)
       	s index=index+1
	}	
	&sql(CLOSE C1)
	q
.
changeChartBasedOnTime
	d INIT^WSP999
	s colorArr = ["#586D93","#4DCEC9","#F39CBB","#E63876","#ADAFC1"]
	if (d2=d4){
		s monthDiff = d3-d1 +1
	}
	else{
		s monthDiff = (d4-d2)*12+d3-d1+1
	}
	&js<
		labels=[];
		dataset.splice(0,dataset.length);
		premadeChart.splice(0,premadeChart.length);
	>
	s sum=[]
	s k=0
	while k<monthDiff{
		s d5=d2_"-"_(d1+k)_"-01"
		&sql(SELECT Convert(char(3),{fn MonthName(:d5)}) INTO :r1)
		&js<labels.push("#(r1_" "_d2)#");>
		s k=k+1
	}
	s i=0
	&sql(OPEN C1)
	&sql(FETCH C1)
	while SQLCODE=0{
		s data=[]
		s cDataset={}
		s j=0
		while j<monthDiff{
			&sql(
				SELECT count(*)
				INTO :r1
				FROM Record
				WHERE Profile=:UserID
				AND Month(CreatedDate)=:d1+:j
				AND Status='Completed'
				AND BucketName=:r6
			)
			if (r1=0){
				d data.%Set(j,"null")
			}
			else{
				d data.%Set(j,r1)
			}
			d sum.%Set(j,sum.%Get(j)+r1)
			s j=j+1
		}
		s cDataset.label=$ZCONVERT(r6,"S")
		s cDataset.backgroundColor=colorArr.%Get(i)
		s cDataset.borderWidth=0
        s cDataset.borderRadius=10
        s cDataset.barPercentage=0.45
        s cDataset.categoryPercentage=1
		s cDataset.data=data
		&js<dataset.push(#(cDataset.%ToJSON())#)>
		&sql(FETCH C1)
		s i=i+1
	}
	&sql(CLOSE C1)
	&js<
		tempData.labels=labels
		premadeChart.push(...dataset)
		let sum=#(sum.%ToJSON())#;
		max = Math.max(...sum);
	>
	q
	

jxDashboardUsag2^MAC^^66995,29687.548024^0
jxDashboardUsage2  ;not use , using jxDashBoardUsag3
	q
LoadData
	d INIT^WSP999
	s id=$g(%session.Data("UserID"))
	s statBlock = ""
	s cData1=[]
	s cData2=[]
	s cDataset = {}
    s cDataset.borderWidth= 0
    s cDataset.borderRadius=10
    s cDataset.barPercentage=1
    s cDataset.categoryPercentage=0.5
    &js<datasets.splice(0,datasets.length);>
	if (d1="all"){
		/*s d2=1
		WHILE d2<6{
		;&sql(
			;SELECT count(*),Convert(char(3), DateAdd(Month,:d2,GetDate()), 0),Year(CreatedDate)
			;INTO :r2,:r3,:r4
			;FROM Record 
			;WHERE Month(CreatedDate)=Month(DateAdd(Month,:d2,GetDate()))
			;AND Profile=:id
		;)
		;if (SQLCODE=100){
			&sql(SELECT Convert(char(3), DateAdd(Month,(:d2-5),GetDate()), 0),Year(GetDate()) INTO :r4,:r5)
			s r2=$RANDOM(1000)
			s r3=$RANDOM(1000)
		;}
			d cData1.%Push(r2/10)
			d cData2.%Push(r3/10)
			if (d2=5){
				s cDataset.label="Pre-processing"
    			s cDataset.data=cData1
    			s cDataset.backgroundColor="#56C4C5"
				&js<datasets.push(#(cDataset.%ToJSON())#)>
    			
				s cDataset.label="Transformation"
    			s cDataset.data=cData2
    			s cDataset.backgroundColor="#586D93"
				&js<datasets.push(#(cDataset.%ToJSON())#)>
			}
			&js<
				monthLabel.push("#(r4_" "_r5)#");
			>
			s statBlock = statBlock_$$WriteStatBlock(d1,r2,r3,r4_" "_r5,d2)
			s d2=d2+1
		}*/
		&sql(DECLARE C1 CURSOR FOR
			SELECT StartDate,EndDate INTO :startDate,:endDate FROM Subscription
			WHERE Profile=:UserID
			GROUP BY StartDate
			ORDER BY 1)
		&sql(OPEN C1)
		&sql(FETCH C1)
		if (SQLCODE=100){
			q
		}
		WHILE SQLCODE=0{
			s sumOCR=0,sumTransformation=0,sumRemainOCR=0,sumRemainTransformation = 0
			&sql(DECLARE C2 CURSOR FOR 
				SELECT RemainingOCRUnit,RemainingTransformationUnit,Subscription->OCRUnit,Subscription->TransformationUnit
				INTO :remainingOCR,:remainingTransformation,:totalOCR,:totalTransformation
				FROM Subscription
				WHERE Profile=:UserID
				AND StartDate=:startDate)
				&sql(OPEN C2)
				&sql(FETCH C2)
			WHILE SQLCODE=0{
				s sumOCR = sumOCR + totalOCR
				s sumTransformation = sumTransformation + totalTransformation
				s sumRemainOCR = sumRemainOCR + remainingOCR
				s sumRemainTransformation = sumRemainTransformation + remainingTransformation
				&sql(FETCH C2)
			}
			&sql(CLOSE C2)
			//d cData1.%Push((sumOCR-sumRemainOCR)/sumOCR*100)
			//d cData2.%Push(sumTransformation-sumRemainTransformation/sumTransformation*100)
			/*updated by Talen 5/28/2024
			lines: 82,83,87
			*/
			d cData1.%Push((sumRemainOCR-sumOCR)/(sumOCR*100))
			d cData2.%Push(sumRemainTransformation-sumTransformation/(sumTransformation*100))
			&js<
				monthLabel.push(["#($ZDATE(startDate,2))#","- #($ZDATE(endDate,2))#"]);
			>
			s statBlock = statBlock_$$WriteStatBlock(d1,sumRemainOCR-sumOCR,sumOCR, -sumRemainTransformation,sumTransformation,$ZDATE(startDate,2)_" - "_$ZDATE(endDate,2),cData1.%Size())
			&sql(FETCH C1)
		}
		&sql(CLOSE C1)
		s cDataset.label="Pre-processing"
    	s cDataset.data=cData1
    	s cDataset.backgroundColor="#56C4C5"
		&js<datasets.push(#(cDataset.%ToJSON())#)>
    	s cDataset.label="Transformation"
    	s cDataset.data=cData2
    	s cDataset.backgroundColor="#586D93"
		&js<datasets.push(#(cDataset.%ToJSON())#)>
	}
	else{
		/*s d2=1
		WHILE d2<6{
		;&sql(
			;SELECT count(*),Convert(char(3), DateAdd(Month,:d2,GetDate()), 0),Year(CreatedDate)
			;INTO :r2,:r3,:r4
			;FROM Record 
			;WHERE Month(CreatedDate)=Month(DateAdd(Month,:d2,GetDate()))
			;AND Profile=:id
		;)
		;if (SQLCODE=100){
			&sql(SELECT Convert(char(3), DateAdd(Month,(:d2-5),GetDate()), 0),Year(GetDate()) INTO :r4,:r5)
			s r2=$RANDOM(1000)
		;}
			d cData1.%Push(r2/10)
			if (d2=5){
				if (d1="pre"){
					s cDataset.label="Pre-processing"
    				s cDataset.data=cData1
    				s cDataset.backgroundColor="#56C4C5"
				}
    			elseif (d1="trans"){
					s cDataset.label="Transformation"
    				s cDataset.data=cData1
    				s cDataset.backgroundColor="#586D93"
    			}
				&js<datasets.push(#(cDataset.%ToJSON())#)>
			}
			&js<
				monthLabel.push("#(r4_" "_r5)#");
			>
			s statBlock = statBlock_$$WriteStatBlock(d1,r2,0,r4_" "_r5,d2)
			&js<usageConfig.options.plugins.legend.display=false>
			s d2=d2+1
		}*/
		&sql(OPEN C1)
		&sql(FETCH C1)
		if (SQLCODE=100){
			q
		}
		WHILE SQLCODE=0{
			s sumOCR=0,sumTransformation=0,sumRemainOCR=0,sumRemainTransformation = 0
			&sql(OPEN C2)
			&sql(FETCH C2)
			WHILE SQLCODE=0{
				s sumOCR = sumOCR + totalOCR
				s sumTransformation = sumTransformation + totalTransformation
				s sumRemainOCR = sumRemainOCR + remainingOCR
				s sumRemainTransformation = sumRemainTransformation + remainingTransformation
				&sql(FETCH C2)
			}
			&sql(CLOSE C2)
			/*updated by Talen 5/28/2024
			lines: 159,160,163,164
			*/
			&js<
				monthLabel.push(["#($ZDATE(startDate,2))#","- #($ZDATE(endDate,2))#"]);
			>
			if (d1="pre"){
				d cData1.%Push((sumOCR-sumRemainOCR)/(sumOCR*100))
				s statBlock = statBlock_$$WriteStatBlock(d1,sumRemainOCR-sumOCR,sumOCR,0,0,$ZDATE(startDate,2)_" - "_$ZDATE(endDate,2),cData1.%Size())
			}
			else{ 
				d cData1.%Push(sumRemainTransformation-sumTransformation/(sumTransformation*100))
				s statBlock = statBlock_$$WriteStatBlock(d1,sumRemainTransformation-sumTransformation,sumTransformation,0,0,$ZDATE(startDate,2)_" - "_$ZDATE(endDate,2),cData1.%Size())
			}
			&sql(FETCH C1)
		}
		&sql(CLOSE C1)
		s cDataset.data=cData1
		if (d1="pre"){
			s cDataset.label="Pre-processing"
    		s cDataset.backgroundColor="#56C4C5"
		}else{
    		s cDataset.label="Transformation"
    		s cDataset.backgroundColor="#586D93"
		}
		&js<datasets.push(#(cDataset.%ToJSON())#)>
		
	}
	
	s statBlock = statBlock_"<div class='prev mobile-active' onclick='togglePrev(event)'><i class='fa fa-chevron-left'></i></div><div class='next mobile-active' onclick='toggleNext(event)'><i class='fa fa-chevron-right'></i></div>"
    &js<
    document.querySelector(".stat").innerHTML = "#(statBlock)#"
    usageChart.update();
    >
	q
.
WriteStatBlock(type,val1,sumVal1,val2,sumVal2,month,index)
	s stat = ""
	if (type="all"){
		s stat = stat_"<div class='all-stat usage-stat"
		if (val1/sumVal1>0.8)!(val2/sumVal2>0.8){
			s stat = stat_" high-stat"
		}
		s stat = stat_"' data-key='"_index_"'>\n<h4>"_month_"</h4>\n<div class='stat-data'>\n<div class='pre-processing'>\n<h5>Pre-processing:</h5>\n<p class='num'><span>"_val1_"</span><br>/"_sumVal1_"</p>"
        s stat = stat_"\n</div>\n<div class='tranformation'>\n<h5>Transformation:</h5>"
        s stat = stat_"<p class='num'><span>"_val2_"</span><br>/"_sumVal2_"</p>"
        s stat = stat_"\n</div>\n</div>\n</div>"
	}
	else{
		s stat = stat_"<div class='"_type_"-stat usage-stat"
		if (val1/sumVal1>0.8){
			s stat=stat_" high-stat"
		}
		s stat=stat_"' data-key='"_index_"'>\n<h4>"_month_"</h4>\n<div class='stat-data'>"
        s stat= stat_"<p class='num'>"_val1_" / "_sumVal1_"</p>\n<p>credits</p>\n</div>\n</div>"
	}
	q stat
	

jxDashboardUsage^MAC^^66988,42134.3857634^0
jxDashboardUsage
	q
LoadData
	d INIT^WSP999
	
	s id=$g(%session.Data("UserID"))
	s statBlock = ""
	s cData1=[]
	s cData2=[]
	s cDataset = {}
    s cDataset.borderWidth= 0
    s cDataset.borderRadius=10
    s cDataset.barPercentage=1
    s cDataset.categoryPercentage=0.5
    &js<datasets.splice(0,datasets.length);>
	if (d1="all"){
		/*s d2=1
		WHILE d2<6{
		;&sql(
			;SELECT count(*),Convert(char(3), DateAdd(Month,:d2,GetDate()), 0),Year(CreatedDate)
			;INTO :r2,:r3,:r4
			;FROM Record 
			;WHERE Month(CreatedDate)=Month(DateAdd(Month,:d2,GetDate()))
			;AND Profile=:id
		;)
		;if (SQLCODE=100){
			&sql(SELECT Convert(char(3), DateAdd(Month,(:d2-5),GetDate()), 0),Year(GetDate()) INTO :r4,:r5)
			s r2=$RANDOM(1000)
			s r3=$RANDOM(1000)
		;}
			d cData1.%Push(r2/10)
			d cData2.%Push(r3/10)
			if (d2=5){
				s cDataset.label="Pre-processing"
    			s cDataset.data=cData1
    			s cDataset.backgroundColor="#56C4C5"
				&js<datasets.push(#(cDataset.%ToJSON())#)>
    			
				s cDataset.label="Transformation"
    			s cDataset.data=cData2
    			s cDataset.backgroundColor="#586D93"
				&js<datasets.push(#(cDataset.%ToJSON())#)>
			}
			&js<
				monthLabel.push("#(r4_" "_r5)#");
			>
			s statBlock = statBlock_$$WriteStatBlock(d1,r2,r3,r4_" "_r5,d2)
			s d2=d2+1
		}*/
		&sql(DECLARE C1 CURSOR FOR
			SELECT StartDate,EndDate INTO :startDate,:endDate FROM Subscription
			WHERE Profile=:UserID
			GROUP BY StartDate
			ORDER BY 1)
		&sql(OPEN C1)
		&sql(FETCH C1)
		if (SQLCODE=100){
			q
		}
		WHILE SQLCODE=0{
			s sumOCR=0,sumTransformation=0,sumRemainOCR=0,sumRemainTransformation = 0
			&sql(DECLARE C2 CURSOR FOR 
				SELECT RemainingOCRUnit,RemainingTransformationUnit,Subscription->OCRUnit,Subscription->TransformationUnit
				INTO :remainingOCR,:remainingTransformation,:totalOCR,:totalTransformation
				FROM Subscription
				WHERE Profile=:UserID
				AND StartDate=:startDate)
				&sql(OPEN C2)
				&sql(FETCH C2)
			WHILE SQLCODE=0{
				s sumOCR = sumOCR + totalOCR
				s sumTransformation = sumTransformation + totalTransformation
				s sumRemainOCR = sumRemainOCR + remainingOCR
				s sumRemainTransformation = sumRemainTransformation + remainingTransformation
				&sql(FETCH C2)
			}
			&sql(CLOSE C2)
			d cData1.%Push((sumOCR-sumRemainOCR)/sumOCR*100)
			d cData2.%Push(sumTransformation-sumRemainTransformation/sumTransformation*100)
			&js<
				monthLabel.push(["#($ZDATE(startDate,2))#","- #($ZDATE(endDate,2))#"]);
			>
			s statBlock = statBlock_$$WriteStatBlock(d1,sumOCR-sumRemainOCR,sumOCR,sumTransformation-sumRemainTransformation,sumTransformation,$ZDATE(startDate,2)_" - "_$ZDATE(endDate,2),cData1.%Size())
			&sql(FETCH C1)
		}
		&sql(CLOSE C1)
		s cDataset.label="Pre-processing"
    	s cDataset.data=cData1
    	s cDataset.backgroundColor="#56C4C5"
		&js<datasets.push(#(cDataset.%ToJSON())#)>
    	s cDataset.label="Transformation"
    	s cDataset.data=cData2
    	s cDataset.backgroundColor="#586D93"
		&js<datasets.push(#(cDataset.%ToJSON())#)>
	}
	else{
		/*s d2=1
		WHILE d2<6{
		;&sql(
			;SELECT count(*),Convert(char(3), DateAdd(Month,:d2,GetDate()), 0),Year(CreatedDate)
			;INTO :r2,:r3,:r4
			;FROM Record 
			;WHERE Month(CreatedDate)=Month(DateAdd(Month,:d2,GetDate()))
			;AND Profile=:id
		;)
		;if (SQLCODE=100){
			&sql(SELECT Convert(char(3), DateAdd(Month,(:d2-5),GetDate()), 0),Year(GetDate()) INTO :r4,:r5)
			s r2=$RANDOM(1000)
		;}
			d cData1.%Push(r2/10)
			if (d2=5){
				if (d1="pre"){
					s cDataset.label="Pre-processing"
    				s cDataset.data=cData1
    				s cDataset.backgroundColor="#56C4C5"
				}
    			elseif (d1="trans"){
					s cDataset.label="Transformation"
    				s cDataset.data=cData1
    				s cDataset.backgroundColor="#586D93"
    			}
				&js<datasets.push(#(cDataset.%ToJSON())#)>
			}
			&js<
				monthLabel.push("#(r4_" "_r5)#");
			>
			s statBlock = statBlock_$$WriteStatBlock(d1,r2,0,r4_" "_r5,d2)
			&js<usageConfig.options.plugins.legend.display=false>
			s d2=d2+1
		}*/
		&sql(OPEN C1)
		&sql(FETCH C1)
		if (SQLCODE=100){
			q
		}
		WHILE SQLCODE=0{
			s sumOCR=0,sumTransformation=0,sumRemainOCR=0,sumRemainTransformation = 0
			&sql(OPEN C2)
			&sql(FETCH C2)
			WHILE SQLCODE=0{
				s sumOCR = sumOCR + totalOCR
				s sumTransformation = sumTransformation + totalTransformation
				s sumRemainOCR = sumRemainOCR + remainingOCR
				s sumRemainTransformation = sumRemainTransformation + remainingTransformation
				&sql(FETCH C2)
			}
			&sql(CLOSE C2)
			&js<
				monthLabel.push(["#($ZDATE(startDate,2))#","- #($ZDATE(endDate,2))#"]);
			>
			if (d1="pre"){
				d cData1.%Push((sumOCR-sumRemainOCR)/sumOCR*100)
				s statBlock = statBlock_$$WriteStatBlock(d1,sumOCR-sumRemainOCR,sumOCR,0,0,$ZDATE(startDate,2)_" - "_$ZDATE(endDate,2),cData1.%Size())
			}
			else{ 
				d cData1.%Push(sumTransformation-sumRemainTransformation/sumTransformation*100)
				s statBlock = statBlock_$$WriteStatBlock(d1,sumTransformation-sumRemainTransformation,sumTransformation,0,0,$ZDATE(startDate,2)_" - "_$ZDATE(endDate,2),cData1.%Size())
			}
			&sql(FETCH C1)
		}
		&sql(CLOSE C1)
		s cDataset.data=cData1
		if (d1="pre"){
			s cDataset.label="Pre-processing"
    		s cDataset.backgroundColor="#56C4C5"
		}else{
    		s cDataset.label="Transformation"
    		s cDataset.backgroundColor="#586D93"
		}
		&js<datasets.push(#(cDataset.%ToJSON())#)>
		
	}
	
	s statBlock = statBlock_"<div class='prev mobile-active' onclick='togglePrev(event)'><i class='fa fa-chevron-left'></i></div><div class='next mobile-active' onclick='toggleNext(event)'><i class='fa fa-chevron-right'></i></div>"
    &js<
    document.querySelector(".stat").innerHTML = "#(statBlock)#"
    usageChart.update();
    >
	q
.
WriteStatBlock(type,val1,sumVal1,val2,sumVal2,month,index)
	s stat = ""
	if (type="all"){
		s stat = stat_"<div class='all-stat usage-stat"
		if (val1/sumVal1>0.8)!(val2/sumVal2>0.8){
			s stat = stat_" high-stat"
		}
		s stat = stat_"' data-key='"_index_"'>\n<h4>"_month_"</h4>\n<div class='stat-data'>\n<div class='pre-processing'>\n<h5>Pre-processing:</h5>\n<p class='num'><span>"_val1_"</span><br>/"_sumVal1_"</p>"
        s stat = stat_"\n</div>\n<div class='tranformation'>\n<h5>Transformation:</h5>"
        s stat = stat_"<p class='num'><span>"_val2_"</span><br>/"_sumVal2_"</p>"
        s stat = stat_"\n</div>\n</div>\n</div>"
	}
	else{
		s stat = stat_"<div class='"_type_"-stat usage-stat"
		if (val1/sumVal1>0.8){
			s stat=stat_" high-stat"
		}
		s stat=stat_"' data-key='"_index_"'>\n<h4>"_month_"</h4>\n<div class='stat-data'>"
        s stat= stat_"<p class='num'>"_val1_" / "_sumVal1_"</p>\n<p>credits</p>\n</div>\n</div>"
	}
	q stat
	

jxDashboardUsage3^MAC^^67164,55814.1781512^0
jxDashboardUsage3
	q
LoadData
	d INIT^WSP999
	s id=$g(%session.Data("UserID"))
	s statBlock = ""
	s cData1=[]
	s cData2=[]
	s cDataset = {}
    s cDataset.borderWidth= 0
    s cDataset.borderRadius=10
    s cDataset.barPercentage=1
    s cDataset.categoryPercentage=0.5
    &js<datasets.splice(0,datasets.length);>
	if (d1="all"){
		/*s d2=1
		WHILE d2<6{
		;&sql(
			;SELECT count(*),Convert(char(3), DateAdd(Month,:d2,GetDate()), 0),Year(CreatedDate)
			;INTO :r2,:r3,:r4
			;FROM Record 
			;WHERE Month(CreatedDate)=Month(DateAdd(Month,:d2,GetDate()))
			;AND Profile=:id
		;)
		;if (SQLCODE=100){
			&sql(SELECT Convert(char(3), DateAdd(Month,(:d2-5),GetDate()), 0),Year(GetDate()) INTO :r4,:r5)
			s r2=$RANDOM(1000)
			s r3=$RANDOM(1000)
		;}
			d cData1.%Push(r2/10)
			d cData2.%Push(r3/10)
			if (d2=5){
				s cDataset.label="Pre-processing"
    			s cDataset.data=cData1
    			s cDataset.backgroundColor="#56C4C5"
				&js<datasets.push(#(cDataset.%ToJSON())#)>
    			
				s cDataset.label="Transformation"
    			s cDataset.data=cData2
    			s cDataset.backgroundColor="#586D93"
				&js<datasets.push(#(cDataset.%ToJSON())#)>
			}
			&js<
				monthLabel.push("#(r4_" "_r5)#");
			>
			s statBlock = statBlock_$$WriteStatBlock(d1,r2,r3,r4_" "_r5,d2)
			s d2=d2+1
		}*/
		&sql(DECLARE C1 CURSOR FOR
			SELECT StartDate,EndDate INTO :startDate,:endDate FROM Subscription
			WHERE Profile=:UserID
			GROUP BY StartDate
			ORDER BY 1)
		&sql(OPEN C1)
		&sql(FETCH C1)
		if (SQLCODE=100){
			q
		}
		WHILE SQLCODE=0{
			s sumOCR=0,sumTransformation=0,sumRemainOCR=0,sumRemainTransformation = 0
			&sql(DECLARE C2 CURSOR FOR 
				SELECT RemainingOCRUnit,RemainingTransformationUnit,Subscription->OCRUnit,Subscription->TransformationUnit
				INTO :remainingOCR,:remainingTransformation,:totalOCR,:totalTransformation
				FROM Subscription
				WHERE Profile=:UserID
				AND StartDate=:startDate)
				&sql(OPEN C2)
				&sql(FETCH C2)
			WHILE SQLCODE=0{
				s sumOCR = sumOCR + totalOCR
				s sumTransformation = sumTransformation + totalTransformation
				s sumRemainOCR = sumRemainOCR + remainingOCR
				s sumRemainTransformation = sumRemainTransformation + remainingTransformation
				&sql(FETCH C2)
			}
			&sql(CLOSE C2)
			//d cData1.%Push((sumOCR-sumRemainOCR)/sumOCR*100)
			//d cData2.%Push(sumTransformation-sumRemainTransformation/sumTransformation*100)
			/*updated by Talen 5/28/2024
			lines: 82,83,87
			*/
			d cData1.%Push((sumRemainOCR-sumOCR)/(sumOCR*100))
			d cData2.%Push(sumRemainTransformation-sumTransformation/(sumTransformation*100))
			&js<
				monthLabel.push(["#($ZDATE(startDate,2))#","- #($ZDATE(endDate,2))#"]);
			>
			s statBlock = statBlock_$$WriteStatBlock(d1,sumRemainOCR-sumOCR,sumOCR, -sumRemainTransformation,sumTransformation,$ZDATE(startDate,2)_" - "_$ZDATE(endDate,2),cData1.%Size())
			&sql(FETCH C1)
		}
		&sql(CLOSE C1)
		s cDataset.label="Pre-processing"
    	s cDataset.data=cData1
    	s cDataset.backgroundColor="#56C4C5"
		&js<datasets.push(#(cDataset.%ToJSON())#)>
    	s cDataset.label="Transformation"
    	s cDataset.data=cData2
    	s cDataset.backgroundColor="#586D93"
		&js<datasets.push(#(cDataset.%ToJSON())#)>
	}
	else{
		/*s d2=1
		WHILE d2<6{
		;&sql(
			;SELECT count(*),Convert(char(3), DateAdd(Month,:d2,GetDate()), 0),Year(CreatedDate)
			;INTO :r2,:r3,:r4
			;FROM Record 
			;WHERE Month(CreatedDate)=Month(DateAdd(Month,:d2,GetDate()))
			;AND Profile=:id
		;)
		;if (SQLCODE=100){
			&sql(SELECT Convert(char(3), DateAdd(Month,(:d2-5),GetDate()), 0),Year(GetDate()) INTO :r4,:r5)
			s r2=$RANDOM(1000)
		;}
			d cData1.%Push(r2/10)
			if (d2=5){
				if (d1="pre"){
					s cDataset.label="Pre-processing"
    				s cDataset.data=cData1
    				s cDataset.backgroundColor="#56C4C5"
				}
    			elseif (d1="trans"){
					s cDataset.label="Transformation"
    				s cDataset.data=cData1
    				s cDataset.backgroundColor="#586D93"
    			}
				&js<datasets.push(#(cDataset.%ToJSON())#)>
			}
			&js<
				monthLabel.push("#(r4_" "_r5)#");
			>
			s statBlock = statBlock_$$WriteStatBlock(d1,r2,0,r4_" "_r5,d2)
			&js<usageConfig.options.plugins.legend.display=false>
			s d2=d2+1
		}*/
		&sql(OPEN C1)
		&sql(FETCH C1)
		if (SQLCODE=100){
			q
		}
		WHILE SQLCODE=0{
			s sumOCR=0,sumTransformation=0,sumRemainOCR=0,sumRemainTransformation = 0
			&sql(OPEN C2)
			&sql(FETCH C2)
			WHILE SQLCODE=0{
				s sumOCR = sumOCR + totalOCR
				s sumTransformation = sumTransformation + totalTransformation
				s sumRemainOCR = sumRemainOCR + remainingOCR
				s sumRemainTransformation = sumRemainTransformation + remainingTransformation
				&sql(FETCH C2)
			}
			&sql(CLOSE C2)
			/*updated by Talen 5/28/2024
			lines: 159,160,163,164
			*/
			&js<
				monthLabel.push(["#($ZDATE(startDate,2))#","- #($ZDATE(endDate,2))#"]);
			>
			if (d1="pre"){
				d cData1.%Push((sumOCR-sumRemainOCR)/(sumOCR*100))
				s statBlock = statBlock_$$WriteStatBlock(d1,sumRemainOCR-sumOCR,sumOCR,0,0,$ZDATE(startDate,2)_" - "_$ZDATE(endDate,2),cData1.%Size())
			}
			else{ 
				d cData1.%Push(sumRemainTransformation-sumTransformation/(sumTransformation*100))
				s statBlock = statBlock_$$WriteStatBlock(d1,sumRemainTransformation-sumTransformation,sumTransformation,0,0,$ZDATE(startDate,2)_" - "_$ZDATE(endDate,2),cData1.%Size())
			}
			&sql(FETCH C1)
		}
		&sql(CLOSE C1)
		s cDataset.data=cData1
		if (d1="pre"){
			s cDataset.label="Pre-processing"
    		s cDataset.backgroundColor="#56C4C5"
		}else{
    		s cDataset.label="Transformation"
    		s cDataset.backgroundColor="#586D93"
		}
		&js<datasets.push(#(cDataset.%ToJSON())#)>
		
	}
	
	s statBlock = statBlock_"<div class='prev mobile-active' onclick='togglePrev(event)'><i class='fa fa-chevron-left'></i></div><div class='next mobile-active' onclick='toggleNext(event)'><i class='fa fa-chevron-right'></i></div>"
    &js<
    document.querySelector(".stat").innerHTML = "#(statBlock)#"
    usageChart.update();
    >
	q
.
WriteStatBlock(type,val1,sumVal1,val2,sumVal2,month,index)
	s stat = ""
	if (type="all"){
		s stat = stat_"<div class='all-stat usage-stat"
		if (val1/sumVal1>0.8)!(val2/sumVal2>0.8){
			s stat = stat_" high-stat"
		}
		s stat = stat_"' data-key='"_index_"'>\n<h4>"_month_"</h4>\n<div class='stat-data'>\n<div class='pre-processing'>\n<h5>Pre-processing:</h5>\n<p class='num'><span>"_val1_"</span><br>/"_sumVal1_"</p>"
        s stat = stat_"\n</div>\n<div class='tranformation'>\n<h5>Transformation:</h5>"
        s stat = stat_"<p class='num'><span>"_val2_"</span><br>/"_sumVal2_"</p>"
        s stat = stat_"\n</div>\n</div>\n</div>"
	}
	else{
		s stat = stat_"<div class='"_type_"-stat usage-stat"
		if (val1/sumVal1>0.8){
			s stat=stat_" high-stat"
		}
		s stat=stat_"' data-key='"_index_"'>\n<h4>"_month_"</h4>\n<div class='stat-data'>"
        s stat= stat_"<p class='num'>"_val1_" / "_sumVal1_"</p>\n<p>credits</p>\n</div>\n</div>"
	}
	q stat
	

jxDataMappingTransformation^MAC^^67305,43269.3882917^0
jxDataMappingTransformation(rid)
	w !,"Performing Data Mapping and Calculating Score...",!
	s row="" 
	d TwoSets
	d DataMapping
  	q
TwoSets
	//Complete Reference Range
	n r1,r2,r3,r4,r5
	s row=$o(^AIGEMINI(rid,row)) g:'$ISVALIDNUM(row) TwoSetsEnd
	s r1=$g(^AIGEMINI(rid,row,"name"))
	s r2=$g(^AIGEMINI(rid,row,"unit"))
	s r3=$g(^AIGEMINI(rid,row,"value"))
	s r4=$g(^AIGEMINI(rid,row,"loRange"))
	s r5=$g(^AIGEMINI(rid,row,"hiRange"))
	if row>1 
	{	n pRow s pRow= row-1
		s pName=$g(^AIGEMINI(rid,pRow,"name"))
		if (r1=pName),(^AIGEMINI(rid,row,"row"_row)'= ^AIGEMINI(rid,pRow,"row"_pRow)) 
		{	
			i (r4="")!(r5="")
			{	;w "no RR current row",row,!
				s ^AIGEMINI(rid,row,"loRange")=^AIGEMINI(rid,pRow,"loRange")
		 		s ^AIGEMINI(rid,row,"hiRange")=^AIGEMINI(rid,pRow,"hiRange")
			}
			elseif ($g(^AIGEMINI(rid,pRow,"loRange"))="") ! ($g(^AIGEMINI(rid,pRow,"hiRange"))="") 
			{
				s ^AIGEMINI(rid,pRow,"loRange")=r4
				s ^AIGEMINI(rid,pRow,"hiRange")=r5
			}
		
		}
	}
	g TwoSets
TwoSetsEnd	
	q
	
DataMapping
	#import MX
	n row,trow,c1,c2,c3,r0,r1,r1a,r2,r2a,r3,r4,r5,r6,r7,r8,r9,r10,bk,x,trial
	n NameMappingFlag, UnitMappingFlag, DataTransformingFlag, TotalPossible, TotalFlags, ErrorPercent, ConfPercent
	s (trow,row,bk)="" 
	s (NameMappingFlag, UnitMappingFlag, DataTransformingFlag, TotalPossible, TotalFlags, ErrorPercent, ConfPercent) = 0
	
	&sql(SELECT IsTrial INTO :trial FROM Record WHERE id=:rid)
	if trial=1	&sql(SELECT OutputUnit INTO :bk FROM Record WHERE id=:rid) 
	e  s trial=0 &sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid) 
.
	s c1="#405470"	; blue
	s c2="#e63876"	; pink
	s c3="#048f2a"	; green	
	i $d(^AIGEMINI(rid)) d DataMappingA q
	e  d DataMappingRBT q
	q
DataMappingA
	s row=$o(^AIGEMINI(rid,row)) g:'$ISVALIDNUM(row) DataMappingEnd
	s r0=$g(^AIGEMINI(rid,row,"date")) 
	s r1=$g(^AIGEMINI(rid,row,"name"))
	s r2=$g(^AIGEMINI(rid,row,"unit"))
	s r3=$g(^AIGEMINI(rid,row,"value"))
	s r4=$g(^AIGEMINI(rid,row,"loRange"))
	s r5=$g(^AIGEMINI(rid,row,"hiRange"))
	s r6=$g(^AIGEMINI(rid,row,"category"))
	s r7=$g(^AIGEMINI(rid,row,"comment"))
.
	s r2x=r2,r3x=r3,r4x=r4,r5x=r5
	
	//Cater for duplicate rows, compare current row with all previous rows
	if row>1 
	{	n pRow s pRow= row-1
		s r1p=$g(^AIGEMINI(rid,pRow,"name"))
		for i=1:1:pRow
		{
			if ^AIGEMINI(rid,row,"row"_row)= ^AIGEMINI(rid,i,"row"_i) g DataMappingA
			
			}
	} 
	g:r1="" DataMappingA
	g:r3="" DataMappingA
		
	s trow=trow+1
	d CleanUp
	d ProcessDataMapping
	g DataMappingA	
	
DataMappingRBT	
	&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	 ; From ResultBloodTest_Tests for HL7,Json,xml,xlsx, or if no ^AICLAUDE , doesn't compare with textract
	 &sql(DECLARE C01 CURSOR FOR
		SELECT COUNT(element_key),element_key,Tests_TestName,Tests_SIUnit,Tests_Result,Tests_LowRange,Tests_HighRange,ResultBloodTest->ReportDate
		INTO :rowkey,:row,:r1,:r2,:r3,:r4,:r5,:r0
		FROM ResultBloodTest_Tests 
		WHERE ResultBloodTest=:rbt
	)
	&sql(OPEN C01)
	&sql(FETCH C01)
	WHILE SQLCODE=0{
		
	g:r1="" DataMappingRBTEnd
	g:r3="" DataMappingRBTEnd
	s r2x=r2,r3x=r3,r4x=r4,r5x=r5	
	s trow=trow+1
	d CleanUp
	d ProcessDataMapping
DataMappingRBTEnd
		&sql(FETCH C01) 
		}
		&sql(CLOSE C01)
		d DataMappingEnd
		q	
		
DataMappingEnd
.
	s TotalPossible = trow*5
	s TotalFlags = NameMappingFlag + UnitMappingFlag + DataTransformingFlag
	s ErrorPercent = (TotalFlags/TotalPossible) * 100
	s ConfPercent = 100-ErrorPercent
	s ConfPercent = $fn(ConfPercent,,2)
	;w "Total rows: ",trow,", Total item",TotalPossible,!
	;w "Name:",NameMappingFlag,", unit:",UnitMappingFlag,", Value:",DataTransformingFlag,!,"Total:",TotalFlags,!
	
	&sql(INSERT INTO MX.RecordScore(Record, RowCount, ItemCount, NameFlag, UnitFlag, ValueFlag, Score) 
		 VALUES(:rid, :trow, :TotalPossible, :NameMappingFlag, :UnitMappingFlag, :DataTransformingFlag, :ConfPercent))
	;w !,"Confidence Score : ",ConfPercent,!
	k ^FormData(-1,rid)
	q
	
ProcessDataMapping
	
	;w r0,r1,r2,", ",bk,!
	;w "<tr class=''>" 
	;w "<td class='actions'><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)' > <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)' >  <img class='add-row-icon' src='./assets/images/row.png' alt='add row' onclick='addNewRow(event)' ></td>"
	s ^FormData(-1,rid,trow,"date")=r0
	s ^FormData(-1,rid,trow,"test-name")=r1
	;w "<td class='date' onclick='jEditBox(event)' style='color:"_c1_"'>"_r0_"</td>"
	;w "<td class='test-name' onclick='jEditBox(event)'>"_r1_"</td>"
	
	s x=$$GetSIName^WSP999(r1)
	; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
	if x["#",r2="%" s x=$p(x," ",1)
	
	s r1a=""
	i x="" {
	 	s IsMatch=0,r1a=r1
		WHILE IsMatch=0&($l(r1a)'=0){
			s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
			i r0'=""  s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
		
		i r1a'="" d
		.;s r1ax=r1a w "<td class='test-name' onclick='jEditBox(event)'>"_r1ax_"</td>"
		.i trial=0 &sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:r1a AND BucketName=:bk)
		.e  &sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:r1a AND BucketName=:bk)
		.i tempName'="" s r1=tempName s NameMappingFlag=NameMappingFlag +1 s ^FormData(-1,rid,trow,"transformed-name")= tempName_$c(9)_"issue"_$c(9)_c2_$c(9)_"No match-Picking closest JX match"_$c(9)_c2
		.e  s ^FormData(-1,rid,trow,"transformed-name")= r1_$c(9)_""_$c(9)_c1_$c(9)_"No matching Template:Using original"_$c(9)_c1
		e  s tempUnit="" s NameMappingFlag=NameMappingFlag+1 s ^FormData(-1,rid,trow,"transformed-name")= r1_$c(9)_"issue"_$c(9)_c2_$c(9)_"No matching JX Name & Template:Using original"_$c(9)_c1
		
		
	}
	i x'="" {
		;w "<td class='test-name' onclick='jEditBox(event)'>"_r1_"</td>"
		i trial=0 &sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:x AND BucketName=:bk)
		e  &sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x AND BucketName=:bk)
		i tempName'="" d
		.i tempName["(percent)",r2'="%" d
		..s x=x_" #" ;s tempName=$replace(tempName,"(percent)","(Abs)") 
		..i trial=0 &sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:x AND BucketName=:bk)
		..e  &sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x AND BucketName=:bk)
		.i $zconvert(tempName,"l")=$zconvert(r1,"l") s ^FormData(-1,rid,trow,"transformed-name")= tempName_$c(9)_"converted"_$c(9)_c1_$c(9)_"Converted:Same BB"_$c(9)_c1
		.e  s r1=x s ^FormData(-1,rid,trow,"transformed-name")= tempName_$c(9)_"converted"_$c(9)_c1_$c(9)_"Converted"_$c(9)_c3	
		e  s ^FormData(-1,rid,trow,"transformed-name")= r1_$c(9)_""_$c(9)_c1_$c(9)_"No matching Template- Using original"_$c(9)_"c1;background-color: #e6f796;"  
		
		;w "<td class='transformed-name converted' style='color:"_c1_"' title='Converted:Same BB'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>" ;r1	
		;w "<td class='transformed-name converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>"
		;w "<td class='transformed-name issue' style='color:"_c2_"; ' title='No matching Template- Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
		}	
	
	s ^FormData(-1,rid,trow,"result")=r3x
	s ^FormData(-1,rid,trow,"from-unit")=r2
	if tempUnit'="" {
		s x=$$GetJXUnit^WSP999(r2)
		s r2a=tempUnit
		i x'="" s r2=x 
	 
		; more clean up
		i r2="%" d
		. i $l($p(r3,".",1))>3 s r3=$replace(r3,".",""),r3=$e(r3,1,2)_"."_$e(r3,3,999)
		. i $l($p(r4,".",1))>3 s r4=$replace(r4,".",""),r4=$e(r4,1,2)_"."_$e(r4,3,999)
		. i $l($p(r5,".",1))>3 s r5=$replace(r5,".",""),r5=$e(r5,1,2)_"."_$e(r5,3,999)
		; test if original unit can be converted
		s x="",x=$$U2U^WSP999(r1,r3,r2,r2a)
		i x["ERROR" s r2a=tempUnit 
		; end more
.
		s r3=$$U2U^WSP999(r1,r3,r2,r2a)
		s r4=$$U2U^WSP999(r1,r4,r2,r2a)
		s r5=$$U2U^WSP999(r1,r5,r2,r2a)
	}
	else
	{	
		s x="ERROR Converting" 
		s r2a=r2,r3x=r3,r4x=r4,r5x=r5  
		s r3=$fn(r3,,2)
		s r4=$fn(r4,,2)
		s r5=$fn(r5,,2)
	}
	
	s recalc=0
	// r2 Unit
	i tempUnit="" ,x["ERROR" d
		. s ^FormData(-1,rid,trow,"convert-result-unit")= r2_$c(9)_""_$c(9)_c1_$c(9)_"No matching Template Unit, Using Original : "_r2x_$c(9)_c1  
		.;w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching Template Unit, Using Original : "_r2x_"'><div class='dropdown' style='color:"_c1_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
	i tempUnit'="" ,x["ERROR" d
		.s UnitMappingFlag=UnitMappingFlag+1 s ^FormData(-1,rid,trow,"convert-result-unit")= r2a_$c(9)_"issue"_$c(9)_c2_$c(9)_"No matching JX Unit : "_r2x_$c(9)_c2  
		.;w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching JX Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
		
	i tempUnit'="",x'["ERROR" d ;r2a=tempUnit, r2x=original r2(unit)
		. i (r2a="")!($zconvert(r2a,"l")=$zconvert(r2x,"l")) s ^FormData(-1,rid,trow,"convert-result-unit")= r2a_$c(9)_"converted"_$c(9)_c1_$c(9)_"Converted:Same Unit"_$c(9)_c1  
		.;w "<td class='convert-result-unit converted' style='color:"_c1_"' title='Converted:Same Unit'><div class='dropdown' style='color:"_c1_";/*border-color:"_c3_"*/'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>"
		. e  s recalc=1 s r2=r2a s ^FormData(-1,rid,trow,"convert-result-unit")= r2a_$c(9)_"converted"_$c(9)_c3_$c(9)_"Converted"_$c(9)_c3  
		.;w "<td class='convert-result-unit converted' style='color:"_c3_"' title='Converted'><div class='dropdown' style='color:"_c3_"' onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td></td>" 
	// END of r2 unit
	
	// value and RR
		i recalc {
			i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") s ^FormData(-1,rid,trow,"convert-result-val")= $s(r3'="":r3,1:"")_$c(9)_"converted"_$c(9)_c3_$c(9)_"Converted"_$c(9)_c1  
			;w "<td class='convert-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			i r3["ERROR" s DataTransformingFlag=DataTransformingFlag+1 s ^FormData(-1,rid,trow,"convert-result-val")= $s(r3'="":r3,1:"")_$c(9)_"issue"_$c(9)_c2_$c(9)_"No matching JXConversion : "_r3x_$c(9)_c2  
			;w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			
			s ^FormData(-1,rid,trow,"l-range")=r4x
			if r4["ERROR" { s DataTransformingFlag=DataTransformingFlag+1 s ^FormData(-1,rid,trow,"l-result-val")= $s(r4'="":r4,1:"")_$c(9)_"issue"_$c(9)_c2_$c(9)_"No matching JXConversion : "_r4x_$c(9)_c2  }
			elseif (tempUnit="" ){ s ^FormData(-1,rid,trow,"l-result-val")= $s(r4'="":r4,1:"")_$c(9)_""_$c(9)_c1_$c(9)_""_$c(9)_c1  }
			else  {s ^FormData(-1,rid,trow,"l-result-val")= $s(r4'="":r4,1:"")_$c(9)_"converted"_$c(9)_c3_$c(9)_"Converted"_$c(9)_c3  }	
						
			;w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_"</td>",! ;_" "_r2x_"
			;w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"}
			;w "<td class='l-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			;w "<td class='l-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			
			
			s ^FormData(-1,rid,trow,"u-range")=r5x
			if r5["ERROR" { s DataTransformingFlag=DataTransformingFlag+1 s ^FormData(-1,rid,trow,"u-result-val")= $s(r5'="":r5,1:"")_$c(9)_"issue"_$c(9)_c2_$c(9)_"No matching JXConversion : "_r5x_$c(9)_c2  }
			elseif (tempUnit="" ){ s ^FormData(-1,rid,trow,"u-result-val")= $s(r5'="":r5,1:"")_$c(9)_""_$c(9)_c1_$c(9)_""_$c(9)_c1  }
			else  {s ^FormData(-1,rid,trow,"u-result-val")= $s(r5'="":r5,1:"")_$c(9)_"converted"_$c(9)_c3_$c(9)_"Converted"_$c(9)_c3  }				
			/*
			;w "<td class='u-range' onclick='jEditBox(event)'>"_r5x_"</td>",!  ; "_r2x_"
			i r5["ERROR" {w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			ELSEIF (tempUnit="") {w "<td class='u-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			else {w "<td class='u-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			
			w "<td class='comment' ><textarea autocomplete='off' rows='5' cols='50' onkeyup=''></textarea></td>",!
			w "<td class='row-num' style='display:none;'>"_row_"</td>"
			w "</tr>",!
			*/
	
		  }else{
		
			i r3["ERROR"  s DataTransformingFlag=DataTransformingFlag+1 s ^FormData(-1,rid,trow,"convert-result-val")= $s(r3'="":r3,1:"")_$c(9)_"issue"_$c(9)_c2_$c(9)_"No matching JXConversion : "_r3x_$c(9)_c2  
			;w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			e  d
			.i tempUnit="" s ^FormData(-1,rid,trow,"convert-result-val")= $s(r3'="":r3,1:"")_$c(9)_""_$c(9)_c1_$c(9)_"No template:Using Original"_$c(9)_c1  
			.;w "<td class='convert-result-val issue' style='color:"_c1_"' title='No template:Using Original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			.e  s ave=$$AveRes^WSP999(r1,r3,r2,"") s ^FormData(-1,rid,trow,"convert-result-val")= $s(r3'="":r3,1:"")_$c(9)_"converted"_$c(9)_c1_$c(9)_"Converted:Same Unit"_$c(9)_c1  
			;w "<td class='convert-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
.
			
			s ^FormData(-1,rid,trow,"l-range")=r4x
			i r4["ERROR" {s DataTransformingFlag=DataTransformingFlag+1 s ^FormData(-1,rid,trow,"l-result-val")= $s(r4'="":r4,1:"")_$c(9)_"issue"_$c(9)_c2_$c(9)_"No matching JXConversion : "_r5x_$c(9)_c2  }
			elseif (tempUnit="" ){ s ^FormData(-1,rid,trow,"l-result-val")= $s(r4'="":r4,1:"")_$c(9)_""_$c(9)_c1_$c(9)_""_$c(9)_c1  }
			else  {s ^FormData(-1,rid,trow,"l-result-val")= $s(r4'="":r4,1:"")_$c(9)_"converted"_$c(9)_c1_$c(9)_"Converted:Same Unit"_$c(9)_c1  }					
			/*			
			w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_"</td>",! ; "_r2x_"
			if r4["ERROR" {w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"}
			elseif (tempUnit="" ){w "<td class='l-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			else  {w "<td class='l-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			;w "<td class='l-result-unit'>"_r2a_"</td>",!
			*/
			s ^FormData(-1,rid,trow,"u-range")=r5x
			i r5["ERROR" {s DataTransformingFlag=DataTransformingFlag+1 s ^FormData(-1,rid,trow,"u-result-val")= $s(r5'="":r5,1:"")_$c(9)_"issue"_$c(9)_c2_$c(9)_"No matching JXConversion : "_r5x_$c(9)_c2  }
			elseif (tempUnit="" ){ s ^FormData(-1,rid,trow,"u-result-val")= $s(r5'="":r5,1:"")_$c(9)_""_$c(9)_c1_$c(9)_""_$c(9)_c1  }
			else  {s ^FormData(-1,rid,trow,"u-result-val")= $s(r5'="":r5,1:"")_$c(9)_"converted"_$c(9)_c1_$c(9)_"Converted:Same Unit"_$c(9)_c1  }				
			
			/*
			w "<td class='u-range' onclick='jEditBox(event)'>"_r5x_"</td>",! ; "_r2x_"
			i r5["ERROR" {w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			ELSEIF (tempUnit="") {w "<td class='u-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			else {w "<td class='u-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			
			w "<td class='comment'><textarea autocomplete='off' rows='5' cols='50' onkeyup=''></textarea></td>",!
			w "<td class='row-num' style='display:none;'>"_row_"</td>"
			w "</tr>",!
			*/
		}
	 q	
CleanUp
	; clean up units
		s r2=$replace(r2,"|","l")
		s r2=$replace(r2," ","")
		s r2=$replace(r2,"-1","-l")
		s r2=$replace(r2,"_1","_l")
		i $e(r2,$l(r2)-1,$l(r2))="/1" s r2=$replace(r2,"/1","/l")
		i $e(r2,$l(r2))="_" s r2=r2_"l"
		s r2=$replace(r2," / ","/") 
	
	; clean up value and range
		s r3=$replace(r3,"*","")
		s r3=$replace(r3," ","")
		s r4=$replace(r4," ","")
		i $p(r4,"-",1)'="",$p(r4,"-",2)'="" d	; cater for 1-3
		. s r5=$p(r4,"-",2),r4=$p(r4,"-",1), r4x=r4,r5x=r5
		s r5=$replace(r5," ","")
		i $p(r5,"-",1)'="",$p(r5,"-",2)'="" d	; cater for 1-3
		. s r4=$p(r5,"-",1),r5=$p(r5,"-",2), r4x=r4,r5x=r5
		; For Indo clients
		i bk["INDO"!(bk["JXTesting") {
			; Use the original from GEMINI
			// treat "." as comma
			s r3=$replace(r3,".",""),r4=$replace(r4,".",""),r5=$replace(r5,".","")
			// treat commas as "."
			s r3=$replace(r3,",","."),r4=$replace(r4,",","."),r5=$replace(r5,",",".")
		}else 
		{	s r3=$replace(r3,",","."),r4=$replace(r4,",","."),r5=$replace(r5,",",".")
			}
		/* Set Result as the standard
		i bk["INDO"!(bk["4321-qa-jondaffr") {
			if r3["." d
			. s r4=$replace(r4,",","."),r5=$replace(r5,",",".")
			. s r3=$replace(r3,".",""),r4=$replace(r4,".",""),r5=$replace(r5,".","")
			if r3["," d
			. s r4=$replace(r4,".",","),r5=$replace(r5,".",",")
			.s r3=$replace(r3,",","."),r4=$replace(r4,",","."),r5=$replace(r5,",",".")
		}		
		*/
	; end clean up
	;END
	q
.
.
WriteTr
	s c1="#405470"	; blue
	s c2="#e63876"	; pink
	s c3="#048f2a"	;green
	
	/// $p(r2,$c(9),1)= value, $p(r2,$c(9),2)=class, $p(r2,$c(9),3)=color, $p(r2,$c(9),4)=title, $p(r2,$c(9),5)=color
	s row=$o(^FormData(-1,rid,row)) q:row="" 
	s r0=^FormData(-1,rid,row,"date")
	s r1=^FormData(-1,rid,row,"test-name")
	s r2=^FormData(-1,rid,row,"transformed-name")
	s r3=^FormData(-1,rid,row,"result")
	s r4=^FormData(-1,rid,row,"from-unit")
	s r5=^FormData(-1,rid,row,"convert-result-unit")
	s r6=^FormData(-1,rid,row,"convert-result-val")
	s r7=^FormData(-1,rid,row,"l-range")
	s r8=^FormData(-1,rid,row,"l-result-val")
	s r9=^FormData(-1,rid,row,"u-range")
	s r10=^FormData(-1,rid,row,"u-result-val")	
	
	
	w "<tr class=''>",! 
	w "<td class='actions'><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)' > <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)' >  <img class='add-row-icon' src='./assets/images/row.png' alt='add row' onclick='addNewRow(event)' ></td>",!
	w "<td class='date' onclick='jEditBox(event)' style='color:"_c1_"'>"_r0_"</td>",!
	w "<td class='test-name' onclick='jEditBox(event)'>"_$p(r1,$c(9),1)_"</td>",!
	
	w "<td class='transformed-name "_$p(r2,$c(9),2)_"' style='color:"_$p(r2,$c(9),3)_"' title='"_$p(r2,$c(9),4)_"'>",!
	w "<input type='text' style='color:"_$p(r2,$c(9),5)_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_$p(r2,$c(9),1)_"'>",!
	w "</td>",!
	
	w "<td class='result' onclick='jEditBox(event)'>"_r3_"</td>",!
	w "<td class='from-unit' onclick='jEditBox(event)'>"_r4_"</td>",!
	
	w "<td class='convert-result-unit "_$p(r5,$c(9),2)_"' style='color:"_$p(r5,$c(9),3)_"' title='"_$p(r5,$c(9),4)_"'>",!
	w "<div class='dropdown' style='color:"_$p(r5,$c(9),5)_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_$p(r5,$c(9),1)_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div>",!
	w "</td>",!
	
	w "<td class='convert-result-val "_$p(r6,$c(9),2)_"' style='color:"_$p(r6,$c(9),3)_"' title='"_$p(r6,$c(9),4)_"'>",!
	w "<input type='text' style='color:"_$p(r6,$c(9),5)_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$p(r6,$c(9),1)_"'>",!
	w "</td>",!
	
	w "<td class='l-range' onclick='jEditBox(event)'>"_r7_"</td>",!
	w "<td class='l-result-val "_$p(r8,$c(9),2)_"' style='color:"_$p(r8,$c(9),3)_"' title='"_$p(r8,$c(9),4)_"'>",!
	w "<input type='text' style='color:"_$p(r8,$c(9),5)_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$p(r8,$c(9),1)_"'>",!
	w "</td>",!
	
	w "<td class='u-range' onclick='jEditBox(event)'>"_r9_"</td>",!
	w "<td class='u-result-val "_$p(r10,$c(9),2)_"' style='color:"_$p(r10,$c(9),3)_"' title='"_$p(r10,$c(9),4)_"'>",!
	w "<input type='text' style='color:"_$p(r10,$c(9),5)_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$p(r10,$c(9),1)_"'>",!
	w "</td>",!
	
	w "<td class='comment' ><textarea autocomplete='off' rows='5' cols='50' onkeyup=''></textarea></td>",!
	w "<td class='row-num' style='display:none;'>"_row_"</td>",!
	w "</tr>",!
	g WriteTr
	
	
	
	

jxDataTransform^MAC^^66736,39264.5920362^0
IMGToSDA
.
	s rid = %session.Data("jxTransform", "rid")
	&sql(SELECT ID,Profile->CompanyName,BucketName,TempFile,fExt INTO :rid, :companyName, :bk,:tempFile,:ext FROM MX.Record WHERE TempFile=:tempFile AND CreateDate=:dt)
.
	;s imgFullPath = "C:\InterSystems\Cache\JondaX\"_companyName_"\"_bk_"\documents\"_tempFile_"."_ext
	s imgFullPath = "C:\InterSystems\Cache\JondaX\jxUpload\bloodtest1.png"
	
	s fileExt = $p(imgFullPath,".",*)
	
	if (fileExt'="PNG"){ ; change format to png
		s cmd="mogrify -format png "_imgFullPath
		s x=$zf(-1,cmd_" && exit")	
		d ##class(%File).Delete(imgFullPath)
		s fileExt = "png"
	}
	
	;s tempFile = $$ATTNAME^WSP999()
	;s dt = $zdatetime($h,3)
	;&sql(INSERT INTO MX.Record (OrgFile,Status, fExt,Profile,TempFile, CreatedDate) VALUES (:fileName, 'In-Process', :fileExt, :userId, :tempFile, :dt))
	;&sql(SELECT ID INTO :rid FROM MX.Record WHERE TempFile=:tempFile AND CreateDate=:dt)
	
	s OCRstr = $$jxOCRPNG^jxOCRPNG(imgFullPath)
.
	d OCR2Table^jxOCRPNG(OCRstr, rid)
	&sql(Update Rcord Set OCR=:OCRstr WHERE id=:rid)
	&sql(INSERT INTO ResultBloodTest (Record,Type) VALUES (:rid, 'Blood Test'))
	d ^jxShowResults
.
	s outputsDir = "C:\InterSystems\Cache\JondaX\"_companyName_"\"_bk_"\outputs\"
.
	s hl7FileFullPath = $$jxResult2HL7^jxResult2HL7(rid)
	s %session.Data("jxTransform","fileName") = hl7FileFullPath
	d StandardizeHL7
	d HL7ToSDA
	d ##class(%File).Delete(hl7FileFullPath)
	q
.
HL7ToSDA
.
	s hl7Stream = ##class(%Stream.GlobalCharacter).%New()
	d hl7Stream.Write(%session.Data("jxTransform","hl7Standardized"))
	s hl7msg = ##class(EnsLib.HL7.Message).ImportFromLibraryStream(hl7Stream)	
	
	;s hl7msg = ##class(EnsLib.HL7.Message).ImportFromFile(%session.Data("jxTransform","fileName"))
	s tMSH = hl7msg.FindSegment("MSH")	; setting DocType
	i (tMSH){
		s %session.Data("jxTransform", "MSH") = tMSH.OutputToString()
		s tType = tMSH.GetValueAt(9, ":_~\&")
		s tVersion = tMSH.GetValueAt(12, ":_~\&")
		i (tType && tVersion){
			s hl7msg.DocType = tVersion_":"_tType
		}
	} else {
		s %session.Data("jxTransform", "MSH") = ""
	}
	d ##class(HS.Gateway.HL7.HL7ToSDA3).GetSDA(hl7msg,.tSDA, 1 ,1)
	; tSDA is the SDA %Stream.GlobalCharacter
	s SDAStr = tSDA.Read()
	;kill %session.Data("jxTransform")
	s %session.Data("jxTransform", "SDAStr") = $$UnescapeHL7(SDAStr)
		
	q
						
CDAToSDA
.
	#include %msql
	
	s CDAStream = ##class(%Stream.FileCharacter).%New()
	s tSDA3Stream = ##class(%Stream.GlobalCharacter).%New()
	s CDAStream.Filename = %session.Data("jxTransform","fileName")
	Set tTransformer1 = ##class(HS.Util.XSLTTransformer).%New()
    Set TransformStatus = tTransformer1.Transform(CDAStream,"SDA3/CCDA-to-SDA.xsl",.tSDA3Stream)  
    
    s SDAStr = tSDA3Stream.Read()
	;kill %session.Data("jxTransform")
	s %session.Data("jxTransform", "MSH") = ""
	s %session.Data("jxTransform", "SDAStr") = SDAStr
	q
.
.
FHIRJsonToSDA
.
	#include %msql
	
	s file = ##class(%Stream.FileCharacter).%New()
	s file.Filename = %session.Data("jxTransform","fileName")
	s fhirJsonStr = file.Read($$$MaxLocalLength)
	Set fhirObj= {}.%FromJSON(fhirJsonStr)
	
	set sdaObj = ##class(HS.FHIR.DTL.Util.API.Transform.FHIRToSDA3).TransformObject(fhirObj,"R4")
	s sdaStream = ##class(%Stream.GlobalCharacter).%New()
	s sdaStatus = sdaObj.object.ToQuickXMLStream(.sdaStream)
	
	s SDAStr = sdaStream.Read()
	;kill %session.Data("jxTransform")
	s %session.Data("jxTransform", "MSH") = ""
	s %session.Data("jxTransform", "SDAStr") = SDAStr
	
	q
.
.
FHIRXmlTOSDA
.
	#include %msql
	
	s file = ##class(%Stream.FileCharacter).%New()
	s file.Filename = %session.Data("jxTransform","fileName")
	s fhirXmlStr = file.Read($$$MaxLocalLength)
	
	Set jsonStream = ##class(%Stream.GlobalCharacter).%New()
	Set schema = ##class(HS.FHIRServer.Schema).LoadSchema("R4")
  	Do ##class(HS.FHIRServer.Util.XMLToJSON).XMLToJSONStream(fhirXmlStr, .jsonStream, schema)  
  	Set fhirObj= {}.%FromJSON(jsonStream)
	
	set sdaObj = ##class(HS.FHIR.DTL.Util.API.Transform.FHIRToSDA3).TransformObject(fhirObj,"R4")
.
	s sdaStream = ##class(%Stream.GlobalCharacter).%New()
	s sdaStatus = sdaObj.object.ToQuickXMLStream(.sdaStream)
	
	s SDAStr = sdaStream.Read()
	;kill %session.Data("jxTransform")
	s %session.Data("jxTransform", "MSH") = ""
	s %session.Data("jxTransform", "SDAStr") = SDAStr
.
	q
.
.
SDAToHL7
	
	s tSDA = ##class(%Stream.GlobalCharacter).%New()
	//d tSDA.Write(%session.Data("jxTransform","SDAStr"))
	s escapedSDAStr = $$EscapeHL7(%session.Data("jxTransform","SDAStr"))
	d tSDA.Write(escapedSDAStr)	
	
	s sda = ##class(HS.SDA3.Container).%New()
	d sda.InitializeXMLParse(tSDA)
	
	k hl7msg
	s hl7msg = ##class(EnsLib.HL7.Message).%New()
	d hl7msg.Clear()
	
	s dl = "^"
	
	s pSDA = 1
	WHILE(pSDA '= ""){
		d sda.GetNextSDA(.pType, .pSDA)
		if (pType ="Patient"){
			s hl7msg = $$ParsePIDandMSH^jxSDAToHL7(.pSDA, .hl7msg)
		} elseif(pType = "Encounter"){
			s hl7msg = $$ParsePV1^jxSDAToHL7(.pSDA, .hl7msg)
		} elseif (pType = "LabOrder"){
			s hl7msg = $$ParseORC^jxSDAToHL7(pSDA, hl7msg)
			s hl7msg = $$ParseOBR^jxSDAToHL7(pSDA, hl7msg)
			s hl7msg = $$ParseOBX^jxSDAToHL7(pSDA, hl7msg)
		}	
	}
.
	s downloadStr = hl7msg.OutputToString()
	s downloadStr = $replace(downloadStr,"\","\\")
	s %session.Data("jxTransform","downloadStr")= downloadStr
	&js<downloadStr = `#(%session.Data("jxTransform","downloadStr"))#`>
	
	q
.
.
SDAToCDA
.
	s tSDA = ##class(%Stream.GlobalCharacter).%New()
	d tSDA.Write(%session.Data("jxTransform","SDAStr"))
	
	s tTransformer = ##class(HS.Util.XSLTTransformer).%New()
    s tSC = tTransformer.Transform(tSDA,"SDA3/SDA-to-CCDA-CCD.xsl",.tCDAStream)
	
	d tCDAStream.Rewind()
	s downloadStr = tCDAStream.Read()
	
	s %session.Data("jxTransform","downloadStr")= downloadStr
	
	&js<downloadStr = `#(%session.Data("jxTransform","downloadStr"))#`>
	
	q
.
.
.
SDAToFHIRJson
.
	s tSDA = ##class(%Stream.GlobalCharacter).%New()
	d tSDA.Write(%session.Data("jxTransform","SDAStr"))
	
	s fhirObj = ##class(HS.FHIR.DTL.Util.API.Transform.SDA3ToFHIR).TransformStream(tSDA,"HS.SDA3.Container","R4")
	s fhirJson = fhirObj.bundle.%ToJSON()
	
	s fsStream = ##class(%GlobalCharacterStream).%New()
	s streamStatus = fsStream.Write(fhirJson)
	
	d fsStream.Rewind()
	s downloadStr = fsStream.Read()
	s %session.Data("jxTransform","downloadStr")= downloadStr
	&js<downloadStr = `#(%session.Data("jxTransform","downloadStr"))#`>
	
	q
.
SDAToFHIRXml
.
	s tSDA = ##class(%Stream.GlobalCharacter).%New()
	d tSDA.Write(%session.Data("jxTransform","SDAStr"))
	
	s fhirObj = ##class(HS.FHIR.DTL.Util.API.Transform.SDA3ToFHIR).TransformStream(tSDA,"HS.SDA3.Container","R4")
	s xmlStream = ##class(%Stream.GlobalCharacter).%New()
	s schema = ##class(HS.FHIRServer.Schema).LoadSchema("R4")
  	d ##class(HS.FHIRServer.Util.JSONToXML).JSONToXML(fhirObj.bundle, .xmlStream, schema)   
	
	d xmlStream.Rewind()
	s downloadStr = xmlStream.Read()
	s %session.Data("jxTransform","downloadStr")= downloadStr
	&js<downloadStr = `#(%session.Data("jxTransform","downloadStr"))#`>
	
	q
.
ExtractSDA
.
	s tSDA = ##class(%Stream.GlobalCharacter).%New()
	d tSDA.Write(%session.Data("jxTransform","SDAStr"))
	
.
	; ADD HERE tSDA is %Global.CharacterStream from Session 	
	d tSDA.Rewind()
	s sda = ##class(HS.SDA3.Container).%New()
	d sda.InitializeXMLParse(.tSDA)
	
	
	s pType = ""
	WHILE (pType '= "LabOrder" ){
		d sda.GetNextSDA(.pType, .pSDA)
		if pType = "" {BREAK}
	}
.
	if (pType = "") {
		&js<alert("No results are found in the uploaded record!")>
		q	
	}
	
	if (pSDA.Result && pSDA.Result.ResultItems){
		s resultsList = pSDA.Result.ResultItems	
	} else {
		&js<alert("No list in results!")>
		q
	}
	
	if (resultsList){
		s %session.Data("jxTransform","Count") = resultsList.Count()
	} else {s %session.Data("jxTransform","Count") =0}
	;s %session.Data("jxTransform","Count") = resultsList.Count()
	;FOR index=1:1:resultsList.Count(){
	FOR index=1:1:%session.Data("jxTransform","Count"){	
		s labResultItem = resultsList.GetAt(index)
		s testItemCode = labResultItem.TestItemCode
		
		s %session.Data("jxTransform",index,"ObservationTime")=labResultItem.ObservationTime
		s %session.Data("jxTransform",index,"ObservationValueType")=labResultItem.ObservationValueType
		s %session.Data("jxTransform",index,"ResultNormalRange")=labResultItem.ResultNormalRange
		s %session.Data("jxTransform",index,"ResultValue")=labResultItem.ResultValue
		s %session.Data("jxTransform",index,"ResultValueUnits")=labResultItem.ResultValueUnits
		s %session.Data("jxTransform",index,"OrgResultValueUnits")=labResultItem.ResultValueUnits
		s %session.Data("jxTransform",index,"TestItemStatus")=labResultItem.TestItemStatus
		s %session.Data("jxTransform",index,"OrgCode")=testItemCode.Code
		s %session.Data("jxTransform",index,"Code")=testItemCode.Code
		s %session.Data("jxTransform",index,"OrgDescription")=testItemCode.Description
		s %session.Data("jxTransform",index,"Description")=testItemCode.Description
		s %session.Data("jxTransform",index,"IsNumeric")=testItemCode.IsNumeric
		s %session.Data("jxTransform",index,"SDACodingStandard")=testItemCode.SDACodingStandard
		s %session.Data("jxTransform",index,"SIName")=""
	}
	
	q
	
.
ModifySDA
	
	s tSDA = ##class(%Stream.GlobalCharacter).%New()
	d tSDA.Write(%session.Data("jxTransform","SDAStr"))
	
	; ADD HERE tSDA is %Global.CharacterStream from Session 	
	d tSDA.Rewind()
	s startIndex = tSDA.FindAt(1, "<Result>" ) - 1
	s endIndex = tSDA.FindAt(startIndex, "</Result>") +9
	
	s sda = ##class(HS.SDA3.Container).%New()
	d sda.InitializeXMLParse(.tSDA)
	
	
	s pType = ""
	WHILE (pType '= "LabOrder" ){
		d sda.GetNextSDA(.pType, .pSDA)
	}
	
.
	FOR index=1:1:%session.Data("jxTransform","Count"){
		s pSDA.Result.ResultItems.GetAt(index).ObservationTime = %session.Data("jxTransform",index,"ObservationTime")
		s pSDA.Result.ResultItems.GetAt(index).ObservationValueType = %session.Data("jxTransform",index,"ObservationValueType")
		s pSDA.Result.ResultItems.GetAt(index).ResultNormalRange = %session.Data("jxTransform",index,"ResultNormalRange")
		s pSDA.Result.ResultItems.GetAt(index).ResultValue = %session.Data("jxTransform",index,"ResultValue")
		s pSDA.Result.ResultItems.GetAt(index).ResultValueUnits = %session.Data("jxTransform",index,"ResultValueUnits")
		s pSDA.Result.ResultItems.GetAt(index).TestItemStatus = %session.Data("jxTransform",index,"TestItemStatus")
		s pSDA.Result.ResultItems.GetAt(index).TestItemCode.Code = %session.Data("jxTransform",index,"Code")
		s pSDA.Result.ResultItems.GetAt(index).TestItemCode.Description = %session.Data("jxTransform",index,"Description")
		s pSDA.Result.ResultItems.GetAt(index).TestItemCode.IsNumeric = %session.Data("jxTransform",index,"IsNumeric")
		s pSDA.Result.ResultItems.GetAt(index).TestItemCode.SDACodingStandard = %session.Data("jxTransform",index,"SDACodingStandard")
	}
	
.
	s streamlet = pSDA.Result
	set pXML = ##class(%Stream.FileCharacter).%New()
	d streamlet.ToQuickXMLStream(.pXML)
	
	set newSDA = ##class(%Stream.FileCharacter).%New()
	
	d tSDA.Rewind()
	d newSDA.Write(tSDA.Read(startIndex))
	d pXML.Rewind()
	d newSDA.Write(pXML.Read())
	d tSDA.MoveTo(endIndex)
	d newSDA.Write(tSDA.Read(tSDA.Size))
	
	d newSDA.Rewind()
	s SDAStr = newSDA.Read()
	s %session.Data("jxTransform", "SDAStr") = SDAStr
	&js<fileName='#($p(%session.Data("jxUploadRecord"),".",1))#'>
	q
.
.
DownloadFile
	q
.
.
StandardizeHL7
	
	s hl7msg = ##class(EnsLib.HL7.Message).ImportFromFile(%session.Data("jxTransform","fileName"))
	i ('hl7msg){
		;w !, "ERROR IMPORTING HL7 FILE: ",%session.Data("jxTransform","fileName"),!
		&js<alert("WRONG FILE FORMAT! IMPORTED FILE: "+`#(%session.Data("jxTransform","fileName"))#`)>
		q
	}
	
	; setting Encounter
	s tPV1 = hl7msg.FindSegment("PV1")
	if (tPV1){
		s tEncNum = tPV1.GetValueAt(19, ":_~\&")
		if ('tEncNum){
			s EncStatus = tPV1.SetValueAt("123456789", 19)
			;w !,"Added Encounter number 123456789 at PV1:19"
		} 
	} else{
		s tPV1 = ##class(EnsLib.HL7.Segment).%New()
		s PV1Status = tPV1.SetValueAt("PV1", 0)
		s EncNumStatus = tPV1.SetValueAt("123456789",19)
		
		d hl7msg.FindSegment("PID", .PIDIndex)
		if (PIDIndex){
			s PV1Index = PIDIndex + 1
		} else {
			s PV1Index = 3
		}
		s setSegStatus = hl7msg.InsertSegmentAt(tPV1, PV1Index)
		if ('setSegStatus){
			w !, "Failed to insert PV1 segment",!
			q
		}
		;w !,"Added added PV1 segment with encounter number 123456789 after PID"
		KILL tPV1, PIDIndex, PV1Index
	}
	
	
	; finding OBRs
	s OBRIndex = 0
	s listOBR = $LISTBUILD()
	WHILE (OBRIndex '= ""){
		d hl7msg.FindSegment("OBR", .OBRIndex)
		if (OBRIndex){
			s listOBR = listOBR_$LISTBUILD(OBRIndex)	
		}
	}
	
	; finding ORCs
	s ORCIndex = 0
	s listORC = $LISTBUILD()
	WHILE(ORCIndex '=""){
		d hl7msg.FindSegment("ORC", .ORCIndex)
		if (ORCIndex){
			s listORC = listORC_$LISTBUILD(ORCIndex)	
		}
	}
	
	i ($LISTLENGTH(listOBR)<$LISTLENGTH(listORC)){
		;w !,"Bad Format: numbers of OBR is less than numbers of ORC in the file."
		q 
	}
	;zw listOBR
	s ORCIndexCarry = 0
	s numAddedSegments = 0
	FOR index=2:1:($LISTLENGTH(listOBR)){
		s curOBRIndex = $LISTGET(listOBR,index)
		s orcindex = index - ORCIndexCarry
		s curORCIndex = $LISTGET(listORC,orcindex)
.
		; setting ORC
		if ((curORCIndex '= "") && (curORCIndex < curOBRIndex)){
		
			s segIndex = curORCIndex - 1
			s tORC = hl7msg.FindSegment("ORC",.segIndex)
			i ((tORC '="") && (ORCIndex < curOBRIndex)){
				s tOBS = tORC.GetValueAt(29, ":_~\&")
				if ('tOBS){
					s obsStatus = tORC.SetValueAt("LAB",29)
				}
			}
			;w !,"Added value for ORC at index: "_segIndex
		} else {
	
			s tORC = ##class(EnsLib.HL7.Segment).%New()
			s orcStatus = tORC.SetValueAt("ORC",0)
			s obsStatus = tORC.SetValueAt("LAB",29)
			s curOBRIndex = curOBRIndex + numAddedSegments
			s setSegStatus = hl7msg.InsertSegmentAt(tORC, curOBRIndex)
			if ('setSegStatus){
				;w !, "Failed to insert ORC segment",!
				q
			}
			;w !,"Added ORC at index: "_curOBRIndex
			s ORCIndexCarry = ORCIndexCarry + 1
			s numAddedSegments = numAddedSegments + 1
		} 
		
		
	}
		
.
	KILL tORC, OBRIndex, ORCIndex, ORCIndexCarry
	
	s hl7Str = hl7msg.OutputToString()
	s %session.Data("jxTransform","hl7Standardized")=hl7Str
	
	q
.
UnescapeHL7(SDAStr) ;; \S\ to ^, etc
	s SDAStr = $replace(SDAStr, "\F\", "|")
	s SDAStr = $replace(SDAStr, "\R\", "~")
	s SDAStr = $replace(SDAStr, "\S\", "^")
	s SDAStr = $replace(SDAStr, "\T\", "&")
	s SDAStr = $replace(SDAStr, "\E\", "\")
	;s SDAStr = $replace(SDAStr, "\.br\*", $c(13,10))
	;s SDAStr = $replace(SDAStr, "\X0D\", $c(13,10))
	;s SDAStr = $replace(SDAStr, "\X0A\", $c(10))
	q SDAStr
	
EscapeHL7(SDAStr) ;; ^ to \S\, etc
	s SDAStr = $replace(SDAStr, "\", "\E\")
	s SDAStr = $replace(SDAStr, "|", "\F\")
	s SDAStr = $replace(SDAStr, "~", "\R\")
	s SDAStr = $replace(SDAStr, "^", "\S\")
	s SDAStr = $replace(SDAStr, "&", "\T\")
	
	;s SDAStr = $replace(SDAStr, $c(13,10), "\.br\*")
	;s SDAStr = $replace(SDAStr, $c(13,10), "\X0D\")
	;s SDAStr = $replace(SDAStr, $c(10), "\X0A\")
	q SDAStr
	

jxErrorReport^MAC^^67243,31964.3580622^0
jxErrorReport
	#import MX
	i bk="" q
	&sql(SELECT COUNT(ID) INTO :errorCount FROM Error WHERE BucketName=:bk AND IsNull(ReportedDate,'')='' AND Record->Profile->ID=:userid)
	i (+errorCount < 1) {
		i (devMode) {w !,"NO ERRORS TO REPORT"}
		q
	}
	d GenerateCSV
	if (csvStr = "" ) {q}
	s csvStream = ##class(%Stream.FileCharacter).%New()
	s dt = $zdatetime($h,3)
	s filedt = $TR($TR($zdatetime($h,2),":","-")," ","-")
	s csvFileName =  "ErrorReport for "_$replace(bk,"/",",")_"-"_filedt_".csv"
	s csvStream.Filename = outputsDir_csvFileName
	s csvStream.TranslateTable="UTF8"
 	s csvStream.BOM=$C(239,187,191)
	s writeStatus = csvStream.Write(csvStr)
	d csvStream.%Save()
	
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",outputsDir_csvFileName, failureBucket, "--profile", CliProfileName)
	d ##class(%File).Delete(outputsDir_csvFileName)
	
	d SendErrorMail
	
	;&sql(UPDATE MX.Error SET ReportedDate=:dt WHERE BucketName=:bk)
	d ##class(%File).Delete(outputsDir_csvFileName)
	q
	
.
SendErrorMail
	#import MX
	s EmailAddress="notifications@jonda.health"
 
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	; Calling Connect
.
	set mail.Subject="Error Report for "_bk
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	set status=mail.TextData.Write("<html><body>ERROR REPORT FOR: "_bk_" ,DATE: "_dt_"</body></html>")
	set status = mail.AttachFile(outputsDir, csvFileName)
.
	set status=mailserver.Send(mail)
.
 	q
	
	
GenerateCSV
	#import MX
	&sql(DECLARE C1 CURSOR FOR
		SELECT Code, CreatedDate, Record->OrgFile, Name, Data, Id
		INTO :d1,:d2,:d3,:d4,:d5,:eid
		FROM Error
		WHERE BucketName=:bk AND IsNull(ReportedDate,'')=''
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
.
	i SQLCODE '= 0{
		&sql(CLOSE C1)
		q
	}
	s cr = $c(13,10)
	s csvStr=""
	WHILE SQLCODE=0{
		&sql(SELECT Facing Into :facing FROM ErrorCode WHERE Code=:d1)
		;if (facing = "Internal"){&sql(FETCH C1) continue}
		
		s csvStr = csvStr_d3_","_d1_","_d4_","_d5_","_d2_cr
		
		s dt= $zdatetime($h,3)
		&sql(UPDATE MX.Error SET ReportedDate=:dt WHERE ID=:eid)
		
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	if (csvStr '= ""){
		s csvStr="File_Name,Error_Code,Error,Data,Date"_cr_csvStr
	}
	q
	
GenerateErrorReportByRid(rid, errorType=1)
	#import MX
	n bk,fileName,companyName,note,reason
	n d1,d2,d3,d4,d5,d6,dt,outputsDir
	; errorType 1 for ErrorReport and 2 for Notification
	
	&sql(SELECT BucketName, OrgFile, Profile->CompanyName, Note, Reason 
		INTO :bk, :fileName, :companyName, :note, :reason FROM Record WHERE id=:rid)
	;w !,"generateing error by rid: "
	;zw SQLCODE
	&sql(DECLARE C2 CURSOR FOR
		SELECT Code, CreatedDate, Record->OrgFile, Name, Data, ID
		INTO :d1,:d2,:d3,:d4,:d5,:d6
		FROM Error
		WHERE Record->id=:rid AND IsNull(ReportedDate,'')=''
	)
	;WHERE BucketName=:bk AND Record=:rid AND IsNull(ReportedDate,'')=''
	&sql(CLOSE C2)
	&sql(OPEN C2)
	;zw SQLCODE
	&sql(FETCH C2)
	;zw SQLCODE
	i SQLCODE '= 0{
		;{w !,"No Error Report. Skipping."}
		q 0
	}
	s cr = $c(13,10)
	s csvStr = ""
	WHILE SQLCODE=0{
		&sql(SELECT Facing Into :facing FROM ErrorCode WHERE Code=:d1)
		if (facing = "Internal"){&sql(FETCH C2) continue}
		
		s csvStr = csvStr_d3_","_d1_","_d4_","_d5_","_d2_cr
		s dt = $zdatetime($h,3)
		&sql(UPDATE MX.Error SET ReportedDate=:dt WHERE ID=:d6)
		&sql(FETCH C2)
	}
	&sql(CLOSE C2)
	if (csvStr=""){q 0}
	
	s csvStr="File_Name,Error_Code,Error,Data,Date"_cr_csvStr
	
	if (($L(note)>0) ! ($L(reason)>0) ){
		s noteAndReason = ""
		if ($L(note)>0){s noteAndReason = noteAndReason_"Notes: "_note}
		if ($L(reason)>0){s noteAndReason = noteAndReason_" Reasons: "_reason}
		s csvStr = csvStr_",,,"_noteAndReason_","_cr
	}
	
	s csvStream = ##class(%Stream.FileCharacter).%New()
	s dt = $zdatetime($h,3)
	s filedt = $TR($TR($zdatetime($h,2),":","-")," ","-")
	
	
	
	if (errorType = 2){
		s csvFileName =  "Notifications for "_fileName_" in "_$replace(bk,"/",",")_"-"_filedt_".csv"
	} else {
		s csvFileName =  "ErrorReport for "_fileName_" in "_$replace(bk,"/",",")_"-"_filedt_".csv"
	}
	
	s outputsDir = "c:\intersystems\cache\jondax\"_companyName_"\"_$replace(bk,"/","\")_"\outputs\"
	s csvStream.Filename = outputsDir_csvFileName
	s csvStream.TranslateTable="UTF8"
 	s csvStream.BOM=$C(239,187,191)
 	if ##class(%File).Exists(outputsDir_csvFileName) d ##class(%File).Delete(outputsDir_csvFileName)
	s writeStatus = csvStream.Write(csvStr)
	d csvStream.%Save()
		
	q outputsDir_csvFileName
	
GenerateErrorData(errorCode,fileName="",bucketName="",reason="",fromFormat="",toFormat="")
	#import MX
	&sql(SELECT Description INTO :errorData FROM ErrorCode WHERE Code=:errorCode)
	i ($L(fileName)>0){s errorData = $REPLACE(errorData,"[filename]",fileName)}
	i ($L(bucketName)>0){s errorData = $REPLACE(errorData,"[bucket]",bucketName)}
	i ($L(reason)>0){s errorData = $REPLACE(errorData,"[:reason]",reason)}
	i ($L(fromFormat)>0){s errorData = $REPLACE(errorData,"[:format]",fromFormat, 0, 1)}
	i ($L(toFormat)>0){s errorData = $REPLACE(errorData,"[:format]",toFormat,0,1)}
	q errorData
	
GenerateErrorName(errorCode)
	#import MX
	&sql(SELECT Name INTO :errorName FROM ErrorCode WHERE Code=:errorCode)
	q errorName
	
GenerateRedactionErrorReportByRid(rid)
	q "1"

jxFileConversion^MAC^^66672,54160.9890068^0
jxFileConversion
InitMe
	#import MX
	d INIT^WSP999
	s FName=%session.Data("jxUploadRecord")
	s fext=%session.Data("jxUploadRecord","fext")
	s myfile=%session.Data("jxTransform","fileName")
	i fext="hl7" d  q
	. s %session.Data("jxTransform","fileType") = "HL7"
	. &js<document.getElementById("uploadformat").innerHTML=" HL7 <span style='color:white;font-weight:normal'>file</span>">
	
	i fext="xml" d  q
	. d isFHIRorCDA
	. &js<document.getElementById("uploadformat").innerHTML=" " + fileType +" <span style='color:white;font-weight:normal'>file</span>">
	
	i (fext="json")!(fext="ttl") d  q
	. s %session.Data("jxTransform","fileType") = "FHIR"
	. &js<document.getElementById("uploadformat").innerHTML=" FHIR <span style='color:white;font-weight:normal'>file</span>">
	
	i fext="bmp"!(fext="heic")!(fext="jpg")!(fext="jpeg")!(fext="gif")!(fext="webp") d  q
	. s %session.Data("jxTransform","fileType") = "Image"
	. &js<document.getElementById("uploadformat").innerHTML="<span style='color:white;font-weight:normal'>n</span> image <span style='color:white;font-weight:normal'>file</span>">
.
	
	i fext="pdf" d  q
	. s %session.Data("jxTransform","fileType") = "PDF"
	. &js<document.getElementById("uploadformat").innerHTML=" PDF">
	
	q
Next
	d INIT^WSP999
	s d1=$s(d1["LOINC":"LOINC",d1["SNOMED":"SNOMED",1:"Custom")
	s d2=$s(d2["xml":"FHIR xml",d2["json":"FHIR json",d2["CDA":"C-CDA",1:"HL7")
	s %session.Data("jxNomenclature")=d1
	s %session.Data("jxFormat")=d2
	s fext=%session.Data("jxUploadRecord","fext")
	s fType=%session.Data("jxTransform","fileType")
	if (fType="HL7"){
		d StandardizeHL7^jxDataTransform
		d HL7ToSDA^jxDataTransform
	}
	elseif (fType="FHIR"){
		if (fext="xml"){
			d FHIRXmlTOSDA^jxDataTransform
		}
		elseif (fext="json"){ 
			d FHIRJsonToSDA^jxDataTransform
		}
	}
	elseif (fType="CDA"){
		d CDAToSDA^jxDataTransform
	}
	
	d ExtractSDA^jxDataTransform
	q
isFHIRorCDA
	d INIT^WSP999
	s fileType=""
    set status=##class(%XML.TextReader).ParseFile(myfile,.textreader)
	d textreader.Read()
	d textreader.Read()
	if (textreader.Name["ClinicalDocument"){
		s fileType="CDA"
	}
	if (textreader.Name["Bundle"){
		s fileType="FHIR"
	}
	s %session.Data("jxTransform","fileType") = fileType
	&js<fileType='#(fileType)#'>
	q 

jxGemini^MAC^^67275,16477.7564057^0
jxGemini
	#import MX
	&sql(SELECT Profile,Profile->UserID,TempFile,fExt,Profile->CompanyName,IsTrial INTO :pid,:k1,:d2,:ext,:CompanyName,:IsTrial FROM Record WHERE ID=:rid)
	s index=0,xIndex=0
	// Create a new folder for the chunks/pngs
	d ##class(%File).CreateDirectory(docDir_d2) 
	Set folderPath = docDir_d2
	
    s pdfType=##class(python.pdfhandler).checkType(docDir_d2_"."_ext)
    w pdfType,!
    // Get the total number of pages in the PDF
	Set totalPages = ##class(python.pdfhandler).pageCount(docDir_d2_"."_ext)
    &sql(Update Record SET PageCount =:totalPages WHERE id=:rid)
    
    if pdfType="Image-based"
    {
	    #;	; split PDF into per-page png
		;s cmd="win2pdfd pdf2png """_docDir_d2_"."_ext_""" """_docDir_d2_"\"_d2_".png"" 0"
		s cmd="win2pdfd pdf2png """_docDir_d2_"."_ext_""" """_folderPath_"\"_d2_".png"" 0"
		s x=$zf(-1,cmd_" && exit")
.
		set dir = ##class(%File).NormalizeDirectory(folderPath)
		set file=$ZSEARCH(dir_"*.png")
		while file'="" 
		{
AiCompletion
			w "Index: ",index,!
			Set index = ##class(python.GeminiAi).AiCompletion(file, rid,index, "png")
			w "Return index: ",index,!
	        if index = -429 d
	        .s index=$s($d(xIndex):xIndex, 1:0)
	        .h 5 g AiCompletion
	        else  d
	        .s xIndex=index h 5
.
			set file=$ZSEARCH("")
		}
		d ##class(%File).RemoveDirectoryTree(folderPath)
    } else{ 
    
.
	    w "Page Count: ",totalPages,!
	    If totalPages > 2 {
	    // Split the PDF into 2-page chunks
		    For i = 1:2:totalPages {
		        Set startPage = i
		        Set endPage = i + 1
		        If endPage > totalPages {
		            Set endPage = totalPages
		        }
.
		        Set chunkPath = folderPath_"\"_d2_"-" _ startPage _ "-" _ endPage _ ".pdf"
		    	Set cmd = "win2pdfd extractPages """_docDir_d2_"."_ext_""" """_startPage_""" """_endPage_""" """_chunkPath_""""
		    	// Execute the command using $ZF(-1)
		   		Set sc = $ZF(-1, cmd)
AiCompletion01		   		
		        // Call the AI completion method for each chunk
		        w "Index: ",index,!
		        Set index = ##class(python.GeminiAi).AiCompletion(chunkPath, rid,index, "pdf")
		        w "Return index: ",index,!
		        if index = -429 
		        {	s index=$s($d(xIndex):xIndex, 1:0)
		        	h 5 g AiCompletion01
		        }
		        elseif index=-400
		        {
		        	w "Too much data in 2-page: ",startPage,"-",endPage,!
		        	s index=$s($d(xIndex):xIndex, 1:0)
			        for j=startPage:1:endPage
			        {
AiCompletion02			w "Rechunking into 1-page pdf...",!
				        Set chunkPath = folderPath_"\"_d2_"-" _ j _ "-" _ j _ ".pdf"
						d ##class(python.pdfhandler).chunkPdf(docDir_d2_"."_ext,chunkPath,j,j)
						w "Index: ",index,!
						h 5
						Set index = ##class(python.GeminiAi).AiCompletion(chunkPath, rid,index, "pdf")
		        		w "Return index: ",index,!
		        		if index = -429 
					        {
					         s index=$s($d(xIndex):xIndex, 1:0)
					         h 5 g AiCompletion02
					        }else {s xIndex=index h 2    }
			        }
		        
			    }
		        else { s xIndex=index h 2}
		    	}
		    d ##class(%File).RemoveDirectoryTree(folderPath)	
	    }else
	    {	
	    	Set index = ##class(python.GeminiAi).AiCompletion(docDir_d2_"."_ext, rid,index, "pdf")
	     }
    }
    Quit
.
.
.

jxHL7ToFHIRjson^MAC^^67239,41105.0668421^0
jxHL7ToFHIRjson
	
 //LIVE SYSTEM	
ConvertResults(filePath,rid) ;fileName is full HL7 filepath
	#import MX
	d INIT^WSP999
	&sql(SELECT Profile->Setting->OutputFormat INTO :format FROM MX.Record WHERE ID=:rid)
	d StandardizeHL7(filePath)
	d HL7ToSDA(filePath)
	
	if format="FHIRjson" {d SDAToFHIRJson(filePath)	}
	elseif(format="FHIRxml") { d SDAToFHIRXml(filePath)	}
	
	if xml'="" d 
	.d Upload2Files(filePath,xml,rid)				
	.s %session.Data("jxTransform","OutputDir","HL7")=filePath
	.s %session.Data("jxTransform","OutputDir","xml/json")=xml
	e  &js<alert("ERROR creating FHIRjson output file. Please contact the developers with the file ID.")>
	q
StandardizeHL7(fname)
	s hl7msg = ##class(EnsLib.HL7.Message).ImportFromFile(fname)
	i ('hl7msg){
		;w !, "ERROR IMPORTING HL7 FILE: "
		&js<alert("WRONG FILE FORMAT! IMPORTED FILE. ")>
		q
	}
	//new added
	s tMSH = hl7msg.FindSegment("MSH")
	if (tMSH){
		s tEncNum = tMSH.GetValueAt(4, "x")
		if ('tEncNum){
			s EncStatus = tMSH.SetValueAt("x",4)
			;w !,"Added 'x' at MSH:4"
		}
	} //end 	
	; setting Encounter
	s tPV1 = hl7msg.FindSegment("PV1")
	if (tPV1){
		s tEncNum = tPV1.GetValueAt(19, ":_~\&")
		if ('tEncNum){
			s EncStatus = tPV1.SetValueAt("123456789", 19)
			;w !,"Added Encounter number 123456789 at PV1:19"
		} 
	} else{
		s tPV1 = ##class(EnsLib.HL7.Segment).%New()
		s PV1Status = tPV1.SetValueAt("PV1", 0)
		s EncNumStatus = tPV1.SetValueAt("123456789",19)
		
		d hl7msg.FindSegment("PID", .PIDIndex)
		if (PIDIndex){
			s PV1Index = PIDIndex + 1
		} else {
			s PV1Index = 3
		}
		s setSegStatus = hl7msg.InsertSegmentAt(tPV1, PV1Index)
		if ('setSegStatus){
			;w !, "Failed to insert PV1 segment",!
			&js<alert("Failed to insert PV1 segment");>
			q
		}
		;w !,"Added added PV1 segment with encounter number 123456789 after PID"
		KILL tPV1, PIDIndex, PV1Index
	}
	
	
	; finding OBRs
	s OBRIndex = 0
	s listOBR = $LISTBUILD()
	WHILE (OBRIndex '= ""){
		d hl7msg.FindSegment("OBR", .OBRIndex)
		if (OBRIndex){
			s listOBR = listOBR_$LISTBUILD(OBRIndex)	
		}
	}
	//new added
	s tOBR=hl7msg.FindSegment("OBR")
	s obrStatus = tOBR.SetValueAt("1",1) 
	s obrStatus = tOBR.SetValueAt("x",4)
	;s obrStatus = tOBR.SetValueAt("F",25)
	//end added
	; finding ORCs
	s ORCIndex = 0
	s listORC = $LISTBUILD()
	WHILE(ORCIndex '=""){
		d hl7msg.FindSegment("ORC", .ORCIndex)
		if (ORCIndex){
			s listORC = listORC_$LISTBUILD(ORCIndex)	
		}
	}
	
	i ($LISTLENGTH(listOBR)<$LISTLENGTH(listORC)){
		w !,"Bad Format: numbers of OBR is less than numbers of ORC in the file."
		&js<alert("Bad Format: numbers of OBR is less than numbers of ORC in the file.");>
		q 
	}
	;zw listOBR
	s ORCIndexCarry = 0
	s numAddedSegments = 0
	FOR index=2:1:($LISTLENGTH(listOBR)){
		s curOBRIndex = $LISTGET(listOBR,index)
		s orcindex = index - ORCIndexCarry
		s curORCIndex = $LISTGET(listORC,orcindex)
.
		; setting ORC
		if ((curORCIndex '= "") && (curORCIndex < curOBRIndex)){
		
			s segIndex = curORCIndex - 1
			s tORC = hl7msg.FindSegment("ORC",.segIndex)
			i ((tORC '="") && (ORCIndex < curOBRIndex)){
				s tOBS = tORC.GetValueAt(29, ":_~\&")
				if ('tOBS){
					s obsStatus = tORC.SetValueAt("LAB",29)
					s obsStatus = tORC.SetValueAt("A",5)
				}
			}
			;w !,"Added value for ORC at index: "_segIndex
		} else {
	
			s tORC = ##class(EnsLib.HL7.Segment).%New()
			s orcStatus = tORC.SetValueAt("ORC",0)
			s obsStatus = tORC.SetValueAt("LAB",29)
			s obsStatus = tORC.SetValueAt("A",5)
			s curOBRIndex = curOBRIndex + numAddedSegments
			s setSegStatus = hl7msg.InsertSegmentAt(tORC, curOBRIndex)
			if ('setSegStatus){
				;w !, "Failed to insert ORC segment",!
				&js<alert("Failed to insert ORC segment");>
				q
			}
			;w !,"Added ORC at index: "_curOBRIndex
			s ORCIndexCarry = ORCIndexCarry + 1
			s numAddedSegments = numAddedSegments + 1
		} 
		
		
	}
		
.
	KILL tORC, OBRIndex, ORCIndex, ORCIndexCarry
	
	s hl7Str = hl7msg.OutputToString()
	/* ; for debugging
	s f1="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\testing\stdHL7.txt"
	o f1:"wns"
	u f1
	w hl7Str
	c f1 
	*/
	;k ^jxTransform("hl7")
	;s ^jxTransform("hl7")=hl7Str
	s %session.Data("jxTransform","hl7Standardized")=hl7Str
	
	q
HL7ToSDA(fName)
.
	s hl7Stream = ##class(%Stream.GlobalCharacter).%New()
	d hl7Stream.Write($g(%session.Data("jxTransform","hl7Standardized")))
	;d hl7Stream.Write($g(^jxTransform("hl7")))
	;s hl7msg = ##class(EnsLib.HL7.Message).ImportFromFile(fName)
.
	s tMSH = hl7msg.FindSegment("MSH")	; setting DocType
	i (tMSH){
		;k ^jxTransform("SDA", "MSH")
		;s ^jxTransform("SDA", "MSH") = tMSH.OutputToString()
		s %session.Data("jxTransform", "MSH") = tMSH.OutputToString()
		s tType = tMSH.GetValueAt(9, ":_~\&")
		s tVersion = tMSH.GetValueAt(12, ":_~\&")
		i (tType && tVersion){
			s hl7msg.DocType = tVersion_":"_tType
		}
	} else {
		;k ^jxTransform("SDA", "MSH")
		;s ^jxTransform("SDA", "MSH") = ""
		s %session.Data("jxTransform", "MSH") = ""
	}
	d ##class(HS.Gateway.HL7.HL7ToSDA3).GetSDA(hl7msg,.tSDA, 1 ,1)
	; tSDA is the SDA %Stream.GlobalCharacter
	s SDAStr = tSDA.Read()
	;kill %session.Data("jxTransform")
	;k ^jxTransform("SDAstr")
	;s ^jxTransform("SDAstr") = $$UnescapeHL7^jxDataTransform(SDAStr)
	s %session.Data("jxTransform", "SDAStr") = $$UnescapeHL7^jxDataTransform(SDAStr)
	
	/* ;for debugging
	s f1="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\testing\SDA.txt"
	o f1:"wns"
	u f1
	w $$UnescapeHL7^jxDataTransform(SDAStr)
	c f1
	*/	
	q	
	  
SDAToFHIRJson(fname)
	s xml=""
	s SDAstr=$g(%session.Data("jxTransform", "SDAStr"))
	set SDAstr = $$EscapeFHIR^jxHL7ToFHIRjson(SDAstr)
		
    s tSDA = ##class(%Stream.GlobalCharacter).%New()
    d tSDA.Write(SDAstr)   
.
    try {
        s fhirObj = ##class(HS.FHIR.DTL.Util.API.Transform.SDA3ToFHIR).TransformStream(tSDA, "HS.SDA3.Container", "R4")
        if '$isobject(fhirObj) {
        ;set status = $$$ERROR($$$GeneralError, "Transformation failed: invalid FHIR object.")
        q
    	}       
        s fhirJson = fhirObj.bundle.%ToJSON()
		
        s fsStream = ##class(%GlobalCharacterStream).%New()
        s streamStatus = fsStream.Write(fhirJson)
.
        d fsStream.Rewind()
        s downloadStr = fsStream.Read()
        s fName = $replace($piece(fname, "\", $length(fname, "\")), ".hl7", "")
        
        set fullPath = fname
        set xmlFilePath = $p(fullPath, "\", 1, $l(fullPath, "\") - 1)
        s xml = xmlFilePath_"\"_fName_"_FHIRjson.json"
        
        o xml:"wns"
        u xml
        w downloadStr
        c xml
        q 
    } catch ex {
        // Handle the exception
        ;write !,"An error occurred during transformation: ", ex.DisplayString(), !
        ;write "Error details: ", ex.Data("error"), !
        s xml=""
        q 
    }
SDAToFHIRXml(fname)
	s xml=""
	s SDAstr=$g(%session.Data("jxTransform", "SDAStr"))
	set SDAstr = $$EscapeFHIR^jxHL7ToFHIRjson(SDAstr)
		
    s tSDA = ##class(%Stream.GlobalCharacter).%New()
    d tSDA.Write(SDAstr)
.
    try {
        s fhirObj = ##class(HS.FHIR.DTL.Util.API.Transform.SDA3ToFHIR).TransformStream(tSDA, "HS.SDA3.Container", "R4")
        if '$isobject(fhirObj) {
        ;set status = $$$ERROR($$$GeneralError, "Transformation failed: invalid FHIR object.")
        q
    	}       
        s fhirJson = fhirObj.bundle.%ToJSON()
.
        s fsStream = ##class(%GlobalCharacterStream).%New()
        s streamStatus = fsStream.Write(fhirJson)
.
        d fsStream.Rewind()
        s downloadStr = fsStream.Read()
        s fName = $replace($piece(fname, "\", $length(fname, "\")), ".hl7", "")
        
        set fullPath = fname
        set xmlFilePath = $p(fullPath, "\", 1, $l(fullPath, "\") - 1)
        s xml = xmlFilePath_"\"_fName_"_FHIRxml.xml"
        
        o xml:"wns"
        u xml
        w downloadStr
        c xml
        q 
    } catch ex {
        // Handle the exception
        ;write !,"An error occurred during transformation: ", ex.DisplayString(), !
        ;write "Error details: ", ex.Data("error"), !
        s xml=""
        q 
    } 
Upload2Files(hl7File,jsonFile,rid)
	
	&sql(SELECT Profile->CompanyName,Profile->Setting, BucketName, OrgFile INTO :CompanyName,:userSetting, :bk, :fileName FROM MX.Record WHERE ID=:rid)
	if (bk["/"){
		s bkfd = $p(bk,"/",2,*)
		s bkn = $p(bk,"/",1)
		&sql(SELECT Buckets_CliProfileName into :CliProfileName FROM MX.Setting_buckets  
		WHERE buckets_folder =:bkfd and buckets_name = :bkn and setting=:userSetting
		)
	} else {
		s bkfd = "-"
		s bkn = bk
		&sql(SELECT Buckets_CliProfileName into :CliProfileName FROM MX.Setting_buckets  
		WHERE buckets_folder =:bkfd and buckets_name = :bkn and setting=:userSetting
		)
	}
	
	if (bk["/"){
		s sourceFolderInProcess = $p(bk,"/",2,*)_"/In-Process"
		s destinationFolderCompleted = $p(bk,"/",2,*)_"/Completed"
		s bk = $p(bk,"/",1)	
	} else {
		s sourceFolderInProcess = "In-Process"
		s destinationFolderCompleted = "Completed"
	}
	s copyDir= "C:\InterSystems\Cache\JondaX-Trials\"_CompanyName_"\"
	
	s sts1 = ##class(python.s3Utils).uploadFile(CliProfileName, hl7File, bk, destinationFolderCompleted)
	s sts2 = ##class(python.s3Utils).uploadFile(CliProfileName, jsonFile, bk, destinationFolderCompleted)
	s fileName=$$C2H^WSP999(fileName)
	s sts3 = ##class(python.s3Utils).moveFile(CliProfileName,bk,bk, fileName, sourceFolderInProcess , destinationFolderCompleted)	
	
	if ((+sts1=0)!(+sts2=0)){
.
		&js<alert("An error occurred in uploading output files to bucket. Alert developers with file ID: #(rid)# , File Name: #($p(fileName, "\",*))#")>
	} 
	elseif +sts3=0
	{
		d Binary2file^cReviewResultGroot
		s sts4 = ##class(python.s3Utils).uploadFile(CliProfileName, %dev, bk, sourceFolderInProcess)
		i +sts4 = 1 d
		. d ##class(%File).Delete(%dev) k %dev
		. s sts4 = ##class(python.s3Utils).moveFile(CliProfileName,bk,bk, fileName, sourceFolderInProcess , destinationFolderCompleted)	
		. g Finalize
	} else {
Finalize
		if (+sts1 = 1){
			; copy the HL7 result
			;s ^testing("hl7")=hl7File
			d ##class(%File).CopyFile(hl7File,copyDir)
			d ##class(%File).Delete(hl7File)
		}
		if (+sts2 = 1){
			; copy the FHIRjson result
			;s ^testing("json")=jsonFile
			d ##class(%File).CopyFile(jsonFile,copyDir)
			d ##class(%File).Delete(jsonFile)
		}
		s dt = $zdatetime($h,3)
		s uid = %session.Data("UserID")
		&sql(UPDATE MX.Record SET Status='Completed', ReviewedDate=:dt, ReviewedBy=:uid WHERE ID = :rid)
		
		s status= $$GenerateErrorReportByRid^jxErrorReport(rid,2)
		i (status '= 0){
			//&sql(SELECT Profile->Setting->CliProfileName, BucketName, OrgFile INTO :CliProfileName, :bk, :fileName FROM MX.Record WHERE ID=:rid)
			
			s sts = ##class(python.s3Utils).uploadFile(CliProfileName, status, bk, destinationFolderCompleted)
		
			; copy the HL7 result
			d ##class(%File).CopyFile(status,"C:\InterSystems\Cache\JondaX\JondaX\jondaffr2\copies\"_fileName)
			s errFname=##class(%File).GetFilename(status)
			d ##class(%File).CopyFile(status,copyDir_errFname)
			d ##class(%File).Delete(status)	
		
		}
		; Commented by DW 21/11/2023
		;d StripTables^jxBiolytica(rid)
		
		s uid = %session.Data("UserID")
		s rid = %session.Data("jxTransform","rid")
		if ($d(^FormData(uid, rid)) = 10){
			; Commented by DW 21/11/2023
			;K ^FormData(uid,rid)
		}
	}
	q
	
 //For Groot Testing IND
ConvertResultsIND(filePath,rid) ;fileName is full HL7 filepath
	#import MX
	d INIT^WSP999
	d StandardizeHL7IND(filePath)
	d HL7ToSDAIND
	d SDAToFHIRJsonIND(filePath)
	
	&sql(SELECT OrgName INTO :fName FROM ResultBloodTest1 where ID=:rid )
	s fName=$p(fName,".",1)
	&js<fileName = '#(fName)#'>
	;&js<formalFileExt = '#(orgFileName)#'>
	q
		
StandardizeHL7IND(fname)
	;s fname="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\testing\Blood Biochemistry.hl7" ;test.hl7" ;
	s hl7msg = ##class(EnsLib.HL7.Message).ImportFromFile(fname)
	i ('hl7msg){
		;w !, "ERROR IMPORTING HL7 FILE: "
		&js<alert("WRONG FILE FORMAT! IMPORTED FILE. ")>
		q
	}
	//new added
	s tMSH = hl7msg.FindSegment("MSH")
	if (tMSH){
		s tEncNum = tMSH.GetValueAt(4, "x")
		if ('tEncNum){
			s EncStatus = tMSH.SetValueAt("x",4)
			;w !,"Added 'x' at MSH:4"
		}
	} //end 	
	; setting Encounter
	s tPV1 = hl7msg.FindSegment("PV1")
	if (tPV1){
		s tEncNum = tPV1.GetValueAt(19, ":_~\&")
		if ('tEncNum){
			s EncStatus = tPV1.SetValueAt("123456789", 19)
			;w !,"Added Encounter number 123456789 at PV1:19"
		} 
	} else{
		s tPV1 = ##class(EnsLib.HL7.Segment).%New()
		s PV1Status = tPV1.SetValueAt("PV1", 0)
		s EncNumStatus = tPV1.SetValueAt("123456789",19)
		
		d hl7msg.FindSegment("PID", .PIDIndex)
		if (PIDIndex){
			s PV1Index = PIDIndex + 1
		} else {
			s PV1Index = 3
		}
		s setSegStatus = hl7msg.InsertSegmentAt(tPV1, PV1Index)
		if ('setSegStatus){
			;w !, "Failed to insert PV1 segment",!
			&js<alert("Failed to insert PV1 segment");>
			q
		}
		;w !,"Added added PV1 segment with encounter number 123456789 after PID"
		KILL tPV1, PIDIndex, PV1Index
	}
	
	
	; finding OBRs
	s OBRIndex = 0
	s listOBR = $LISTBUILD()
	WHILE (OBRIndex '= ""){
		d hl7msg.FindSegment("OBR", .OBRIndex)
		if (OBRIndex){
			s listOBR = listOBR_$LISTBUILD(OBRIndex)	
		}
	}
	//new added
	s tOBR=hl7msg.FindSegment("OBR")
	s obrStatus = tOBR.SetValueAt("1",1) 
	s obrStatus = tOBR.SetValueAt("x",4)
	;s obrStatus = tOBR.SetValueAt("F",25)
	//end added
	; finding ORCs
	s ORCIndex = 0
	s listORC = $LISTBUILD()
	WHILE(ORCIndex '=""){
		d hl7msg.FindSegment("ORC", .ORCIndex)
		if (ORCIndex){
			s listORC = listORC_$LISTBUILD(ORCIndex)	
		}
	}
	
	i ($LISTLENGTH(listOBR)<$LISTLENGTH(listORC)){
		w !,"Bad Format: numbers of OBR is less than numbers of ORC in the file."
		&js<alert("Bad Format: numbers of OBR is less than numbers of ORC in the file.");>
		q 
	}
	;zw listOBR
	s ORCIndexCarry = 0
	s numAddedSegments = 0
	FOR index=2:1:($LISTLENGTH(listOBR)){
		s curOBRIndex = $LISTGET(listOBR,index)
		s orcindex = index - ORCIndexCarry
		s curORCIndex = $LISTGET(listORC,orcindex)
.
		; setting ORC
		if ((curORCIndex '= "") && (curORCIndex < curOBRIndex)){
		
			s segIndex = curORCIndex - 1
			s tORC = hl7msg.FindSegment("ORC",.segIndex)
			i ((tORC '="") && (ORCIndex < curOBRIndex)){
				s tOBS = tORC.GetValueAt(29, ":_~\&")
				if ('tOBS){
					s obsStatus = tORC.SetValueAt("LAB",29)
					s obsStatus = tORC.SetValueAt("A",5)
				}
			}
			;w !,"Added value for ORC at index: "_segIndex
		} else {
	
			s tORC = ##class(EnsLib.HL7.Segment).%New()
			s orcStatus = tORC.SetValueAt("ORC",0)
			s obsStatus = tORC.SetValueAt("LAB",29)
			s obsStatus = tORC.SetValueAt("A",5)
			s curOBRIndex = curOBRIndex + numAddedSegments
			s setSegStatus = hl7msg.InsertSegmentAt(tORC, curOBRIndex)
			if ('setSegStatus){
				;w !, "Failed to insert ORC segment",!
				&js<alert("Failed to insert ORC segment");>
				q
			}
			;w !,"Added ORC at index: "_curOBRIndex
			s ORCIndexCarry = ORCIndexCarry + 1
			s numAddedSegments = numAddedSegments + 1
		} 
		
		
	}
		
.
	KILL tORC, OBRIndex, ORCIndex, ORCIndexCarry
	
	s hl7Str = hl7msg.OutputToString()
	s f1="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\testing\stdHL7.txt"
	o f1:"wns"
	u f1
	w hl7Str
	c f1
	;s ^martin("hl7")=hl7Str
	s %session.Data("jxTransform","hl7Standardized")=hl7Str
	
	q
HL7ToSDAIND
.
	s hl7Stream = ##class(%Stream.GlobalCharacter).%New()
	;d hl7Stream.Write($g(^martin("hl7")))
	d hl7Stream.Write($g(%session.Data("jxTransform","hl7Standardized")))
	;s hl7msg = ##class(EnsLib.HL7.Message).ImportFromLibraryStream(hl7Stream)	
	
	;s hl7msg = ##class(EnsLib.HL7.Message).ImportFromFile(fName)
	s tMSH = hl7msg.FindSegment("MSH")	; setting DocType
	i (tMSH){
		;s ^martin("SDA", "MSH") = tMSH.OutputToString()
		s %session.Data("jxTransform", "MSH") = tMSH.OutputToString()
		s tType = tMSH.GetValueAt(9, ":_~\&")
		s tVersion = tMSH.GetValueAt(12, ":_~\&")
		i (tType && tVersion){
			s hl7msg.DocType = tVersion_":"_tType
		}
	} else {
		;s ^martin("SDA", "MSH") = ""
		s %session.Data("jxTransform", "MSH") = ""
	}
	d ##class(HS.Gateway.HL7.HL7ToSDA3).GetSDA(hl7msg,.tSDA, 1 ,1)
	; tSDA is the SDA %Stream.GlobalCharacter
	s SDAStr = tSDA.Read()
	;kill %session.Data("jxTransform")
	;s ^martin("SDA") = $$UnescapeHL7^jxDataTransform(SDAStr)
	s %session.Data("jxTransform", "SDAStr") = $$UnescapeHL7^jxDataTransform(SDAStr)
	s f1="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\testing\SDA.txt"
	o f1:"wns"
	u f1
	w $$UnescapeHL7^jxDataTransform(SDAStr)
	c f1
		
	q	
SDAToFHIRJsonIND(fname)
.
	s tSDA = ##class(%Stream.GlobalCharacter).%New()
	;d tSDA.Write($g(^martin("SDA")))
	d tSDA.Write($g(%session.Data("jxTransform", "SDAStr")))
	Set regexPattern = "[ \r\n\t\S]+"
	Set matcher = ##class(%Regex.Matcher).%New(regexPattern)
	Set isMatch = matcher.Match(tSDA)
	if (isMatch){
	s fhirObj = ##class(HS.FHIR.DTL.Util.API.Transform.SDA3ToFHIR).TransformStream(tSDA,"HS.SDA3.Container","R4")
	s fhirJson = fhirObj.bundle.%ToJSON()
	
	s fsStream = ##class(%GlobalCharacterStream).%New()
	s streamStatus = fsStream.Write(fhirJson)
	
	d fsStream.Rewind()
	s downloadStr = fsStream.Read()
	s fName= $replace($PIECE(fname, "\", $LENGTH(fname, "\")) ,".hl7","")
	;s %session.Data("jxTransform","downloadStr")= downloadStr
	s f1="C:\InterSystems\Cache\CSP\jondax\groot\xml\"_fName_"_FHIRJson.xml"
	o f1:"wns"
	u f1
	w downloadStr
	c f1
	;s ^martin("FHIRjson","Download")=downloadStr
	;s %session.Data("jxTrial","downloadStr")= downloadStr
	&js<downloadStr = `#(downloadStr)#`>
	}
	q
	
EscapeFHIR(SDAstr)
	s SDAstr=$replace(SDAstr, "&", "\u0026")
	;s SDAstr=$replace(SDAstr, "\", "\\")
	;s SDAstr=$replace(SDAstr, "/", "\/")
	;s SDAstr=$replace(SDAstr, $c(34), "\"_$c(34))	; $c(34)= "
	;s SDAstr=$replace(SDAstr, "<", "\u003C")
	;s SDAstr=$replace(SDAstr, ">", "\u003E")
	q SDAstr
.
	//testing 
	/*	
StandardizeHL7(fname)
	;s fname="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\testing\Blood Biochemistry.hl7" ;test.hl7" ;
	s hl7msg = ##class(EnsLib.HL7.Message).ImportFromFile(fname)
	i ('hl7msg){
		;w !, "ERROR IMPORTING HL7 FILE: "
		&js<alert("WRONG FILE FORMAT! IMPORTED FILE. ")>
		q
	}
	//new added
	s tMSH = hl7msg.FindSegment("MSH")
	if (tMSH){
		s tEncNum = tMSH.GetValueAt(4, "x")
		if ('tEncNum){
			s EncStatus = tMSH.SetValueAt("x",4)
			;w !,"Added 'x' at MSH:4"
		}
	} //end 	
	; setting Encounter
	s tPV1 = hl7msg.FindSegment("PV1")
	if (tPV1){
		s tEncNum = tPV1.GetValueAt(19, ":_~\&")
		if ('tEncNum){
			s EncStatus = tPV1.SetValueAt("123456789", 19)
			;w !,"Added Encounter number 123456789 at PV1:19"
		} 
	} else{
		s tPV1 = ##class(EnsLib.HL7.Segment).%New()
		s PV1Status = tPV1.SetValueAt("PV1", 0)
		s EncNumStatus = tPV1.SetValueAt("123456789",19)
		
		d hl7msg.FindSegment("PID", .PIDIndex)
		if (PIDIndex){
			s PV1Index = PIDIndex + 1
		} else {
			s PV1Index = 3
		}
		s setSegStatus = hl7msg.InsertSegmentAt(tPV1, PV1Index)
		if ('setSegStatus){
			;w !, "Failed to insert PV1 segment",!
			&js<alert("Failed to insert PV1 segment");>
			q
		}
		;w !,"Added added PV1 segment with encounter number 123456789 after PID"
		KILL tPV1, PIDIndex, PV1Index
	}
	
	
	; finding OBRs
	s OBRIndex = 0
	s listOBR = $LISTBUILD()
	WHILE (OBRIndex '= ""){
		d hl7msg.FindSegment("OBR", .OBRIndex)
		if (OBRIndex){
			s listOBR = listOBR_$LISTBUILD(OBRIndex)	
		}
	}
	//new added
	s tOBR=hl7msg.FindSegment("OBR")
	s obrStatus = tOBR.SetValueAt("1",1) 
	s obrStatus = tOBR.SetValueAt("x",4)
	;s obrStatus = tOBR.SetValueAt("F",25)
	//end added
	; finding ORCs
	s ORCIndex = 0
	s listORC = $LISTBUILD()
	WHILE(ORCIndex '=""){
		d hl7msg.FindSegment("ORC", .ORCIndex)
		if (ORCIndex){
			s listORC = listORC_$LISTBUILD(ORCIndex)	
		}
	}
	
	i ($LISTLENGTH(listOBR)<$LISTLENGTH(listORC)){
		w !,"Bad Format: numbers of OBR is less than numbers of ORC in the file."
		&js<alert("Bad Format: numbers of OBR is less than numbers of ORC in the file.");>
		q 
	}
	;zw listOBR
	s ORCIndexCarry = 0
	s numAddedSegments = 0
	FOR index=2:1:($LISTLENGTH(listOBR)){
		s curOBRIndex = $LISTGET(listOBR,index)
		s orcindex = index - ORCIndexCarry
		s curORCIndex = $LISTGET(listORC,orcindex)
.
		; setting ORC
		if ((curORCIndex '= "") && (curORCIndex < curOBRIndex)){
		
			s segIndex = curORCIndex - 1
			s tORC = hl7msg.FindSegment("ORC",.segIndex)
			i ((tORC '="") && (ORCIndex < curOBRIndex)){
				s tOBS = tORC.GetValueAt(29, ":_~\&")
				if ('tOBS){
					s obsStatus = tORC.SetValueAt("LAB",29)
					s obsStatus = tORC.SetValueAt("A",5)
				}
			}
			;w !,"Added value for ORC at index: "_segIndex
		} else {
	
			s tORC = ##class(EnsLib.HL7.Segment).%New()
			s orcStatus = tORC.SetValueAt("ORC",0)
			s obsStatus = tORC.SetValueAt("LAB",29)
			s obsStatus = tORC.SetValueAt("A",5)
			s curOBRIndex = curOBRIndex + numAddedSegments
			s setSegStatus = hl7msg.InsertSegmentAt(tORC, curOBRIndex)
			if ('setSegStatus){
				;w !, "Failed to insert ORC segment",!
				&js<alert("Failed to insert ORC segment");>
				q
			}
			;w !,"Added ORC at index: "_curOBRIndex
			s ORCIndexCarry = ORCIndexCarry + 1
			s numAddedSegments = numAddedSegments + 1
		} 
		
		
	}
		
.
	KILL tORC, OBRIndex, ORCIndex, ORCIndexCarry
	
	s hl7Str = hl7msg.OutputToString()
	s f1="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\testing\stdHL7.txt"
	o f1:"wns"
	u f1
	w hl7Str
	c f1
	k ^jxTransform("hl7")
	s ^jxTransform("hl7")=hl7Str
	;s %session.Data("jxTransform","hl7Standardized")=hl7Str
	
	q
HL7ToSDA(fName)
.
	s hl7Stream = ##class(%Stream.GlobalCharacter).%New()
	;d hl7Stream.Write($g(%session.Data("jxTransform","hl7Standardized")))
	;d hl7Stream.Write($g(^jxTransform("hl7")))
	s hl7msg = ##class(EnsLib.HL7.Message).ImportFromFile(fName)
.
	s tMSH = hl7msg.FindSegment("MSH")	; setting DocType
	i (tMSH){
		k ^jxTransform("SDA", "MSH")
		s ^jxTransform("SDA", "MSH") = tMSH.OutputToString()
		;s %session.Data("jxTransform", "MSH") = tMSH.OutputToString()
		s tType = tMSH.GetValueAt(9, ":_~\&")
		s tVersion = tMSH.GetValueAt(12, ":_~\&")
		i (tType && tVersion){
			s hl7msg.DocType = tVersion_":"_tType
		}
	} else {
		k ^jxTransform("SDA", "MSH")
		s ^jxTransform("SDA", "MSH") = ""
		;s %session.Data("jxTransform", "MSH") = ""
	}
	d ##class(HS.Gateway.HL7.HL7ToSDA3).GetSDA(hl7msg,.tSDA, 1 ,1)
	; tSDA is the SDA %Stream.GlobalCharacter
	s SDAStr = tSDA.Read()
	;kill %session.Data("jxTransform")
	k ^jxTransform("SDAstr")
	s ^jxTransform("SDAstr") = $$UnescapeHL7^jxDataTransform(SDAStr)
	;s %session.Data("jxTransform", "SDAStr") = $$UnescapeHL7^jxDataTransform(SDAStr)
	
	s f1="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\testing\SDA.txt"
	o f1:"wns"
	u f1
	w $$UnescapeHL7^jxDataTransform(SDAStr)
	c f1
		
	q	
SDAToFHIRJson1(fname)
.
	s tSDA = ##class(%Stream.GlobalCharacter).%New()
	d tSDA.Write($g(^jxTransform("SDAstr")))
	;d tSDA.Write($g(%session.Data("jxTransform", "SDAStr")))
	
	s fhirObj = ##class(HS.FHIR.DTL.Util.API.Transform.SDA3ToFHIR).TransformStream(tSDA,"HS.SDA3.Container","R4")
	i '$isobject(fhirObj) 
	{
		q 0
	}
	else{
	s fhirJson = fhirObj.bundle.%ToJSON()
	
	s fsStream = ##class(%GlobalCharacterStream).%New()
	s streamStatus = fsStream.Write(fhirJson)
	
	d fsStream.Rewind()
	s downloadStr = fsStream.Read()
	s fName= $replace($PIECE(fname, "\", $LENGTH(fname, "\")) ,".hl7","")
	;s %session.Data("jxTransform","downloadStr")= downloadStr
	set fullPath = fname
	set filePath = $p(fullPath, "\", 1, $l(fullPath, "\") - 1)
	s f1=filePath_"\"_fName_"_FHIRjson.xml"
	o f1:"wns"
	u f1
	w downloadStr
	c f1 ;&js<downloadStr = `#(downloadStr)#`>
	q f1
	}
	  
SDAToFHIRJson(fname)
	s xml=""
    s tSDA = ##class(%Stream.GlobalCharacter).%New()
    d tSDA.Write($g(^jxTransform("SDAstr")))
   ; d tSDA.Write($g(%session.Data("jxTransform", "SDAStr")))
.
    try {
        s fhirObj = ##class(HS.FHIR.DTL.Util.API.Transform.SDA3ToFHIR).TransformStream(tSDA, "HS.SDA3.Container", "R4")
        if '$isobject(fhirObj) {
        ;set status = $$$ERROR($$$GeneralError, "Transformation failed: invalid FHIR object.")
        q
    	}       
        s fhirJson = fhirObj.bundle.%ToJSON()
.
        s fsStream = ##class(%GlobalCharacterStream).%New()
        s streamStatus = fsStream.Write(fhirJson)
.
        d fsStream.Rewind()
        s downloadStr = fsStream.Read()
        s fName = $replace($piece(fname, "\", $length(fname, "\")), ".hl7", "")
        
        set fullPath = fname
        set filePath = $p(fullPath, "\", 1, $l(fullPath, "\") - 1)
        s xml = filePath_"\"_fName_"_FHIRjson.xml"
        
        o xml:"wns"
        u xml
        w downloadStr
        c xml
.
        q  // Return the file name/path
    } catch ex {
        // Handle the exception
        ;write !,"An error occurred during transformation: ", ex.DisplayString(), !
        ;write "Error details: ", ex.Data("error"), !
        q 
    }
.
	*/
.
		
	

jxImageToHL7^MAC^^66675,58218.1786876^0
jxImageToHL7
.
	;imageFileFullPath must be declared
	s imageFileFullPath = "C:\InterSystems\Cache\JondaX\upload\test1.png"
	
	s fileName = $p(imageFileFullPath,"\",*)
	s tempFile = $p($p(imageFileFullPath,"\",*),".",1,*-1)
	s fExt = $p(fileName,".",*)
	s devDir = $p(imageFileFullPath, "\",1,*-1)_"\"_tempFile_"\"
	d ##class(%File).CreateDirectory(devDir)
	s stdoutDir = devDir_"log.txt"
	s stderrDir = devDir_"err.txt"
	
	s textractBucketName = "jondaffr"
	s textractBucket = "s3://"_textractBucketName_"/"
	
ProcessImage
.
	try{
		
		s dt = $zdatetime($h,3)
		&sql(INSERT INTO MX.Record (OrgFile,Status, fExt,Profile,TempFile, CreatedDate) VALUES (:fileName, 'In-Process', :fExt, :userId, :tempFile, :dt))	
		&sql(SELECT ID INTO :rid FROM Record WHERE OrgFile=:fileName AND CreatedDate=:dt)
		s scale = 100
		s maxFileSize = 9999999
		s fileSize =  ##class(%File).GetFileSize(imageFileFullPath)
		i (fileSize > maxFileSize){
			s scale=$p(100-(fileSize/99999999*100),".",1)-1	
		}
		
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_""""  ;add "/LOGCMD" inside for command expression inspection
		s status = $ZF(-100, cmdflag, "convert",imageFileFullPath,"-scale",scale_"%", "-deskew","40%", imageFileFullPath)
		if (status '= 0) {
				; throw error	
		}
		
		s fileSize =  ##class(%File).GetFileSize(imageFileFullPath)
		i (fileSize > maxFileSize){
			g ProcessImage	
		} else{
			d GetFile
		}
		
		
	} catch(err){
		w !,"ERROR in ProcessImage", !
		; error handler
		w !,"------ ERROR MESSAGE ------"
		w !,"Name: ",err.Name
		w !,"Code: ",err.Code
		w !,"Location: ",err.Location
		w !,"Data: ",err.Data
		w !,"------ END ERROR MESSAGE ------"
	}
	
.
GetFile
	
	s file = $p(imageFileFullPath,"\",*)
	s x=$zf(-1,"aws s3 cp """_imageFileFullPath_""" "_textractBucket_" && exit")
	h 3
	
	s ProcessCount=0
A
	s dt=$zdatetime($h,3)	
	s fileid=$p($h,",",1)_$p($h,",",2)
	s ProcessCount=ProcessCount+1
	;;; TODO: check what the ProcessCount (Page Limit) is 
	i ProcessCount>11 &sql(UPDATE Record SET ProcessedDate=:dt WHERE ID=:rid) q
	
	d SDTD
B	w ?3,"Getting JobID..." 
	i '##class(%File).Exists(devDir_fileid_".txt") d
	. s ProcessCount=ProcessCount+1
	. i ProcessCount>11 &sql(UPDATE Record SET ProcessedDate=:dt WHERE ID=:rid) q
	. h 5 
	. g B
	; ---------------------
ReadJobID
	s ProcessCount=ProcessCount+1
	i ProcessCount>11 g EndReadResult
	w ?3,"Read JobID..."
	s fnam=devDir_fileid_".txt"
	s $ztrap="EndReadJobID^jxImageToHL7"
	o fnam u fnam
	k arr
	s i=0
ReadJobID1
	u fnam r x
	s i=i+1
	s arr(i)=x
	g ReadJobID1	
	; ---------------------
EndReadJobID
	s $ztrap=""
	c fnam
	; TODO: add error log
	i '$d(arr(2)) &sql(UPDATE Record SET Type='Other' WHERE ID=:rid) g EndReadResult2
	; cleanup
	d ##class(%File).Delete(fnam)
	
	s jobid=$p(arr(2),"""",4)
	w ?3,"End JobID...: ",jobid,!
EndReadJobID1
	
	d GDTD
.
ReadResult
	w ?3,"Read Result..."
	s fnam=devDir_$p(file,"\",$l(file,"\"))_".txt"
	i '##class(%File).Exists(fnam) h 5 g EndReadJobID
	;o fnam u fnam
	;s $ZERROR=""
	;s $ztrap="EndReadResult^jxAWSBGPDF"
	;s pcs="^"_d2_"("""")"
	s (text,top,left,blocktype,confidence,page)=""
	;s i=$o(@(pcs),-1)
	w !,"---"
ReadResult1
	#include %msql
	w !,fnam
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = fnam
	s x = fs.Read($$$MaxLocalLength)
	;u fnam r x
	w !,x["IN_PROGRESS",!
	i x["IN_PROGRESS" d  w "GOING TO ERJ"  g EndReadJobID1
	. c fnam 
	. w "   ",fnam," IN PROGRESS...",! 
	. s $ztrap="" 
	. w !,"deleting: ", fnam,!
	. d ##class(%File).Delete(fnam)
	. h 10 	;i x="" c fnam s $ztrap="" h 1 g EndReadJobID1
	i x["""BlockType"": " s blocktype=$p(x,"""BlockType"": ",2)
	i x["""Confidence"": " s confidence=$p(x,"""Confidence"": ",2)
	i x["""Page"": " s page=$p(x,"""Page"": ",2)
	i x["""Text"": " s text=$p(x,"""Text"": ",2),text=$e(text,1,$l(text)-1)
	i x["""Left"": " s left=$p(x,"""Left"": ",2),left=$e(left,1,$l(left)-1)
	i x["""Top"": " s top=$p(x,"""Top"": ",2),top=$e(top,1,$l(top)-1)
	
	w text
	
	i x["""Page"": " d
	. w !,"SHIT HERE"
	. i text'="" d
	.. ;i +confidence<59 s text="",left="",top="" q
	.. s text=$replace(text,"""","")
	.. s text=$replace(text,"(","")
	.. s text=$replace(text,")","")
	.. i text="" s text="",left="",top="" q
	.. s blocktype=$zconvert($replace(blocktype,"""",""),"l")
	.. w !,blocktype
	.. i $zcvt(blocktype,"u")'="LINE," q
	.. ;s i=i+1
	.. ;s arr(i)=text
	.. ;s gbl="^"_d2_"("_i_")"
	.. s obj=##class(MX.Record).%OpenId(rid)
	.. d obj.OCR.Insert(text)
	.. d obj.%Save()
	.. s obj=""
	.. s (text,top,left,blocktype,confidence,page)=""	
	b
	g ReadResult1
.
.
EndReadResult
	s $ztrap=""
	c fnam
.
EndReadResult2
	b
	; clean up
	w !,"Cleaning Up"
	s str="aws s3 rm "_textractBucket_fileName
	;d ##class(%File).Delete(imageFileFullPath)
	s file=""
	
	s tRS=##class(%ResultSet).%New("%Library.File:FileSet")
	s tStatus=tRS.Execute(devDir)    
	while (tRS.Next()){
		d ##class(%File).Delete(tRS.Get("Name"))
	}
	d ##class(%File).RemoveDirectoryTree(devDir)
	
	s x=$zf(-1,"aws s3 rm """_textractBucket_fileName_""" && exit")
	
	return
	
SDTD	; Start Document Text Detection
	w "   Start Document Text Detection: ",file,!
	s cmd="aws textract start-document-text-detection --document ""{\""S3Object\"":{\""Bucket\"":\"""_textractBucketName_"\"",\""Name\"":\"""_$p(file,"\",$l(file,"\"))_"\""}}"" > """_devDir_fileid_".txt"""
	s x=$zf(-1,cmd_" && exit")
	q
GDTD	; Get Document Text Detection
	w "   Get Document Text Detection: ",!
	s cmd="aws textract get-document-text-detection --job-id """_jobid_""" > """_devDir_$p(file,"\",$l(file,"\"))_".txt"""
	s x=$zf(-1,cmd_" && exit")
	
	q
	
CLEANTABLES
	
	&sql(DELETE FROM Record)
	&sql(DELETE FROM ResultBloodTest)
	&sql(DELETE FROM ResultBloodTest_Tests)
	&sql(DELETE FROM Error)
	
	s tRS=##class(%ResultSet).%New("%Library.File:FileSet")
	s tStatus=tRS.Execute("C:\InterSystems\Cache\JondaX\upload\test1\")    
	while (tRS.Next()){
		s fName= tRS.Get("Name")
		w fName,!
		d ##class(%File).Delete(fName)
	}
	
	d ##class(%File).RemoveDirectoryTree("C:\InterSystems\Cache\JondaX\upload\test1\")
.
	q
	
	
jsonHandle
	
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = "C:\InterSystems\Cache\JondaX\upload\test1\test1.png.txt"
	s str = fs.Read($$$MaxLocalLength)
	s jsonObj = {}.%FromJSON(str)
	w !,"SIZE OF WHOLE OBJ: ", jsonObj.%Size()
	
	s Blocks = jsonObj.%Get("Blocks")
	s itr = Blocks.%GetIterator()
	
	while itr.%GetNext(.key,.val){
		;w !,Blocks.%Get(key).BlockType
		s Block = Blocks.%Get(key)
		s BlockType = Block.BlockType
		if (BlockType = "WORD") ! (BlockType = "LINE"){
			s word = $zcvt(Block.Text,"u")
			w !
			zw word
		}
	}
	
	q

jxLogin^MAC^^67173,26156.4209247^0
jxLogin
Validate	
	#import MX
	d INIT1^CSP999
	s id=""
	s dt=$zdatetime($h,3)
	s d1=$zconvert(d1,"l")
	if '$d(^jxLoginAttempt(d1)) {s ^jxLoginAttempt(d1)=5}
	i $d(^jxTimeout(d1)),$p($h,",",1)=$p($g(^jxTimeout(d1)),",",1),($p($h,",",2)-$p($g(^jxTimeout(d1)),",",2)) > 300 {k ^jxTimeout(d1)} 
	i +$h>+$g(^jxTimeout(d1)) {k ^jxTimeout(d1)}
	if $g(^jxLoginAttempt(d1))<1,'$d(^jxTimeout(d1)) {s ^jxLoginAttempt(d1)=5}
	s timeFrame=180
	if $g(^jxLoginAttempt(d1))=5 s ^jxFirstAtmpt(d1)=$h ;$p($h,",",2) 
	; Checks for exact password and validate
	&sql(SELECT ID,CompanyName,CompanyLogo,Address_City,Address_Country->Name, Setting
		INTO :id,:r1,:r2,:r3,:r4,:r5
		FROM "User" 
		WHERE UserID=:d1 AND %EXACT(Password)=:d2 AND IsNull(DeletedDate,'')='') ;AND IsTrial=0)
	i id="" d  q
	. s ^jxLoginAttempt(d1)=$g(^jxLoginAttempt(d1))-1
	. &js<document.getElementById("AlertText").style.opacity=1; document.getElementById("AlertText").innerHTML="Please enter a correct user id and password.";> 
	. if $g(^jxLoginAttempt(d1))<1,$p($h,",",1)=$p($g(^jxFirstAtmpt(d1)),",",1),($p($h,",",2)-$p($g(^jxFirstAtmpt(d1)),",",2))< timeFrame d
	..i '$d(^jxTimeout(d1)) s ^jxTimeout(d1)=$h
	..&js<document.getElementById("AlertText").innerHTML="Please enter a correct user id and password.<br>Too Many Attempts<br>";> ;&js<alert("Too Many Attempts"); > document.getElementById("AlertText").style.opacity=1;
	..;&js<document.getElementById("FailedText").style.opacity=1;document.getElementById("FailedText").innerHTML="Too Many Attempts";> ;&js<alert("Too Many Attempts");>
	. s valid=0 d autoMail
	. q:id="" 
	
	i '$d(^jxTimeout(d1)){	
	s loginCount = 0
	//Checks the last login of the User
	&sql(SELECT count(*)
		INTO :loginCount
		FROM User_LastLogin
		WHERE "User"=:id)
	s user=##class(User).%OpenId(id)
	s lastLogin=$zdatetime($horolog,3)
	d user.LastLogin.SetAt(lastLogin,loginCount+1)
	d user.%Save()	
	
	if r1="Jonda Health" s r1="JondaX"
	s fDir="C:/InterSystems/Cache/JondaX/ClientDownload/"  ; next folder should be ID from "User"
	i r5=5 s %session.Data("UserID")=9
	e  s %session.Data("UserID")=id
	s %session.Data("CompanyName")=r1
	s %session.Data("CompanyLogo")=r2
	s %session.Data("City")=r3
	s %session.Data("Country")=r4
	s %session.Data("UserName")=d1
	s %session.Data("Dir")=fDir		//for client portal download file storage
	s %session.Data("SessionId")=%session.SessionId  s ^SessionID(id)=$g(%session.Data("SessionId"))
	s valid=1 d autoMail
	;&js<alert(`#(%session.Data("UserName"))#`);>
	if loginCount=0 &js<window.open('jxChangePassword.csp','_self')>
	e  &js<window.open('jxMain.csp','_self')> ;change the landing page 
	}else {&js<document.getElementById("AlertText").style.opacity=1;document.getElementById("AlertText").innerHTML="You have exceeded your login attempts. Try again Later.";> } ;&js<alert("Try Again Later");> }
	
	q	
	
autoMail
	//Notify jondahealth of successful and unsucessful login attempts.
	if valid=1 s desc="[User ID] = "_d1_" logged into the client system successfully. Time ["_dt_"]."
	if valid=0 s desc="[User ID] = "_d1_" failed logging into client system. Time ["_dt_"]."
	s EmailAddress="notifications@jonda.health"
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	set mail.Subject="JondaX Client Portal Log"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	s status=mail.TextData.Write(desc)	
	s status=mail.TextData.Write($char(13,10))
	set status=mailserver.Send(mail)
	;&js<alert("Mail Sent");>
	q	
	
	
Logout(d1)
	k ^jxLoginAttempt(d1),^jxFirstAtmpt(d1)
	k %session.Data
	&js<window.open('jxLogin.csp','_self')>
	q	
Login ;not used
	#import MX
	d INIT1^WSP999
	s id=""
	&sql(SELECT ID,CompanyName,CompanyLogo,Address_City,Address_Country->Name
		INTO :id,:r1,:r2,:r3,:r4
		FROM "User" 
		WHERE UserID=:d1 AND %EXACT(Password)=:d2 AND IsNull(DeletedDate,'')='')
	i id="" &js<document.getElementById("AlertText").style.opacity=1> q
	
	//Added By Nyein to track Last Login date on 21st Sept, 2023
	s loginCount = 0
	&sql(SELECT count(*)
		INTO :loginCount
		FROM User_LastLogin
		WHERE "User"=:id)
	s user=##class(User).%OpenId(id)
	s lastLogin=$zdatetime($horolog,3)
	d user.LastLogin.SetAt(lastLogin,loginCount+1)
	d user.%Save()
	k user
	//
	
	s %session.Data("UserID")=id
	s %session.Data("CompanyName")=r1
	s %session.Data("CompanyLogo")=r2
	s %session.Data("City")=r3
	s %session.Data("Country")=r4
	s %session.Data("UserName")=r1
	s %session.Data("SessionId")=%session.SessionId
	&js<window.open('jxMain.csp','_self')>
	
	q
Logout1  ;not used
	k %session.Data
	&js<window.open('jxLogin.csp','_self')>
	q
	
	

jxOCRPNG^MAC^^67241,66119.6628378^0
jxOCRPNG(pngFullPath)
	
	if ($L(textractBucketName)=0){
		s textractBucketName = "jondaffr"
		s textractBucket = "s3://"_textractBucketName_"/"
	}
	
	s basePath = $p(pngFullPath,"\",1,*-1)
	s resultsDir = basePath_"\results\"
	if (##class(%File).DirectoryExists(resultsDir) = 0){
		d ##class(%File).CreateDirectory(resultsDir)
	}
.
UploadToS3
	; Upload To S3		
	s status=$zf(-1,"aws s3 cp """_pngFullPath_""" "_textractBucket_" && exit")
	s filelist(pngFullPath)=""
	h 3
	s pngName = $p(pngFullPath,"\",*)
	
SDTD	
	w "   Start Document Text Detection: ",pngFullPath,!
	;if $d(textractBucketFolder) s cmd="aws textract start-document-text-detection --document ""{\""S3Object\"":{\""Bucket\"":\"""_textractBucketName_"\"",\""Name\"":\"""_textractBucketFolder_pngName_"\""}}"" > """_resultsDir_pngName_".txt"""
	s cmd="aws textract start-document-text-detection --document ""{\""S3Object\"":{\""Bucket\"":\"""_textractBucketName_"\"",\""Name\"":\"""_pngName_"\""}}"" > """_resultsDir_pngName_".txt"""
	s x=$zf(-1,cmd_" && exit")
	h 1
	
	s jobid = $$ExtractJobId(resultsDir_pngName_".txt")
	;s jobid= ##class(python.textractUtils).SDTDjondaffr(pngName)
	i jobid = "" g SDTD
	d ##class(%File).Delete(resultsDir_pngName_".txt")
	h 3
	s tries = 0
	
GDTD	
	w "   Get Document Text Detection: ",!
	s cmd="aws textract get-document-text-detection --job-id """_jobid_""" > """_resultsDir_pngName_".txt"""
	s x=$zf(-1,cmd_" && exit")
	;d ##class(python.textractUtils).GenerateResTextFromJobID(jobid,resultsDir_pngName)
	#include %msql
.
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = resultsDir_pngName_".txt"
	d fs.Rewind()
	s str = fs.Read($$$MaxLocalLength)
	i (str["""JobStatus"": ""IN_PROGRESS""")  {
		w !,"File OCR status: In_PROGRESS"
		d ##class(%File).Delete(resultsDir_pngName_".txt")
		h 20 
		s tries=tries+1  
		i (tries > 10){
			w " Over 10 tries of Get Document Text Detection!",!
			return ""
		} 
		g GDTD
	} elseif ((str["""JobStatus"": ""FAILURE""") ! (str["""JobStatus"": ""PARTIAL_SUCCESS""")){
		w !,"File OCR status: FAILURE or PARTIAL_SUCCESS. Discarding"
		return "FAILURE"
	}
	w !,"File OCR Finished!"
	d ##class(%File).Delete(resultsDir_pngName_".txt")
	; OCR string is returned
	q str
	
	
.
ExtractJobId(fullFilePath) ;helper function
.
	#include %msql
	i ##class(%File).Exists(fullFilePath){
		s fs = ##class(%Stream.FileCharacter).%New()
		s fs.Filename = fullFilePath
		s str = fs.Read($$$MaxLocalLength)
		i (str=""){
			q ""
		}
		s jobIdObj = {}.%FromJSON(str)
		s jobid = jobIdObj.%Get("JobId")
		if (jobid '= ""){
			q jobid
		}else{
			q ""
		}
	} else {
		q ""
	}
	q
	
OCR2Table(OCRstr, rid)
	s jsonObj = {}.%FromJSON(OCRstr)
	
	s Blocks = jsonObj.%Get("Blocks")
	s itr = Blocks.%GetIterator()
	
	while itr.%GetNext(.key,.val){
		s Block = Blocks.%Get(key)
		s BlockType = Block.BlockType
		if (BlockType = "WORD"){
			s word = Block.Text
			s word = $TRANSLATE(word, """()", "")
			;w !,word
			s obj=##class(MX.Record).%OpenId(rid)
			d obj.OCR.Insert(word)
			d obj.%Save()
			s obj=""
		}
	}
	q

jxOCRPNG01^MAC^^67285,25020.7444461^0
jxOCRPNG(pngFullPath)
	
	if ($L(textractBucketName)=0){
		s textractBucketName = "jondaffr"
		s textractBucket = "s3://"_textractBucketName_"/"
	}
	
	s basePath = $p(pngFullPath,"\",1,*-1)
	s resultsDir = basePath_"\results\"
	if (##class(%File).DirectoryExists(resultsDir) = 0){
		d ##class(%File).CreateDirectory(resultsDir)
	}
 	
	s filelist(pngFullPath)=""
	h 3
	s pngName = $p(pngFullPath,"\",*)
	s tries = 0
	
GDTD	
.
	w "   Get Document Text Detection: ",!
	s language="en"	
	;s cmd="cd c:\InterSystems\Cache\bin && c:\interSystems\cache\jondax\scripts\PPOCR_imgs.py -i "_pngFullPath_" -p "_resultsDir_""
	;s cmd="cd c:\InterSystems\Cache\bin && c:\interSystems\cache\jondax\scripts\POCR_v1.3.py -i """_pngFullPath_""" -l """_language_""" -p ""C:\data_transform\AI"""
	s cmd="c:\InterSystems\Cache\bin\paddle_env\Scripts\activate && python c:\interSystems\cache\jondax\scripts\POCR_v1.3.py -i """_pngFullPath_""" -l """_language_""" -p ""C:\data_transform\AI"""
	s x=$zf(-1,cmd_" && exit")
	;d ##class(%File).CopyFile(pngFullPath,"C:\data_transform\AI\POCR\")
	if x=0
	{
		#include %msql
.
		s fs = ##class(%Stream.FileCharacter).%New()
		s fs.Filename = "C:\data_transform\AI\"_$replace(pngName,".png","")_".txt"
		d fs.Rewind()
		s str = fs.Read($$$MaxLocalLength)
		s size=fs.SizeGet()
		;w str,!
		
		if size=0 s str="FAILURE"
		;else  d ##class(%File).Delete(resultsDir_pngName_".txt")
	}
	else {
		s str="FAILURE"
	}
	; OCR string is returned
	q str
	
	
OCR2Table(OCRstr, rid)
	;set str= $replace(OCRstr,$c(9),"_$c(9)_")
	Set lineCount = $L(OCRstr, $C(13,10))
	s index=0
	For i=1:1:lineCount {
        Set line(i) = $P(OCRstr, $C(13,10), i)
        ;w "The line is ",line(i),! 
		s wordCount=$L(line(i),$c(9))
        For j=1:1:wordCount d
        . s index=index+1        
        . s word(index)=$P(line(i), $c(9),j) 
.
    }
	s wordCount=index
	s obj=##class(MX.Record).%OpenId(rid)
	
		for i=1:1:wordCount d
		.s value= word(i)
		.Do obj.OCR.Insert(value) 
		.d obj.%Save()
		
	s obj=""
	q

jxPDFHandler^MAC^^66694,20815.3620079^0
jxPDFHandler(rid)
.
	#import MX
	d INIT^CSP999
	&sql(SELECT Profile,Profile->UserID,TempFile,fExt,Profile->CompanyName,BucketName,OrgFile INTO :pid,:k1,:d2,:ext,:CompanyName,:bk, :fileName FROM Record WHERE ID=:rid)
	s docDir = "C:\InterSystems\Cache\JondaX\"_CompanyName_"\"_bk_"\documents\"
	
PDF2PNG
	
	d ##class(%File).CreateDirectory(docDir_d2) 
	
	; split PDF into per-page png
	s cmd="win2pdfd pdf2png """_docDir_d2_"."_ext_""" """_docDir_d2_"\"_d2_".png"" 0"
	s x=$zf(-1,cmd_" && exit")
	
ProcessPNGs
	
	s tRS=##class(%ResultSet).%New("%Library.File:FileSet")
	s tStatus=tRS.Execute(docDir_d2_"\")
	k filelist
	WHILE tRS.Next(){
		s pngFullPath = tRS.Get("Name")
ResizeAndDeskew		
		s scale = 100
		s maxFileSize = 9999999
		s fileSize =  ##class(%File).GetFileSize(pngFullPath)
		i (fileSize > maxFileSize){
			s scale=$p(100-(fileSize/99999999*100),".",1)-1	
			s cmd="convert """_pngFullPath_""" -scale "_scale_"% -deskew 40% """_pngFullPath_""""
			s status=$zf(-1,cmd_" && exit")
		}
		s fileSize =  ##class(%File).GetFileSize(pngFullPath)
		i (fileSize > maxFileSize){g ResizeAndDeskew}
		
		s OCRstr = $$jxOCRPNG^jxOCRPNG(pngFullPath)
.
		if (OCRstr =""){
			s errCode = "JX2003"
			s errData = "OCR process took too long to complete for "_fileName_" in "_bk
			s errName = "OCRTimeout"
			s errLocation = "^jxPDFHandler"
			&sql(INSERT INTO MX.Error (Code, Data, Name, Location, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :dt, :rid, :bk))
			return 0
		} else {
			d OCR2Table^jxOCRPNG(OCRstr, rid)
		}
		
    } 
    
    ; CLEAN UP
    s tRS=##class(%ResultSet).%New("%Library.File:FileSet")
	s tStatus=tRS.Execute(docDir_d2_"\")    
	while (tRS.Next()){
		d ##class(%File).Delete(tRS.Get("Name"))
	}
    
    d ##class(%File).RemoveDirectoryTree(docDir_d2)
	
    q 1
    
.
	
.
	

jxRedact^MAC^^67172,13022.9129441^0
jxRedact
	s devMode = 1
	d INIT1^WSP999	; background task, so no %session or usernames
	#import MX
	i devMode=1 w !,"REDACTING..."
	; loop through "User" to process multiple users
	; loop  is in ^jxBGTask
	;s userid = 9 ; 1 for Biolytica, 9 for JondaX
	
	k buckets k bucketIds d GetBucket	; get the bucket of Biolytica AWS buckets to redact
	q:'$d(buckets)
	s bkRoot=""
	
	s FileCounter=0
	
Step1
.
	; check subscription
	s RedactSubId =$$GetRedactionSubscription^jxSubscriptionUtils(userid) 
	if (RedactSubId = 0 ){
		i (devMode) { w "No Redaction subscription. Quitting..."}
		q
	}
	
	s downloadLimit = 10
.
	s bkRoot=$o(buckets(bkRoot)) 
	
GetNextFolder
	if (bkRoot = ""){
		i (devMode){w !,"NO MORE BUCKET TO PROCESS. QUITTING",!}
		q
	}	
		
	i (devMode){w !,"current Bucket: ",bkRoot,!}
	s bucketFolder = $o(buckets(bkRoot,""))
	i (devMode){w !,"current Folder: ",bucketFolder,!}
	s CliProfileName = $o(buckets(bkRoot,bucketFolder,""))
		
	if (bucketFolder = "-"){
		s bk = bkRoot
		s bksys = bk
	} else {
		s bk = bkRoot_"/"_bucketFolder
		s bksys = bkRoot_"\"_bucketFolder
	}	
.
	s systemDir = "c:\intersystems\cache\JondaX\" ;"C:\InterSystems\Cache\JondaX\jondaffr2\redact"  ;
	s companyDir = systemDir_CompanyName_"\"
	if (bucketFolder '= "-"){
		d CreateDir(companyDir_"\"_bkRoot_"\")
	}
	s devDir = systemDir_CompanyName_"\"_bksys_"\"
	s stdDir = systemDir_CompanyName_"\"_bksys_"\stdOutputs\"
	s docDir = systemDir_CompanyName_"\"_bksys_"\documents\"
	s outputsDir = systemDir_CompanyName_"\"_bksys_"\outputs\"
	s resultsDir = systemDir_CompanyName_"\"_bksys_"\results\"
	
	d CreateDir(companyDir)
	d CreateDir(devDir)
	d CreateDir(stdDir)
	d CreateDir(docDir)
	d CreateDir(outputsDir)
	d CreateDir(resultsDir)
.
	s stagingBucket = "s3://"_bk_"/Staging/"
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"
	
	s textractBucketName = r2 ;"jondatesting" ;"jondaffr2" ;"jonda-bucket-development"
	s textractBucket = "s3://"_textractBucketName_"/"	
Step2
.
	try{	
		s stdoutDir = stdDir_"log.txt"
		s stderrDir = stdDir_"err.txt" 
	
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_"""" 
		s status = $ZF(-100, cmdflag, "aws","s3","ls", stagingBucket, "--profile",  CliProfileName)
		i (status = 0) { ; remove ghost files in s3 bucket
			
			s str = $$ReadFile(stdoutDir)
			s secLine = $p(str, $c(13,10), 2)
		
			if (secLine '= ""){
				w "Removing ghost files",! 
				s status = $ZF(-100, cmdflag, "aws", "s3", "rm", stagingBucket, "--profile", CliProfileName)}
		} 
		
		s numOfDownloads = 0
		
Step2GetDocuments
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_"""" 
		s status = $ZF(-100, cmdflag, "aws","s3","ls", stagingBucket , "--profile", CliProfileName)
.
		s fileName = ""
		s fileName = $$ExtractFileNameFromBucketLog(stdoutDir)	
		
		i (devMode) {w !,"Number of downloads = ", numOfDownloads}
		
		i ((fileName = "") ! (numOfDownloads = downloadLimit)){ ;empty bucket returns as error
			i (devMode & (fileName = "")){w !,"EMPTY BUCKET" }	
			
			; recreating staging folder regardless of it exists or not
			i (fileName = "") {
				if (bucketFolder = "-"){s stagingFolder = "Staging/"} else {s stagingFolder = bucketFolder_"/Staging/"}
				s status = $ZF(-100, cmdflag, "aws","s3api","put-object", "--bucket" , bkRoot, "--key", stagingFolder, "--profile", CliProfileName)
			}
			
			
			g Step5
			
			
		}
		
		if (devMode){w !,"current file name from bucket: ", fileName}
		
		s tempFile = $$ATTNAME^WSP999()
		
		g Step3PdfCheck
.
Step2InProgress	
		; copy file to dev env
		
		s fileExt = $p(fileName,".",*)
		s status = $ZF(-100, cmdflag, "aws", "s3", "cp", stagingBucket_fileName, docDir_fileName, "--profile", CliProfileName)
		
		if (status '= 0){
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLIError", "JX2006","Step2InProgress^jxRedact",errData)
		}
		
		; obtain file binary
		s binaryFs = ##class(%Stream.FileBinary).%New()
		s binaryFs.Filename = docDir_fileName
		s binaryFs2 = ##class(%Stream.FileBinary).%New()
		WHILE 'binaryFs.AtEnd{
			s fileBinaryStream = binaryFs.Read()
			d binaryFs2.Write(fileBinaryStream)
		}
		d binaryFs2.%Save()
		s binaryName = binaryFs2.Filename
		; log the download to table
		s dt = $zdatetime($h,3)
		
		&sql(INSERT INTO MX.Redact (OrgFile,TempFile,Status, fExt,Profile, CreatedDate, BucketName) VALUES (:fileName,:tempFile, 'In-Process', :fileExt, :userid, :dt, :bk))
		
		; move file from staging to in-progress 
		s status = $ZF(-100, cmdflag, "aws", "s3", "mv", stagingBucket_fileName, inProcessBucket, "--profile", CliProfileName)
		if (status '= 0) {
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLIError", "JX2006","Step2InProgress^jxRedact",errData)
		}
		if (devMode){w !,"moved file to in-process"}
	} catch(err){
		d ErrorHandler(err)
	}
	
	s numOfDownloads = +numOfDownloads + 1
	;g SubscriptionCheck
	;g Step5
	g Step2GetDocuments
	
	q
	
Step3PdfCheck
	try {
		; file usability check	
		s filename=$PIECE(fileName, ".", 1)	
		s fileExt = $p(fileName,".",*)
		s fileExtUpper = $zconvert(fileExt, "U")
		
		i ((fileExtUpper'="PDF")&(fileExtUpper'="PNG")&(fileExtUpper'="JPEG")&(fileExtUpper'="JPG")&(fileExtUpper'="HEIC")&(fileExtUpper'="AVIF")&(fileExtUpper'="WEBP")) {
						
			i (devMode){w !,"Not supported file. Moving to Failure"}
			
			; log and report to the db table
			s dt = $zdatetime($h,3)
			&sql(INSERT INTO MX.Redact (OrgFile,Status, fExt,Profile, CreatedDate, ProcessedDate) VALUES (:fileName,'Failure', :fileExt, :userId, :dt, :dt))			
			&sql(SELECT ID INTO :rid FROM MX.Redact WHERE OrgFile=:fileName)
			
			s errCode = "JX1002"
			s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
			s errName = $$GenerateErrorName^jxErrorReport(errCode)
			s errLocation = "Step3PdfCheck^jxRedact"
			&sql(INSERT INTO MX.Error (Code, Data, Name, Location, CreatedDate, Redact, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :dt, :rid, :bk))
			
			; move file from staging to failure
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv", stagingBucket_fileName, failureBucket, "--profile", CliProfileName)
			i (status '= 0){
				s errData = $$ReadFile(stderrDir)
				s errCode = "JX2006"
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step3PdfCheck^jxRedact",errData)
			}
			g Step2GetDocuments
		}
	} catch(err){
		d ErrorHandler(err)
	}
	g Step2InProgress
	q
	
SubscriptionCheck
	
	s RedactSubId = $$GetRedactionSubscription^jxSubscriptionUtils(userid)
	if (RedactSubId = 0 ){
		i (devMode) { w "No Redaction subscription. Quitting..."}
		; ENABLE THIS AFTER SUBSCRIPTION BUYING PAGE IS COMPLETED
		;d SendSubscriptionOverMail^jxSubscriptionUtils(contactEmail, contactPerson)
		q
	}
	
.
	i (devMode){
		w !,"Redaction Sub ID: ",RedactSubId
	}
	d SubscriptionPoolDetails^jxSubscriptionUtils(userid)
	
Step5
	try{ 
.
		s rid=""
		
		if RedactSubId '= 0{
			&sql(SELECT TOP 1 ID,fExt, OrgFile INTO :rid, :fExt, :fileName FROM Redact WHERE IsNull(ProcessedDate,'')='' AND OrgFile<>''  AND Status='In-Process' AND BucketName=:bk ORDER BY CreatedDate) ;AND TempFile=:tempFile
			
		}elseif RedactSubId = 0 {
			if (devMode) {w !,"No Redaction Subscription available. Quitting..." } 
			q
		}
.
		
Step5ProcessFile
		if rid="" {
			i (devMode) {w !,"NO MORE FILE TO PROCESS.",!}
			
			i (numOfDownloads = downloadLimit){
				g Step2
			} else {
				d ^jxErrorReport 
				
				k buckets(bkRoot,bucketFolder)
				
				if ($d(buckets(bkRoot)) = 11){g GetNextFolder}
				else {
					k buckets(bkRoot)
					s bkRoot="" 
			
					g Step1
				}
			}
		}
		w !,!,"RID: ",rid
		s FileCounter=1
		
		s maxFileSize = 4999999 ;5MB
		s fileSize =  ##class(%File).GetFileSize(docDir_fileName)
		if (fileSize > maxFileSize){
			s errCode = "JX1003"
			s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
			s errName = $$GenerateErrorName^jxErrorReport(errCode)
			Throw ##class(%Exception.General).%New(errName,errCode,"Step5ProcessFile^jxRedact",errData)
		}
		
		; Redaction
		
		d ^redacting(fileName)		
		s processedDate = $zdatetime($h,3)
		&sql(UPDATE MX.Redact SET ProcessedDate=:processedDate, Status= 'Completed' WHERE ID = :rid)
		
		// update the subscription pool
		s recordPageCount = 0
		&sql(SELECT Status, PageCount, fExt INTO :recordStatus, :recordPageCount, fileExtension FROM Redact WHERE id = :rid)
		if (recordStatus = "Completed"){
			s status = $$DeductUnit^jxSubscriptionUtils(RedactSubId, "R", 1) //+recordPageCount
			//d AdjustSubscriptionPool^jxSubscriptionUtils(userid)
		}
		
.
		s redacted=filename_"-redacted."_fExt
		i (devMode)
		{ 
			w !,"DONE PROCESSING - RID: ",rid, "  ","Filename: ",filename_"-redacted."_fExt, "  ProcessedDate: ", processedDate,!
			w !,"Moving file to Completed....",!
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",inProcessBucket_fileName, completedBucket, "--profile", CliProfileName)
			if (status '= 0) {
				s errData = $$ReadFile(stderrDir)
				Throw ##class(%Exception.General).%New("CLIError", "JX2006","Step5ProcessFile^jxRedact",errData)
				}
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "cp",outputsDir_redacted, completedBucket, "--profile", CliProfileName)
			if (status '= 0) {
				s errData = $$ReadFile(stderrDir)
				Throw ##class(%Exception.General).%New("CLIError", "JX2006","Step5ProcessFile^jxRedact",errData)
				}
		}
		
		s errorCSV = $$GenerateRedactionErrorReportByRid^jxErrorReport(rid) ;not working
		if (errorCSV '=0){
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",errorCSV, failureBucket, "--profile", CliProfileName)
			d ##class(%File).Delete(errorCSV)
		}
		
		d ##class(%File).Delete(docDir_fileName)
		d ##class(%File).Delete(outputsDir_redacted)
	} catch(err){
		d ErrorHandler(err)
	}
	g SubscriptionCheck
.
.
GetBucket
.
	&sql(SELECT Setting, CompanyName,  ContactPerson, Email INTO :setting, :CompanyName, :contactPerson, :contactEmail FROM "User" WHERE ID=:userid)
	i (devMode) {w !, "Setting ID: ",setting, !,"CompanyName: ",CompanyName,!}
	&sql(DECLARE cBucket CURSOR FOR
		SELECT Buckets_Name, Buckets_Folder, Buckets_CliProfileName
		INTO :r2, :bfd, :bcp
		FROM Setting_Buckets
		WHERE Setting=:setting AND Buckets_Type['Redaction'
	)
	;		WHERE Setting=:setting AND (Buckets_Name= 'jondatesting' OR Buckets_Name= 'jonda-bucket-development')
.
	&sql(OPEN cBucket)
	&sql(FETCH cBucket)
	WHILE SQLCODE=0{
		s buckets(r2)=""
		s buckets(r2, bfd) = ""
		s buckets(r2, bfd, bcp) = ""
		&sql(FETCH cBucket)
	}
	&sql(CLOSE cBucket)
	q
END
	;cleanup and quit
	
	return
	
CreateDir(dirFullPath)
	try{
		if (##class(%File).DirectoryExists(dirFullPath) = 0){
			d ##class(%File).CreateDirectory(dirFullPath)
		}
	} catch(err){
		d ErrorHandler(err)
	}
	q
.
	
ExtractFileNameFromBucketLog(logPath)
	s str = $$ReadFile(logPath)
	s topLine = $p(str, $c(13,10), 1)
	s fileName = $E(topLine, 32,*)
	q fileName
	
ReadFile(fileFullPath)
	
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = fileFullPath
	try {
		s str = fs.Read($$$MaxLocalLength)
	}catch(err){
		d ErrorHandler(err)
	}
	q str
.
ExtractJobId(fullFilePath) ;not use
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = fullFilePath
	s str = fs.Read($$$MaxLocalLength)
	i (str=""){
		q ""
	}
	s jobIdObj = ##class(%DynamicAbstractObject).%FromJSON(str)
	s jobId = jobIdObj."JobId"
	q jobId
	
	
ErrorHandler(err)
		
	s dt = $zdatetime($h, 3)
	
	i (devMode){
		w !,"------ ERROR MESSAGE ------"
		w !,"Name: ",err.Name
		w !,"Code: ",err.Code
		w !,"Location: ",err.Location
		w !,"Data: ",err.Data
		w !,"------ END ERROR MESSAGE ------"
	}
	d ErrorMail
	i err.Name="" {s errName=""} else {s errName=err.Name}
	i err.Location="" {s errLocation=""} else {s errLocation = err.Location}
	i err.Code ="" {s errCode=""} else {s errCode = err.Code}
	i err.Data ="" {s errData=""} else {s errData = err.Data}
	i err.iStack="" {s erriStack=""} else {s erriStack = err.iStack}
	i ($d(tempFile) && $L(tempFile)>0){
		if (($d(rid)) && (rid="")){s bucketName = "" s recordName = "" } else {s bucketName = bk s recordName=fileName}
		&sql(INSERT INTO MX.Error (Code, Data, Name, Location, Stack, CreatedDate, Redact, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :erriStack, :dt, :rid, :bucketName))
		
		&sql(UPDATE MX.Redact SET Status='Failure', ProcessedDate=:dt WHERE ID = :rid)
		s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",inProcessBucket_fileName, failureBucket, "--profile", CliProfileName)
		
		s errorCSV = $$GenerateRedactionErrorReportByRid^jxErrorReport(rid)
		if (errorCSV '=0){
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",errorCSV, failureBucket, "--profile", CliProfileName)
			d ##class(%File).Delete(errorCSV)
		}
		
		d CleanFiles(rid)
		
	} else {
		&sql(INSERT INTO MX.Error (Code, Data, Location, Name, Stack, CreatedDate) VALUES (:errCode, :errData, :errLocation, :errName, :erriStack, :dt))
	}
	
	
	hang 1
	q
	
CleanFiles(rid)
	q
	&sql(SELECT TempFile,fExt, OrgFile,Profile->CompanyName,BucketName INTO :tempFile,:ext,:fileName, :comName, :bkName FROM Record WHERE ID=:rid)
	
	s resDir = "C:\InterSystems\Cache\JondaX\"_comName_"\"_$replace(bkName,"/","\")_"\results\"
	s dcDir = "C:\InterSystems\Cache\JondaX\"_comName_"\"_$replace(bkName,"/","\")_"\documents\"
	
	s file=resDir_tempFile_"."_ext
	d ##class(%File).Delete(file)
	s file=dcDir_tempFile_"."_ext
	d ##class(%File).Delete(file)
	s file=dcDir_tempFile_"\"
	d ##class(%File).RemoveDirectoryTree(file)
	s tRS=##class(%ResultSet).%New("%Library.File:FileSet")
	s tStatus=tRS.Execute(resDir)    
	while (tRS.Next()){
		d ##class(%File).Delete(tRS.Get("Name"))
	}
	
	q	
	
.
CLEANALLTABLES ; only for testing, DO NOT USE THIS
	q
	&sql(DELETE FROM Record)
	&sql(DELETE FROM ResultBloodTest)
	&sql(DELETE FROM ResultBloodTest_Tests)
	&sql(DELETE FROM Error)
.
	s CliProfileName = "default"
	s bk = "jondaffr2"
	s CompanyName = "JondaX"
	s systemDir = "c:\intersystems\cache\jondax\"
	s cmdflag = "/SHELL"
	s devDir = systemDir_CompanyName_"\"_bk_"\"
	
	s stagingBucket = "s3://"_bk_"/Staging/"
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"
.
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", inProcessBucket, "--profile", CliProfileName)
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", failureBucket, "--profile", CliProfileName)
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", completedBucket, "--profile", CliProfileName)
.
	d ##class(%File).RemoveDirectoryTree(devDir)
	q
.
ErrorMail	; Notify Jonda of error
	s EmailAddress="notifications@jonda.health"
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	do mail.Cc.Clear()
	do mail.Cc.Insert("nan@jonda.health")
	set mail.Subject="ERROR JondaX Frankfurt ^jxRedact encountered an error"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	set status=mail.TextData.Write("<html><body>------ ERROR MESSAGE ------<br><br>RecId: "_$g(rid)_"<br>Name: "_err.Name_"<br>Code: "_err.Code_"<br>Location: "_err.Location_"<br>Data: "_err.Data_"<br><br>This is an automated message. Do no reply to this message.</body></html>")
	set status=mailserver.Send(mail)
	q

jxResult2HL7^MAC^^67297,15188.5289869^0
jxResult2HL7(rid, devMode=0)
	#import MX
	
	&sql(SELECT Profile->CompanyName, Profile->Setting->ID, OrgFile, BucketName, ReportDate INTO :CompanyName, :setting, :fileName, :bk, :reportDate FROM Record WHERE ID=:rid)
.
	&sql(SELECT ReportDate INTO :RBTReportDate FROM ResultBloodTest WHERE Record->ID=:rid)
	if (RBTReportDate '= ""){
		s reportDate = RBTReportDate
	}
	
	&sql(SELECT CliProfileName INTO :CliProfileName FROM Setting WHERE ID=:setting)
.
	n d1,key,Q
	n d1,d2,d3,d4,d5,r1,r2,r3,r4
.
	if (bk["/"){
		s bksys = $replace(bk,"/","\")
	} else { s bksys = bk}
.
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"
	s outputsDir = "C:\InterSystems\Cache\JondaX\"_CompanyName_"\"_bksys_"\outputs\"
	
	&sql(SELECT ID INTO :rbt From ResultBloodTest WHERE Record->ID=:rid)
	
	i (devMode){w !,"RBT: ", rbt}
	
	;&js<console.log(`#(rbt)#`)>
	
	if ((rid = "")!(rbt="")){q 0}
	
	; take place holder from table.
	; dummy
	s emptyPlaceHolder = ""
	s hl7msg = ##class(EnsLib.HL7.Message).%New()
	d hl7msg.Clear()
	
	s MSH = ##class(EnsLib.HL7.Segment).%New()
	s MSHstatus = MSH.SetValueAt("^~\\&",1)
	s MSHstatus = MSH.SetValueAt("mshSendingFaciliy", 4)
	s MSHstatus = MSH.SetValueAt("ORU^R01",8)
	s MSHstatus = MSH.SetValueAt("2.3",11)
	s MSHstatus = MSH.SetValueAt("MSH",0)
	s setSegStatus = hl7msg.InsertSegmentAt(MSH, 1)
	s PID = ##class(EnsLib.HL7.Segment).%New()
	s PIDstatus = PID.SetValueAt("PID",0)
	s PIDstatus = PID.SetValueAt(emptyPlaceHolder,3)
	s PIDstatus = PID.SetValueAt(emptyPlaceHolder,5)
	s setSegStatus = hl7msg.InsertSegmentAt(PID, 2)
	
	s PV1 = ##class(EnsLib.HL7.Segment).%New()
	s PV1status = PV1.SetValueAt("PV1",0)
	s PV1status = PV1.SetValueAt(emptyPlaceHolder,2)
	s PV1status = PV1.SetValueAt(emptyPlaceHolder,19)
	s setSegStatus = hl7msg.InsertSegmentAt(PV1, 3)
	
	s ORC = ##class(EnsLib.HL7.Segment).%New()
	s ORCstatus = ORC.SetValueAt("ORC",0)
	s ORCstatus = ORC.SetValueAt("1",1)
	s ORCstatus = ORC.SetValueAt("LAB",29)
	s setSegStatus = hl7msg.InsertSegmentAt(ORC, 4)
.
	s reportDateHL7 = $ZDT(reportDate,8)
	s reportDateHL7 = reportDateHL7_"000000"
	if (reportDate = ""){s reportDateHL7 = ""}
	
	s OBR = ##class(EnsLib.HL7.Segment).%New()
	s OBRstatus = OBR.SetValueAt("OBR",0)
	s OBRstatus = OBR.SetValueAt(emptyPlaceHolder,4)
	s OBRstatus = OBR.SetValueAt(reportDateHL7,14)
	s setSegStatus = hl7msg.InsertSegmentAt(OBR, 5)
.
	k MissingSIName
	k MissingTemplate
	k MissingUnitConversion
	
	&sql(DECLARE CRHL CURSOR FOR
		SELECT Tests_HighRange, Tests_LowRange, Tests_Result, Tests_SIUnit, Tests_TestName, Tests_TestDate, Tests_Comment
		INTO :d1,:d2,:d3,:d4,:d5, :d6, :d7
		FROM ResultBloodTest_Tests
		WHERE ResultBloodTest=:rbt
	)
	&sql(OPEN CRHL)
	
	&sql(FETCH CRHL)
.
	if SQLCODE '= 0{
		q 0
	}
	s OBXIndex = 0
	s NTEIndex=0
	WHILE SQLCODE=0{  
		if (d5=""){&sql(FETCH CRHL) continue}
	
		&sql(SELECT SIName, SIUnit INTO :r1,:r2 FROM DiagnosticTest WHERE (Name=:d5 OR SIName=:d5) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
		if (r1=""){
			s MissingSIName(d5)=""
			
		} else {
			&sql(SELECT Top 1 Name, UnitName INTO :r3, :r4 FROM Template WHERE DiagnosticTest=:r1 AND BucketName=:bk AND "Setting"=:setting)
			if (r3 = ""){
				s MissingTemplate(r1)=""
.
			}elseif($d(r3) & $d(r4)){
				s d5 = r3
				;s d4 = r4  ;comment by Martin 29-7-2024
				
				
				i (($L(d1)'=0) & ($L(d2)'=0) & ($L(d3)'=0)){
					i (r2 '= r4){
						/*
						s d1 = $$U2U^WSP999(r1, d1, r2, r4)
						s d2 = $$U2U^WSP999(r1, d2, r2, r4)
						s d3 = $$U2U^WSP999(r1, d3, r2, r4)
						*/
					} 
	
					i (($L(d1)=0) & ($L(d2)=0) & ($L(d3)=0)){
						s MissingUnitConversion(r3_":"_r2_"->"_r4) = ""
					}
				}
			}	
			
		
		}
		
		i ($L(d1)>0) {s d1 = $$FormatNumber^cMain(d1,2)}
		i ($L(d2)>0) {s d2 = $$FormatNumber^cMain(d2,2)}
		i ($L(d3)>0) {s d3 = $$FormatNumber^cMain(d3,2)}
		
		s OBXIndex = OBXIndex + 1
		s OBX = ##class(EnsLib.HL7.Segment).%New()
		s OBXstatus = OBX.SetValueAt("OBX",0)
		s OBXstatus = OBX.SetValueAt($$EscapeHL7^jxSDAToResults(OBXIndex), 1)
		s OBXstatus = OBX.SetValueAt("NM", 2)
		s OBXstatus = OBX.SetValueAt($$EscapeHL7^jxSDAToResults(d5)_"^"_$$EscapeHL7^jxSDAToResults(d5),3)   ; there must be code
		s OBXstatus = OBX.SetValueAt($$EscapeHL7^jxSDAToResults(d3), 5)
		s d4 = $ZSTRIP(d4,"<>w")
		s OBXstatus = OBX.SetValueAt($$EscapeHL7^jxSDAToResults(d4), 6)
		
		s d1 = $$EscapeHL7^jxSDAToResults(d1)
		s d2 = $$EscapeHL7^jxSDAToResults(d2)
		i (($L(d1)>0) & ($L(d2)>0)){
			s OBXstatus = OBX.SetValueAt(d2_"-"_d1, 7)
		} elseif (($L(d1) > 0) & ($L(d2)=0)){
			s OBXstatus = OBX.SetValueAt(d1, 7)
		} elseif (($L(d1) = 0) & ($L(d2)>0)) {
			s OBXstatus = OBX.SetValueAt(d2, 7)
		}
		s OBXstatus = OBX.SetValueAt("F", 11)
.
#;		; added No Upper/Lower Ref Range
#;		k NTE
#;		i $l(d1)=0,$l(d2)>0 d
#;		. s NTE = ##class(EnsLib.HL7.Segment).%New()
#;		. s NTEstatus = NTE.SetValueAt("NTE",0)
#;		. s NTEstatus = NTE.SetValueAt($$EscapeHL7^jxSDAToResults(OBXIndex), 1)
#;		. s NTEstatus = NTE.SetValueAt("O",2)
#;		. s NTEstatus = NTE.SetValueAt("Upper-Ref-Range",3)
#;		
#;		i $l(d1)>0,$l(d2)=0 d
#;		. s NTE = ##class(EnsLib.HL7.Segment).%New()
#;		. s NTEstatus = NTE.SetValueAt("NTE",0)
#;		. s NTEstatus = NTE.SetValueAt($$EscapeHL7^jxSDAToResults(OBXIndex), 1)
#;		. s NTEstatus = NTE.SetValueAt("O",2)
#;		. s NTEstatus = NTE.SetValueAt("Lower-Ref-Range",3)
#;
#;		; END added No Upper/Lower Ref Range
#;			
#;		// date time 
#;		if ($L(d6)>0){
#;			
#;			s testDateHL7 = $zdate(d6,3)
#;			s testDateHL7 = $replace(testDateHL7, "-","")
#;			s testDateHL7 = testDateHL7_"000000"
#;			
#;			s OBXstatus = OBX.SetValueAt(testDateHL7, 14)
#;		}
#;		
#;		s setSegStatus = hl7msg.InsertSegmentAt(OBX, OBXIndex + (5 + NTEIndex))
#;		i $g(NTE)'="" s NTEIndex=NTEIndex+1,setSegStatus = hl7msg.InsertSegmentAt(NTE, OBXIndex + (5 + NTEIndex))
.
		s setSegStatus = hl7msg.InsertSegmentAt(OBX, OBXIndex + (5 + NTEIndex))
.
		; added NTE
		k NTE
		s NTECount=0
		i $l(d1)=0,$l(d2)>0 d
		. s NTE = ##class(EnsLib.HL7.Segment).%New()
		. s NTEstatus = NTE.SetValueAt("NTE",0)
		. s NTEstatus = NTE.SetValueAt(1, 1)  ;$$EscapeHL7^jxSDAToResults(OBXIndex)
		. s NTEIndex= NTEIndex+1, NTECount= NTECount + 1
		. s NTEstatus = NTE.SetValueAt("O",2)
		. s NTEstatus = NTE.SetValueAt("No Upper-Ref-Range",3)
		. s setSegStatus = hl7msg.InsertSegmentAt(NTE, OBXIndex +(5+ NTEIndex))
				
		i $l(d1)>0,$l(d2)=0 d
		. s NTE = ##class(EnsLib.HL7.Segment).%New()
		. s NTEstatus = NTE.SetValueAt("NTE",0)
		. s NTEstatus = NTE.SetValueAt(1, 1)
		. s NTEIndex= NTEIndex+1, NTECount= NTECount + 1
		. s NTEstatus = NTE.SetValueAt("O",2)
		. s NTEstatus = NTE.SetValueAt("No Lower-Ref-Range",3)
		. s setSegStatus = hl7msg.InsertSegmentAt(NTE, OBXIndex +(5+ NTEIndex))
		
		i $l(d7)>0 d
		. i NTECount=0 s NTECount = 1
		. e  s NTECount =NTECount + 1
		. s NTE = ##class(EnsLib.HL7.Segment).%New()
		. s NTEstatus = NTE.SetValueAt("NTE",0)
		. s NTEstatus = NTE.SetValueAt(NTECount, 1)
		. s NTEIndex= NTEIndex+1
		. s NTEstatus = NTE.SetValueAt("O",2)
		. s NTEstatus = NTE.SetValueAt($$EscapeHL7^jxSDAToResults(d7),3)
		. s setSegStatus = hl7msg.InsertSegmentAt(NTE, OBXIndex +(5+ NTEIndex))
		
		; END NTE	
	
		
		
		&sql(FETCH CRHL)
	}
	&sql(CLOSE CRHL)
.
	if ( ($L($o(MissingSIName("")))>0) ! ($L($o(MissingTemplate("")))>0) ! ($L($o(MissingUnitConversion("")))>0) ){
		if (devMode){w !,"MISSING ATTRIBUTES"}
		;&js<console.log(`Attribute Missing!`)>
		s dt = $zdatetime($h, 3)
		
		s errCode = "JX3007" ;err code for missing attributes 
		s errData = fileName_" in "_bk_" is missing these templates. "
		
		if ($L($o(MissingSIName("")))>0){
			s errData =  errData_$c(13,10)_"Missing SINames: "
			s missingSIName = $o(MissingSIName(""))
			while (missingSIName'=""){
				s errData = errData_missingSIName_", "
				k MissingSIName(missingSIName)
				s missingSIName = $o(MissingSIName(""))
			}
			 
		}
		
		if ($L($o(MissingTemplate("")))>0){
			s errData =  errData_$c(13,10)_"Missing Template: "
			s missingTemplate = $o(MissingTemplate(""))
			while (missingTemplate'=""){
				s errData = errData_missingTemplate_", "
				k MissingTemplate(missingTemplate)
				s missingTemplate = $o(MissingTemplate(""))
			}	 
		}
		
		if ($L($o(MissingUnitConversion("")))>0){
			s errData =  errData_$c(13,10)_"Missing UnitConversion: "
			s missingUnitConversion = $o(MissingUnitConversion(""))
			while (missingUnitConversion'=""){
				s errData = errData_missingUnitConversion_", "
				k MissingUnitConversion(missingUnitConversion)
				s missingUnitConversion = $o(MissingUnitConversion(""))
			}	 
		}
		
		if (devMode) {w !,errData}
		
		s errName =  $$GenerateErrorName^jxErrorReport(errCode)
		s errLocation = "jxResult2HL7^jxResult2HL7"
		s Stack = ""
		
		i ($L(errData)>0){s errData = """"_errData_""""}
		
		&sql(INSERT INTO MX.Error (Code, Data, Name, Location, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :dt, :rid, :bk))
		
	}
	;w !,hl7msg.OutputToString()
	if ##class(%File).Exists(outputsDir_$p(fileName,".",1,*-1)_"-output.hl7") d ##class(%File).Delete(outputsDir_$p(fileName,".",1,*-1)_"-output.hl7")
	s status= hl7msg.OutputToFile(outputsDir_$p(fileName,".",1,*-1)_"-output.hl7")
	h 1
	i (status=1 && devMode){w !,"OUTPUT HL7 COMPLETED: ",outputsDir_$p(fileName,".",1,*-1)_"-output.hl7"}
	
	; uncomment this for production
	;&sql(SELECT CLiProfileName INTO :CliProfileName FROM Setting WHERE ID=:setting)
	;if ($L(CliProfileName)=0){q 0 }
	
	; This is for testing, remove in production
	;s CliProfileName = "default"
	
	;s cmdflag = "/SHELL" 
	;s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",inProcessBucket_fileName, completedBucket, "--profile", CliProfileName)
	;s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv", outputsDir_$p(fileName,".",1,*-1)_".hl7", completedBucket, "--profile", CliProfileName)
	;d StripTables
	if (status = 1){ q outputsDir_$p(fileName,".",1,*-1)_"-output.hl7"}
	q 0
	
	
UpdateRBT(rid, testName, testValue, testUnit, testHiRange, testLoRange, testDate, testComment)
	#import MX
	
	&sql(SELECT ID INTO :rbt FROM ResultBloodTest WHERE Record->ID=:rid)
	if ($L(rbt)=0){q}
	&sql(SELECT COUNT(ID) INTO :objCount FROM ResultBloodTest_Tests WHERE ResultBloodTest=:rbt)
	s objxcount = +objCount
	s objxcount=objxcount+1
	s objx=##class(MX.ResultBloodTest).%OpenId(rbt)
	s objx1=##class(MX.ResultBloodTestValue).%New()
	s objx1.TestName= testName
	s objx1.Result=testValue
	s testUnit = $zstrip(testUnit, ">W")
	s objx1.SIUnit=testUnit
	s objx1.LowRange=testLoRange
	s objx1.HighRange=testHiRange
	s objx1.Comment=$zstrip(testComment, "=C")
	
	if ($L(testDate)>0){
		s testDate = $replace(testDate, "-","/")
		s testDateInternal = $zdateh(testDate, 4)
		//s objx1.TestDate = $zdate(testDateInternal, 1)
		//s objx1.TestDate = $zdateh(testDate,6,,,,,,,-1)
		s objx1.TestDate = $zdateh(testDate, 4)
		
		//database wants mm/dd/yyyy
	}
	
	
	d objx.Tests.SetAt(objx1,objxcount)
.
	s sts = objx.%Save()
	s ^test(objCount)=sts
	q	
	
ClearRBT(rid)
	#import MX
	&sql(SELECT ID INTO :rbt from MX.ResultBloodTest WHERE Record->ID=:rid)
	if ($L(rbt)=0){q}
	&sql(DELETE FROM MX.ResultBloodTest_Tests WHERE ResultBloodTest=:rbt)
	q
.
.
StripTablesAndCleanUp(rid)
	
	#import MX
	
	&sql(SELECT ID INTO :rbt From ResultBloodTest WHERE Record->ID=:rid)
		
	&sql(DELETE FROM ResultBloodTest_Tests WHERE ResultBloodTest = :rbt)
	&sql(DELETE FROM ResultBloodTest WHERE Record->ID=:rid)
	&sql(UPDATE Record SET BinaryData=NULL, OrgFile=NULL, OCR=NULL WHERE ID = :rid)
	q
	
.

jxResult2HL7IND^MAC^^67072,42902.5648887^0
jxResult2HL7IND(rid, devMode=0)
	#import MX
	/*
	;&sql(SELECT Profile->CompanyName, Profile->Setting->ID, OrgFile, BucketName, ReportDate INTO :CompanyName, :setting, :fileName, :bk, :reportDate FROM Record WHERE ID=:rid)
.
	;&sql(SELECT ReportDate INTO :RBTReportDate FROM ResultBloodTest WHERE Record->ID=:rid)
	;if (RBTReportDate '= ""){
		;s reportDate = RBTReportDate
	;}
	
	;&sql(SELECT CliProfileName INTO :CliProfileName FROM Setting WHERE ID=:setting)
.
	n d1,key,Q
	n d1,d2,d3,d4,d5,r1,r2,r3,r4
.
	if (bk["/"){
		s bksys = $replace(bk,"/","\")
	} else { s bksys = bk}
.
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/" */
	s bk="jondaffr2"
	s setting=9
	Set sc = ##class(%File).CreateDirectory("C:\InterSystems\Cache\CSP\jondax\groot\"_rid_"\")
	s outputsDir = "C:\InterSystems\Cache\CSP\jondax\groot\"_rid_"\"
	&sql(SELECT ID,OrgName,ReportDate INTO :rbt,:fileName,:RBTReportDate From ResultBloodTest1 WHERE ID=:rid)
	if (RBTReportDate '= ""){
		s reportDate = RBTReportDate
	}else {s reportDate=""}
	
	i (devMode){w !,"RBT: ", rbt}
	
	;&js<console.log(`#(rbt)#`)>
	
	if ((rid = "")!(rbt="")){q 0}
	
	; take place holder from table.
	; dummy
	s emptyPlaceHolder = ""
	s hl7msg = ##class(EnsLib.HL7.Message).%New()
	d hl7msg.Clear()
	
	s MSH = ##class(EnsLib.HL7.Segment).%New()
	s MSHstatus = MSH.SetValueAt("^~\\&",1)
	s MSHstatus = MSH.SetValueAt("mshSendingFaciliy", 4)
	s MSHstatus = MSH.SetValueAt("ORU^R01",8)
	s MSHstatus = MSH.SetValueAt("2.3",11)
	s MSHstatus = MSH.SetValueAt("MSH",0)
	s setSegStatus = hl7msg.InsertSegmentAt(MSH, 1)
	
	s PID = ##class(EnsLib.HL7.Segment).%New()
	s PIDstatus = PID.SetValueAt("PID",0)
	s PIDstatus = PID.SetValueAt(emptyPlaceHolder,3)
	s PIDstatus = PID.SetValueAt(emptyPlaceHolder,5)
	s setSegStatus = hl7msg.InsertSegmentAt(PID, 2)
	
	s PV1 = ##class(EnsLib.HL7.Segment).%New()
	s PV1status = PV1.SetValueAt("PV1",0)
	s PV1status = PV1.SetValueAt(emptyPlaceHolder,2)
	s PV1status = PV1.SetValueAt(emptyPlaceHolder,19)
	s setSegStatus = hl7msg.InsertSegmentAt(PV1, 3)
	
	s ORC = ##class(EnsLib.HL7.Segment).%New()
	s ORCstatus = ORC.SetValueAt("ORC",0)
	s ORCstatus = ORC.SetValueAt("1",1)
	s ORCstatus = ORC.SetValueAt("LAB",29)
	s setSegStatus = hl7msg.InsertSegmentAt(ORC, 4)
.
	if (reportDate = ""){s reportDateHL7 = ""}
	s reportDateHL7 = $ZDT(reportDate,8)
	s reportDateHL7 = reportDateHL7_"000000"
	
	s OBR = ##class(EnsLib.HL7.Segment).%New()
	s OBRstatus = OBR.SetValueAt("OBR",0)
	s OBRstatus = OBR.SetValueAt(emptyPlaceHolder,4)
	s OBRstatus = OBR.SetValueAt(reportDateHL7,14)
	s setSegStatus = hl7msg.InsertSegmentAt(OBR, 5)
.
	k MissingSIName
	k MissingTemplate
	k MissingUnitConversion
	
	&sql(DECLARE CRHL CURSOR FOR
		SELECT Tests_HighRange, Tests_LowRange, Tests_Result, Tests_SIUnit, Tests_TestName, Tests_TestDate
		INTO :d1,:d2,:d3,:d4,:d5, :d6
		FROM ResultBloodTest1_Tests
		WHERE ResultBloodTest1=:rbt
	)
	&sql(OPEN CRHL)
	
	&sql(FETCH CRHL)
.
	if SQLCODE '= 0{
		q 0
	}
	s OBXIndex = 0
	s NTEIndex=0
	WHILE SQLCODE=0{  
		if (d5=""){&sql(FETCH CRHL) continue}
	
		&sql(SELECT SIName, SIUnit INTO :r1,:r2 FROM DiagnosticTest WHERE (Name=:d5 OR SIName=:d5) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
		if (r1=""){
			s MissingSIName(d5)=""
			
		} else {
			&sql(SELECT Top 1 Name, UnitName INTO :r3, :r4 FROM Template WHERE DiagnosticTest=:r1 AND BucketName=:bk AND "Setting"=:setting)
			if (r3 = ""){
				s MissingTemplate(r1)=""
.
			}elseif($d(r3) & $d(r4)){
				s d5 = r3
				;s d4 = r4  ;comment by Martin 29-7-2024
				
				
				i (($L(d1)'=0) & ($L(d2)'=0) & ($L(d3)'=0)){
					i (r2 '= r4){
						/*
						s d1 = $$U2U^WSP999(r1, d1, r2, r4)
						s d2 = $$U2U^WSP999(r1, d2, r2, r4)
						s d3 = $$U2U^WSP999(r1, d3, r2, r4)
						*/
					} 
	
					i (($L(d1)=0) & ($L(d2)=0) & ($L(d3)=0)){
						s MissingUnitConversion(r3_":"_r2_"->"_r4) = ""
					}
				}
			}	
			
		
		}
		
		i ($L(d1)>0) {s d1 = $$FormatNumber^cMain(d1,2)}
		i ($L(d2)>0) {s d2 = $$FormatNumber^cMain(d2,2)}
		i ($L(d3)>0) {s d3 = $$FormatNumber^cMain(d3,2)}
		
		s OBXIndex = OBXIndex + 1
		s OBX = ##class(EnsLib.HL7.Segment).%New()
		s OBXstatus = OBX.SetValueAt("OBX",0)
		s OBXstatus = OBX.SetValueAt($$EscapeHL7^jxSDAToResults(OBXIndex), 1)
		s OBXstatus = OBX.SetValueAt("NM", 2)
		s d5=$replace(d5,$c(160)," ")
		s LCode=$p(d5," ",1), display=$replace(d5,LCode_" ","")
		;s ^testing("testing",OBXIndex)=LCode_", "_display
		s OBXstatus = OBX.SetValueAt($$EscapeHL7^jxSDAToResults(LCode)_"^"_$$EscapeHL7^jxSDAToResults(display),3)   ; there must be code
		s OBXstatus = OBX.SetValueAt($$EscapeHL7^jxSDAToResults(d3), 5)
		s d4 = $ZSTRIP(d4,"<>w")
		s OBXstatus = OBX.SetValueAt($$EscapeHL7^jxSDAToResults(d4), 6)
		
		s d1 = $$EscapeHL7^jxSDAToResults(d1)
		s d2 = $$EscapeHL7^jxSDAToResults(d2)
		i (($L(d1)>0) & ($L(d2)>0)){
			s OBXstatus = OBX.SetValueAt(d2_"-"_d1, 7)
		} elseif (($L(d1) > 0) & ($L(d2)=0)){
			s OBXstatus = OBX.SetValueAt(d1, 7)
		} elseif (($L(d1) = 0) & ($L(d2)>0)) {
			s OBXstatus = OBX.SetValueAt(d2, 7)
		}
		s OBXstatus = OBX.SetValueAt("F", 11)
.
		; added No Upper/Lower Ref Range
		k NTE
		i $l(d1)=0,$l(d2)>0 d
		. s NTE = ##class(EnsLib.HL7.Segment).%New()
		. s NTEstatus = NTE.SetValueAt("NTE",0)
		. s NTEstatus = NTE.SetValueAt($$EscapeHL7^jxSDAToResults(OBXIndex), 1)
		. s NTEstatus = NTE.SetValueAt("O",2)
		. s NTEstatus = NTE.SetValueAt("Upper-Ref-Range",3)
		
		i $l(d1)>0,$l(d2)=0 d
		. s NTE = ##class(EnsLib.HL7.Segment).%New()
		. s NTEstatus = NTE.SetValueAt("NTE",0)
		. s NTEstatus = NTE.SetValueAt($$EscapeHL7^jxSDAToResults(OBXIndex), 1)
		. s NTEstatus = NTE.SetValueAt("O",2)
		. s NTEstatus = NTE.SetValueAt("Lower-Ref-Range",3)
.
		; END added No Upper/Lower Ref Range
			
		// date time 
		if ($L(d6)>0){
			
			s testDateHL7 = $zdate(d6,3)
			s testDateHL7 = $replace(testDateHL7, "-","")
			s testDateHL7 = testDateHL7_"000000"
			
			s OBXstatus = OBX.SetValueAt(testDateHL7, 14)
		}
		
		s setSegStatus = hl7msg.InsertSegmentAt(OBX, OBXIndex + (5 + NTEIndex))
		i $g(NTE)'="" s NTEIndex=NTEIndex+1,setSegStatus = hl7msg.InsertSegmentAt(NTE, OBXIndex + (5 + NTEIndex))
		
	
		
		
		&sql(FETCH CRHL)
	}
	&sql(CLOSE CRHL)
.
	if ( ($L($o(MissingSIName("")))>0) ! ($L($o(MissingTemplate("")))>0) ! ($L($o(MissingUnitConversion("")))>0) ){
		if (devMode){w !,"MISSING ATTRIBUTES"}
		;&js<console.log(`Attribute Missing!`)>
		s dt = $zdatetime($h, 3)
		
		s errCode = "JX3007" ;err code for missing attributes 
		s errData = fileName_" in "_bk_" is missing these templates. "
		
		if ($L($o(MissingSIName("")))>0){
			s errData =  errData_$c(13,10)_"Missing SINames: "
			s missingSIName = $o(MissingSIName(""))
			while (missingSIName'=""){
				s errData = errData_missingSIName_", "
				k MissingSIName(missingSIName)
				s missingSIName = $o(MissingSIName(""))
			}
			 
		}
		
		if ($L($o(MissingTemplate("")))>0){
			s errData =  errData_$c(13,10)_"Missing Template: "
			s missingTemplate = $o(MissingTemplate(""))
			while (missingTemplate'=""){
				s errData = errData_missingTemplate_", "
				k MissingTemplate(missingTemplate)
				s missingTemplate = $o(MissingTemplate(""))
			}	 
		}
		
		if ($L($o(MissingUnitConversion("")))>0){
			s errData =  errData_$c(13,10)_"Missing UnitConversion: "
			s missingUnitConversion = $o(MissingUnitConversion(""))
			while (missingUnitConversion'=""){
				s errData = errData_missingUnitConversion_", "
				k MissingUnitConversion(missingUnitConversion)
				s missingUnitConversion = $o(MissingUnitConversion(""))
			}	 
		}
		
		if (devMode) {w !,errData}
		
		s errName =  $$GenerateErrorName^jxErrorReport(errCode)
		s Location = "jxResult2HL7^jxResult2HL7"
		s Stack = ""
		
		i ($L(errData)>0){s errData = """"_errData_""""}
		;&js<alert(`#(errData)#`)>
		;;&sql(INSERT INTO MX.Error (Code, Data, Name, Location, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :dt, :rid, :bk))
.
		;&sql(UPDATE MX.Record SET Status='Failure', ProcessedDate=:dt WHERE ID = :rid)
		
	}
	;w !,hl7msg.OutputToString()
	s status= hl7msg.OutputToFile(outputsDir_$p(fileName,".",1,*-1)_"-output.hl7")
	//For Groot v1.1
	s hl7Str=hl7msg.OutputToString()
	s hl7Str=$$UnescapeHL7^jxSDAToResults(hl7Str)
	&js<downloadStr=`#(hl7Str)#`>
	//End
	h 1
	i (status=1 && devMode){w !,"OUTPUT HL7 COMPLETED: ",outputsDir_$p(fileName,".",1,*-1)_"-output.hl7"}
	
	; uncomment this for production
	;&sql(SELECT CLiProfileName INTO :CliProfileName FROM Setting WHERE ID=:setting)
	;if ($L(CliProfileName)=0){q 0 }
	
	; This is for testing, remove in production
	;s CliProfileName = "default"
	
	;s cmdflag = "/SHELL" 
	;s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",inProcessBucket_fileName, completedBucket, "--profile", CliProfileName)
	;s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv", outputsDir_$p(fileName,".",1,*-1)_".hl7", completedBucket, "--profile", CliProfileName)
	;d StripTables
	if (status = 1){  q outputsDir_$p(fileName,".",1,*-1)_"-output.hl7"}
	q 0
	
	
UpdateRBT(rid, testName, testValue, testUnit, testHiRange, testLoRange, testDate)
	#import MX
	
	&sql(SELECT ID INTO :rbt FROM ResultBloodTest WHERE Record->ID=:rid)
	if ($L(rbt)=0){q}
	&sql(SELECT COUNT(ID) INTO :objCount FROM ResultBloodTest_Tests WHERE ResultBloodTest=:rbt)
	s objxcount = +objCount
	s objxcount=objxcount+1
	s objx=##class(MX.ResultBloodTest).%OpenId(rbt)
	s objx1=##class(MX.ResultBloodTestValue).%New()
	s objx1.TestName= testName
	s objx1.Result=testValue
	s objx1.SIUnit=testUnit
	s objx1.LowRange=testLoRange
	s objx1.HighRange=testHiRange
	
	if ($L(testDate)>0){
		s testDate = $replace(testDate, "-","/")
		s testDateInternal = $zdateh(testDate, 4)
		//s objx1.TestDate = $zdate(testDateInternal, 1)
		//s objx1.TestDate = $zdateh(testDate,6,,,,,,,-1)
		s objx1.TestDate = $zdateh(testDate, 4)
		
		//database wants mm/dd/yyyy
	}
	
	
	d objx.Tests.SetAt(objx1,objxcount)
.
	s sts = objx.%Save()
.
	q	
	
ClearRBT(rid)
	#import MX
	&sql(SELECT ID INTO :rbt from MX.ResultBloodTest WHERE Record->ID=:rid)
	if ($L(rbt)=0){q}
	&sql(DELETE FROM MX.ResultBloodTest_Tests WHERE ResultBloodTest=:rbt)
	q
.
.
StripTablesAndCleanUp(rid)
	
	#import MX
	
	&sql(SELECT ID INTO :rbt From ResultBloodTest WHERE Record->ID=:rid)
		
	&sql(DELETE FROM ResultBloodTest_Tests WHERE ResultBloodTest = :rbt)
	&sql(DELETE FROM ResultBloodTest WHERE Record->ID=:rid)
	&sql(UPDATE Record SET BinaryData=NULL, OrgFile=NULL, OCR=NULL WHERE ID = :rid)
	q
	
.

jxResult2JSON^MAC^^67305,18253.5751154^0
jxResult2JSON(rid, devMode=0)		; Convert Results to JSON format
 									; devMode=1 for debugging
 									; return output directry if succeeds
 									; return 0 if fails
 	#import MX
	&sql(SELECT Profile->CompanyName, Profile->Setting->ID, OrgFile, BucketName, ReportDate 
		 INTO :CompanyName, :setting, :fileName, :bk, :reportDate 
		 FROM Record WHERE ID=:rid)
.
	&sql(SELECT ReportDate, ID INTO :RBTReportDate,:rbt FROM ResultBloodTest WHERE Record->ID=:rid)
	if (RBTReportDate '= ""){
		s reportDate = RBTReportDate
	}
	
	&sql(SELECT CliProfileName INTO :CliProfileName FROM Setting WHERE ID=:setting)
.
	n d1,key,Q
	n d1,d2,d3,d4,d5,r1,r2,r3,r4
.
	if (bk["/"){
		s bksys = $replace(bk,"/","\")
	} else { s bksys = bk}
.
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"
	s outputsDir = "C:\InterSystems\Cache\JondaX\"_CompanyName_"\"_bksys_"\outputs\"
	
	k MissingSIName
	k MissingTemplate
	k MissingUnitConversion
	
	// Declare cursor and fetch each row of data
 	&sql(DECLARE CRHL CURSOR FOR
		SELECT Tests_HighRange, Tests_LowRange, Tests_Result, Tests_SIUnit, Tests_TestName, Tests_TestDate, Tests_Comment
		INTO :d1,:d2,:d3,:d4,:d5, :d6, :d7
		FROM ResultBloodTest_Tests
		WHERE ResultBloodTest=:rbt
	)
	&sql(OPEN CRHL)
	
	&sql(FETCH CRHL)
	
	// quit if no data
	if SQLCODE '= 0{
		q 0
	}
	// set obj array to store each colum
	n resultsArray, resultObj
	s resultsArray = ##class(%DynamicArray).%New()
.
	WHILE SQLCODE=0{ 
		// skip to next row if no testname
		if (d5=""){&sql(FETCH CRHL) continue}
		
		// check testname is in data dictionary
		&sql(SELECT SIName, SIUnit INTO :r1,:r2 
			 FROM DiagnosticTest 
			 WHERE (Name=:d5 OR SIName=:d5) AND IsNull(DeletedDate,'')='' 
			 AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate
			 )
		// Add to missing Diagnostic test	 
		if (r1=""){
			s MissingSIName(d5)=""
			
		} else {
			// Check for Client template
			&sql(SELECT Top 1 Name, UnitName INTO :r3, :r4 
				 FROM Template 
				 WHERE DiagnosticTest=:r1 AND BucketName=:bk AND "Setting"=:setting
				 )
			// Add to missing template	 
			if (r3 = ""){
				s MissingTemplate(r1)=""
.
			}elseif($d(r3) & $d(r4)){
				// change the test name to client template name 
				s d5 = r3
				;s d4 = r4  ;comment by Martin 29-7-2024
				
				i (($L(d1)'=0) & ($L(d2)'=0) & ($L(d3)'=0)){
					i (r2 '= r4){
						/*
						s d1 = $$U2U^WSP999(r1, d1, r2, r4)
						s d2 = $$U2U^WSP999(r1, d2, r2, r4)
						s d3 = $$U2U^WSP999(r1, d3, r2, r4)
						*/
					} 
	
					i (($L(d1)=0) & ($L(d2)=0) & ($L(d3)=0)){
						s MissingUnitConversion(r3_":"_r2_"->"_r4) = ""
					}
				}
			}	
			
		
		}
		// Format values(result, low range, high range) to 2 decimal place
		i ($L(d1)>0) {s d1 = $$FormatNumber^cMain(d1,2)}
		i ($L(d2)>0) {s d2 = $$FormatNumber^cMain(d2,2)}
		i ($L(d3)>0) {s d3 = $$FormatNumber^cMain(d3,2)}
		if ($L(d6)>0){
			// convert internal date to YYYY-MM-DD hh:mm:ss
			s d6=$zdatetime(d6,3)
		}
.
		// Create a dynamic object for each row
	    SET resultObj = ##class(%DynamicObject).%New()
.
	    // Set the object fields with the fetched data
	    DO resultObj.%Set("Date", d6)  //  d6 holds the test date
	    DO resultObj.%Set("Biomarker-Name", d5)  // d5 holds the test name
	    DO resultObj.%Set("Result", d3)  //  d3 holds the result
	    DO resultObj.%Set("Low-Ref-Range", d2)  //  d2 holds the low range
	    DO resultObj.%Set("High-Ref-Range", d1)  //  d1 holds the high range
	    DO resultObj.%Set("Unit-of-measurement", d4)  //  d4 holds the unit of measurement
	    DO resultObj.%Set("Comment", d7)  //  no comment for now
.
	    // Add the object to the results array
	    DO resultsArray.%Push(resultObj)
.
    // Fetch the next row
    &sql(FETCH CRHL)
		
	}
	&sql(CLOSE CRHL)
	
	// Create content for Notification report of missing templates
 	if ( ($L($o(MissingSIName("")))>0) ! ($L($o(MissingTemplate("")))>0) ! ($L($o(MissingUnitConversion("")))>0) ){
		if (devMode){w !,"MISSING ATTRIBUTES"}
		;&js<console.log(`Attribute Missing!`)>
		s dt = $zdatetime($h, 3)
		
		s errCode = "JX3007" ;err code for missing attributes 
		s errData = fileName_" in "_bk_" is missing these templates. "
		
		// for Diagnostic tests in data dictionary
		if ($L($o(MissingSIName("")))>0){
			s errData =  errData_$c(13,10)_"Missing SINames: "
			s missingSIName = $o(MissingSIName(""))
			while (missingSIName'=""){
				s errData = errData_missingSIName_", "
				k MissingSIName(missingSIName)
				s missingSIName = $o(MissingSIName(""))
			}
			 
		}
		//for Diagnostic tests in client's template
		if ($L($o(MissingTemplate("")))>0){
			s errData =  errData_$c(13,10)_"Missing Template: "
			s missingTemplate = $o(MissingTemplate(""))
			while (missingTemplate'=""){
				s errData = errData_missingTemplate_", "
				k MissingTemplate(missingTemplate)
				s missingTemplate = $o(MissingTemplate(""))
			}	 
		}
		//for unit conversion 
		if ($L($o(MissingUnitConversion("")))>0){
			s errData =  errData_$c(13,10)_"Missing UnitConversion: "
			s missingUnitConversion = $o(MissingUnitConversion(""))
			while (missingUnitConversion'=""){
				s errData = errData_missingUnitConversion_", "
				k MissingUnitConversion(missingUnitConversion)
				s missingUnitConversion = $o(MissingUnitConversion(""))
			}	 
		}
		
		if (devMode) {w !,errData}
		// Generate error
		s errName =  $$GenerateErrorName^jxErrorReport(errCode)
		s errLocation = "jxResult2JSON^jxResult2JSON"
		s Stack = ""
		
		i ($L(errData)>0){s errData = """"_errData_""""}
		// Insert into MX.Error
		&sql(INSERT INTO MX.Error (Code, Data, Name, Location, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :dt, :rid, :bk))
		
	}
	// Define output file name	
	s jsonFName=outputsDir_$p(fileName,".",1,*-1)_"-output.json"
	
	// delete old/duplicate-named file first
	if ##class(%File).Exists(jsonFName) d 
	.d ##class(%File).Delete(jsonFName)
	
	// Create new file
	Set file=##class(%File).%New(jsonFName)
 
	// Convert the results array into a JSON object
	SET jsonObj = ##class(%DynamicObject).%New()	
	Do jsonObj.%Set("Results", resultsArray)
	
	// Convert to JSON string
	Set jsonString = jsonObj.%ToJSON()
	
	// Open file and write json string
    Do file.Open("WSN")
    s status= file.Write(jsonString)
    d file.Close()
	h 1
	// For debugging purpose
	i (status=1 && devMode){w !,"OUTPUT JSON COMPLETED: ",outputsDir_$p(fileName,".",1,*-1)_"-output.json"}
	
	// Return output dir if file writing succeeds
	if (status = 1){ q outputsDir_$p(fileName,".",1,*-1)_"-output.json"}
	
 q 0
 
 
Upload2S3(status,rid)
.
	s %session.Data("jxTransform","OutputDir","HL7")=status
	&sql(SELECT Profile, Profile->CompanyName,Profile->Setting, BucketName, OrgFile 
		 INTO :profile,:CompanyName,:userSetting, :bk, :fileName 
		 FROM MX.Record 
		 WHERE ID=:rid
		 )
	if (bk["/"){
		s bkfd = $p(bk,"/",2,*)
		s bkn = $p(bk,"/",1)
		&sql(SELECT Buckets_CliProfileName into :CliProfileName FROM MX.Setting_buckets  
		WHERE buckets_folder =:bkfd and buckets_name = :bkn and setting=:userSetting
		)
	} else {
		s bkfd = "-"
		s bkn = bk
		&sql(SELECT Buckets_CliProfileName into :CliProfileName FROM MX.Setting_buckets  
		WHERE buckets_folder =:bkfd and buckets_name = :bkn and setting=:userSetting
		)
	}
	
	if (bk["/"){
		s sourceFolderInProcess = $p(bk,"/",2,*)_"/In-Process"
		s destinationFolderCompleted = $p(bk,"/",2,*)_"/Completed"
		s bk = $p(bk,"/",1)	
	} else {
		s sourceFolderInProcess = "In-Process"
		s destinationFolderCompleted = "Completed"
	}
	; Path for client portal download 
	s copyDir= $g(%session.Data("Dir"))_profile  ;"C:/InterSystems/Cache/JondaX/ClientDownload/"_profile 
	d CreateDir^jxS3Upload(copyDir)
	d CreateDir^jxS3Upload(copyDir_"/Completed")
	d CreateDir^jxS3Upload(copyDir_"/Completed/"_rid)
	
	s sts1 = ##class(python.s3Utils).uploadFile(CliProfileName, status, bk, destinationFolderCompleted)
	s fileName=$$C2H^WSP999(fileName)
	s sts2 = ##class(python.s3Utils).moveFile(CliProfileName,bk,bk, fileName, sourceFolderInProcess , destinationFolderCompleted)	
	
	if (+sts1=0){
.
		&js<alert("An error occurred in uploading output files to bucket. Alert developers with file ID: #(rid)# , File Name: #($p(fileName, "\",*))#")>
	} 
	elseif +sts2=0
	{
		d Binary2file^cReviewResultGroot
		s sts4 = ##class(python.s3Utils).uploadFile(CliProfileName, %dev, bk, sourceFolderInProcess)
		i +sts4 = 1 d
		. d ##class(%File).Delete(%dev)
		. k %dev
		. s sts4 = ##class(python.s3Utils).moveFile(CliProfileName,bk,bk, fileName, sourceFolderInProcess , destinationFolderCompleted)	
		. g Finalize
		
	}else {
Finalize
		if (+sts1 = 1){
			; copy the HL7 result
			d ##class(%File).CopyFile(status,"C:\InterSystems\Cache\JondaX\JondaX\jondaffr2\copies\"_fileName)
			if (profile'=1),(profile'=9) d ##class(%File).CopyFile(status,copyDir_"/Completed/"_rid)
			d ##class(%File).Delete(status)
		}
		s dt = $zdatetime($h,3)
		s uid = %session.Data("UserID")
		&sql(UPDATE MX.Record SET Status='Completed', ReviewedDate=:dt, ReviewedBy=:uid WHERE ID = :d1)
		// Notification
		s status= $$GenerateErrorReportByRid^jxErrorReport(d1,2)
		i (status '= 0){
			//&sql(SELECT Profile->Setting->CliProfileName, BucketName, OrgFile INTO :CliProfileName, :bk, :fileName FROM MX.Record WHERE ID=:d1)
			
			s sts = ##class(python.s3Utils).uploadFile(CliProfileName, status, bk, destinationFolderCompleted)
		
			; copy the Notification result
			d ##class(%File).CopyFile(status,"C:\InterSystems\Cache\JondaX\JondaX\jondaffr2\copies\"_fileName)
			s errFname=##class(%File).GetFilename(status)
			if (profile'=1),(profile'=9) d ##class(%File).CopyFile(status,copyDir_"/Completed/"_rid_"/"_errFname)
			d ##class(%File).Delete(status)	
		
		}
		; Commented by DW 21/11/2023
		;d StripTables^jxBiolytica(rid)
		
		s uid = %session.Data("UserID")
		s rid = %session.Data("jxTransform","rid")
		if ($d(^FormData(uid, rid)) = 10){
			; Commented by DW 21/11/2023
			;K ^FormData(uid,rid)
		}
	}
	q

jxS3Download^MAC^^67228,37050.6833797^0
jxS3Download
Init
	#import MX
	d INIT1^CSP999		; get UserID
	&sql(SELECT COUNT(ID) INTO :fCount 
		 FROM Record 
		 WHERE Profile=:UserID AND ISNULL(DeletedDate,'')='' 
		 AND ISNULL(DownloadedDate,'')='' AND Status='Completed'
		 AND ISNULL(IsTrial,'')='' AND BucketName<>'ad-hoc' )
	
	; Completed file count, inject js	 
	&js<document.getElementById("fileCount").innerHTML=`#(fCount)#`;>
	q	
	
WriteTable
	#import MX
	d INIT1^CSP999	;UserID
	;s UserID=9 ; for testing
	s i=0
	s fDir=$g(%session.Data("Dir"))
	s dt= +$h			; current date
	s dhr=$p($h,",",2)	; current hour
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID, OrgFile,Status,BucketName,ProcessedDate
		INTO :r1,:r2,:r3,:bucket,:r4
		FROM Record
		WHERE Profile=:UserID AND IsNULL(ProcessedDate,'')<>''
		AND IsNULL(DeletedDate,'')='' AND IsNULL(IsTrial,'')=''
		AND BucketName<>'ad-hoc'
		ORDER BY ID DESC
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	WHILE SQLCODE=0{
		s pdt=$zdatetimeh(r4,3)
		s pdt= +pdt			; Processed date
		s pdhr=$p(pdt,",",2)	; Processed time
		
		s pdt14Days=$p(pdt,",",1)+14_","_$p(pdt,",",2)		; 14days after processedDate
		s pdtHr=$p(pdt14Days,",",2)							; hour of 14days after processedDate hour
		;&js<console.log(`#(pdt)#`);>
		
		; If today's date is smaller date
		i (+dt < +pdt14Days) d WriteTr		
		; If today's date is samedate but smaller hours
		i (+dt=+pdt14Days), dhr<pdtHr d WriteTr
		
		&sql(FETCH C1)
		}
	&sql(CLOSE C1)
	
	q
WriteTr
	#import MX
	s i=i+1
	s filePath=fDir_UserID_"/"_r3_"/"
	w "<tr>",!
	w "<td class='number'>"_i_"</td>",!
	w "<td class='rid' hidden>"_r1_"</td>",!
	w "<td class='filename'>"_r2_"</td>",!
	&sql(SELECT TemplateName INTO :tmpName FROM TEMPLATE WHERE BucketName=:bucket)
	w "<td class='Tname'>"_tmpName_"</td>",!
	
	// Status and action btns
	if (r3="Failure") {
		w "<td class='status issue'>Issue</td>",!
		if (##class(%File).DirectoryExists(filePath_"\") = 0) d
		.w "<td class='action'><button type='button' class='report-btn blue-btn' onclick='jDownload(event)' disabled>Report Details</button></td>"	
		e  w "<td class='action'><button type='button' class='report-btn blue-btn' onclick='jDownload(event)'>Report Details</button></td>"
	}
	elseif(r3="Completed"){
		w "<td class='status'>Success</td>",!
		w "<td class='action'><button type='button' class='download-btn blue-btn' onclick='jDownload(event)'>Download</button></td>",!
	}else{
		w "<td class='status'>Processing</td>",!
		w "<td></td>",!
	}		
	w "</tr>",!
	q			
		
.
CreateDir(dirFullPath)
	if (##class(%File).DirectoryExists(dirFullPath) = 0) d
	. d ##class(%File).CreateDirectory(dirFullPath)
	q
Download
	; Put Downloaded date to db, delete files after downloaded according to Data redention
	#import MX
	s rid=d1
	s uid=$g(%session.Data("UserID"))
	;s uid=9 ; for testing
	n format,ext,fName,filename
	&sql(SELECT OrgFile,fExt,Status,Profile->Setting->OutputFormat 
		 INTO :filename,:ext,:status,:format
		 FROM Record WHERE ID=:rid)
	
	s format=$select(format["HL7":"hl7",format["FHIRxml":"xml",format["FHIRjson":"json",format["JSON":"json")
	s filename=$replace(filename,"."_ext, "")
	
	s filePath=$g(%session.Data("Dir"))_uid_"/"_status_"/"_rid
	s filePath=$replace(filePath,"/","\")
	s copyPath=$replace($g(%session.Data("Dir")),"Cache/JondaX","Cache/CSP/jondax")_uid_"/"
	
	s copyPath=$replace(copyPath,"/","\\")
	d CreateDir(copyPath)
	;s %session.Data("Copy Dir")=copyPath
	;&js<alert(`#(filePath)#`);>
	
	if (##class(%File).DirectoryExists(filePath) = 1){
		set dir = ##class(%File).NormalizeDirectory(filePath_"\")
		set file=$ZSEARCH(dir_"*.csv")
		i status="Completed" d
		. i file'=""  s sts= ##class(python.zipFile).zipFolder(filePath,copyPath,filename) s format=".zip"
		. e  s format="-output."_format s sts=##class(%File).CopyFile(filePath_"\"_filename_format,copyPath) ;s ^martin("cpSTS")=sts s ^martin("cp",1)=filePath_"/"_filename_format s ^martin("cp",2)=copyPath
		. set filename = filename_format
		e  set filename = $p(file, "\", *) s sts=##class(%File).CopyFile(filePath_"\"_filename,copyPath) ;s ^martin("cpSTS")=sts s ^martin("cp",1)=filePath_"/"_filename s ^martin("cp",2)=copyPath 
		;s tt1=filePath_"\"_filename_format
		;&js<alert(`#(tt1)#`)>
		s %session.Data("DownloadedFile")=copyPath_"\"_filename
		s copyPath="../"_$p(copyPath,"\\Cache\\CSP\\",2)
		&js<fPath=`#(copyPath)#`; fName=`#(filename)#`; >
		
		s dt=$zdateTime($h,3)
		&sql(UPDATE Record SET DownloadedDate=:dt WHERE ID=:rid)
	} else {&js<alert("File not Found");>}	
	q
		
DeleteFile ; Delete copy file in C:\InterSystems\Cache\CSP\jondax\ClientDownload\"UserID"
    s removeDir=$g(%session.Data("DownloadedFile"))
    d ##class(%File).Delete(removeDir)	
    q
.

jxS3Upload^MAC^^67172,43169.7163863^0
jxS3Upload
InitMe
	#import MX
	d INIT1^CSP999
	s UserID=$g(%session.Data("UserID"))
	s ^jxS3Upload(UserID,"Upload","Success")=0
	s ^jxS3Upload(UserID,"Upload","Fail")=""
	s ^jxS3Upload(UserID,"FailCount")=0
	q	
		
UploadFiles		; Save files in local folder %dev
	#import MX
	d INIT^WSP999
	//s ^jxS3Upload(UserID,"Upload","Fail")="", fCounting=0
	s UserID=$g(%session.Data("UserID"))
	s FName=%request.Data("FName",1)
	s %dev="c:\intersystems\cache\jondax\S3\ad-hoc\"_UserID
	d CreateDir(%dev)
	s %dev="c:\intersystems\cache\jondax\S3\ad-hoc\"_UserID_"\Upload"
	d CreateDir(%dev)
	
	s fext=$p(FName,".",$l(FName,".")),fext=$zconvert(fext,"l")
	; check file extension
	s allowedext="*pdf*heic*png*jpg*jpeg*gif*webp*avif*hl7*xml*xlsx*json*ccd-a*hl7*"  ;PDF, XLSX,XML, JSON, PNG, JPG, HEIC, AVIF, WEBP, HL7,
	i allowedext'[("*"_fext_"*") 
	{
		s ^jxS3Upload(UserID,"Upload","Fail")=$g(^jxS3Upload(UserID,"Upload","Fail"))_FName_"(Unsupported format), "  
		s ^jxS3Upload(UserID,"FailCount")=$g(^jxS3Upload(UserID,"FailCount"))+1
		//s fCounting=^jxS3Upload(UserID,"FailCount")
		q
	}
	; check file size
	s fsize=%request.MimeData("fileupload",1).Size
    i +fsize>4999999 {
	    s ^jxS3Upload(UserID,"Upload","Fail")=$g(^jxS3Upload(UserID,"Upload","Fail"))_FName_"(Exceeds the size limit), " 
	    s ^jxS3Upload(UserID,"FailCount")=$g(^jxS3Upload(UserID,"FailCount"))+1
		//s fCounting=^jxS3Upload(UserID,"FailCount")
		q
    }
    
    //if fCounting=0{
	s stream=##class(%Stream.FileBinary).%New()
	s x=""
	while 1{
		s bytes=%request.MimeData("fileupload",1).Read(.a)
		;s bytes=%request.MimeData("fileupload",1).Read(fsize)
		d stream.Write(bytes)
		quit:%request.MimeData("fileupload",1).AtEnd
		s x=x+bytes
	}
	d stream.%Save()
.
	s %dev1=%dev_"\"_FName
	o %dev1:"wns" u %dev1
	s output=stream.OutputToDevice()
	c %dev
	;s sts1 = ##class(python.s3Utils).uploadFile(CliProfileName, %dev1, bk, destinationFolderStaging)
	
	i (+output=0) 
	{
		s ^jxS3Upload(UserID,"Upload","Fail")=$g(^jxS3Upload(UserID,"Upload","Fail"))_FName_"," 
		s ^jxS3Upload(UserID,"FailCount")=$g(^jxS3Upload(UserID,"FailCount"))+1
	}else
	  {
		  s ^jxS3Upload(UserID,"Upload","Success")=$g(^jxS3Upload(UserID,"Upload","Success"))+1
		}
    
    /*}
    else{	
	
	   s file =$g(^jxS3Upload(UserID,"Upload","Fail")) 
	   &js<alert("Uploading fails : "+`#(file)#`);>  
   
    }
    &js<console.log("success: "+`#(sFile)#`+ " now: "+`#(d1)#`+" Fail "+`#(failCount)#`);>
    
    if $g(^jxS3Upload(UserID,"Upload","Success"))= $g(^jxS3Upload("Count"))-$g(^jxS3Upload(UserID,"FailCount"))
    {
	    &js<alert("Uploaded!");>
    }*/
    
    
    ;d ##class(%File).Delete(%dev1)
	q
.
S3Upload()		; Upload multi files from %dev to S3 at once and delete the folder
	s UserID=$g(%session.Data("UserID"))
	n userSetting,CliProfileName
	s dir="c:\intersystems\cache\jondax\S3\ad-hoc\"_UserID_"\Upload"
	&sql(SELECT Setting INTO :userSetting FROM "User" WHERE ID=:UserID)
	&sql(SELECT Buckets_Name,Buckets_Folder, Buckets_CliProfileName 
		 INTO :bkn,:bkfd,:CliProfileName 
		 FROM MX.Setting_buckets  
		 WHERE setting=:userSetting)
	; for default bucket for internal users
	if userSetting=5 s bkn="jondaffr2",bkfd="-"
	
	if (bkfd'["-"){
		s destinationFolderStaging = bkfd_"/Staging" ;$p(bk,"/",2,*)_"/Staging"	
	} else {
		s destinationFolderStaging = "Staging"
	}
	s sts1 = ##class(python.s3Utils).uploadMultiFiles(CliProfileName, UserID, bkn, destinationFolderStaging, dir)
	d ##class(%File).RemoveDirectoryTree(dir)
	
	;if (+sts1>0) &js<window.open("jxS3Download.csp","_self")> 
	;e  &js<modalBtn.click();>
	q sts1		
	
CreateDir(dirFullPath)		; Create directory if not exist
	if (##class(%File).DirectoryExists(dirFullPath) = 0){
		d ##class(%File).CreateDirectory(dirFullPath)
	}
	q	

jxSDAToHL7^MAC^^66707,28290.5503973^0
ParsePIDandMSH(pSDA, hl7msg)
	s PID = ##class(EnsLib.HL7.Segment).%New()
	s PIDstatus = 1
	while (PIDstatus '= 0){
		s PIDstatus = PID.SetValueAt("PID",0)
		s PIDstatus = PID.SetValueAt("1",1)
.
		s PatientNumbers = pSDA.PatientNumbers
		
		FOR index=1:1:PatientNumbers.Count(){
			s PN = PatientNumbers.GetAt(index)
			
			if (PN.Number '= ""){	
				s arr = PN.Number_dl_dl_dl_PN.ISOAssigningAuthority_dl_dl
				
				; for MSH
				if ($L(PN.ISOAssigningAuthority)>0){
					s mshSendingFacility = $TRANSLATE(PN.ISOAssigningAuthority, "&","^")
				} else {
					s mshSendingFacility = ""
				}
			} else {
				s arr =""
				s mshSendingFacility = ""
			}
		
			s arr = $$StripDL(arr)
			if arr = "" {continue}
			
			if (PN.NumberType = "MRN") {s PIDstatus = PID.SetValueAt(arr, 2)}
			elseif (PN.NumberType = "SSN") {s PIDstatus = PID.SetValueAt(arr, 19)}
			elseif (PN.NumberType = "DL") {s PIDstatus = PID.SetValueAt(arr, 20)}
			elseif (PN.ISOAssigningAuthority '= "") {s PIDstatus = PID.SetValueAt(arr, 3)}
			else {
				s PIDstatus = PID.SetValueAt(arr, 18)
				s PIDstatus = PID.SetValueAt(arr, 3)
			}
		}
		
		
		s Name = pSDA.Name
		if (Name){
			s arr = $$StripDL(Name.FamilyName_dl_Name.GivenName_dl_Name.MiddleName_dl_Name.NameSuffix_dl_Name.NamePrefix)
			s PIDstatus = PID.SetValueAt(arr, 5)
		}
		
		s mName = pSDA.MothersFullName
		if (mName){
			s arr = $$StripDL(mName.FamilyName_dl_mName.GivenName_dl_mName.MiddleName_dl_mName.NameSuffix_dl_mName.NamePrefix)
			s PIDstatus = PID.SetValueAt(arr, 6)
		}
		
		
		s dob = $$SDATimeToHL7(pSDA.BirthTime)
		s PIDstatus = PID.SetValueAt(dob, 7)
		
		if (pSDA.Gender){
			s PIDstatus = PID.SetValueAt(pSDA.Gender.Code, 8)
		}
		
		s aName = pSDA.Aliases.GetNext()
		if (aName '= ""){
			s arr = $$StripDL(aName.FamilyName_dl_aName.GivenName_dl_aName.MiddleName_dl_aName.NameSuffix_dl_aName.NamePrefix_aName.ProfessionalSuffix)
			s PIDstatus = PID.SetValueAt(arr, 9)
		}
		
		s Race = pSDA.Races.GetNext()
		if (Race '= ""){
			s PIDstatus = PID.SetValueAt(Race.Code, 10)
		}
		
		
		s Address = pSDA.Addresses.GetNext()
		if (Address '=""){
			if (Address.City){s cityCode = Address.City.Code} else {s cityCode = ""}
			if (Address.State) {s stateCode = Address.State.Code} else {s stateCode = ""}
			if (Address.Zip) {s zipCode = Address.Zip.Code} else {s zipCode = ""}
			if (Address.Country) {s countryCode = Address.Country.Code} else {s countryCode = ""}
			if (Address.County) {s countyCode = Address.County.Code} else {s countyCode = ""}
			s arr = $$StripDL($PIECE(Address.Street, ";")_dl_dl_cityCode_dl_stateCode_dl_zipCode_dl_countryCode_dl_dl_dl_countyCode)
			s PIDstatus = PID.SetValueAt(arr, 11)
		}
		
		
		s Contact = pSDA.ContactInfo
		if (Contact){
			s arr = $$StripDL(dl_dl_dl_Contact.EmailAddress_dl_dl_dl_Contact.HomePhoneNumber_dl_dl)
			s PIDstatus = PID.SetValueAt(arr,13)
		}
		
		s arr = $$StripDL(dl_dl_dl_dl_dl_dl_Contact.WorkPhoneNumber)
		s PIDstatus = PID.SetValueAt(arr, 14)
		
		s PriLan = pSDA.PrimaryLanguage
		if (PriLan){
			s arr = $$StripDL(PriLan.Code_dl_PriLan.Description_dl_PriLan.SDACodingStandard_dl)
			s PIDstatus = PID.SetValueAt(arr, 15)
		}
		
		if (pSDA.MaritalStatus){
			s PIDstatus = PID.SetValueAt(pSDA.MaritalStatus.Code, 16)
		}
		
		if (pSDA.Religion){
			s PIDstatus = PID.SetValueAt(pSDA.Religion.Code, 17)
		}
		
		if (pSDA.EthnicGroup){
			s PIDstatus = PID.SetValueAt(pSDA.EthnicGroup.Code, 22)
		}
		
		s PIDstatus = PID.SetValueAt(pSDA.BirthOrder, 25)
		
		if (pSDA.Citizenship){
			s PIDstatus = PID.SetValueAt(pSDA.Citizenship.Code, 26)
		}
		
		s PIDstatus = 0
	}
	
	; --- MSH ---
	;s hl7msg = ##class(EnsLib.HL7.Message).%New()	
	if ($LENGTH(%session.Data("jxTransform", "MSH"))>0){
		s MSH = ##class(EnsLib.HL7.Segment).%New()
		s mshStr = $REPLACE(%session.Data("jxTransform", "MSH"), $c(13,10),"")
		s mshStr = $REPLACE(mshStr, $c(13),"")
		s MSH = MSH.ImportFromString(mshStr)
	} else {
		s MSH = ##class(EnsLib.HL7.Segment).%New()
		s MSHstatus = MSH.SetValueAt("^~\\&",1)
		if ($DATA(mshSendingFacility)){s MSHstatus = MSH.SetValueAt(mshSendingFacility, 4)}
		
		s MSHstatus = MSH.SetValueAt("ORU^R01",8)
		s MSHstatus = MSH.SetValueAt("2.3",11)
		; SET MSH last
		s MSHstatus = MSH.SetValueAt("MSH",0)
	}
	
	
.
	
	;s PIDandMSH = $LISTBUILD(PID,MSH)
	
	s setSegStatus = hl7msg.InsertSegmentAt(MSH, 1)
	s setSegStatus = hl7msg.InsertSegmentAt(PID, 2)
	
	q hl7msg
	
.
ParsePV1(pSDA, hl7msg)
	s PV1 = ##class(EnsLib.HL7.Segment).%New()
	s PV1status = 1
	while (PV1status '= 0){
		s PV1status = PV1.SetValueAt("PV1",0)
		s PV1status = PV1.SetValueAt("1",1)
		
		s PV1status = PV1.SetValueAt(pSDA.EncounterType, 2)
		
		s arr = $$StripDL(pSDA.AssignedWard_dl_pSDA.AssignedRoom_dl_pSDA.AssignedBed_dl_dl_dl_dl)
		s PV1status = PV1.SetValueAt(arr, 3)
		
		if (pSDA.AdmissionType){
			s PV1status = PV1.SetValueAt(pSDA.AdmissionType.Code, 4)
		}
			
		s PV1status = PV1.SetValueAt(pSDA.PreAdmissionNumber, 5)
		
		s Locations = pSDA.Locations
		s poc = ""
		s room = ""
		s bed = ""
		s facility = ""
		s building = ""
		s floor = ""
		FOR index = 1: 1: Locations.Count(){
			;s LocationCode = Locations.GetAt(index).LocationDetail.Code
			;s LocationDescription = Locations.GetAt(index).LocationDetail.PhysicalType.Description
			
			s Location = Locations.GetAt(index)
			if (Location.LocationDetail && Location.LocationDetail.Code){s LocationCode = Location.LocationDetail.Code} else {s LocationCode = ""}
			if (Location.LocationDetail && Location.LocationDetail.PhysicalType){s LocationDescription = Location.LocationDetail.PhysicalType.Description} else {s LocationDescription = "" }
			
			if ( LocationDescription = "Ward"){
				s poc = LocationCode
			} elseif (LocationDescription = "Room"){
				s room = LocationCode
			} elseif (LocationDescription = "Bed"){
				s bed = LocationCode	
			} elseif (LocationDescription = "Site"){
				s facility = LocationCode
			} elseif (LocationDescription = "Building"){
				s building = LocationCode
			} elseif (LocationDescription = "Level"){
				s floor = LocationCode
			} 			
		}
		s arr = $$StripDL(poc_dl_room_dl_bed_dl_facility_dl_dl_dl_building_dl_floor)
		s PV1status = PV1.SetValueAt(arr, 6)
		
		
		FOR index=1:1:pSDA.Participants.Count(){
			s participant = pSDA.Participants.GetAt(index)
			if (participant = "") {CONTINUE}
			s Doc = participant.CareProvider
			
			if (Doc.Name){
				s FamilyName = Doc.Name.FamilyName
				s GivenName = Doc.Name.GivenName
				s MiddleName = Doc.Name.MiddleName
				s NameSuffix = Doc.Name.NameSuffix
				s NamePrefix = Doc.Name.NamePrefix
				s ProfessionalSuffix = Doc.Name.ProfessionalSuffix
			} else {
				s FamilyName = ""
				s GivenName = ""
				s MiddleName = ""
				s NameSuffix = ""
				s NamePrefix = ""
				s ProfessionalSuffix = ""
			
			}
			
			s arr = $$StripDL(Doc.Code_dl_FamilyName_dl_GivenName_dl_MiddleName_dl_NameSuffix_dl_NamePrefix_dl_ProfessionalSuffix_dl_dl_Doc.IdentifierTypeCode_dl_Doc.NameTypeCode)
			
			;s DocType = pSDA.Participants.GetNext().Type  ;; might be wrong code 
			s DocType = participant.Type
			if (DocType.Description = ""){CONTINUE}
								
			if (DocType.Description = "attender"){
				s PV1status = PV1.SetValueAt(arr, 7)
			} elseif (DocType.Description="referrer"){
				s PV1status = PV1.SetValueAt(arr, 8)
			} elseif (DocType.Description="consultant"){
				s PV1status = PV1.SetValueAt(arr, 9)
			} elseif (DocType.Description="admitter"){
				s PV1status = PV1.SetValueAt(arr, 17)
			}
		}
		
		if (pSDA.HealthCareFacility){
			s PV1status = PV1.SetValueAt(pSDA.HealthCareFacility.Code,10)
		}
		
		;11,12,13 blank
		
		if (pSDA.AdmissionSource){
			s PV1status = PV1.SetValueAt(pSDA.AdmissionSource.Code, 14)
		}
		
		;15,16,18 blank
		
		s PV1status = PV1.SetValueAt(pSDA.EncounterNumber, 19)
		
		s PV1status = 0
	}
	
	s setSegStatus = hl7msg.InsertSegmentAt(PV1, 3)
	
	q hl7msg
	
.
ParseORC(pSDA, hl7msg)
.
	s ORC = ##class(EnsLib.HL7.Segment).%New()
	s ORCstatus = 1
	while(ORCstatus '=0){
		
		s ORCstatus = ORC.SetValueAt("ORC",0)
		s ORCstatus = ORC.SetValueAt("RE",1)
		
		; hl7tosda takes the subfileds as one 
		s arr = $$StripDL(pSDA.PlacerId_dl_pSDA.PlacerAssigningAuthority)
		s ORCstatus = ORC.SetValueAt(arr, 2)
		
		; hl7tosda takes the subfileds as one 
		s arr = $$StripDL(pSDA.FillerId_dl_pSDA.FillerAssigningAuthority)
		s ORCstatus = ORC.SetValueAt(arr, 3)
		
		; check later
		s ORCstatus = ORC.SetValueAt(pSDA.GroupId, 4)
		
		s ORCstatus = ORC.SetValueAt(pSDA.Status, 5)
		
		; 6 is blank
		
		if (pSDA.Duration){s durationCode = pSDA.Duration.Code} else {s durationCode = ""}
		if (pSDA.Priority) {s priorityCode = pSDA.Priority.Code} else {s priorityCode = ""}
		s arr = $$StripDL(pSDA.OrderQuantity_dl_dl_durationCode_dl_dl_dl_priorityCode_dl_pSDA.Condition_dl_pSDA.TextInstruction)
		s ORCstatus = ORC.SetValueAt(arr, 7)
		
		; 8,9 is blank
		
		; Only OrderedBy 12 has Name Property
.
		if (pSDA.EnteredBy){
			s arr = $$StripDL(pSDA.EnteredBy.Code_dl_dl_dl_dl_dl_dl_dl_dl_pSDA.EnteredBy.SDACodingStandard)
			s ORCstatus = ORC.SetValueAt(arr, 10)
		}
		
		if (pSDA.VerifiedBy){
			s arr = $$StripDL(pSDA.VerifiedBy.Code_dl_dl_dl_dl_dl_dl_dl_dl_pSDA.VerifiedBy.SDACodingStandard)
			s ORCstatus = ORC.SetValueAt(arr, 11)
		}
		
		if (pSDA.OrderedBy && pSDA.OrderedBy.Name){
			s FamilyName = pSDA.OrderedBy.Name.FamilyName
			s GivenName = pSDA.OrderedBy.Name.GivenName
			s MiddleName = pSDA.OrderedBy.Name.MiddleName
			s NameSuffix = pSDA.OrderedBy.Name.NameSuffix
			s NamePrefix = pSDA.OrderedBy.Name.NamePrefix
			s ProfessionalSuffix = pSDA.OrderedBy.Name.ProfessionalSuffix
		} else {
			s FamilyName = ""
			s GivenName = ""
			s MiddleName = ""
			s NameSuffix = ""
			s NamePrefix = ""
			s ProfessionalSuffix = ""	
		}
		if (pSDA.OrderedBy){
			s obCode =pSDA.OrderedBy.Code
			s obSDACodingStandard = pSDA.OrderedBy.SDACodingStandard
		} else {
			s obCode = ""
			s obSDACodingStandard = ""
		}
		s arr = $$StripDL(obCode_dl_FamilyName_dl_GivenName_dl_MiddleName_dl_NameSuffix_dl_NamePrefix_dl_ProfessionalSuffix_dl_obSDACodingStandard)
		s ORCstatus = ORC.SetValueAt(arr, 12)
		
		if (pSDA.EnteringOrganization){
			s ORCstatus = ORC.SetValueAt(pSDA.EnteringOrganization.Code,13)
		}
		
		s ORCstatus = ORC.SetValueAt(pSDA.CallbackNumber, 14)
		
		s ORCstatus = 0
	}
	s setSegStatus = hl7msg.InsertSegmentAt(ORC, 4)
	
	q hl7msg
		
ParseOBR(pSDA,hl7msg)
	
	s OBR = ##class(EnsLib.HL7.Segment).%New()
	s OBRstatus = 1
	while (OBRstatus '= 0){
		s OBRstatus = OBR.SetValueAt("OBR", 0)
		s OBRstatus = OBR.SetValueAt("1", 1)
		
		s arr = $$StripDL(pSDA.PlacerId_dl_pSDA.PlacerAssigningAuthority)
		s OBRstatus = OBR.SetValueAt(arr, 2)
		
		s arr = $$StripDL(pSDA.FillerId_dl_pSDA.FillerAssigningAuthority)
		s OBRstatus = OBR.SetValueAt(arr, 3)
		
		s OrderItem = pSDA.OrderItem
		if (OrderItem){
			s orderCode = OrderItem.Code
			s orderDesc = OrderItem.Description
			s orderCodingStandard = OrderItem.SDACodingStandard
		} else {
			s orderCode = ""
			s orderDesc = ""
			s orderCodingStandard = ""
		}
		s PriorCode = OrderItem.PriorCodes.GetNext()
		if (PriorCode){
			s pcCode = PriorCode.Code
			s pcDesc = PriorCode.Description
			s pcCodeSys = PriorCode.CodeSystem
			
		} else {
			s pcCode = ""
			s pcDesc = ""
			s pcCodeSys = ""	
		}
		s arr = $$StripDL(orderCode_dl_orderDesc_dl_orderCodingStandard_dl_pcCode_dl_pcDesc_dl_pcCodeSys)
		s OBRstatus = OBR.SetValueAt(arr, 4)
		
		if (pSDA.Priority){
			s OBRstatus = OBR.SetValueAt(pSDA.Priority.Code, 5)
		}
		
		s ReqDateTime = $$SDATimeToHL7(pSDA.FromTime)
		s OBRstatus = OBR.SetValueAt(ReqDateTime,6)
		
		s ObsDateTime = $$SDATimeToHL7(pSDA.SpecimenCollectedTime)
		s OBRstatus= OBR.SetValueAt(ObsDateTime, 7)
		
		
		; 8,9,10,11,12 empty
		s OBRstatus = OBR.SetValueAt(pSDA.ClinicalInformation, 13)
		
		s ObsEndDateTime = $$SDATimeToHL7(pSDA.SpecimenReceivedTime)
		s OBRstatus= OBR.SetValueAt(ObsEndDateTime, 14)
		
		; only specimen exists in sda
		s OBRstatus = OBR.SetValueAt(pSDA.Specimen, 15) 
.
		s OrderedBy = pSDA.OrderedBy
		s Name = OrderedBy.Name
		if (OrderedBy){s Code = OrderedBy.Code} else {s Code = ""}
		if (OrderedBy.Name){
			s FamilyName = pSDA.OrderedBy.Name.FamilyName
			s GivenName = pSDA.OrderedBy.Name.GivenName
			s MiddleName = pSDA.OrderedBy.Name.MiddleName
			s NameSuffix = pSDA.OrderedBy.Name.NameSuffix
			s NamePrefix = pSDA.OrderedBy.Name.NamePrefix
			s ProfessionalSuffix = pSDA.OrderedBy.Name.ProfessionalSuffix
		} else {
			s FamilyName = ""
			s GivenName = ""
			s MiddleName = ""
			s NameSuffix = ""
			s NamePrefix = ""
			s ProfessionalSuffix = ""
		}
		s arr = $$StripDL(Code_dl_FamilyName_dl_GivenName_dl_MiddleName_dl_NameSuffix_dl_NamePrefix_dl_ProfessionalSuffix_dl_dl_OrderedBy.SDACodingStandard_dl_OrderedBy.NameTypeCode_dl_dl_dl_OrderedBy.IdentifierTypeCode)
		s OBRstatus = OBR.SetValueAt(arr, 16)
		
		s OBRstatus = OBR.SetValueAt(pSDA.CallbackNumber, 17)
		
		;18,19, 21,23 blank . 20 is not found
		; 22 is in results
		if (pSDA.OrderCategory){
			s OBRstatus = OBR.SetValueAt(pSDA.OrderCategory.Code, 24)
		}
		
		; 25 is in results
		if (pSDA.ParentResultObservation){s parentCode = pSDA.ParentResultObservation.Code} else {s parentCode = ""}
		s arr = $$StripDL(parentCode_dl_pSDA.ParentResultObservationSubId_dl_pSDA.ParentResultObservationText)
		s OBRstatus = OBR.SetValueAt(arr, 26)
		
.
		s timing = $$SDATimeToHL7(pSDA.FromTime)
		s arr = $$StripDL(pSDA.OrderQuantity_dl_dl_pSDA.Duration.Code_dl_timing_dl_dl_pSDA.Condition_dl_pSDA.TextInstruction)
		s OBRstatus = OBR.SetValueAt(arr, 27)
		
		;28 sda can only carry one provider
		if (pSDA.ResultCopiesTo){s CopyTo = pSDA.ResultCopiesTo.GetNext()} else {s CopyTo = ""}
		if (CopyTo){s Code = CopyTo.Code} else {s Code = ""}
		if (CopyTo && CopyTo.Name){
			s FamilyName = CopyTo.Name.FamilyName
			s GivenName = CopyTo.Name.GivenName
			s MiddleName = CopyTo.Name.MiddleName
			s NameSuffix = CopyTo.Name.NameSuffix
			s NamePrefix = CopyTo.Name.NamePrefix
			s ProfessionalSuffix = CopyTo.Name.ProfessionalSuffix
		} else {
			s FamilyName = ""
			s GivenName = ""
			s MiddleName = ""
			s NameSuffix = ""
			s NamePrefix = ""
			s ProfessionalSuffix = ""
		}
		s arr = $$StripDL(Code_dl_FamilyName_dl_GivenName_dl_MiddleName_dl_NameSuffix_dl_NamePrefix_dl_ProfessionalSuffix)
		s OBRstatus = OBR.SetValueAt(arr, 28)
	
		s OBRstatus = 0
	
	}
	
	s setSegStatus = hl7msg.InsertSegmentAt(OBR, 5)
	q hl7msg
	
ParseOBX(pSDA, hl7msg)
	
	if (pSDA.Result && pSDA.Result.ResultItems) { 	//	start of if check
	for index =1:1:pSDA.Result.ResultItems.Count(){
		s obxsda = pSDA.Result.ResultItems.GetAt(index)
		s OBX = ##class(EnsLib.HL7.Segment).%New()
		s OBXstatus = 1
		while (OBXstatus '= 0){
			s OBXstatus = OBX.SetValueAt("OBX",0)
			s OBXstatus = OBX.SetValueAt(index, 1)
			
			s OBXstatus = OBX.SetValueAt(obxsda.ObservationValueType, 2)
						
			; PriorCodes are not retrieveable although SDA file contains them in xml format	
			if (obxsda.TestItemCode.PriorCodes.Count() > 0){
				s pc = obxsda.TestItemCode.PriorCodes.GetNext()
				s pCode = pc.Code
				s pCodeSys = pc.CodeSystem
				s pCodeDesc = pc.Description
			} else {
				s pCode = ""
				s pCodeSys = ""
				s pCodeDesc = ""
			}
			if (obxsda.TestItemCode){
				s testItemCode = obxsda.TestItemCode.Code
				s testItemDesc = obxsda.TestItemCode.Description
				s testItemStandard = obxsda.TestItemCode.SDACodingStandard
			} else {
				s testItemCode=""
				s testItemDesc=""
				s testItemStandard=""
			}
			s arr = $$StripDL(testItemCode_dl_testItemDesc_dl_testItemStandard_dl_pCode_dl_pCodeDesc_dl_pCodeSys)
			s OBXstatus = OBX.SetValueAt(arr, 3)
			
			s OBXstatus = OBX.SetValueAt(obxsda.SubId, 4)
			
			s resultValue = $TRANSLATE(obxsda.ResultValue, $c(13,10)," ")
			s OBXstatus = OBX.SetValueAt(resultValue, 5)
			
			; sda only carry one unit
			s OBXstatus = OBX.SetValueAt(obxsda.ResultValueUnits, 6)
			
			s OBXstatus = OBX.SetValueAt(obxsda.ResultNormalRange, 7)
			
			s OBXstatus = OBX.SetValueAt(obxsda.ResultInterpretation, 8)
			
			;9 , 10 blank
		
			s OBXstatus = OBX.SetValueAt(obxsda.TestItemStatus, 11)
			
			;12, 13 blank
			
			s time = $$SDATimeToHL7(obxsda.ObservationTime)
			s OBXstatus = OBX.SetValueAt(time, 14)
			
			s OBXstatus = 0
		}
		
		s setSegStatus = hl7msg.InsertSegmentAt(OBX, index + 5)
	}
	} //end of if check
	q hl7msg
.
SDATimeToHL7(sdaTime)
	;s matcher = ##class(%Regex.Matcher).%New(":[0-9]+")
	if ($FIND(sdaTime, "+")){
		s addTime = $P(sdaTime, "+", *-0)
		s addTime = "+"_addTime	
	} else {s addTime = ""}
	
	s addTime = $TRANSLATE(addTime, ":","")
	s sdaTime = $P(sdaTime,"+")
	s time = $CHANGE(sdaTime, ":00", "", 1, -1)
	s time = $TRANSLATE(time, "-T: ","")
	s hl7Time = time_addTime
	q hl7Time
		
StripDL(arr)
	s arr = $ZSTRIP(arr,">","^")
	q arr

jxSDAToResults^MAC^^66722,24113.4527037^0
jxSDAToResults(sda,rid,devMode=0)
		
	#import MX		
		
	s pSDA = 1
	WHILE(pSDA '= ""){
		d sda.GetNextSDA(.pType, .pSDA)
		if (pType '="LabOrder"){
			continue
		} else {
			if (pSDA.SpecimenReceivedTime){
				s date = $p(pSDA.SpecimenReceivedTime, "T",1)
				s internalDate = $zdateh(date,6)
				&sql(UPDATE MX.ResultBloodTest SET ReportDate=:indate WHERE Record->ID=:rid)
			}
			if (pSDA.Result && pSDA.Result.ResultItems) {
				s objxcount = ""
				for index =1:1:pSDA.Result.ResultItems.Count(){
					s obxsda = pSDA.Result.ResultItems.GetAt(index)
					if (obxsda.TestItemCode){
	
						i ($L(obxsda.TestItemCode.Code)>0) {s testItemCode = obxsda.TestItemCode.Code} else {s testItemCode=""}
						i ($L(obxsda.TestItemCode.Description)>0) {s testItemDesc = obxsda.TestItemCode.Description} else {s testItemDesc=""}
						i ($L(obxsda.TestItemCode.SDACodingStandard)>0) {s testItemStandard = obxsda.TestItemCode.SDACodingStandard} else {s testItemStandard=""}
						i ((testItemCode = "") &(testItemDesc ="")) {continue}
						
						i ($L(obxsda.ResultValue>0)){s resultValue = obxsda.ResultValue} else {s resultValue = ""}
						
						i ($L(obxsda.ResultNormalRange>0)){s range = obxsda.ResultNormalRange} else {s range = ""}
						
						i ($L(obxsda.ResultValueUnits>0)){s unit = obxsda.ResultValueUnits} else {s unit = ""}
						
						i (($L(resultValue)=0) & ($L(range)=0) & ($L(unit)=0)){continue}
						
						; update to rbt
						&sql(SELECT ID INTO :rbt From ResultBloodTest WHERE Record->ID=:rid)
						if ((rid = "")!(rbt="")){q}
						
						s objxcount=objxcount+1
						s objx=##class(ResultBloodTest).%OpenId(rbt)
						s objx1=##class(ResultBloodTestValue).%New()
						
						i (($L(testItemDesc)=0) && ($L(testItemCode)'=0)){ ; if the test name is only 1 segment in SDA, Code will be used as description 
							s testItemDesc = testItemCode
						}
										
						s objx1.TestName= testItemDesc
						s objx1.Result=resultValue
						s objx1.SIUnit=unit
						
						i ((range[">") ! (range["<")){
							s lowrange = range
							s highrange = ""
						} elseif ((range '[">") & (range '["<") & (range ["-")){
							s lowrange=$p(range,"-",1)
							s highrange=$p(range,"-",*)
						} else {
							s lowrange = range
							s highrange = ""
						}
						
						s objx1.LowRange=lowrange
						s objx1.HighRange=highrange
						
						d objx.Tests.SetAt(objx1,objxcount)
						i (devMode){w !, testItemDesc, "  " , resultValue, "  ", unit, "  ", lowrange, "  ", highrange}
						s sts = objx.%Save()
						
						i (devMode){w !,sts,"Saved Result..."}
					}
				}
			}
		}	
	}
	
SDAStrToSDAObj(SDAStr)
	s tSDA = ##class(%Stream.GlobalCharacter).%New()
	d tSDA.Write(SDAStr)	
	s sda = ##class(HS.SDA3.Container).%New()
	d sda.InitializeXMLParse(tSDA)	
	q sda
.
CDAToSDA(CDAFullFilePath)
.
	#include %msql
	
	s CDAStream = ##class(%Stream.FileCharacter).%New()
	s tSDA3Stream = ##class(%Stream.GlobalCharacter).%New()
	s CDAStream.Filename = CDAFullFilePath
	Set tTransformer1 = ##class(HS.Util.XSLTTransformer).%New()
    Set TransformStatus = tTransformer1.Transform(CDAStream,"SDA3/CCDA-to-SDA.xsl",.tSDA3Stream)  
    
    s SDAStr = tSDA3Stream.Read()
    if ($L(SDAStr)<1){
	    s errCode = "JX3006"
		s errData = "Failed transforming from CDA to SDA"
		s errName = $$GenerateErrorName^jxErrorReport(errCode)
    
		Throw ##class(%Exception.General).%New(errName, errCode ,"CDAToSDA^jxSDAToResults",errData)
    }
	q SDAStr
.
.
FHIRJsonToSDA(FHIRJsonFullFilePath)
.
	#include %msql
	
	s file = ##class(%Stream.FileCharacter).%New()
	s file.Filename = FHIRJsonFullFilePath
	s fhirJsonStr = file.Read($$$MaxLocalLength)
	Set fhirObj= {}.%FromJSON(fhirJsonStr)
	
	set sdaObj = ##class(HS.FHIR.DTL.Util.API.Transform.FHIRToSDA3).TransformObject(fhirObj,"R4")
	s sdaStream = ##class(%Stream.GlobalCharacter).%New()
	s sdaStatus = sdaObj.object.ToQuickXMLStream(.sdaStream)
	
	s SDAStr = sdaStream.Read()
	if ($L(SDAStr)<1){
    	s errCode = "JX3006"
		s errData = "Failed transforming from FHIR JSON to SDA"
		s errName = $$GenerateErrorName^jxErrorReport(errCode)
		Throw ##class(%Exception.General).%New(errName, errCode ,"FHIRJsonToSDA^jxSDAToResults",errData)
    }
	q SDAStr
.
.
FHIRXmlToSDA(FHIRXmlFullFilePath)
.
	#include %msql
	
	s file = ##class(%Stream.FileCharacter).%New()
	s file.Filename =FHIRXmlFullFilePath
	s fhirXmlStr = file.Read($$$MaxLocalLength)
	
	Set jsonStream = ##class(%Stream.GlobalCharacter).%New()
	Set schema = ##class(HS.FHIRServer.Schema).LoadSchema("R4")
  	Do ##class(HS.FHIRServer.Util.XMLToJSON).XMLToJSONStream(fhirXmlStr, .jsonStream, schema)  
  	Set fhirObj= {}.%FromJSON(jsonStream)
	
	set sdaObj = ##class(HS.FHIR.DTL.Util.API.Transform.FHIRToSDA3).TransformObject(fhirObj,"R4")
.
	s sdaStream = ##class(%Stream.GlobalCharacter).%New()
	s sdaStatus = sdaObj.object.ToQuickXMLStream(.sdaStream)
	
	s SDAStr = sdaStream.Read()
	if ($L(SDAStr)<1){
		s errCode = "JX3006"
		s errData = "Failed transforming from FHIR XML to SDA"
		s errName = $$GenerateErrorName^jxErrorReport(errCode)
		Throw ##class(%Exception.General).%New(errName,errCode ,"FHIRXmlToSDA^jxSDAToResults",errData)
    }
	q SDAStr
.
.
.
.
HL7ToSDA(HL7StandardizedStr)
.
	s hl7Stream = ##class(%Stream.GlobalCharacter).%New()
	d hl7Stream.Write(HL7StandardizedStr)
	s hl7msg = ##class(EnsLib.HL7.Message).ImportFromLibraryStream(hl7Stream)	
.
	s tMSH = hl7msg.FindSegment("MSH")	; setting DocType
	i (tMSH){
		s tType = tMSH.GetValueAt(9, ":_~\&")
		s tVersion = tMSH.GetValueAt(12, ":_~\&")
		i (tType && tVersion){
			s hl7msg.DocType = tVersion_":"_tType
		}
	} 
	d ##class(HS.Gateway.HL7.HL7ToSDA3).GetSDA(hl7msg,.tSDA, 1 ,1)
	; tSDA is the SDA %Stream.GlobalCharacter
	s SDAStr = tSDA.Read()
	if ($L(SDAStr)<1){
    	s errCode = "JX3006"
		s errData = "Failed transforming from HL7 to SDA"
		s errName = $$GenerateErrorName^jxErrorReport(errCode)
		Throw ##class(%Exception.General).%New(errName,errCode ,"HL7ToSDA^jxSDAToResults",errData)
    }	
    s SDAStr = $$UnescapeHL7(SDAStr)
	q SDAStr
	
StandardizeHL7(HL7FileFullPath)
	
	s hl7msg = ##class(EnsLib.HL7.Message).ImportFromFile(HL7FileFullPath)
	i ('hl7msg){
		;w !, "ERROR IMPORTING HL7 FILE: ",HL7FileFullPath,!
		s errData = "Cannot import HL7 file into ##class(EnsLib.HL7.Message)/"
		Throw ##class(%Exception.General).%New("Failed importing HL7 Message","JX3006" ,"StandardizeHL7^jxSDAToResults",errData)
		q
	}
	
	; setting Encounter
	s tPV1 = hl7msg.FindSegment("PV1")
	if (tPV1){
		s tEncNum = tPV1.GetValueAt(19, ":_~\&")
		if ('tEncNum){
			s EncStatus = tPV1.SetValueAt("123456789", 19)
			;w !,"Added Encounter number 123456789 at PV1:19"
		} 
	} else{
		s tPV1 = ##class(EnsLib.HL7.Segment).%New()
		s PV1Status = tPV1.SetValueAt("PV1", 0)
		s EncNumStatus = tPV1.SetValueAt("123456789",19)
		
		d hl7msg.FindSegment("PID", .PIDIndex)
		if (PIDIndex){
			s PV1Index = PIDIndex + 1
		} else {
			s PV1Index = 3
		}
		s setSegStatus = hl7msg.InsertSegmentAt(tPV1, PV1Index)
		if ('setSegStatus){
			;w !, "Failed to insert PV1 segment",!
			s errData = "Failed Insertingg PV1 Segment into HL7 Message."
			Throw ##class(%Exception.General).%New("Failed Standardizing HL7",100 ,"StandardizeHL7^jxSDAToResults",errData)
			q
		}
		;w !,"Added added PV1 segment with encounter number 123456789 after PID"
		KILL tPV1, PIDIndex, PV1Index
	}
	
	
	; finding OBRs
	s OBRIndex = 0
	s listOBR = $LISTBUILD()
	WHILE (OBRIndex '= ""){
		d hl7msg.FindSegment("OBR", .OBRIndex)
		if (OBRIndex){
			s listOBR = listOBR_$LISTBUILD(OBRIndex)	
		}
	}
	
	; finding ORCs
	s ORCIndex = 0
	s listORC = $LISTBUILD()
	WHILE(ORCIndex '=""){
		d hl7msg.FindSegment("ORC", .ORCIndex)
		if (ORCIndex){
			s listORC = listORC_$LISTBUILD(ORCIndex)	
		}
	}
	
	i ($LISTLENGTH(listOBR)<$LISTLENGTH(listORC)){
		;w !,"Bad Format: numbers of OBR is less than numbers of ORC in the file."
		s errData = "Numbers of OBR is less than numbers of ORC in the file."
		Throw ##class(%Exception.General).%New("Bad Format in HL7","JX4005" ,"StandardizeHL7^jxSDAToResults",errData)
		q 
	}
	;zw listOBR
	s ORCIndexCarry = 0
	s numAddedSegments = 0
	FOR index=2:1:($LISTLENGTH(listOBR)){
		s curOBRIndex = $LISTGET(listOBR,index)
		s orcindex = index - ORCIndexCarry
		s curORCIndex = $LISTGET(listORC,orcindex)
.
		; setting ORC
		if ((curORCIndex '= "") && (curORCIndex < curOBRIndex)){
		
			s segIndex = curORCIndex - 1
			s tORC = hl7msg.FindSegment("ORC",.segIndex)
			i ((tORC '="") && (ORCIndex < curOBRIndex)){
				s tOBS = tORC.GetValueAt(29, ":_~\&")
				if ('tOBS){
					s obsStatus = tORC.SetValueAt("LAB",29)
				}
			}
			;w !,"Added value for ORC at index: "_segIndex
		} else {
	
			s tORC = ##class(EnsLib.HL7.Segment).%New()
			s orcStatus = tORC.SetValueAt("ORC",0)
			s obsStatus = tORC.SetValueAt("LAB",29)
			s curOBRIndex = curOBRIndex + numAddedSegments
			s setSegStatus = hl7msg.InsertSegmentAt(tORC, curOBRIndex)
			if ('setSegStatus){
				;w !, "Failed to insert ORC segment",!
				s errData = "Failed inserting ORC segment to HL7 Message."
				Throw ##class(%Exception.General).%New("Failed to insert ORC segment","JX4005" ,"StandardizeHL7^jxSDAToResults",errData)
				q
			}
			;w !,"Added ORC at index: "_curOBRIndex
			s ORCIndexCarry = ORCIndexCarry + 1
			s numAddedSegments = numAddedSegments + 1
		} 
		
		
	}
		
.
	KILL tORC, OBRIndex, ORCIndex, ORCIndexCarry
	
	s hl7Str = hl7msg.OutputToString()
	;s %session.Data("jxTransform","hl7Standardized")=hl7Str
	
	q hl7Str
.
UnescapeHL7(SDAStr) ;; \S\ to ^, etc
	s SDAStr = $replace(SDAStr, "\F\", "|")
	s SDAStr = $replace(SDAStr, "\R\", "~")
	s SDAStr = $replace(SDAStr, "\S\", "^")
	s SDAStr = $replace(SDAStr, "\T\", "&")
	s SDAStr = $replace(SDAStr, "\E\", "\")
	//s SDAStr = $replace(SDAStr, "\.br\*", $c(13,10))
	//s SDAStr = $replace(SDAStr, "\X0D\", $c(13,10))
	//s SDAStr = $replace(SDAStr, "\X0A\", $c(10))
	q SDAStr
	
EscapeHL7(SDAStr) ;; ^ to \S\, etc
	s SDAStr = $replace(SDAStr, "\", "\E\")
	s SDAStr = $replace(SDAStr, "|", "\F\")
	s SDAStr = $replace(SDAStr, "~", "\R\")
	s SDAStr = $replace(SDAStr, "^", "\S\")
	s SDAStr = $replace(SDAStr, "&", "\T\")
	//s SDAStr = $replace(SDAStr, $c(13,10), "\.br\*")
	//s SDAStr = $replace(SDAStr, $c(13,10), "\X0D\")
	//s SDAStr = $replace(SDAStr, $c(10), "\X0A\")
	q SDAStr

jxScripts^MAC^^66711,24113.130061^0
jxScripts
jScript
	w "<script type='text/javascript'>",!
	w "function openMobileNav(e){",!
	w "    let sideNav = document.getElementsByClassName('side-nav')[0];",!
	w "    sideNav.classList.add('nav-open');",!
	w "}",!
	w "function closeMobileNav(e){",!
	w "    let sideNav = document.getElementsByClassName('side-nav')[0];",!
	w "    sideNav.classList.remove('nav-open');",!
	w "}",!
	w "function toggleCollapseDashboard(e){",!
	w "    e.stopPropagation();",!
	w "    let collapse = document.querySelector('.dashboard.collapse');",!
	w "    collapse.classList.toggle('collapse-open');",!
	w "}",!
	w "function toggleCollapseSetting(e){",!
	w "    e.stopPropagation();",!
	w "    let collapse = document.querySelector('.setting.collapse');",!
	w "    collapse.classList.toggle('collapse-open');",!
	w "}",!
	w "function toggleCollapseTemplate(e){",!
	w "    e.stopPropagation();",!
	w "    let collapse = document.querySelector('.template.collapse');",!
	w "    collapse.classList.toggle('collapse-open');",!
	w "}",!
	w "function openSettingPages(e){",!
	w "		e.stopPropagation();",!
	w "		let pageName = e.target.id;",!
	w "		if(pageName=='change-pw'){",!
	w " 		jPopMain('jxChangePassword.csp');",!
	w "		}",!
    w "}",!
	w "function cspRunServerMethodError() {",!
    w "		window.open('jxLockDown.csp','_self')",!
   	w "return;",!
	w "}",!
	w "function openDashboardPages(e){",!
	w "		e.stopPropagation();",!
	w "		let fileName = e.target.id;",!
	w "		jPopMain('jxDashboard'+fileName+'.csp');",!
    w "}",!
	w "</script>",!
	q
	
jScript2
	w "<script type='text/javascript'>",!
	w "function toggleSideNav(){",!
	w "    let sideNav = document.getElementsByClassName('side-nav')[0];",!
	w "    let mainField = document.getElementsByClassName('main-field')[0];",!
	w "    if(sideNav.classList.contains('nav-close')){",!
	w "        sideNav.classList.remove('nav-close');",!
	w "        mainField.style.width='80vw';",!
	w "    }",!
	w "    else{",!
	w "        sideNav.classList.add('nav-close');",!
	w "        mainField.style.width='95vw';",!
	w "    }",!
	w "}",!
	w "</script>",!
	q

jxSelectTransformation^MAC^^66752,33203.5606093^0
jxSelectTransformation
InitMe
	#import MX
	d INIT^WSP999
	s FName=%session.Data("jxUploadRecord")
	s fext=%session.Data("jxUploadRecord","fext")
	s myfile=%session.Data("jxTransform","fileName")
	i fext="hl7" d  q
	. s %session.Data("jxTransform","fileType") = "HL7"
	. &js<document.getElementById("uploadformat").innerHTML=" HL7 <span style='color:white;font-weight:normal'>file</span>">
	
	i fext="xml" d  q
	. d isFHIRorCDA
	. &js<document.getElementById("uploadformat").innerHTML=" " + fileType +" <span style='color:white;font-weight:normal'>file</span>">
	
	i (fext="json")!(fext="ttl") d  q
	. s %session.Data("jxTransform","fileType") = "FHIR"
	. &js<document.getElementById("uploadformat").innerHTML=" FHIR <span style='color:white;font-weight:normal'>file</span>">
	
	i fext="bmp"!(fext="heic")!(fext="jpg")!(fext="jpeg")!(fext="gif")!(fext="webp")!(fext="png") d  q
	. s %session.Data("jxTransform","fileType") = "Image"
	. &js<document.getElementById("uploadformat").innerHTML="<span style='color:white;font-weight:normal'>n</span> Image <span style='color:white;font-weight:normal'>file</span>">
.
	
	i fext="pdf" d  q
	. s %session.Data("jxTransform","fileType") = "PDF"
	. &js<document.getElementById("uploadformat").innerHTML=" PDF">
	
	i fext="xlsx" d  q
	. s %session.Data("jxTransform","fileType") = "Excel"
	. &js<document.getElementById("uploadformat").innerHTML="<span style='color:white;font-weight:normal'>n</span> Excel <span style='color:white;font-weight:normal'>file</span>">
	
	q  
Next
	d INIT^WSP999
	s d1=$s(d1["LOINC":"LOINC",d1["SNOMED":"SNOMED",1:"Custom")
	s d2=$s(d2["xml":"FHIR xml",d2["json":"FHIR json",d2["CDA":"C-CDA",1:"HL7")
	s %session.Data("jxNomenclature")=d1
	s %session.Data("jxFormat")=d2
	s fext=%session.Data("jxUploadRecord","fext")
	s fType=%session.Data("jxTransform","fileType")
	if (fType="HL7"){
		d StandardizeHL7^jxDataTransform
		d HL7ToSDA^jxDataTransform
	}
	elseif (fType="FHIR"){
		if (fext="xml"){
			d FHIRXmlTOSDA^jxDataTransform
		}
		elseif (fext="json"){ 
			d FHIRJsonToSDA^jxDataTransform
		}
	}
	elseif (fType="CDA"){
		d CDAToSDA^jxDataTransform
	}
	elseif (fType="Image"){
		d IMGToSDA^jxDataTransform
	}
	elseif (fType="PDF"){
		; insert to resultbloodtests
		s status = $$jxPDFHandler^jxPDFHandler(%session.Data("jxDataTransform","rid"))
		s status = $$jxResult2HL7^jxResult2HL7(%session.Data("jxDataTransform","rid"))
		if (status= 0){q}
		s %session.Data("jxTransform","fileName") = status
		d StandardizeHL7^jxDataTransform
		d HL7ToSDA^jxDataTransform
	}
	elseif (fType="Excel"){
	}
	d ExtractSDA^jxDataTransform
	q
isFHIRorCDA
	d INIT^WSP999
	s fileType=""
    set status=##class(%XML.TextReader).ParseFile(myfile,.textreader)
	d textreader.Read()
	d textreader.Read()
	if (textreader.Name["ClinicalDocument"){
		s fileType="CDA"
	}
	if (textreader.Name["Bundle"){
		s fileType="FHIR"
	}
	s %session.Data("jxTransform","fileType") = fileType
	&js<fileType='#(fileType)#'>
	q 

jxShowResults^MAC^^67129,32028.3734315^0
jxShowResults
	w !,"in jxSHOWRESULTS"
PopResults
	#import MX
	d INIT^CSP999
	;s rid=%session.Data("ShowResults")
	;;;; d cAWSOCR ONLY IF Record has not been reviewed
	s ReviewedDate="" &sql(SELECT IsNull(ReviewedDate,''),IsNull(ReportDate,'') INTO :ReviewedDate,:ReportDate FROM Record WHERE ID=:rid)
	s:ReviewedDate=$c(0) ReviewedDate=""
	i ReviewedDate="" 
	
	d ^jxAWSOCR   //for report date and type
	
	k test
	d GetResult
	q
GetResult
	s obj=##class(MX.Record).%OpenId(rid)
	;i obj.ReviewedDate'="",obj.Type["Blood Test" d ^cShowReviewed q
	s rid = +rid
	&sql(SELECT ID INTO :rbt FROM ResultBloodTest WHERE Record=:rid)
	w !,"rid: ",rid,"  rbt: ", rbt,!
	&sql(DELETE from ResultBloodTest_Tests WHERE ResultBloodTest=:rbt)
	i obj.HasError &js<C1.checked=1>
	i +obj.OCR.Count()<1 g EndResult
	s i=0
GetResult1
	s i=i+1
	g:i>obj.OCR.Count() EndResult
	s rec=$zconvert(obj.OCR.GetAt(i),"U")
	d GetTest
	g GetResult1
EndResult
	s obj=""
	s res=""
	s r1=""
	i '$d(test) d
	. k TestType("Blood Test")
	. &sql(UPDATE Record SET Type=replace(Type,'Blood Test,','') WHERE ID=:rid)
	. &sql(UPDATE Record SET Type=replace(Type,'Blood Test','') WHERE ID=:rid)
	&sql(SELECT OrgFile INTO :r1 FROM Record WHERE ID=:rid)
	i r1'="" s res="<span style='font-weight:bold'>File: </span>"_r1_"<br>"
	i +$g(ReportDate)>0,+$g(ReportDate)'>$h s res=res_"<span style='font-weight:bold'>Record Date: </span>"_$zdate(ReportDate,3)_"<br>"
	e  s res=res_"<span style='font-weight:bold'>Record Date: </span>UNKNOWN<br>"
	i $d(TestType) s (ttype,x)="" f i=1:1 d  q:x="" 
	. s x=$o(TestType(x)) q:x=""
	. s ttype=ttype_$s(ttype'="":", ",1:"")_$zconvert(x,"W")
	i $d(TestType) s res=res_"<span style='font-weight:bold'>Record Type: </span>"_ttype_"<br><hr>"
	i $d(test) s (ttype,x)="" f i=1:1 d  q:x="" 
	. s x=$o(test(x)) q:x=""
	. s val=$replace(test(x)," ","&nbsp;")
	. s res=res_val_"<br>"
	;&js<document.getElementById("Tab1").rows[1].cells[0].innerHTML="#(res)#">
	q
GetTest
	; check if its a Test Name
	s (testid,rule,siunit)=""
	&sql(SELECT ID,Rule,SIName INTO :testid,:rule,:siname FROM DiagnosticTest WHERE Name=:rec)
	i testid="" &sql(SELECT ID,Rule,SIName INTO :testid,:rule,:siname FROM DiagnosticTest WHERE :rec %STARTSWITH(Name))
	q:testid=""
	d UpdateRBT
	; get columns
	i +rule>3 d GetCol4A,UpdateRBTV q
	i +rule>2 d GetCol3A,UpdateRBTV q
	i +rule>1 d GetCol2A,UpdateRBTV q
	i +rule=1 d GetCol1A,UpdateRBTV q
	q
UpdateRBT
	; update MX.ResultBloodTest
	s IsReviewed=""
	&sql(SELECT IsNull(ReviewedDate,'') INTO :IsReviewed FROM Record WHERE ID=:rid)
	s IsReviewed=$replace(IsReviewed,$c(0),"") q:IsReviewed'=""
	s rbt=""
	&sql(SELECT ID INTO :rbt FROM ResultBloodTest WHERE Record=:rid)
	q:rbt'=""
	i $d(TestType) s (ttype,x)="" f iii=1:1 d  q:x="" 
	. s x=$o(TestType(x)) q:x=""
	. s ttype=ttype_$s(ttype'="":", ",1:"")_$zconvert(x,"W")
	s:+ReportDate=0 ReportDate=""
	&sql(INSERT INTO ResultBloodTest SET Record=:rid,Type=:ttype,ReportDate=:ReportDate)
	q
UpdateRBTV
.
	; final checks for validity
	q:$p(arr1,Q,2)=""
	i $p(arr1,Q,3)="",$p(arr1,Q,4)'="" d
	. s p4=$p(arr1,Q,4)
	. i p4["/"&($e(p4,1,2)="10")
	. f rbtvi=3:1:10 s $p(arr1,Q,rbtvi)=$p(arr1,Q,rbtvi+1)
	i $l($p(arr1,Q,1))>20 q
	s IsReviewed=""
	&sql(SELECT IsNull(ReviewedDate,'') INTO :IsReviewed FROM Record WHERE ID=:rid)
	s IsReviewed=$replace(IsReviewed,$c(0),"") q:IsReviewed'=""
	s rbt="" &sql(SELECT ID INTO :rbt FROM ResultBloodTest WHERE Record=:rid)
	q:rbt=""
	s objxcount="" &sql(SELECT COUNT(ID) INTO :objxcount FROM ResultBloodTest_Tests WHERE ResultBloodTest=:rbt)
	s objxcount=objxcount+1
	s objx=##class(ResultBloodTest).%OpenId(rbt)
	s objx1=##class(ResultBloodTestValue).%New()
	; get SI Name of test
	s xsiname="",tname=$p(arr1,Q,1) &sql(SELECT SIName INTO :xsiname FROM DiagnosticTest WHERE Name=:tname)
	i xsiname'="" s $p(arr1,Q,1)=xsiname
	s objx1.TestName=$p(arr1,Q,1)
	s objx1.Result=$p(arr1,Q,2)
	s objx1.SIUnit=$p(arr1,Q,3)
	s lowrange=$p(arr1,Q,4)
	s highrange=$p(arr1,Q,5)
	s objx1.LowRange=lowrange
	s objx1.HighRange=highrange
	
	d objx.Tests.SetAt(objx1,objxcount)
	d objx.%Save()
	s objrbt=""
	q
GetCol4A
	s sp="                                                       "
	k arr
	s arr1=""
	f ii=i+1:1:i+10 s arr1=arr1_$s(arr1'="":Q,1:"")_obj.OCR.GetAt(ii)
	d ^StripChar
.
	s arr1=$replace(arr1,"mo /","mmol/")
	s arr1=$replace(arr1,"mmo./","mmol/")
	s arr1=$replace(arr1,"mmo. /","mmol/")
	s arr1=$replace(arr1,"mmo 1/","mmol/")
	s arr1=$replace(arr1,"mmo1/","mmol/")
.
	; check if VALUE has UNITS
	i $p(arr1,Q,1)[" " d
	. i (+$p($p(arr1,Q,1)," ",1)=$p($p(arr1,Q,1)," ",1)),$p($p(arr1,Q,1)," ",2)'="" d
	.. s x=$p($p(arr1,Q,1)," ",1)_Q_$p($p(arr1,Q,1)," ",2)
	.. s x=x_Q_$p(arr1,Q,2,9)
	.. s arr1=x
	; confirm if test is valid
	; column 3 & 4 should be together
	
	; check if VALUE (piece 1) is valid
	s x=$p(arr1,Q,1) d
	. s $p(arr1,Q,1)=$replace(x,"*","")
	. i $e(arr1,Q,1)=" " s $p(arr1,Q,1)=$e($p(arr1,Q,1),2,99)
	. s x=$p(arr1,Q,1)
	. i $l(x)=1,+x=0,x'=0 s arr1=$p(arr1,Q,2,$l(arr1,Q)) q
	. i $e(x,1)'="<",$e(x,1)'=">",+x=0,x'=0 s arr1=$p(arr1,Q,2,$l(arr1,Q))
	. ;s $p(arr1,Q,1)=+$p(arr1,Q,1)
	. ;i $p(arr1,Q,1)<1,$p(arr1,Q,1)>0 s $p(arr1,Q,1)="0"_$p(arr1,Q,1)
	. i $p(arr1,Q,1)[" " s $p(arr1,Q,1)=$p($p(arr1,Q,1)," ",1)_Q_$p($p(arr1,Q,1)," ",2)_Q_$p(arr1,Q,2,10)
	;i +$p(arr1,Q,1)=0 q
	s x1=$p(arr1,Q,2),x2=$p(arr1,Q,3),x3=$p(arr1,Q,4) 
	i +x2>0,x2'=0,x2[" " s x3=$p(x2," ",2),x2=$p(x2," ",1)
	i x1["-",$p(x1,"-",2)="" d
	. s $p(arr1,Q,2)=x1_x2,$p(arr1,Q,3)=x3
	i x1'["-",x1'["/",+x1>0,+x2>0 s $p(arr1,Q,2)=x1_"-"_x2,$p(arr1,Q,3)=x3
	
	; check if piece 3 & 4 contains unit of measurement
	i $p(arr1,Q,2)="",$p(arr1,Q,3)'=0,+$p(arr1,Q,3)'=0,$p(arr1,Q,3)[" " d
	. s $p(arr1,Q,2)=$p($p(arr1,Q,3)," ",2)
	i $p(arr1,Q,2)="",$p(arr1,Q,4)'=0,+$p(arr1,Q,4)'=0,$p(arr1,Q,4)[" " d
	. s $p(arr1,Q,2)=$p($p(arr1,Q,4)," ",2)
	
	; check if piece 5 contains unit of measurement
	i $p(arr1,Q,2)="" d
	. s x=$p(arr1,Q,5),x1="" 
	. &sql(SELECT ID INTO :x1 FROM SIUnit WHERE Name=:x OR SIName=:x)
	. i x1'="" s $p(arr1,Q,2)=x
	
	; check if range is missing "-"
	i $p(arr1,Q,2)[" " d
	. i $p($p(arr1,Q,2)," ",1)>0,$p($p(arr1,Q,2)," ",2)>0 s $p(arr1,Q,2)=$replace($p(arr1,Q,2)," ","-")
		
	; strip double spaces
	s arr1=$replace($replace($replace(arr1,"  "," "),"  "," "),"  "," ")
	
	; check if VALUE (piece 1) is valid
	s x=$p(arr1,Q,1) d
	. s $p(arr1,Q,1)=$replace(x,"*","")
	. i $e(arr1,Q,1)=" " s $p(arr1,Q,1)=$e($p(arr1,Q,1),2,99)
	. s x=$p(arr1,Q,1)
	. i $l(x)=1,+x=0,x'=0 s arr1=$p(arr1,Q,2,$l(arr1,Q)) q
	. i $e(x,1)'="<",$e(x,1)'=">",+x=0,x'=0 s arr1=$p(arr1,Q,2,$l(arr1,Q))
	
	i $p(arr1,Q,1)[" H" s $p(arr1,Q,1)=$p($p(arr1,Q,1)," H",1)
	i $p(arr1,Q,1)[" L" s $p(arr1,Q,1)=$p($p(arr1,Q,1)," L",1)
	
	; check for missing Unit
	s x=$p(arr1,Q,2),xid="",IsMissing=1
	&sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	i xid'="" s IsMissing=0,$p(arr1,Q,2)=$replace($p(arr1,Q,2)," ","")
	
	i x[" " s x=$p(x," ",1)
	i IsMissing &sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	i xid'="" s IsMissing=0
.
	i IsMissing d
	. s x=$p(arr1,Q,4)
	. &sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	. i xid'="" s IsMissing=0
.
	i IsMissing d
	. s x=$p(arr1,Q,3)
	. &sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	. i xid'="" s IsMissing=0
	
	i IsMissing d
	. s x=$p(arr1,Q,2)
	. i x[" " s x=$p(x," ",2)
	. &sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	. i xid'="" s IsMissing=0
	. i IsMissing=0 s x1=$p($p(arr1,Q,2)," ",1),x2=$p($p(arr1,Q,2)," ",2),$p(arr1,Q,2)=x2_Q_x1
.
	i IsMissing d
	. s x=$p(arr1,Q,3)
	. i x[" " s x=$p(x," ",2)
	. &sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	. i xid'="" s IsMissing=0
	. ;i IsMissing=0 s x1=$p($p(arr1,Q,3)," ",1),x2=$p($p(arr1,Q,3)," ",2),$p(arr1,Q,2)=x2_Q_x1
	i IsMissing s arr1=$p(arr1,Q,1)_Q_$c(3)_Q_$p(arr1,Q,2,10)
	
	i $p(arr1,Q,2)'["up to ",$l($p(arr1,Q,2)," ")>1 d		; contains space in between
	. s $p(arr1,Q,3)=$p($p(arr1,Q,2)," ",2)
	. s $p(arr1,Q,2)=$p($p(arr1,Q,2)," ",1)
.
	; strip !,@,#,$,^,&,*,(,),[,],{,},|,\,?,;,:,~,`,'
	d StripChar
			;;; check if piece 2 (value) not a number and length 1
			;;i $l($p(arr1,Q,2))<2,+$p(arr1,Q,2)<=0 s arr1=$p(arr1,Q,1)_Q_$p(arr1,Q,3,999) 
	s arr1=$replace(arr1,$c(3),"")
	s $p(arr1,Q,2)=$replace($p(arr1,Q,2)," ","")
	s arr1=$replace(arr1,"mo /","mmol/")
	s arr1=$replace(arr1,"mmo./","mmol/")
	s arr1=$replace(arr1,"mmo. /","mmol/")
	s arr1=$replace(arr1,"mmo 1/","mmol/")
	s arr1=$replace(arr1,"mmo1/","mmol/")
	i $e($p(arr1,Q,1),1,1)=" " s arr1=$e(arr1,2,$l(arr1))
	i $p(arr1,Q,1)[" " s $p(arr1,Q,1)=$p($p(arr1,Q,1)," ",1)_Q_$p($p(arr1,Q,1)," ",2)
	s $p(arr1,Q,1)=$replace($p(arr1,Q,1)," ","")
	s arr1=$replace(arr1," - ","-")
	s arr1=$replace(arr1,"- ","-")
	s arr1=$replace(arr1," -","-")
	s arr1=$replace(arr1," . ",".")
	s arr1=$replace(arr1,". ",".")
	s arr1=$replace(arr1," .",".")
	i $zconvert($p(arr1,Q,3),"l")["up to " s $p(arr1,Q,3)=$replace($p(arr1,Q,3)," ",$c(2)) g GetCol4A1
	i $zconvert($p(arr1,Q,3),"l")["over " s $p(arr1,Q,3)=$replace($p(arr1,Q,3)," ",$c(2)) g GetCol4A1
	i $p(arr1,Q,3)[" " s $p(arr1,Q,3)=$p($p(arr1,Q,3)," ",1)_"-"_$p($p(arr1,Q,3)," ",2)
	s $p(arr1,Q,3)=$replace($p(arr1,Q,3)," ","")
	i $p(arr1,Q,4)[" " s $p(arr1,Q,4)=$p($p(arr1,Q,4)," ",1)_"-"_$p($p(arr1,Q,4)," ",2)
	s $p(arr1,Q,4)=$replace($p(arr1,Q,4)," ","")
	s arr1=$replace(arr1," ","-")
	f ii=1:1:$l(arr1,Q) i $e($p(arr1,Q,ii),$l($p(arr1,Q,ii)))="-" s $p(arr1,Q,ii)=$e($p(arr1,Q,ii),1,$l($p(arr1,Q,ii))-1) 
	i $p(arr1,Q,3)="" s arr1=$p(arr1,Q,1,2)_Q_$p(arr1,Q,4,10)
	s arr1=$replace(arr1," ","-")
GetCol4A1
	s arr1=$replace(arr1,Q," ")	; delimit with " "
	s arr1=$replace(arr1,"-"," ")	; replace "-" with " "
	;; place holder
	s arr1=obj.OCR.GetAt(i)_Q_$replace(arr1," ",Q)		; reset delimiter to Q
	s arr1=$replace(arr1,$c(2)," ")	
.
	; check which column is Unit & Convert if needed
	i $p(arr1,Q,4)="random" d
	. s $p(arr1,Q,4)=$p(arr1,Q,3),$p(arr1,Q,4)=$p(arr1,Q,5)
	. i $p(arr1,Q,5)'=0,+$p(arr1,Q,5)'=0 s $p(arr1,Q,4)=$p(arr1,Q,5),$p(arr1,Q,5)=$p(arr1,Q,6)
.
	i $d(TestType("Blood Test")) s IsError=0 q	;d ^AMI i IsError q
	; SI Unit & Ref Range
	; check which column is Unit & Convert if needed
	i $p(arr1,Q,4)="random" d
	. s $p(arr1,Q,4)=$p(arr1,Q,3),$p(arr1,Q,4)=$p(arr1,Q,5)
	. i $p(arr1,Q,5)'=0,+$p(arr1,Q,5)'=0 s $p(arr1,Q,4)=$p(arr1,Q,5),$p(arr1,Q,5)=$p(arr1,Q,6)
.
	; test name
	s test(i)=$zconvert(siname,"W")
	;s test(i)=$zconvert($p(arr1,Q,1),"W")
	; result
	s test(i)=test(i)_$e(sp,1,25-$l(test(i)))_$zconvert($p(arr1,Q,2),"W")
.
	&sql(SELECT ID,SIName INTO :r1,:r2 FROM SIUnit WHERE Name=:x)
	i r1'="" d
	. s x=$p(arr1,Q,1,2)_Q_$p(arr1,Q,5)_Q_$p(arr1,Q,3)_Q_$p(arr1,Q,4),arr1=x
	i r1="" d
	. s x=$p(arr1,Q,3)
	. &sql(SELECT ID,SIName INTO :r1,:r2 FROM SIUnit WHERE Name=:x)
	. i r1'="" d
	.. s x=$p(arr1,Q,1,2)_Q_r2_Q_$p(arr1,Q,4,5)
	.. s arr1=x
	. i r1="" d
	.. s x=$p(arr1,Q,1,2)_Q_"???"_Q_$p(arr1,2,5)
	.. ;s arr1=x
	s test(i)=test(i)_$e(sp,1,32-$l(test(i)))_$p(arr1,Q,3)
.
	i $p(arr1,Q,4)["random" d
	. s test(i)=$replace(test(i),siname,siname_" (random)")  
	. s x=siname_" (random)"
	. s x1=$e(test(i),1,$l(x))
	. s x2=$e(test(i),$l(x)+10,999)
	. s test(i)=x1_x2
	. s $p(arr1,Q,4)=$replace($p(arr1,Q,4),"random","")
	
	i $p(arr1,Q,4)["up to " d  q
	. s $p(arr1,Q,4)=$replace($p(arr1,Q,4),"up to ","<=")
	. s test(i)=test(i)_$e(sp,1,45-$l(test(i)))_$p(arr1,Q,4)
.
	i $p(arr1,Q,4)["greater than " d  q
	. s $p(arr1,Q,4)=$replace($p(arr1,Q,4),"greater than ",">")
	. s test(i)=test(i)_$e(sp,1,45-$l(test(i)))_$p(arr1,Q,4)
.
	i $p(arr1,Q,4)["over " d  q
	. s $p(arr1,Q,4)=$replace($p(arr1,Q,4),"over ",">")
	. s test(i)=test(i)_$e(sp,1,45-$l(test(i)))_$p(arr1,Q,4)
.
	s test(i)=test(i)_$e(sp,1,45-$l(test(i)))_$p(arr1,Q,4)
	i $p(arr1,Q,4)["<"!($p(arr1,Q,4)[">") d  q
	. s x=$p(arr1,Q,4)
	. s x=$replace(x," ","")
	. i $l(x)>1 q
	. s test(i)=test(i)_$p(arr1,Q,5)
	i $p(arr1,Q,5)'="" s test(i)=test(i)_$s($p(arr1,Q,4)'="":" - ",1:"")_$p(arr1,Q,5)
	q
GetCol3A
	s sp="                                                       "
	k arr
	s arr1=""
	f ii=i+1:1:i+10 s arr1=arr1_$s(arr1'="":Q,1:"")_obj.OCR.GetAt(ii)
	d ^StripChar
	
	s arr1=$replace(arr1,"mo /","mmol/")
	s arr1=$replace(arr1,"mmo./","mmol/")
	s arr1=$replace(arr1,"mmo. /","mmol/")
	s arr1=$replace(arr1,"mmo 1/","mmol/")
	s arr1=$replace(arr1,"mmo1/","mmol/")
.
	; check if VALUE has UNITS
	i $p(arr1,Q,1)[" " d
	. i (+$p($p(arr1,Q,1)," ",1)=$p($p(arr1,Q,1)," ",1)),$p($p(arr1,Q,1)," ",2)'="" s arr1=$p($p(arr1,Q,1)," ",1)_Q_$p($p(arr1,Q,1)," ",2)_Q_$p(arr1,Q,2,9)
	; confirm if test is valid
	; column 3 & 4 should be together
	
	; check if VALUE (piece 1) is valid
	s x=$p(arr1,Q,1) d
	. s $p(arr1,Q,1)=$replace(x,"*","")
	. i $e(arr1,Q,1)=" " s $p(arr1,Q,1)=$e($p(arr1,Q,1),2,99)
	. s x=$p(arr1,Q,1)
	. i $l(x)=1,+x=0,x'=0 s arr1=$p(arr1,Q,2,$l(arr1,Q)) q
	. i $e(x,1)'="<",$e(x,1)'=">",+x=0,x'=0 s arr1=$p(arr1,Q,2,$l(arr1,Q))
	. s $p(arr1,Q,1)=+$p(arr1,Q,1)
	. i $p(arr1,Q,1)<1,$p(arr1,Q,1)>0 s $p(arr1,Q,1)="0"_$p(arr1,Q,1)
	i +$p(arr1,Q,1)=0 q
.
	s x1=$p(arr1,Q,2),x2=$p(arr1,Q,3),x3=$p(arr1,Q,4) 
	i +x2>0,x2'=0,x2[" " s x3=$p(x2," ",2),x2=$p(x2," ",1)
	i x1["-",$p(x1,"-",2)="" d
	. s $p(arr1,Q,2)=x1_x2,$p(arr1,Q,3)=x3
	i x1'["-",x1'["/",+x1>0,+x2>0 s $p(arr1,Q,2)=x1_"-"_x2,$p(arr1,Q,3)=x3
.
	; check if range is missing "-"
	i $p(arr1,Q,2)[" " d
	. i $p($p(arr1,Q,2)," ",1)>0,$p($p(arr1,Q,2)," ",2)>0 s $p(arr1,Q,2)=$replace($p(arr1,Q,2)," ","-")
		
	; strip double spaces
	s arr1=$replace($replace($replace(arr1,"  "," "),"  "," "),"  "," ")
	
	; check if VALUE (piece 1) is valid
	s x=$p(arr1,Q,1) d
	. s $p(arr1,Q,1)=$replace(x,"*","")
	. i $e(arr1,Q,1)=" " s $p(arr1,Q,1)=$e($p(arr1,Q,1),2,99)
	. s x=$p(arr1,Q,1)
	. i $l(x)=1,+x=0,x'=0 s arr1=$p(arr1,Q,2,$l(arr1,Q)) q
	. i $e(x,1)'="<",$e(x,1)'=">",+x=0,x'=0 s arr1=$p(arr1,Q,2,$l(arr1,Q))
	
	i $p(arr1,Q,1)[" H" s $p(arr1,Q,1)=$p($p(arr1,Q,1)," H",1)
	i $p(arr1,Q,1)[" L" s $p(arr1,Q,1)=$p($p(arr1,Q,1)," L",1)
	; check for missing Unit
	s x=$p(arr1,Q,2),xid="",IsMissing=1
.
	&sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	i xid'="" s IsMissing=0,$p(arr1,Q,2)=$replace($p(arr1,Q,2)," ","")
	
	i x[" " s x=$p(x," ",1)
	i IsMissing &sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	i xid'="" s IsMissing=0
.
	i IsMissing d
	. s x=$p(arr1,Q,3)
	. &sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	. i xid'="" s IsMissing=0
	
	i IsMissing d
	. s x=$p(arr1,Q,2)
	. i x[" " s x=$p(x," ",2)
	. &sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	. i xid'="" s IsMissing=0
	. i IsMissing=0 s x1=$p($p(arr1,Q,2)," ",1),x2=$p($p(arr1,Q,2)," ",2),$p(arr1,Q,2)=x2_Q_x1
	
	i IsMissing d
	. s x=$p(arr1,Q,3)
	. i x[" " s x=$p(x," ",2)
	. &sql(SELECT ID INTO :xid FROM SIUnit WHERE Name=:x)
	. i xid'="" s IsMissing=0
	. ;i IsMissing=0 s x1=$p($p(arr1,Q,3)," ",1),x2=$p($p(arr1,Q,3)," ",2),$p(arr1,Q,2)=x2_Q_x1
	i IsMissing s arr1=$p(arr1,Q,1)_Q_$c(3)_Q_$p(arr1,Q,2,10)
.
	i $p(arr1,Q,2)'["up to ",$l($p(arr1,Q,2)," ")>1 d		; contains space in between
	. s $p(arr1,Q,3)=$p($p(arr1,Q,2)," ",2)
	. s $p(arr1,Q,2)=$p($p(arr1,Q,2)," ",1)
	
	; strip !,@,#,$,^,&,*,(,),[,],{,},|,\,?,;,:,~,`,'
	d StripChar
			;;; check if piece 2 (value) not a number and length 1
			;;i $l($p(arr1,Q,2))<2,+$p(arr1,Q,2)<=0 s arr1=$p(arr1,Q,1)_Q_$p(arr1,Q,3,999) 
	s arr1=$replace(arr1,$c(3),"")
	s $p(arr1,Q,2)=$replace($p(arr1,Q,2)," ","")
	s arr1=$replace(arr1,"mo /","mmol/")
	s arr1=$replace(arr1,"mmo./","mmol/")
	s arr1=$replace(arr1,"mmo. /","mmol/")
	s arr1=$replace(arr1,"mmo 1/","mmol/")
	s arr1=$replace(arr1,"mmo1/","mmol/")
	i $e($p(arr1,Q,1),1,1)=" " s arr1=$e(arr1,2,$l(arr1))
	i $p(arr1,Q,1)[" " s $p(arr1,Q,1)=$p($p(arr1,Q,1)," ",1)_Q_$p($p(arr1,Q,1)," ",2)
	s $p(arr1,Q,1)=$replace($p(arr1,Q,1)," ","")
	s arr1=$replace(arr1," - ","-")
	s arr1=$replace(arr1,"- ","-")
	s arr1=$replace(arr1," -","-")
	s arr1=$replace(arr1," . ",".")
	s arr1=$replace(arr1,". ",".")
	s arr1=$replace(arr1," .",".")
	i $zconvert($p(arr1,Q,3),"l")["up to " s $p(arr1,Q,3)=$replace($p(arr1,Q,3)," ",$c(2)) g GetCol3A1
	i $zconvert($p(arr1,Q,3),"l")["over " s $p(arr1,Q,3)=$replace($p(arr1,Q,3)," ",$c(2)) g GetCol3A1
	i $p(arr1,Q,3)[" " s $p(arr1,Q,3)=$p($p(arr1,Q,3)," ",1)_"-"_$p($p(arr1,Q,3)," ",2)
	s $p(arr1,Q,3)=$replace($p(arr1,Q,3)," ","")
	i $p(arr1,Q,4)[" " s $p(arr1,Q,4)=$p($p(arr1,Q,4)," ",1)_"-"_$p($p(arr1,Q,4)," ",2)
	s $p(arr1,Q,4)=$replace($p(arr1,Q,4)," ","")
	s arr1=$replace(arr1," ","-")
	f ii=1:1:$l(arr1,Q) i $e($p(arr1,Q,ii),$l($p(arr1,Q,ii)))="-" s $p(arr1,Q,ii)=$e($p(arr1,Q,ii),1,$l($p(arr1,Q,ii))-1) 
	i $p(arr1,Q,3)="" s arr1=$p(arr1,Q,1,2)_Q_$p(arr1,Q,4,10)
	s arr1=$replace(arr1," ","-")
GetCol3A1
	s arr1=$replace(arr1,Q," ")	; delimit with " "
	s arr1=$replace(arr1,"-"," ")	; replace "-" with " "
	;; place holder
	s arr1=obj.OCR.GetAt(i)_Q_$replace(arr1," ",Q)		; reset delimiter to Q
	s arr1=$replace(arr1,$c(2)," ")	
	
	i $d(TestType("Blood Test")) s IsError=0 d ^AMI i IsError q
	; SI Unit & Ref Range
	; check which column is Unit & Convert if needed
	s x=$p(arr1,Q,5)
	s (r1,r2)=""
	i $p(arr1,Q,4)="random" s $p(arr1,Q,4)=$p(arr1,Q,3),$p(arr1,Q,4)=$p(arr1,Q,5)
.
	; test name
	s test(i)=$zconvert(siname,"W")
	;s test(i)=$zconvert($p(arr1,Q,1),"W")
	; result
	s test(i)=test(i)_$e(sp,1,25-$l(test(i)))_$zconvert($p(arr1,Q,2),"W")
.
	&sql(SELECT ID,SIName INTO :r1,:r2 FROM SIUnit WHERE Name=:x)
	i r1'="" d
	. s x=$p(arr1,Q,1,2)_Q_$p(arr1,Q,5)_Q_$p(arr1,Q,3)_Q_$p(arr1,Q,4),arr1=x
	i r1="" d
	. s x=$p(arr1,Q,3)
	. &sql(SELECT ID,SIName INTO :r1,:r2 FROM SIUnit WHERE Name=:x)
	. i r1'="" d
	.. s x=$p(arr1,Q,1,2)_Q_r2_Q_$p(arr1,Q,4,5)
	.. s arr1=x
	. i r1="" d
	.. s x=$p(arr1,Q,1,2)_Q_"???"_Q_$p(arr1,2,5)
	.. ;s arr1=x
	s test(i)=test(i)_$e(sp,1,32-$l(test(i)))_$p(arr1,Q,3)
.
	i $p(arr1,Q,4)["random" d
	. s test(i)=$replace(test(i),siname,siname_" (random)")  
	. s x=siname_" (random)"
	. s x1=$e(test(i),1,$l(x))
	. s x2=$e(test(i),$l(x)+10,999)
	. s test(i)=x1_x2
	. s $p(arr1,Q,4)=$replace($p(arr1,Q,4),"random","")
	
	i $p(arr1,Q,4)["up to " d  q
	. s $p(arr1,Q,4)=$replace($p(arr1,Q,4),"up to ","<=")
	. s test(i)=test(i)_$e(sp,1,45-$l(test(i)))_$p(arr1,Q,4)
.
	i $p(arr1,Q,4)["greater than " d  q
	. s $p(arr1,Q,4)=$replace($p(arr1,Q,4),"greater than ",">")
	. s test(i)=test(i)_$e(sp,1,45-$l(test(i)))_$p(arr1,Q,4)
.
	i $p(arr1,Q,4)["over " d  q
	. s $p(arr1,Q,4)=$replace($p(arr1,Q,4),"over ",">")
	. s test(i)=test(i)_$e(sp,1,45-$l(test(i)))_$p(arr1,Q,4)
.
	s test(i)=test(i)_$e(sp,1,45-$l(test(i)))_$p(arr1,Q,4)
	/*
	i $p(arr1,Q,4)["<"!($p(arr1,Q,4)[">") d  q
	. s x=$p(arr1,Q,4)
	. s x=$replace(x," ","")
	. i $l(x)>1 q
	. s test(i)=test(i)_$p(arr1,Q,5)
	i $p(arr1,Q,5)'="" s test(i)=test(i)_$s($p(arr1,Q,4)'="":" - ",1:"")_$p(arr1,Q,5)
	*/
	q
GetCol2A
	s sp="                                   "
	k arr
	s arr1=""
	f ii=i:1:i+10 s arr1=arr1_$s(arr1'="":Q,1:"")_obj.OCR.GetAt(ii)
	; strip double spaces
	s arr1=$replace($replace($replace(arr1,"  "," "),"  "," "),"  "," ")
	; strip !,@,#,$,^,&,*,(,),[,],{,},|,\,?,;,:,~,`,'
	s x="! @ # $ ^ & * ( ) [ ] { } | \ ? ; : ~ ` ' ,"
	f ii=1:1:$l(x," ") s arr1=$replace(arr1,$p(x," ",ii),"")
	; check if piece 2 (value) not a number and length 1
	i $l($p(arr1,Q,2))<2,+$p(arr1,Q,2)<=0 s arr1=$p(arr1,Q,1)_Q_$p(arr1,Q,3,999) 
.
	; test name
	s test(i)=$zconvert($p(arr1,Q,1),"W")
	; result
	s test(i)=test(i)_$e(sp,1,25-$l(test(i)))_$zconvert($p(arr1,Q,2),"W")
	; SI Unit & Ref Range
	;s test(i)=test(i)_$e(sp,1,35-$l(test(i)))_$zconvert($p(arr1,Q,3),"W")
	;s test(i)=test(i)_$e(sp,1,50-$l(test(i)))_$zconvert($p(arr1,Q,4),"W")
	;w test(i),!
	q
GetCol1A
	s sp="                                   "
	k arr
	s arr1=""
	f ii=i:1:i+10 s arr1=arr1_$s(arr1'="":Q,1:"")_obj.OCR.GetAt(ii)
	; strip double spaces
	s arr1=$replace($replace($replace(arr1,"  "," "),"  "," "),"  "," ")
	; strip !,@,#,$,^,&,*,(,),[,],{,},|,\,?,;,:,~,`,'
	s x="! @ # $ ^ & * ( ) [ ] { } | \ ? ; : ~ ` ' ,"
	f ii=1:1:$l(x," ") s arr1=$replace(arr1,$p(x," ",ii),"")
	; test name
	s test(i)=$zconvert($p(arr1,Q,1),"W")
	; result
	;s test(i)=test(i)_$e(sp,1,25-$l(test(i)))_$zconvert($p(arr1,Q,2),"W")
	; SI Unit & Ref Range
	;s test(i)=test(i)_$e(sp,1,35-$l(test(i)))_$zconvert($p(arr1,Q,3),"W")
	;s test(i)=test(i)_$e(sp,1,50-$l(test(i)))_$zconvert($p(arr1,Q,4),"W")
	;w test(i),!
	q
SetError
	#import MX
	d INIT1^CSP999
	s rid=%session.Data("ShowResults")
	&sql(UPDATE Record SET HasError=:d1 WHERE ID=:rid)
	q
PopOriginal
	#import MX
	d INIT1^CSP999
	s rid=%session.Data("ShowResults")
	s r1=""
	&sql(SELECT TempFile,fExt INTO :r1,:r2 FROM Record WHERE ID=:rid)
	s ffile="c:\intersystems\cache\jonda\upload\"_r1_"."_r2
	s tfile="c:\intersystems\cache\csp\jonda\temp\"_r1_"."_r2
	s x=##class(%File).CopyFile(ffile,tfile,1)
	s file="temp/"_r1_"."_r2
	&js<window.open("#(file)#","new")>
	;h 5 d ##class(%File).Delete(tfile)
	q
StripChar
	k x
	; strip "-"
	s arr1=$replace(arr1," - ","-")
	s arr1=$replace(arr1,"- ","-")
	s arr1=$replace(arr1," -","-")		; what about "something -10"?
	; strip "."
	s arr1=$replace(arr1," . ",".")
	s arr1=$replace(arr1,". ",".")
	s arr1=$replace(arr1," .",".")
	
	; strip "²" & 3
	s arr1=$replace(arr1,$c(178),""),arr1=$replace(arr1,$c(179),"")
	;i $p(arr1,Q,1)["²" s $p(arr1,Q,1)=$replace($p(arr1,Q,1),"²","") 
	; check if $p(1) contains non-value characters
	i $p(arr1,Q,1)["!" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)["@" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	;i $p(arr1,Q,1)["#" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)["$" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	;i $p(arr1,Q,1)["^" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)["&" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)["?" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)[";" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)[":" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)["~" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)["`" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)["\" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	i $p(arr1,Q,1)["|" s arr1=$p(arr1,Q,2,$l(arr1,Q))
	; strip !,@,#,$,^,&,*,(,),[,],{,},|,\,?,;,:,~,`,'
	f ii=1:1:$l(arr1,Q) d
	. s xx=$p(arr1,Q,ii)
	. i (Q_"!"_Q_"@"_Q_"#"_Q_"$"_Q_"&"_Q_"*"_Q_"("_Q_")"_Q_"["_Q_"]"_Q_"{"_Q_"}"_Q_"|"_Q_"\"_Q_"?"_Q_";"_Q_":"_Q_"~"_Q_"`"_Q_"'"_Q)'[(Q_xx_Q) s x(ii)=$p(arr1,Q,ii) 
	. i $d(x(ii)),$e(x(ii),$l(x(ii)))=" " s x(ii)=$e(x(ii),1,$l(x(ii))-1)
	s arr1=""
	s xx="" f ii=1:1 d  q:xx=""
	. s xx=$o(x(xx)) q:xx=""
	. s x(xx)=$replace(x(xx),"!","")
	. s x(xx)=$replace(x(xx),"@","")
	. s x(xx)=$replace(x(xx),"#","")
	. s x(xx)=$replace(x(xx),"$","")
	. ;s x(xx)=$replace(x(xx),"^","")
	. s x(xx)=$replace(x(xx),"&","")
	. s x(xx)=$replace(x(xx),"*","")
	. s x(xx)=$replace(x(xx),"(","")
	. s x(xx)=$replace(x(xx),")","")
	. s x(xx)=$replace(x(xx),"_","")
	. s x(xx)=$replace(x(xx),"+","")
	. s x(xx)=$replace(x(xx),"=","")
	. s x(xx)=$replace(x(xx),"[","")
	. s x(xx)=$replace(x(xx),"]","")
	. s x(xx)=$replace(x(xx),":","")
	. s x(xx)=$replace(x(xx),";","")
	. s x(xx)=$replace(x(xx),"'","")
	. s x(xx)=$replace(x(xx),"""","")
	. s x(xx)=$replace(x(xx),"~","")
	. s x(xx)=$replace(x(xx),"`","")
	. s arr1=arr1_$s(arr1'="":Q,1:"")_x(xx)
	s arr1=$replace(arr1,$c(1,1),Q)
	q
	

jxSideNav^MAC^^67158,57772.6571489^0
jxSideNav
LoadProfile
	// Load profile on side navigation
	d INIT^WSP999
	s companyLogo = $s(%session.Data("CompanyLogo")'="":"./CompanyLogos/"_%session.Data("CompanyLogo"),1:"./assets/images/profileBordered.png")
	s dirlogo=^INST("CSPDir")_"\"_^INST("NS")_"\CompanyLogos\"_%session.Data("CompanyLogo")
	i '##class(%File).Exists(dirlogo) s companyLogo="./CompanyLogos/default.png"
	s r1="" &sql(SELECT ContactPerson INTO :r1 FROM "User" WHERE ID=:UserID)
	s r2="" &sql(SELECT Subscription->Name INTO :r2 FROM Subscription WHERE Profile=:UserID)
	s r2=$zconvert(r2,"w")
	&js<
		document.getElementsByClassName("profile")[0].src='#(companyLogo)#';document.getElementById("PlanName").innerHTML="#(r2)# Plan"
		if(localStorage.getItem("trans-count")!=0){
				document.querySelector(".nav-item .nav-collapse-btn img").style.display="block";
		}
	>
	q
	
WriteMenu(currentActive,collapse)
    w "<div class='nav-item collapse dashboard "_$s(currentActive["Dashboard":"active",1:"")_" "_$s(collapse=1:"collapse-open",1:"")_"'"
    w " onclick="_"window.open('jxDashboard.csp','_self')"_">",!
    w "<div class='nav-collapse-item'>",!
    w "<img class='dark' src='./assets/images/sNavDashboard_dark.png' alt='Settings'>",!
    w "<img src='./assets/images/sNavDashboard.png' alt='Dashboard'>",!
    w "<div class='nav-collapse'>",!
    w "<div class='nav-collapse-btn' onclick=''>",!
    w "<p>Dashboard</p>",!
    w "<img class='grey' src='./assets/images/dropDownGrey.png' alt='DropDown'  onclick='toggleCollapseDashboard(event)'>",!
    w "<img class='close-dark' src='./assets/images/dropDownCloseBlack.png' alt='DropDown' onclick='toggleCollapseDashboard(event)'>",!
    w "<img class='dark' src='./assets/images/dropDownBlack.png' alt='DropDown' onclick='toggleCollapseDashboard(event)'>",!
    w "</div>",!
    w "</div>",!
    w "</div>",!
    w "<div id='Activity' class='nav-collapse-field' onclick='openDashboardPages(event)'>Activity</div>",!
    w "<div id='Success' class='nav-collapse-field' onclick='openDashboardPages(event)'>Transaction Success Rate</div>",!
    w "<div id='TempUsage' class='nav-collapse-field' onclick='openDashboardPages(event)'>Templates Usage</div>",!
    ;w "<div id='Usage' class='nav-collapse-field' onclick='openDashboardPages(event)'>Usage Quota</div>",!
    w "</div>",!
    w "<div class='nav-item "_$s(currentActive="Transform":"active",1:"")_"' onclick="_"window.open('jxFileUpload.csp','_self')"_">",!
    w "<img src='./assets/images/sNavDT.png' alt='Data Transform'>",!
    w "<img class='dark' src='./assets/images/sNavDT_dark.png' alt='Data Transform'>",!
    w "<p>Data Transformations</p>",!
    w "</div>",!
    w "<div class='nav-item collapse setting "_$s(currentActive["Settings":"active",1:"")_" "_$s(collapse=2:"collapse-open",1:"")_"'"
    w " onclick='toggleCollapseSetting(event)'>",!
    w "<div class='nav-collapse-item'>",!
    w "<img class='dark' src='./assets/images/sNavPassword_dark.png' alt='Password'>",!
    w "<img src='./assets/images/sNavPassword.png' alt='Password'>",!
    w "<div class='nav-collapse'>",!
    w "<div class='nav-collapse-btn' onclick=''>",!
    w "<p>Settings</p>",!
    w "<img class='grey' src='./assets/images/dropDownGrey.png' alt='DropDown'  onclick='toggleCollapseSetting(event)'>",!
    w "<img class='close-dark' src='./assets/images/dropDownCloseBlack.png' alt='DropDown' onclick='toggleCollapseSetting(event)'>",!
    w "<img class='dark' src='./assets/images/dropDownBlack.png' alt='DropDown' onclick='toggleCollapseSetting(event)'>",!
    w "</div>",!
    w "</div>",!
    w "</div>",!
    w "<div class='nav-collapse-field' id='change-pw' onclick="_"openSettingPages(event)"_">Change Password</div>",!
    w "</div>",!
    w "<div class='nav-item collapse template "_$s(currentActive["Templates":"active",1:"")_" "_$s(collapse=3:"collapse-open",1:"")_"'"
    w " onclick='toggleCollapseTemplate(event)'>",!
    w "<div class='nav-collapse-item'>",!
    w "<img class='dark' src='./assets/images/sNavSettings_dark.png' alt='Settings'>",!
    w "<img src='./assets/images/sNavSettings.png' alt='Settings'>",!
    w "<div class='nav-collapse'>",!
    w "<div class='nav-collapse-btn' onclick=''>",!
    w "<p>Templates</p>",!
    w "<img class='grey' src='./assets/images/dropDownGrey.png' alt='DropDown'  onclick='toggleCollapseTemplate(event)'>",!
    w "<img class='close-dark' src='./assets/images/dropDownCloseBlack.png' alt='DropDown' onclick='toggleCollapseTemplate(event)'>",!
    w "<img class='dark' src='./assets/images/dropDownBlack.png' alt='DropDown' onclick='toggleCollapseTemplate(event)'>",!
    w "</div>",!
    w "</div>",!
    w "</div>",!
    d WriteTemplates
    w "</div>",!
    w "<a class='nav-item' href='mailto:support@jonda.health'>",!
    w "<img src='./assets/images/sNavSupport.png' alt='Support'>",!
    w "<p>Support</p>",!
    w "</a>",!
	q
	
WriteTemplates
	#import MX
	d INIT^WSP999
	&sql(SELECT Setting INTO :setting FROM "User" WHERE id=:UserID)
	&sql(DECLARE C1 CURSOR FOR
		SELECT Buckets_Name,Buckets_Folder
		INTO :bk,:bkFolder
		FROM Setting_Buckets
		WHERE Setting=:setting
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	WHILE SQLCODE=0{
    	w "<div class='nav-collapse-field' id="_bk_$s(bkFolder="-":"",1:"/"_bkFolder)_" onclick="_"openTemplatePages(event)"_">"_bk_$s(bkFolder="-":"",1:"/"_bkFolder)_"</div>",!
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)

jxSubscriptionUtils^MAC^^67172,13736.9452812^0
AddSubToUser(userID, subSetupID)
	s startDate = $p($h,",",1)
	
	&sql(SELECT OCRUnit, TransformationUnit,Monthly,Yearly 
		INTO :remainingOcrUnit, :remainingTransformationUnit, :monthly, :yearly 
		FROM SubscriptionSetup WHERE ID=:subSetupID)
	if (SQLCODE '= 0 ) {q 0}
	
	s endDate = startDate + 30
	&sql(INSERT INTO Subscription (Profile, Subscription, RemainingOcrUnit, RemainingTransformationUnit, EndDate, StartDate) 
		VALUES(:userID, :subSetupID, :remainingOcrUnit, :remainingTransformationUnit, :endDate, :startDate))
	if (SQLCODE '= 0 ) {q 0}
	q 1
.
CreateSubscriptionSetup
	&sql(INSERT INTO MX.SubscriptionSetup 
		(Code, Name, OCRUnit, TransformationUnit) 
		VALUES ('003','TRIAL', 1000, 1000))
	zw SQLCODE
	q
.
SubscriptionPoolDetails(userID)
	&sql(select SUM(RemainingOCRUnit),SUM(RemainingTransformationUnit),SUM(RemainingRedactionUnit) INTO :remainingOcrUnit, :remainingTransformationUnit, :remainingRedactionUnit FROM Subscription WHERE Profile=:userID)
	w !,"Remaining OCR: ", remainingOcrUnit
	w !,"Remaining Trans: ", remainingTransformationUnit
	w !,"Remaining Redactions: ", remainingRedactionUnit
	q
.
GetOcrSubscription(userID)
	#import MX
	s currentDate = $p($h,",",1)
	&sql(SELECT TOP 1 ID
		INTO :subID
		FROM Subscription
		WHERE Profile = :userID AND EndDate > :currentDate AND RemainingOCRUnit > 0 AND Type='Transformation'
		ORDER BY StartDate ASC
		)
	if (SQLCODE '=0){
		;w !,"FAILED TO GET OCR SUBSCRIPTION. SQLCODE= ", SQLCODE
		q 0
	} else {
		q subID
	}
	q 0
.
GetTransSubscription(userID)
	#import MX
	s currentDate = $p($h,",",1)
	&sql(SELECT TOP 1 ID
		INTO :subID
		FROM Subscription
		WHERE Profile = :userID AND EndDate > :currentDate 
		AND RemainingTransformationUnit > 0 AND Type='Transformation'
		ORDER BY StartDate ASC
		)
	if (SQLCODE '=0){
		w !,"FAILED TO GET Transformation SUBSCRIPTION. SQLCODE= ", SQLCODE
		q 0
	} else {
		q subID
	}
	q 0
	
GetRedactionSubscription(userID)
	#import MX
	s currentDate = $p($h,",",1)
	&sql(SELECT TOP 1 ID
		INTO :subID
		FROM Subscription
		WHERE Profile = :userID AND EndDate > :currentDate AND RemainingRedactionUnit > 0 AND Type='Redaction'
		ORDER BY StartDate ASC
		)
	if (SQLCODE '=0){
		w !,"FAILED TO GET Redaction SUBSCRIPTION. SQLCODE = ", SQLCODE,!
		q 0
	} else {
		q subID
	}
	q 0
.
DeductUnit(subID, unitType ="T", count=0)
	if (unitType = "T"){
		&sql(UPDATE MX.Subscription SET RemainingTransformationUnit = RemainingTransformationUnit - :count WHERE id = :subID)
		
	}elseif(unitType="O"){
		&sql(UPDATE MX.Subscription SET RemainingOCRUnit = RemainingOCRUnit - :count WHERE id = :subID)
		
	}
	elseif(unitType="R"){
		&sql(UPDATE MX.Subscription SET RemainingRedactionUnit = RemainingRedactionUnit - :count WHERE id = :subID)
		
	}
	if (SQLCODE '= 0){q 0} 
	q 1 
	
AdjustSubscriptionPool(userID)
	&sql(DECLARE SubAdjustCursor CURSOR FOR
		SELECT RemainingOCRUnit , ID
		INTO :remainingOcrUnit, :subId
		FROM Subscription
		WHERE Profile=:userID AND RemainingOCRUnit < 0
	)
	&sql(OPEN SubAdjustCursor)
	&sql(FETCH SubAdjustCursor)
	if (SQLCODE '= 0 ){
		w !,"NO NEED TO ADJUST SUBSCRIPTION POOL."
		q
	}
	WHILE (SQLCODE '= 0){
		s ocrSubId = $$GetOcrSubscription(userID)
		if (ocrSubId = 0){
			w !,"NO subscription available to adjust the exceeded OCR units."
			q
		} else {
			w !,"Adjusting Subscription Pool."
			s ocrSub = ##class(MX.Subscription).%OpenId(ocrSubId)
			s ocrSubRemainingOCRUnit = ocrSub.RemainingOCRUnit
			if ( ocrSubRemainingOCRUnit < $ZABS(remainingOcrUnit)){
				&sql(UPDATE MX.Subscription SET RemainingOCRUnit = RemainingOCRUnit + :ocrSubRemainingOCRUnit WHERE id = :subID)
				&sql(UPDATE MX.Subscription SET RemainingOCRUnit = RemainingOCRUnit - :ocrSubRemainingOCRUnit WHERE id = :ocrSubID)
				continue
			}else{
				&sql(UPDATE MX.Subscription SET RemainingOCRUnit = RemainingOCRUnit + :ocrSubRemainingOCRUnit WHERE id = :subID)
				&sql(UPDATE MX.Subscription SET RemainingOCRUnit = RemainingOCRUnit - :ocrSubRemainingOCRUnit WHERE id = :ocrSubID)
				&sql(FETCH SubAdjustCursor)
			}
		}
	}
	&sql(CLOSE SubAdjustCursor)
	q
	
.
.
	; SendSubscriptionOverMail^jxSubscriptionUtils("minnbobo@jonda.health", "BoBo", "www.google.com")
SendSubscriptionOverMail(toEmail, clientName)
	#import MX
	s EmailAddress=toEmail
 
 	s upgradeLink = "https://www.google.com"
 
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	; Calling Connect
.
	set mail.Subject="Your JondaX Trial has wrapped up. Ready for the next step?"
	;set mail.Charset="iso-8859-1"
	set mail.Charset = "UTF-8"
	set mail.ContentType="text/html"
	
	s mailBody = "<p>Dear {{clientName}},</p><p>We hope you&apos;ve enjoyed your trial experience with JondaX! You&apos;ve now exhausted your file transformations and pre-processing for PDFs and image files.&nbsp;</p><p>Ready to move ahead with JondaX? Dive into our package details with one of our team members and find the one that best aligns with your needs. &nbsp;</p><p> &#128279; <a href="""_upgradeLink_""">Upgrade Now</a></p><p>Your friends at Jonda Health&nbsp;</p>"
	//s mailBody = "<p>Dear {{clientName}},</p><p>We hope you&apos;ve enjoyed your trial experience with JondaX! You&apos;ve now exhausted your file transformations and pre-processing for PDFs and image files.&nbsp;</p><p>Ready to move ahead with JondaX? Dive into our package details with one of our team members and find the one that best aligns with your needs. &nbsp;</p><p> &#128279; <a href=""https://www.google.com"">Upgrade Now</a></p><p>Your friends at Jonda Health&nbsp;</p>"
.
	s mailBody = $replace(mailBody, "{{clientName}}", clientName)
	;s mailBody = $replace(mailBody, "{{upgradeLink}}", upgradeLink)
	
	w !,mailBody
	
	set status=mail.TextData.Write("<html><body>"_mailBody_"</body></html>")
	
	set status=mailserver.Send(mail)
.
 	q
	

jxSubscriptionUtils1^MAC^^67172,13023.0208411^0
AddSubToUser(userID, subSetupID)
	s startDate = $p($h,",",1)
	
	&sql(SELECT Token,Monthly,Yearly 
		INTO :remainingToken, :monthly, :yearly 
		FROM SubscriptionSetup WHERE ID=:subSetupID)
	if (SQLCODE '= 0 ) {q 0}
	
	s endDate = startDate + 30
	&sql(INSERT INTO Subscription (Profile, Subscription, RemainingToken, EndDate, StartDate) 
		VALUES(:userID, :subSetupID, :remainingToken, :endDate, :startDate))
	if (SQLCODE '= 0 ) {q 0}
	q 1
.
CreateSubscriptionSetup
	&sql(INSERT INTO MX.SubscriptionSetup 
		(Code, Name, Token) 
		VALUES ('003','TRIAL', 1000))
	zw SQLCODE
	q
.
SubscriptionPoolDetails(userID)
	&sql(select SUM(RemainingToken) INTO :remainingToken FROM Subscription WHERE Profile=:userID)
	w !,"Remaining Token: ", remainingToken
	q
.
GetSubscription(userID)
	#import MX
	s currentDate = $p($h,",",1)
	&sql(SELECT TOP 1 ID
		INTO :subID
		FROM Subscription
		WHERE Profile = :userID AND EndDate > :currentDate AND RemainingToken > 3 AND Type='Transformation'
		ORDER BY StartDate ASC
		)
	if (SQLCODE '=0){
		;w !,"FAILED TO GET OCR SUBSCRIPTION. SQLCODE= ", SQLCODE
		q 0
	} else {
		q subID
	}
	q 0
.
.
DeductUnit(subID, count=0)
	&sql(UPDATE MX.Subscription SET RemainingToken = RemainingToken - :count WHERE id = :subID)
	if (SQLCODE '= 0){q 0} 
	q 1 
	
AdjustSubscriptionPool(userID)
	&sql(DECLARE SubAdjustCursor CURSOR FOR
		SELECT RemainingToken , ID
		INTO :remainingToken, :subId
		FROM Subscription
		WHERE Profile=:userID AND RemainingToken < 0
	)
	&sql(OPEN SubAdjustCursor)
	&sql(FETCH SubAdjustCursor)
	if (SQLCODE '= 0 ){
		w !,"NO NEED TO ADJUST SUBSCRIPTION POOL."
		q
	}
	WHILE (SQLCODE '= 0){
		s tokenSubId = $$GetSubscription(userID)
		if (tokenSubId = 0){
			w !,"NO subscription available to adjust the exceeded Tokens."
			q
		} else {
			w !,"Adjusting Subscription Pool."
			s tokenSub = ##class(MX.Subscription).%OpenId(tokenSubId)
			s tokenSubRemainingToken = tokenSub.RemainingToken
			if ( tokenSubRemainingToken < $ZABS(remainingToken)){
				&sql(UPDATE MX.Subscription SET RemainingToken = RemainingToken + :tokenSubRemainingToken WHERE id = :subID)
				&sql(UPDATE MX.Subscription SET RemainingToken = RemainingToken - :tokenSubRemainingToken WHERE id = :ocrSubID)
				continue
			}else{
				&sql(UPDATE MX.Subscription SET RemainingToken = RemainingToken + :tokenSubRemainingToken WHERE id = :subID)
				&sql(UPDATE MX.Subscription SET RemainingToken = RemainingToken - :tokenSubRemainingToken WHERE id = :ocrSubID)
				&sql(FETCH SubAdjustCursor)
			}
		}
	}
	&sql(CLOSE SubAdjustCursor)
	q
GetToken(userID)
	s currentDate = $p($h,",",1)
	&sql(SELECT TOP 1 RemainingToken 
		INTO :remainingToken
		FROM Subscription
		WHERE Profile = :userID AND EndDate > :currentDate  AND Type='Transformation'
		ORDER BY StartDate ASC
		)		
	i SQLCODE=0 q remainingToken
	e  q "ERROR"
.
	; SendSubscriptionOverMail^jxSubscriptionUtils("minnbobo@jonda.health", "BoBo", "www.google.com")
SendSubscriptionOverMail(toEmail, clientName)
	#import MX
	s EmailAddress=toEmail
 
 	s upgradeLink = "https://www.google.com"
 
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	; Calling Connect
.
	set mail.Subject="Your JondaX Trial has wrapped up. Ready for the next step?"
	;set mail.Charset="iso-8859-1"
	set mail.Charset = "UTF-8"
	set mail.ContentType="text/html"
	
	s mailBody = "<p>Dear {{clientName}},</p><p>We hope you&apos;ve enjoyed your trial experience with JondaX! You&apos;ve now exhausted your file transformations and pre-processing for PDFs and image files.&nbsp;</p><p>Ready to move ahead with JondaX? Dive into our package details with one of our team members and find the one that best aligns with your needs. &nbsp;</p><p> &#128279; <a href="""_upgradeLink_""">Upgrade Now</a></p><p>Your friends at Jonda Health&nbsp;</p>"
	//s mailBody = "<p>Dear {{clientName}},</p><p>We hope you&apos;ve enjoyed your trial experience with JondaX! You&apos;ve now exhausted your file transformations and pre-processing for PDFs and image files.&nbsp;</p><p>Ready to move ahead with JondaX? Dive into our package details with one of our team members and find the one that best aligns with your needs. &nbsp;</p><p> &#128279; <a href=""https://www.google.com"">Upgrade Now</a></p><p>Your friends at Jonda Health&nbsp;</p>"
.
	s mailBody = $replace(mailBody, "{{clientName}}", clientName)
	;s mailBody = $replace(mailBody, "{{upgradeLink}}", upgradeLink)
	
	w !,mailBody
	
	set status=mail.TextData.Write("<html><body>"_mailBody_"</body></html>")
	
	set status=mailserver.Send(mail)
.
 	q
	

jxTrialAWSBGPDF^MAC^^67122,52740.5127567^0
jxTrialAWSBGPDF
	w !,"IN jxTrialAWSBGPDF"
	w !,"Processing PDF",!
	
.
		/*
	s fnam=resultsDir_d2_"_response.txt"
.
	o fnam ;e  w !,"Error file opening,!"
	u fnam r x
	c fnam
	w !,"x : "_x,!*/
	s removedir=docDir_d2
	d GetFiles
	d ##class(%File).RemoveDirectoryTree(removedir)
	d GPT^utilAWS(rid)
	q
	
GetFiles
	; Upload file to AWS S3 jonda bucket
	w ?3,!,"UploadToS3: ",d2_"."_fExt,!
	s x=$zf(-1,"aws s3 cp """_docDir_d2_"."_fExt_""" "_textractBucket_" && exit")
	s jobid=##class(python.textractUtils).SDTD1(d2_"."_fExt) ;docDir_
	d ##class(python.textractUtils).GenerateCSVFromJobID1(jobid,resultsDir_d2)
	
	s pageCount=##class(python.pdfhandler).pageCount(docDir_d2_"."_ext)
	&sql(Update Record SET PageCount =:pageCount,ProcessedDate=:dt WHERE id=:rid)
	/*if text'="" d
	.s obj=##class(MX.Record).%OpenId(rid)
	.d obj.OCR.Insert(text)
	.d obj.%Save()
	.s obj=""
	.w !,"OCR text is inserted"
	&sql(UPDATE Record SET ProcessedDate=:dt WHERE ID=:rid)
	d ^jxAWSBGSave 
	q*/
.
ReadResult
	w ?3,"Read Result..."
	;s fnam=resultsDir_$p(file,"\",$l(file,"\"))_".txt"
	s fnam=resultsDir_d2_"_response.txt"
	i '##class(%File).Exists(fnam) h 5 g EndReadResult
.
	s $ZERROR=""
	s $ztrap="EndReadResult^jxTrialAWSBGPDF"
	s (text,top,left,blocktype,confidence,page)=""
	o fnam:"R" e  w "Error opening file: ", fnam,!
ReadResult1
	w ?3,"Reading Result1..."
	u fnam r x
	i x["IN_PROGRESS" d  ;g EndReadJobID1
	. c fnam 
	. w "   ",fnam," IN PROGRESS...",! 
	. s $ztrap="" 
	. w !,"deleting: ", fnam,!
	. ;d ##class(%File).Delete(fnam)
	. h 20 	;i x="" c fnam s $ztrap="" h 1 g EndReadJobID1
	i x["""BlockType"": " s blocktype=$p(x,"""BlockType"": ",2)
	i x["""Confidence"": " s confidence=$p(x,"""Confidence"": ",2)
	i x["""Page"": " s page=$p(x,"""Page"": ",2)
	i x["""Text"": " s text=$p(x,"""Text"": ",2),text=$e(text,1,$l(text)-1)
	i x["""Left"": " s left=$p(x,"""Left"": ",2),left=$e(left,1,$l(left)-1)
	i x["""Top"": " s top=$p(x,"""Top"": ",2),top=$e(top,1,$l(top)-1)
	i x["""Page"": " d
	. i text'="" d
	.. ;i +confidence<59 s text="",left="",top="" q
	.. s text=$replace(text,"""","")
	.. s text=$replace(text,"(","")
	.. s text=$replace(text,")","")
	.. i text="" s text="",left="",top="" q
	.. s blocktype=$zconvert($replace(blocktype,"""",""),"l")
	.. i blocktype'="line," q
	.. ;s i=i+1
	.. ;s arr(i)=text
	.. ;s gbl="^"_d2_"("_i_")"
	.. s obj=##class(MX.Record).%OpenId(rid)
	.. d obj.OCR.Insert(text)
	.. d obj.%Save()
	.. s obj=""
	.. s (text,top,left,blocktype,confidence,page)=""	
	g ReadResult1
	
EndReadResult
	s $ztrap=""
	c fnam
EndReadResult1
	w !
EndReadResult2
	; clean up
	;s str="aws s3 rm "_textractBucket_file
	;d ##class(%File).Delete(file)
	
	w !,"FILE: "
	
	;s cmd="aws s3 rm "_textractBucket_$p(file,"\",*)
	;s x=$zf(-1,cmd_" && exit")
	
	;i $o(filelist(file))="" k filelist
	 d ^jxAWSBGSave q
	;k filelist(file)
	;s file=""
.
	q

jxUploadRecord^MAC^^67164,57958.8637068^0
jxUploadRecord
InitMe
	d INIT^WSP999
	k %session.Data("jxUploadRecord")
	k %session.Data("jxTransform")
	q
.
Save	; NOT USE
	#import MX
	d INIT^WSP999
	s tmpname=$$ATTNAME^WSP999
	s FName=%request.Data("FName",1)
	s FName=$zconvert(FName,"l")
	k ^jxUpload(FName)
	k %session.Data("jxUploadRecord")
	
	s fext=$p(FName,".",$l(FName,".")),fext=$zconvert(fext,"l")
	; check file extension
	s allowedext="*bmp*pdf*heic*png*jpg*jpeg*gif*webp*hl7*xml*json*ttl*"
	i allowedext'[("*"_fext_"*") s ^jxUpload(FName)=0 q
	s dt=$zdatetime($h,3,1)
	
  	new bytes
.
    s fsize=%request.MimeData("fileupload",1).Size	
	i +fsize=0 s ^jxUpload(FName)=0 q	; no file uploaded
	
	s stream=##class(%Stream.FileBinary).%New()
	s x=""
	while 1{
		s bytes=%request.MimeData("fileupload",1).Read(.a)
		;s bytes=%request.MimeData("fileupload",1).Read(fsize)
		d stream.Write(bytes)
		quit:%request.MimeData("fileupload",1).AtEnd
		s x=x+bytes
	}
	d stream.%Save()
	
	s %dev="c:\intersystems\cache\jonda\jxUpload\"_FName
	o %dev:"wns" u %dev
	s status=stream.OutputToDevice()
	c %dev
	; test to see if file extension matches content
	i fext="hl7" d IsHL7
	i fext="xml"!(fext="json")!(fext="ttl") d IsFHIR
	s ^jxUpload(FName)=1
	s %session.Data("jxUploadRecord")=FName
	s %session.Data("jxUploadRecord","fext")=fext
	q
	
Save1
	#import MX
	d INIT^WSP999
	s tmpname=$$ATTNAME^WSP999
	s FName=%request.Data("FName",1)
	s FName=$zconvert(FName,"l")
	k ^jxUpload(FName)
	k %session.Data("jxUploadRecord")
	
	s fext=$p(FName,".",$l(FName,".")),fext=$zconvert(fext,"l")
	; check file extension
	;s allowedext="*bmp*pdf*heic*png*jpg*jpeg*gif*webp*hl7*xml*json*ttl*xlsx*"
	s allowedext="*hl7*xml*json*ttl*xlsx*"
	i allowedext'[("*"_fext_"*") s ^jxUpload(FName)=0 q
	s dt=$zdatetime($h,3,1)
	
  	new bytes
.
    s fsize=%request.MimeData("fileupload",1).Size	
	i +fsize=0 s ^jxUpload(FName)=0 q	; no file uploaded
	
	s stream=##class(%Stream.FileBinary).%New()
	s x=""
	while 1{
		s bytes=%request.MimeData("fileupload",1).Read(.a)
		;s bytes=%request.MimeData("fileupload",1).Read(fsize)
		d stream.Write(bytes)
		quit:%request.MimeData("fileupload",1).AtEnd
		s x=x+bytes
	}
	d stream.%Save()
	
	&sql(SELECT CompanyName INTO :cmName FROM "User" WHERE ID=:UserID)
	d CreateDir^jxBiolytica("c:\intersystems\cache\jondax\"_cmName_"\")
	d CreateDir^jxBiolytica("c:\intersystems\cache\jondax\"_cmName_"\ad-hoc\")
.
	s %dev="c:\intersystems\cache\jondax\"_cmName_"\ad-hoc\"_tmpname_"."_fext
	s %session.Data("jxTransform","fileName")="c:\intersystems\cache\jondax\"_cmName_"\ad-hoc\"_tmpname_"."_fext
	
	o %dev:"wns" u %dev
	s status=stream.OutputToDevice()
	c %dev
	; test to see if file extension matches content
	i fext="hl7" d IsHL7
	i fext="xml"!(fext="json")!(fext="ttl") d IsFHIR
	s ^jxUpload(FName)=1
	s %session.Data("jxUploadRecord")=FName
	s %session.Data("jxUploadRecord","fext")=fext
	
	s dt = $zdatetime($h,3)
	&sql(INSERT INTO MX.Record (OrgFile,Status, fExt,Profile,TempFile, CreatedDate, BucketName) VALUES (:FName, 'In-Process', :fext, :UserID, :tmpname, :dt, 'ad-hoc'))
	&sql(SELECT ID into :rid FROM MX.Record WHERE TempFile=:tmpname)
	s %session.Data("jxTransform","rid")=rid
	s %session.Data("jxAltUploadRecord","ID")=rid
	q
	
IsHL7	
	q
	o %dev:"ws"
	u %dev r x
	i x'["MSH"
	c %dev
	q
IsFHIR
	
	q

jxUploadRecordBinary^MAC^^67166,36288.2177398^0
jxAltUploadRecord
InitMe
	q
.
Save	
	#import MX
	d INIT^WSP999
	s UserID=$g(%session.Data("UserID"))
	s tmpname=$$ATTNAME^WSP999
	s FName=%request.Data("FName",1)
	s FName=$zconvert(FName,"l")
	k ^jxAltUpload(FName)
	k %session.Data("jxUploadRecord")
	
	s fext=$p(FName,".",$l(FName,".")),fext=$zconvert(fext,"l")
	; check file extension
	s allowedext="*bmp*pdf*heic*png*jpg*jpeg*gif*webp*hl7*xml*json*ttl*"
	i allowedext'[("*"_fext_"*") s ^jxAltUpload(FName)=0 q
	s dt=$zdatetime($h,3,1)
	
  	new bytes
.
    s fsize=%request.MimeData("fileupload",1).Size	
	i +fsize=0 s ^jxAltUpload(FName)=0 q	; no file uploaded
	
	s stream=##class(%Stream.FileBinary).%New()
	s x=""
	while 1{
		s bytes=%request.MimeData("fileupload",1).Read(.a)
		;s bytes=%request.MimeData("fileupload",1).Read(fsize)
		d stream.Write(bytes)
		quit:%request.MimeData("fileupload",1).AtEnd
		s x=x+bytes
	}
	d stream.%Save()
	;s %dev="c:\intersystems\cache\jondax\jxUpload\Alt\"_FName
	;o %dev:"wns" u %dev
	;s status=stream.OutputToDevice()
	;c %dev
	; test to see if file extension matches content
	i fext="hl7" d IsHL7 q
	i fext="xml"!(fext="json")!(fext="ttl") d IsFHIR q
	s ^jxAltUpload(FName)=tmpname
	s ^jxAltUpload(FName,"Uploaded")=$h
	;s ^jxAltUpload("FileName")=$p(FName,".",1)
	s %session.Data("jxAltUploadRecord")=FName
	s %session.Data("jxAltUploadRecord","fext")=fext
	s %dev="c:\intersystems\cache\jondax\Groot\ad-hoc\"_tmpname_"."_fext
	o %dev:"wns" u %dev
	s status=stream.OutputToDevice()
	c %dev
	s %dev=$replace(%dev,"\","/")
	k ^AICLAUDE("alt"_UserID)
	k ^ClaudeError("alt"_UserID)
	i fext="pdf" d PDF 
	i fext'="pdf" d IMAGE 
	i $d(^ClaudeError("alt"_UserID)) q
	&sql(INSERT INTO MX.ResultBloodTest1(OrgName,TmpName,Type) VALUES (:FName,:tmpname,'BloodTest'))
	s rid=""
	&sql(SELECT ID INTO :rid FROM MX.ResultBloodTest1 WHERE TmpName=:tmpname)
	s ^jxAltUpload(FName,"ID")=rid
	s %session.Data("jxAltUploadRecord","ID")=rid
	;s %session.Data("jxTransform","rid")=rid    ;temporary for Template viewing
	Set sc = ##class(%File).CreateDirectory("c:\intersystems\cache\csp\review\"_rid_"\")
	s %dev1="c:\intersystems\cache\csp\review\"_rid_"\"_tmpname_"."_fext
	o %dev1:"wns" u %dev1
	s status=stream.OutputToDevice()
	c %dev1
	q
IsHL7
	q
IsFHIR
	q
.
IMAGE
.
	if (fext="webp")!(fext="heic")!(fext="avif"){ ; change format to png
		s cmd="mogrify -format png "_%dev
		s x=$zf(-1,cmd_" && exit")	
		d ##class(%File).Delete(%dev)
		s fext = "png"
		s %dev="c:\intersystems\cache\jondax\Groot\ad-hoc\"_tmpname_"."_fext	
		}
	s csv=0
	s csv=##class(python.textractUtils).GenerateCSVFromBinary(%dev)
	
	s %dev1="c:\intersystems\cache\jondax\Groot\ad-hoc\"_tmpname
	d CleanCSV^utilAWS(%dev1_".csv")
	d ##class(python.testClaude).AiCompletion($replace(%dev1,"\","/")_".csv",UserID)
	i $d(^ClaudeError("alt"_UserID)) q	
	q	
PDF
	s i=0
	s %dev1="c:\intersystems\cache\jondax\Groot\ad-hoc\"_tmpname
.
	d ##class(%File).CreateDirectory(%dev1)  ;outputPath
	; split PDF into per-page png
	d ##class(python.pdfhandler).pdf2png(%dev,%dev1_"\")
	
	s pCount=##class(python.pdfhandler).pageCount(%dev)	
	if pCount=1{
		set dir = ##class(%File).NormalizeDirectory(%dev1_"\")
		set file=$ZSEARCH(dir_"*.png")
		s csv=##class(python.textractUtils).GenerateCSVFromBinary(file)
	}
	else{
		set dir = ##class(%File).NormalizeDirectory(%dev1_"\")
		set file=$ZSEARCH(dir_"*.png")
	
		While file'="" {
			;Write !,"File found: ", file, !		
			s csv=0
			s csv=##class(python.textractUtils).GenerateCSVFromBinary(file)
	
			Set file = $ZSEARCH("")
			s i=i+1
			}
		s j=1	
		While j'=  i{
				;w !,"i : "_i,!
				;s cmd= "copy /B "_%dev1_"\page_0.csv+"_%dev1_"\page_"_i_".csv "_%dev1_"\page_0.csv"
				;s x=$zf(-1,cmd_" && exit")
				s status= ##class(python.FileUtils).AppendFile(%dev1_"\page_0.csv",%dev1_"\page_"_j_".csv")
				set j = j+1		
		}
	}
	d ##class(%File).CopyFile(%dev1_"\page_0.csv", %dev1_".csv")
	d ##class(%File).RemoveDirectoryTree(dir)
	
	/*
	d ##class(python.s3Utils).uploadFile("default",%dev1_"."_fext,"jondaffr")
	s jobId=##class(python.textractUtils).SDTD1(tmpname_"."_fext)
	d ##class(%File).Delete(%dev1_".csv")
	s status = ##class(python.textractUtils).GenerateCSVFromJobID(jobId, %dev1)
	
	*/
	
	d CleanCSV^utilAWS(%dev1_".csv")
	d ##class(python.testClaude).AiCompletion($replace(%dev1,"\","/")_".csv",UserID)	
	;i $d(^ClaudeError("alt"_UserID)) q
	q
	
.

jxViewTemp^MAC^^67172,13023.049632^0
jxViewTemp
InitMe
	#import MX
	d INIT^WSP999
	s bk = %session.Data("bk")
	&js<bk="#(bk)#"
	document.getElementById("tName").innerHTML="#(bk)#";
	>
	d LoadTemplates("")
	q
LoadTemplates(d1)
	#import MX
	d INIT^WSP999
	s bk = %session.Data("bk")
	&sql(SELECT Setting INTO :setting FROM "User" WHERE ID=:UserID)
	s temp=""
	// Checks the Template based  on the bucket name and setting from the user
	&sql(DECLARE C2 CURSOR FOR
		SELECT ID,Name,UnitName
		INTO :id,:name,:unitName
		FROM Template
		WHERE BucketName=:bk AND Setting=:setting AND Name %STARTSWITH(:d1)
		AND ISNULL(DeletedDate,'')=''
		ORDER BY 2
	)
	&sql(DECLARE C3 CURSOR FOR
		SELECT ID,Name,UnitName
		INTO :id,:name,:unitName
		FROM Template
		WHERE Name NOT BETWEEN 'A' AND 'Z' AND Name NOT BETWEEN 'a' AND 'z'
		AND BucketName=:bk
		AND Setting=:setting
		AND ISNULL(DeletedDate,'')=''
		ORDER BY 2
	)
	if (d1="num"){
		&sql(OPEN C3)
		&sql(FETCH C3)
	}else{
		&sql(OPEN C2)
		&sql(FETCH C2)
	}
	WHILE SQLCODE=0{
		s tr="<tr key='"_id_"'>\n<td>"_name_"</td>\n<td>"_unitName_"</td>\n<td><img class='edit-icon' src='./assets/images/edit.png' alt='Edit' onclick='editRow(event)'> <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)'></td>\n</tr>"
		s temp=temp_tr
		if (d1="num"){
			&sql(FETCH C3)
		}else{
			&sql(FETCH C2)
		}
	}
	if (d1="num"){
		&sql(CLOSE C3)
	}
	else{
		&sql(CLOSE C2)
	}
	&js<document.querySelector("tbody").innerHTML="#(temp)#">
	q
DownloadTemplates
	#import MX
	d INIT^WSP999
	s Q=$c(9)
	s bk = %session.Data("bk")
	// Checks the Template based  on the bucket name and setting from the user
	&sql(SELECT Setting INTO :setting FROM "User" WHERE ID=:UserID)
	s temp=""
	&sql(DECLARE C4 CURSOR FOR
		SELECT ID,Name,UnitName
		INTO :d1,:d2,:d3
		FROM Template
		WHERE BucketName=:bk AND Setting=:setting
		AND ISNULL(DeletedDate,'')=''
		ORDER BY 2
	)
	&sql(OPEN C4)
	&sql(FETCH C4)
	s %dev="c:\intersystems\cache\csp\jondax\templates\"_$replace(bk,"/","_")_".csv"
	o %dev:"wns"
	u %dev
	WHILE SQLCODE=0{
		u %dev w d2_Q_d3,!
		&sql(FETCH C4)	
	}
	&sql(CLOSE C4)
	c %dev
	s bk1=$replace(bk,"/","_")
	&js<window.open("templates/#(bk1)#.csv")>
	q
SaveNewTemplate
	// Saves new tempalte
	#import MX
	d INIT^WSP999
	s bk = %session.Data("bk")
	s date=$ZDATETIME($h,3)
	&sql(SELECT Setting INTO :setting FROM "User" WHERE ID=:UserID)
	&sql(INSERT INTO Template (BucketName,Setting,Name,UnitName,CreatedDate,ModifiedDate) values(:bk,:setting,:d1,:d2,:date,:date))
	d AlertJonda
	if SQLCODE=0{
		&js<removePopup3();popup5.classList.remove("inactive");>
	}
	else{
		&js<alert("Some errors occured while saving #(d1)#")>
	}
	q
	
DeleteTemplate
	// Sets the delete date of the template
	#import MX
	d INIT^WSP999
	s deletedDate = $zdatetime($h,3)
	&sql(UPDATE template SET deletedDate=:deletedDate WHERE ID=:id)
	d AlertJonda
	if SQLCODE=0{
		&js<removePopup1();popup2.classList.remove("inactive");>
	}
	else{
		&js<alert("Some errors occured while deleting #(d1)#")>
	}
	q
.
UpdateTemplate
	// Updates the template
	#import MX
	d INIT^WSP999
	s date=$ZDATETIME($h,3)
	&sql(UPDATE Template SET Name=:d2,UnitName=:d3,ModifiedDate=:date WHERE ID=:id)
	d AlertJonda
	if SQLCODE=0{
		&js<removePopup3();popup6.classList.remove("inactive");>
	}
	else{
		&js<alert("Some errors occur while saving template")>
	}
	q
	
AlertJonda
	// Email notification when the client template is changed
	s EmailAddress="suhina@jonda.health"
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.Cc.Clear()
	do mail.To.Insert(EmailAddress)
	do mail.Cc.Insert("daniel@jonda.health")
	; Calling Connect
.
	set mail.Subject="JondaX Client Template Changed"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	s dt=$zdatetime($h,4,,4),dt=$p(dt,".",1)
	s (mail1,mail2)=""
	&sql(SELECT CompanyName INTO :mail1 FROM "User" WHERE ID=:UserID)
	&sql(SELECT BucketName INTO :mail2 FROM Template WHERE ID=:id)
	set status=mail.TextData.Write("<html><body>The client <b>"_mail1_"</b> changed their <b>"_mail2_"</b> Template, Testname <b>"_d1_"</b> on <b>"_dt_"</b>.<br><br>Please review it at <a href='https://www.jondax.eu/csp/jondax/clogin.csp'>https://www.jondax.eu/csp/jondax/clogin.csp</a><br><br><br>This is an automated message. Do no reply to this message.</body></html>")
	set status=mailserver.Send(mail)
	s dt=$h
	s ^Automail(dt)=status
	s ^Automail(dt,"Subject")="JondaX Client Template Changed"
	s ^Automail(dt,"To")=EmailAddress
 q

mGetDateTest^MAC^^66900,25392.0582234^0
cleanDate(text)
	set x=text
	s dFlag = 0
	i x[":" d
	. s x=$p(x,":",2)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	. i $e(x,1,1)=" " s x=$e(x,2,999)
	d getDate
	
	if dFlag = 0 d
	. s x=text
	. d getDate
	
	q
getDate()	
	for dft=1:1:9 
		{
			if $zdateh(x,dft,,2,,,,,"0") w x s dFlag=1 q //w dft," 2",! q
			if $zdateh(x,dft,,4,,,,,"0") w x s dFlag=1 q
		}
	if dFlag quit
	
	for dft=15:1:21 
		{
			if $zdateh(x,dft,,2,,,,,"0") w x s dFlag=1 q
			if $zdateh(x,dft,,4,,,,,"0") w x s dFlag=1 q	
		}
	if dFlag quit
	
	if $zdateh(x,13,,2,,,,,"0") w x w "yes" q
	if $zdateh(x,13,,4,,,,,"0") w x w "yes" q 
		
	quit

martin1^MAC^^67068,52377.084665^0
prefix(value,fromUnit,toUnit)
	s baseUnit="",baseUnit1=""
	s (FinalFactor,result,tPrefix,tPrefix1,fPrefix,fPrefix1)=""
	;s fromUnit="mg/L",toUnit="kg/mL"
	;s fromUnit="mmol/mL",toUnit="mol/L"
	;s fromUnit="x10^3/uL",toUnit="x10^3/mL"
	if fromUnit["/",toUnit["/" {
		;finding upper units' prefixes
		set i=$f(fromUnit,"/")-2, j=$f(toUnit,"/")-2
		while i'=0,j'=0 {
			;w $e(fromUnit,i),!,$e(toUnit,j),!
			i $e(fromUnit,i)=$e(toUnit,j) s baseUnit=$e(fromUnit,i)_baseUnit ;w "baseUnit is: "_baseUnit,! ;w "fromUnit: "_i_","_$e(fromUnit,i)_", toUnit: "_j_","_$e(toUnit,j),!
			s i=i-1, j=j-1	
		}
		w "UPPER PART:",!	
		s fPrefix=$p(fromUnit,baseUnit,"1")  i fPrefix'="" w "fromUnit has prefix: "_fPrefix_", pos: ",i,!
		s tPrefix=$p(toUnit,baseUnit,"1") i tPrefix'="" w "toUnit has prefix: "_tPrefix_", pos: ",j,!
		
		;finding under units' prefixes
		/*
		set i=$f(fromUnit,"/"), j=$f(toUnit,"/")
		while (i<=$l(fromUnit)),(j<=$l(toUnit)){
			w $l(fromUnit)_","_$l(toUnit),!
			w $e(fromUnit,i),i,!,$e(toUnit,j),j,!
			i $e(fromUnit,i)'=$e(toUnit,j) s baseUnit1=baseUnit1_$e(fromUnit,i) w "under baseUnit is: "_baseUnit1,! ;w "fromUnit: "_i_","_$e(fromUnit,i)_", toUnit: "_j_","_$e(toUnit,j),!
			s i=i+1, j=j+1	
		}	
		;s fPrefix=$p(fromUnit,baseUnit,"1")  w fPrefix,! ;w "fromUnit has prefix: "_$e(fromUnit,i)_", pos: ",i,!
		;s tPrefix=$p(toUnit,baseUnit,"1") w tPrefix,! ;w "toUnit has prefix: "_$e(toUnit,j)_", pos: ",j,!
		*/
		s i=$l(fromUnit),j=$l(toUnit)
		;w ($f(fromUnit,"/")-1)_", "_($f(toUnit,"/")-1)
		while (i'=($f(fromUnit,"/")-1)),(j'=($f(fromUnit,"/")-1)){
			;w $l(fromUnit)_","_$l(toUnit),!
			;w $e(fromUnit,i),i,!,$e(toUnit,j),j,!
			i $e(fromUnit,i)=$e(toUnit,j) s baseUnit1=$e(fromUnit,i)_baseUnit1 ;w "under baseUnit is: "_baseUnit1,! ;w "fromUnit: "_i_","_$e(fromUnit,i)_", toUnit: "_j_","_$e(toUnit,j),!
			s i=i-1, j=j-1	
		}
		w !,"Lower PART:",!
		s fPrefix1=$p($p(fromUnit,"/",2),baseUnit1,"1") if fPrefix1'="" w "fromUnit has prefix: "_fPrefix1_", pos: ",i,!
		s tPrefix1=$p($p(toUnit,"/",2),baseUnit1,"1") if tPrefix1'=""  w "toUnit has prefix: "_tPrefix1_", pos: ",j,!
	if baseUnit=baseUnit1 d prefixConversion
	w "Final Factor is "_FinalFactor,!
	s result=value*FinalFactor
	}
	q result
prefixConversion	
	#import MX
	;upper
	&sql(SELECT Factor INTO :fromU FROM UnitPrefix WHERE %EXACT(Prefix)=:fPrefix)
	&sql(SELECT Factor INTO :toU FROM UnitPrefix WHERE %EXACT(Prefix)=:tPrefix)
	if fromU="" s fromU=1
	if toU="" s toU=1
	s uFactor= fromU/toU
	w fPrefix_" to "_tPrefix_"="_fromU_"/"_toU_"= "_uFactor,!
	;Lower
	&sql(SELECT Factor INTO :fromL FROM UnitPrefix WHERE %EXACT(Prefix)=:fPrefix1)
	&sql(SELECT Factor INTO :toL FROM UnitPrefix WHERE %EXACT(Prefix)=:tPrefix1)
	if fromL="" s fromL=1
	if toL="" s toL=1
	s LFactor= fromL/toL
	w fPrefix1_" to "_tPrefix1_"="_fromL_"/"_toL_"= "_LFactor,!
	
	s FinalFactor= uFactor/LFactor ;w FinalFactor,!
	q 
	
	
	
.
FHIRJsonToSDA
.
	#include %msql
.
	s file = ##class(%Stream.FileCharacter).%New()
	s file.Filename = "C:\InterSystems\Cache\JondaX\JondaX\jondatesting\testing\Blood Biochemistry_FHIRjson.xml" ;testing-output_FHIRjson.xml"
	s fhirJsonStr = file.Read($$$MaxLocalLength)
	Set fhirObj= {}.%FromJSON(fhirJsonStr)
	
	set sdaObj = ##class(HS.FHIR.DTL.Util.API.Transform.FHIRToSDA3).TransformObject(fhirObj,"R4")
	s sdaStream = ##class(%Stream.GlobalCharacter).%New()
	s sdaStatus = sdaObj.object.ToQuickXMLStream(.sdaStream)
	
	s SDAStr = sdaStream.Read()
	s ^testing("SDAstr")=SDAStr
	;kill %session.Data("jxTransform")
	;s %session.Data("jxTransform", "MSH") = ""
	;s %session.Data("jxTransform", "SDAStr") = SDAStr
	
	q
	
SDAToHL7
	
	s tSDA = ##class(%Stream.GlobalCharacter).%New()
	//d tSDA.Write(%session.Data("jxTransform","SDAStr"))
	s escapedSDAStr = $$EscapeHL7^jxDataTransform(^testing("SDAstr"))
	d tSDA.Write(escapedSDAStr)	
	
	s sda = ##class(HS.SDA3.Container).%New()
	d sda.InitializeXMLParse(tSDA)
	
	k hl7msg
	s hl7msg = ##class(EnsLib.HL7.Message).%New()
	d hl7msg.Clear()
	
	s dl = "^"
	
	s pSDA = 1
	WHILE(pSDA '= ""){
		d sda.GetNextSDA(.pType, .pSDA)
		if (pType ="Patient"){
			s hl7msg = $$ParsePIDandMSH^jxSDAToHL7(.pSDA, .hl7msg)
		} elseif(pType = "Encounter"){
			s hl7msg = $$ParsePV1^jxSDAToHL7(.pSDA, .hl7msg)
		} elseif (pType = "LabOrder"){
			s hl7msg = $$ParseORC^jxSDAToHL7(pSDA, hl7msg)
			s hl7msg = $$ParseOBR^jxSDAToHL7(pSDA, hl7msg)
			s hl7msg = $$ParseOBX^jxSDAToHL7(pSDA, hl7msg)
		}	
	}
	s f1="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\testing\FHIR2HL7.hl7"
	s downloadStr = hl7msg.OutputToString()
	d hl7msg.OutputToFile(f1)
	s downloadStr = $replace(downloadStr,"\","\\")
	;s %session.Data("jxTransform","downloadStr")= downloadStr
	/*
	s f1="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\testing\FHIR2HL7.hl7"
	o f1:"wns"
	u f1
	w $$UnescapeHL7^jxDataTransform(SDAStr)
	c f1 */
	
	q
	

martin10^MAC^^67274,38263.7535671^0
martin10
	#import MX
	s docDir="C:\data_transform\AI\Gemini\"
	s d2="PD000012"
	s ext="pdf"
	k ^AIGEMINI(4059)
	s index=0,xIndex=0,rid=4059
	
	// Create a new folder for the chunks/pngs
	d ##class(%File).CreateDirectory(docDir_d2) 
	Set folderPath = docDir_d2
	
    s pdfType=##class(python.pdfhandler).checkType(docDir_d2_"."_ext)
    w pdfType,!
    // Get the total number of pages in the PDF
	Set totalPages = ##class(python.pdfhandler).pageCount(docDir_d2_"."_ext)
    
    if pdfType="Image-based"
    {
	    #;	; split PDF into per-page png
		;s cmd="win2pdfd pdf2png """_docDir_d2_"."_ext_""" """_docDir_d2_"\"_d2_".png"" 0"
		s cmd="win2pdfd pdf2png """_docDir_d2_"."_ext_""" """_folderPath_"\"_d2_".png"" 0"
		s x=$zf(-1,cmd_" && exit")
.
		set dir = ##class(%File).NormalizeDirectory(folderPath)
		set file=$ZSEARCH(dir_"*.png")
		while file'="" 
		{
AiCompletion
			w "Index: ",index,!
			Set index = ##class(python.GeminiAi).AiCompletion001(file, rid,index, "png")
			w "Return index: ",index,!
	        if index = -429 d
	        .s index=$s($d(xIndex):xIndex, 1:0)
	        .h 5 g AiCompletion
	        else  d
	        .s xIndex=index h 5
.
			set file=$ZSEARCH("")
		}
		d ##class(%File).RemoveDirectoryTree(folderPath)
    } else{ 
    
.
	    w "Page Count: ",totalPages,!
	    If totalPages > 2 {
	    // Split the PDF into 2-page chunks
		    For i = 1:2:totalPages {
		        Set startPage = i
		        Set endPage = i + 1
		        If endPage > totalPages {
		            Set endPage = totalPages
		        	}
.
		        Set chunkPath = folderPath_"\"_d2_"-" _ startPage _ "-" _ endPage _ ".pdf"
				d ##class(python.pdfhandler).chunkPdf(docDir_d2_"."_ext,chunkPath,startPage,endPage)
AiCompletion01		   		
		        // Call the AI completion method for each chunk
		        w "Index: ",index,!
		        Set index = ##class(python.GeminiAi).AiCompletion001(chunkPath, rid,index, "pdf")
		        w "Return index: ",index,!
		        if index = -429 
		        {
		         s index=$s($d(xIndex):xIndex, 1:0)
		         h 5 g AiCompletion01
		        }
		        elseif (index= -400 )
		        {	
		        	w "Too much data in 2-page: ",startPage,"-",endPage,!
		        	s index=$s($d(xIndex):xIndex, 1:0)
			        for j=startPage:1:endPage
			        {
AiCompletion02				        
				        Set chunkPath = folderPath_"\"_d2_"-" _ j _ "-" _ j _ ".pdf"
						d ##class(python.pdfhandler).chunkPdf(docDir_d2_"."_ext,chunkPath,j,j)
						w "Index: ",index,!
						Set index = ##class(python.GeminiAi).AiCompletion001(chunkPath, rid,index, "pdf")
		        		w "Return index: ",index,!
		        		if index = -429 
					        {
					         s index=$s($d(xIndex):xIndex, 1:0)
					         h 5 g AiCompletion02
					        }else {s xIndex=index h 2    }
			        }
		        }
		        else  {s xIndex=index h 2}
		    	}
		    d ##class(%File).RemoveDirectoryTree(folderPath)	
	    }else
	    {	
	    	Set index = ##class(python.GeminiAi).AiCompletion001(docDir_d2_"."_ext, rid,index, "pdf")
	     }
    }
    Quit
.
pngFolder
	s folderPath="C:\data_transform\AI\Gemini\PD000011\"
	s d2="PD000011"
	s d2="devTest"
	s ext="png"
	s index=0,rid=4058
		set dir = ##class(%File).NormalizeDirectory(folderPath)
		set file=$ZSEARCH(dir_"*."_ext)
		while file'="" 
		{
AiCompletion03
			w "Index: ",index,!
			Set index = ##class(python.GeminiAi).AiCompletion001(file, rid,index, ext)
			w "Return index: ",index,!
	        if index = -429 d
	        .s index=$s($d(xIndex):xIndex, 1:0)
	        .h 5 g AiCompletion03
	        else  d
	        .s xIndex=index h 5
.
			set file=$ZSEARCH("")
		}
		q

martin11^MAC^^67296,27927.5413523^0
martin11
	s rid=4108
	&sql(SELECT Profile, Profile->CompanyName,Profile->Setting, BucketName, OrgFile,Profile->APIURL INTO :profile, :CompanyName,:userSetting, :bk, :fileName,:url FROM MX.Record WHERE ID=:rid)
	s status = $$jxResult2JSON^jxResult2JSON(rid)
	if (status'=0) {
		if url'="" d ##class(python.APIUtils).POST(jsonString,profile,fileName,url,rid)
		
	}
	q
.
Binary2File
	s rid=4111
	&sql(SELECT TempFile,fExt INTO :aws1,:aws2 FROM Record WHERE ID=:rid)
	s obj=##class(MX.Record).%OpenId(rid)
	i obj.BinaryData.FileBinarySize()=0 q
	s stream=##class(%Stream.FileBinary).%New()
	d stream.CopyFrom(obj.BinaryData)
	s %dev="c:\intersystems\cache\jondax\"_aws1_"."_aws2
	o %dev:"wns" u %dev
	s status=stream.OutputToDevice()
	c %dev
	
	q

martin12^MAC^^67304,30329.9346999^0
martin12
.
Start(rid)
	s row="" 
	d TwoSets
	d DataMapping
  	q
TwoSets
	//Complete Reference Range
	n r1,r2,r3,r4,r5
	s row=$o(^AIGEMINI(rid,row)) g:'$ISVALIDNUM(row) TwoSetsEnd
	s r1=$g(^AIGEMINI(rid,row,"name"))
	s r2=$g(^AIGEMINI(rid,row,"unit"))
	s r3=$g(^AIGEMINI(rid,row,"value"))
	s r4=$g(^AIGEMINI(rid,row,"loRange"))
	s r5=$g(^AIGEMINI(rid,row,"hiRange"))
	if row>1 
	{	n pRow s pRow= row-1
		s pName=$g(^AIGEMINI(rid,pRow,"name"))
		if (r1=pName),(^AIGEMINI(rid,row,"row"_row)'= ^AIGEMINI(rid,pRow,"row"_pRow)) 
		{	
			i (r4="")!(r5="")
			{	;w "no RR current row",row,!
				s ^AIGEMINI(rid,row,"loRange")=^AIGEMINI(rid,pRow,"loRange")
		 		s ^AIGEMINI(rid,row,"hiRange")=^AIGEMINI(rid,pRow,"hiRange")
			}
			elseif ($g(^AIGEMINI(rid,pRow,"loRange"))="") ! ($g(^AIGEMINI(rid,pRow,"hiRange"))="") 
			{
				s ^AIGEMINI(rid,pRow,"loRange")=r4
				s ^AIGEMINI(rid,pRow,"hiRange")=r5
			}
		
		}
	}
	g TwoSets
TwoSetsEnd	
	q
	
DataMapping
	n row,trow,c1,c2,c3,r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10
	n NameMappingFlag, UnitMappingFlag, DataTransformingFlag, TotalPossible, TotalFlags, ErrorPercent, ConfPercent
	s (trow,row)="" 
	s (NameMappingFlag, UnitMappingFlag, DataTransformingFlag, TotalPossible, TotalFlags, ErrorPercent, ConfPercent) = 0
	
	s c1="#405470"	; blue
	s c2="#e63876"	; pink
	s c3="#048f2a"	; green	
DataMappingA
	s row=$o(^AIGEMINI(rid,row)) g:'$ISVALIDNUM(row) DataMappingEnd
	s r0=$g(^AIGEMINI(rid,row,"date")) 
	s r1=$g(^AIGEMINI(rid,row,"name"))
	s r2=$g(^AIGEMINI(rid,row,"unit"))
	s r3=$g(^AIGEMINI(rid,row,"value"))
	s r4=$g(^AIGEMINI(rid,row,"loRange"))
	s r5=$g(^AIGEMINI(rid,row,"hiRange"))
	s r6=$g(^AIGEMINI(rid,row,"category"))
	s r7=$g(^AIGEMINI(rid,row,"comment"))
.
	
	&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	s r2x=r2,r3x=r3,r4x=r4,r5x=r5
	
	//Cater for duplicate rows, compare current row with all previous rows
	if row>1 
	{	n pRow s pRow= row-1
		s r1p=$g(^AIGEMINI(rid,pRow,"name"))
		for i=1:1:pRow
		{
			if ^AIGEMINI(rid,row,"row"_row)= ^AIGEMINI(rid,i,"row"_i) g DataMappingA
			
			}
	} 
	g:r1="" DataMappingA
	g:r3="" DataMappingA
		
	s trow=trow+1
	
	;w "<tr class=''>" 
	;w "<td class='actions'><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)' > <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)' >  <img class='add-row-icon' src='./assets/images/row.png' alt='add row' onclick='addNewRow(event)' ></td>"
	s ^FormData(-1,rid,trow,"date")=r0
	s ^FormData(-1,rid,trow,"test-name")=r1
	;w "<td class='date' onclick='jEditBox(event)' style='color:"_c1_"'>"_r0_"</td>"
	;w "<td class='test-name' onclick='jEditBox(event)'>"_r1_"</td>"
	
	s x=$$GetSIName^WSP999(r1)
	; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
	if x["#",r2="%" s x=$p(x," ",1)
	
	s r1a=""
	i x="" {
	 	s IsMatch=0,r1a=r1
		WHILE IsMatch=0&($l(r1a)'=0){
			s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
			i r0'=""  s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
		
		i r1a'="" d
		.;s r1ax=r1a w "<td class='test-name' onclick='jEditBox(event)'>"_r1ax_"</td>"
		.&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:r1a AND BucketName=:bk)
		.i tempName'="" s r1=tempName s NameMappingFlag=NameMappingFlag +1 s ^FormData(-1,rid,trow,"transformed-name")= tempName_$c(9)_"issue"_$c(9)_c2_$c(9)_"No match-Picking closest JX match"_$c(9)_c2
		.e  s NameMappingFlag=NameMappingFlag +1 s ^FormData(-1,rid,trow,"transformed-name")= r1_$c(9)_"issue"_$c(9)_c2_$c(9)_"No matching Template:Using original"_$c(9)_c1
		e  s tempUnit="" s NameMappingFlag=NameMappingFlag+1 s ^FormData(-1,rid,trow,"transformed-name")= r1_$c(9)_"issue"_$c(9)_c2_$c(9)_"No matching JX Name & Template:Using original"_$c(9)_c1
		
		
	}
	i x'="" {
		;w "<td class='test-name' onclick='jEditBox(event)'>"_r1_"</td>"
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:x AND BucketName=:bk)
		i tempName'="" d
		.i tempName["(percent)",r2'="%" d
		..s x=x_" #" ;s tempName=$replace(tempName,"(percent)","(Abs)") 
		..&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM Template WHERE DiagnosticTest=:x AND BucketName=:bk)
		.i $zconvert(tempName,"l")=$zconvert(r1,"l") s ^FormData(-1,rid,trow,"transformed-name")= tempName_$c(9)_"converted"_$c(9)_c1_$c(9)_"Converted:Same BB"_$c(9)_c1
		.e  s r1=x s ^FormData(-1,rid,trow,"transformed-name")= tempName_$c(9)_"converted"_$c(9)_c1_$c(9)_"Converted"_$c(9)_c3	
		e  s NameMappingFlag=NameMappingFlag+1 s ^FormData(-1,rid,trow,"transformed-name")= r1_$c(9)_"issue"_$c(9)_c2_$c(9)_"No matching Template- Using original"_$c(9)_"c1;background-color: #e6f796;"  
		
		;w "<td class='transformed-name converted' style='color:"_c1_"' title='Converted:Same BB'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>" ;r1	
		;w "<td class='transformed-name converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>"
		;w "<td class='transformed-name issue' style='color:"_c2_"; ' title='No matching Template- Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
		}	
	
	s ^FormData(-1,rid,trow,"result")=r3x
	s ^FormData(-1,rid,trow,"from-unit")=r2
	if tempUnit'="" {
		s x=$$GetJXUnit^WSP999(r2)
		s r2a=tempUnit
		i x'="" s r2=x 
	 
		; more clean up
		i r2="%" d
		. i $l($p(r3,".",1))>3 s r3=$replace(r3,".",""),r3=$e(r3,1,2)_"."_$e(r3,3,999)
		. i $l($p(r4,".",1))>3 s r4=$replace(r4,".",""),r4=$e(r4,1,2)_"."_$e(r4,3,999)
		. i $l($p(r5,".",1))>3 s r5=$replace(r5,".",""),r5=$e(r5,1,2)_"."_$e(r5,3,999)
		; test if original unit can be converted
		s x="",x=$$U2U^WSP999(r1,r3,r2,r2a)
		i x["ERROR" s r2a=tempUnit 
		; end more
.
		s r3=$$U2U^WSP999(r1,r3,r2,r2a)
		s r4=$$U2U^WSP999(r1,r4,r2,r2a)
		s r5=$$U2U^WSP999(r1,r5,r2,r2a)
	}
	else
	{	
		s x="ERROR Converting" s r2a=r2,r3x=r3,r4x=r4,r5x=r5  
	}
	
	s recalc=0
	// r2 Unit
	i tempUnit="" ,x["ERROR" d
		.s UnitMappingFlag=UnitMappingFlag+1 s ^FormData(-1,rid,trow,"convert-result-unit")= r2_$c(9)_"issue"_$c(9)_c2_$c(9)_"No matching Template Unit, Using Original : "_r2x_$c(9)_c1  
		.;w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching Template Unit, Using Original : "_r2x_"'><div class='dropdown' style='color:"_c1_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
	i tempUnit'="" ,x["ERROR" d
		.s UnitMappingFlag=UnitMappingFlag+1 s ^FormData(-1,rid,trow,"convert-result-unit")= r2a_$c(9)_"issue"_$c(9)_c2_$c(9)_"No matching JX Unit : "_r2x_$c(9)_c2  
		.;w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching JX Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
		
	i tempUnit'="",x'["ERROR" d ;r2a=tempUnit, r2x=original r2(unit)
		. i (r2a="")!($zconvert(r2a,"l")=$zconvert(r2x,"l")) s ^FormData(-1,rid,trow,"convert-result-unit")= r2a_$c(9)_"converted"_$c(9)_c1_$c(9)_"Converted:Same Unit"_$c(9)_c1  
		.;w "<td class='convert-result-unit converted' style='color:"_c1_"' title='Converted:Same Unit'><div class='dropdown' style='color:"_c1_";/*border-color:"_c3_"*/'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>"
		. e  s recalc=1 s r2=r2a s ^FormData(-1,rid,trow,"convert-result-unit")= r2a_$c(9)_"converted"_$c(9)_c3_$c(9)_"Converted"_$c(9)_c3  
		.;w "<td class='convert-result-unit converted' style='color:"_c3_"' title='Converted'><div class='dropdown' style='color:"_c3_"' onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td></td>" 
	// END of r2 unit
	
	// value and RR
		i recalc {
			i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") s ^FormData(-1,rid,trow,"convert-result-val")= $s(r3'="":r3,1:"")_$c(9)_"converted"_$c(9)_c3_$c(9)_"Converted"_$c(9)_c1  
			;w "<td class='convert-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			i r3["ERROR" s DataTransformingFlag=DataTransformingFlag+1 s ^FormData(-1,rid,trow,"convert-result-val")= $s(r3'="":r3,1:"")_$c(9)_"issue"_$c(9)_c2_$c(9)_"No matching JXConversion : "_r3x_$c(9)_c2  
			;w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			
			s ^FormData(-1,rid,trow,"l-range")=r4x
			if r4["ERROR" { s DataTransformingFlag=DataTransformingFlag+1 s ^FormData(-1,rid,trow,"l-result-val")= $s(r4'="":r4,1:"")_$c(9)_"issue"_$c(9)_c2_$c(9)_"No matching JXConversion : "_r4x_$c(9)_c2  }
			elseif (tempUnit="" ){ s ^FormData(-1,rid,trow,"l-result-val")= $s(r4'="":r4,1:"")_$c(9)_"issue"_$c(9)_c1_$c(9)_""_$c(9)_c1  }
			else  {s ^FormData(-1,rid,trow,"l-result-val")= $s(r4'="":r4,1:"")_$c(9)_"converted"_$c(9)_c3_$c(9)_"Converted"_$c(9)_c3  }	
						
			;w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_"</td>",! ;_" "_r2x_"
			;w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"}
			;w "<td class='l-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			;w "<td class='l-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			
			
			s ^FormData(-1,rid,trow,"u-range")=r5x
			if r5["ERROR" { s DataTransformingFlag=DataTransformingFlag+1 s ^FormData(-1,rid,trow,"u-result-val")= $s(r5'="":r5,1:"")_$c(9)_"issue"_$c(9)_c2_$c(9)_"No matching JXConversion : "_r5x_$c(9)_c2  }
			elseif (tempUnit="" ){ s ^FormData(-1,rid,trow,"u-result-val")= $s(r5'="":r5,1:"")_$c(9)_"issue"_$c(9)_c1_$c(9)_""_$c(9)_c1  }
			else  {s ^FormData(-1,rid,trow,"u-result-val")= $s(r5'="":r5,1:"")_$c(9)_"converted"_$c(9)_c3_$c(9)_"Converted"_$c(9)_c3  }				
			/*
			;w "<td class='u-range' onclick='jEditBox(event)'>"_r5x_"</td>",!  ; "_r2x_"
			i r5["ERROR" {w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			ELSEIF (tempUnit="") {w "<td class='u-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			else {w "<td class='u-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			
			w "<td class='comment' ><textarea autocomplete='off' rows='5' cols='50' onkeyup=''></textarea></td>",!
			w "<td class='row-num' style='display:none;'>"_row_"</td>"
			w "</tr>",!
			*/
	
		  }else{
		
			i r3["ERROR"  s DataTransformingFlag=DataTransformingFlag+1 s ^FormData(-1,rid,trow,"convert-result-val")= $s(r3'="":r3,1:"")_$c(9)_"issue"_$c(9)_c2_$c(9)_"No matching JXConversion : "_r3x_$c(9)_c2  
			;w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			e  d
			.i tempUnit="" s ^FormData(-1,rid,trow,"convert-result-val")= $s(r3'="":r3,1:"")_$c(9)_"issue"_$c(9)_c1_$c(9)_"No template:Using Original"_$c(9)_c1  
			.;w "<td class='convert-result-val issue' style='color:"_c1_"' title='No template:Using Original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			.e  s ave=$$AveRes^WSP999(r1,r3,r2,"") s ^FormData(-1,rid,trow,"convert-result-val")= $s(r3'="":r3,1:"")_$c(9)_"converted"_$c(9)_c1_$c(9)_"Converted:Same Unit"_$c(9)_c1  
			;w "<td class='convert-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
.
			
			s ^FormData(-1,rid,trow,"l-range")=r4x
			i r4["ERROR" {s DataTransformingFlag=DataTransformingFlag+1 s ^FormData(-1,rid,trow,"l-result-val")= $s(r4'="":r4,1:"")_$c(9)_"issue"_$c(9)_c2_$c(9)_"No matching JXConversion : "_r5x_$c(9)_c2  }
			elseif (tempUnit="" ){ s ^FormData(-1,rid,trow,"l-result-val")= $s(r4'="":r4,1:"")_$c(9)_"issue"_$c(9)_c1_$c(9)_""_$c(9)_c1  }
			else  {s ^FormData(-1,rid,trow,"l-result-val")= $s(r4'="":r4,1:"")_$c(9)_"converted"_$c(9)_c1_$c(9)_"Converted:Same Unit"_$c(9)_c1  }					
			/*			
			w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_"</td>",! ; "_r2x_"
			if r4["ERROR" {w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"}
			elseif (tempUnit="" ){w "<td class='l-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			else  {w "<td class='l-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			;w "<td class='l-result-unit'>"_r2a_"</td>",!
			*/
			s ^FormData(-1,rid,trow,"u-range")=r5x
			i r5["ERROR" {s DataTransformingFlag=DataTransformingFlag+1 s ^FormData(-1,rid,trow,"u-result-val")= $s(r5'="":r5,1:"")_$c(9)_"issue"_$c(9)_c2_$c(9)_"No matching JXConversion : "_r5x_$c(9)_c2  }
			elseif (tempUnit="" ){ s ^FormData(-1,rid,trow,"u-result-val")= $s(r5'="":r5,1:"")_$c(9)_"issue"_$c(9)_c1_$c(9)_""_$c(9)_c1  }
			else  {s ^FormData(-1,rid,trow,"u-result-val")= $s(r5'="":r5,1:"")_$c(9)_"converted"_$c(9)_c1_$c(9)_"Converted:Same Unit"_$c(9)_c1  }				
			
			/*
			w "<td class='u-range' onclick='jEditBox(event)'>"_r5x_"</td>",! ; "_r2x_"
			i r5["ERROR" {w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			ELSEIF (tempUnit="") {w "<td class='u-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			else {w "<td class='u-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			
			w "<td class='comment'><textarea autocomplete='off' rows='5' cols='50' onkeyup=''></textarea></td>",!
			w "<td class='row-num' style='display:none;'>"_row_"</td>"
			w "</tr>",!
			*/
		}
	
	 u 0
	g DataMappingA	
DataMappingEnd
.
	s TotalPossible = trow*5
	s TotalFlags = NameMappingFlag + UnitMappingFlag + DataTransformingFlag
	s ErrorPercent = (TotalFlags/TotalPossible) * 100
	s ConfPercent = 100-ErrorPercent
	s ConfPercent = $fn(ConfPercent,,2)
	&sql(INSERT INTO MX.RecordScore(Record, RowCount, ItemCount, NameFlag, UnitFlag, ValueFlag, Score) 
		 VALUES(:rid, :trow, :TotalPossible, :NameMappingFlag, :UnitMappingFlag, :DataTransformingFlag, :ConfPercent))
	w !,"Confidence Score : ",ConfPercent,!
	q
	
	
CleanUp
	; clean up units
		s r2=$replace(r2,"|","l")
		s r2=$replace(r2," ","")
		s r2=$replace(r2,"-1","-l")
		s r2=$replace(r2,"_1","_l")
		i $e(r2,$l(r2)-1,$l(r2))="/1" s r2=$replace(r2,"/1","/l")
		i $e(r2,$l(r2))="_" s r2=r2_"l"
		s r2=$replace(r2," / ","/") 
	
	; clean up value and range
		s r3=$replace(r3,"*","")
		s r3=$replace(r3," ","")
		s r4=$replace(r4," ","")
		i $p(r4,"-",1)'="",$p(r4,"-",2)'="" d	; cater for 1-3
		. s r5=$p(r4,"-",2),r4=$p(r4,"-",1), r4x=r4,r5x=r5
		s r5=$replace(r5," ","")
		i $p(r5,"-",1)'="",$p(r5,"-",2)'="" d	; cater for 1-3
		. s r4=$p(r5,"-",1),r5=$p(r5,"-",2), r4x=r4,r5x=r5
		; For Indo clients
		i bk["INDO"!(bk["JXTesting") {
			; Use the original from GEMINI
			// treat "." as comma
			s r3=$replace(r3,".",""),r4=$replace(r4,".",""),r5=$replace(r5,".","")
			// treat commas as "."
			s r3=$replace(r3,",","."),r4=$replace(r4,",","."),r5=$replace(r5,",",".")
		}else 
		{	s r3=$replace(r3,",","."),r4=$replace(r4,",","."),r5=$replace(r5,",",".")
			}
		/* Set Result as the standard
		i bk["INDO"!(bk["4321-qa-jondaffr") {
			if r3["." d
			. s r4=$replace(r4,",","."),r5=$replace(r5,",",".")
			. s r3=$replace(r3,".",""),r4=$replace(r4,".",""),r5=$replace(r5,".","")
			if r3["," d
			. s r4=$replace(r4,".",","),r5=$replace(r5,".",",")
			.s r3=$replace(r3,",","."),r4=$replace(r4,",","."),r5=$replace(r5,",",".")
		}		
		*/
	; end clean up
	;END
	q
.
.
WriteTr
	s c1="#405470"	; blue
	s c2="#e63876"	; pink
	s c3="#048f2a"	;green
	
	/// $p(r2,$c(9),1)= value, $p(r2,$c(9),2)=class, $p(r2,$c(9),3)=color, $p(r2,$c(9),4)=title, $p(r2,$c(9),5)=color
	s row=$o(^FormData(-1,rid,row)) q:row="" 
	s r0=^FormData(-1,rid,row,"date")
	s r1=^FormData(-1,rid,row,"test-name")
	s r2=^FormData(-1,rid,row,"transformed-name")
	s r3=^FormData(-1,rid,row,"result")
	s r4=^FormData(-1,rid,row,"from-unit")
	s r5=^FormData(-1,rid,row,"convert-result-unit")
	s r6=^FormData(-1,rid,row,"convert-result-val")
	s r7=^FormData(-1,rid,row,"l-range")
	s r8=^FormData(-1,rid,row,"l-result-val")
	s r9=^FormData(-1,rid,row,"u-range")
	s r10=^FormData(-1,rid,row,"u-result-val")	
	
	
	w "<tr class=''>",! 
	w "<td class='actions'><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)' > <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)' >  <img class='add-row-icon' src='./assets/images/row.png' alt='add row' onclick='addNewRow(event)' ></td>",!
	w "<td class='date' onclick='jEditBox(event)' style='color:"_c1_"'>"_r0_"</td>",!
	w "<td class='test-name' onclick='jEditBox(event)'>"_$p(r1,$c(9),1)_"</td>",!
	
	w "<td class='transformed-name "_$p(r2,$c(9),2)_"' style='color:"_$p(r2,$c(9),3)_"' title='"_$p(r2,$c(9),4)_"'>",!
	w "<input type='text' style='color:"_$p(r2,$c(9),5)_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_$p(r2,$c(9),1)_"'>",!
	w "</td>",!
	
	w "<td class='result' onclick='jEditBox(event)'>"_r3_"</td>",!
	w "<td class='from-unit' onclick='jEditBox(event)'>"_r4_"</td>",!
	
	w "<td class='convert-result-unit "_$p(r5,$c(9),2)_"' style='color:"_$p(r5,$c(9),3)_"' title='"_$p(r5,$c(9),4)_"'>",!
	w "<div class='dropdown' style='color:"_$p(r5,$c(9),5)_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_$p(r5,$c(9),1)_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div>",!
	w "</td>",!
	
	w "<td class='convert-result-val "_$p(r6,$c(9),2)_"' style='color:"_$p(r6,$c(9),3)_"' title='"_$p(r6,$c(9),4)_"'>",!
	w "<input type='text' style='color:"_$p(r6,$c(9),5)_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$p(r6,$c(9),1)_"'>",!
	w "</td>",!
	
	w "<td class='l-range' onclick='jEditBox(event)'>"_r7_"</td>",!
	w "<td class='l-result-val "_$p(r8,$c(9),2)_"' style='color:"_$p(r8,$c(9),3)_"' title='"_$p(r8,$c(9),4)_"'>",!
	w "<input type='text' style='color:"_$p(r8,$c(9),5)_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$p(r8,$c(9),1)_"'>",!
	w "</td>",!
	
	w "<td class='u-range' onclick='jEditBox(event)'>"_r9_"</td>",!
	w "<td class='u-result-val "_$p(r10,$c(9),2)_"' style='color:"_$p(r10,$c(9),3)_"' title='"_$p(r10,$c(9),4)_"'>",!
	w "<input type='text' style='color:"_$p(r10,$c(9),5)_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$p(r10,$c(9),1)_"'>",!
	w "</td>",!
	
	w "<td class='comment' ><textarea autocomplete='off' rows='5' cols='50' onkeyup=''></textarea></td>",!
	w "<td class='row-num' style='display:none;'>"_row_"</td>",!
	w "</tr>",!
	g WriteTr
	
	
	
	

martin2^MAC^^67148,25218.2572037^0
martin2
testing
	s userid=19,(r1,r2,r3)="" &sql(SELECT RemainingOCRUnit,RemainingTransformationUnit,EndDate INTO :r1,:r2,:r3 FROM MX.Subscription WHERE Profile=:userid AND Type='Transformation')
	i r3<=+$h!(r1+r2>0) w "yes"
	q
	
test
	Set fileStream = ##class(%Stream.FileCharacter).%New()
.
		If fileStream.LinkToFile(filePath) {
    // File opened successfully
    	Set fileContent = ""
    
   		While 'fileStream.AtEnd {
        Set fileContent = fileContent _ fileStream.ReadLine() _ $char(13,10)  // Read the entire file with new lines
    	}
		} Else {
    	Write "Error: Unable to open file."
		}
	q
	
test1
.
	s userid=20,(r1,r2,r3)="" &sql(SELECT RemainingOCRUnit,RemainingTransformationUnit,EndDate INTO :r1,:r2,:r3 FROM MX.Subscription WHERE Profile=:userid AND Type='Transformation')
	i r3<=+$h!(r1+r2>0) d ^jxBiolytica
	
	s userid=19,(r1,r2,r3)="" &sql(SELECT RemainingOCRUnit,RemainingTransformationUnit,EndDate INTO :r1,:r2,:r3 FROM MX.Subscription WHERE Profile=:userid AND Type='Transformation')
	i r3<=+$h!(r1+r2>0) d ^jxBiolytica 
	
	q		
	
PDF
	s tmpname="OJ000093",fext="pdf"
	s %dev="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\file for testing\Downloads\"_tmpname_"."_fext
	s %dev1="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\file for testing\Downloads\"_tmpname
	d ##class(%File).CreateDirectory(%dev1)  ;outputPath
	; split PDF into per-page png
	d ##class(python.pdfhandler).pdf2png(%dev,%dev1_"\")
	;s cmd="win2pdfd pdf2png """_%dev_"."_fExt_""" """_%dev1_"\"_tmpname_".png"" 0"
	;s x=$zf(-1,cmd_" && exit")
		
	set dir = ##class(%File).NormalizeDirectory(%dev1_"\")
	
	set file=$ZSEARCH(dir_"*.png")
	
	While file'="" {
			;Write !,"File found: ", file, !		
			s csv=0
			s csv=##class(python.textractUtils).GenerateCSVFromBinary(file)
	
			Set file = $ZSEARCH("")
			s i=i+1
		}
		
	s j=1	
	While j'=  i{
			;w !,"i : "_i,!
			;s cmd= "copy /B "_%dev1_"\page_0.csv+"_%dev1_"\page_"_i_".csv "_%dev1_"\page_0.csv"
			;s x=$zf(-1,cmd_" && exit")
			s status= ##class(MX.FileUtils).AppendFile(%dev1_"\page_0.csv",%dev1_"\page_"_j_".csv")
			set j = j+1		
	}
	d ##class(%File).CopyFile(%dev1_"\page_0.csv", %dev1_".csv")
	;set cmd = "move "_%dev1_"\page_0.csv "_%dev1_".csv"
	;set x = $zf(-1, cmd_" && exit")
	d ##class(%File).RemoveDirectoryTree(dir)
	;d CleanCSV^utilAWS(%dev1_".csv")
	;d ##class(python.testClaude).AiCompletion($replace(%dev1,"\","/")_".csv",UserID)	
	;i $d(^ClaudeError("alt"_UserID)) q
	q
	
	
Test11
 &sql(update MX.errorcode set FriendlyDescription ='We do not support transforming data in the language you uploaded yet.' where ID=195)
 if SQLCODE=0 w "Done"
 q 

martin3^MAC^^67101,25793.3465192^0
martin3   ;AddNewTest2Templates
.
test2	
	k ^mar("test2")
	s Q=$c(9),n=1,date=0,rec="Collection Date 	21 December, 2016 	" ;rec=^mar("date","Collection Date "_$c(9)_"21 December, 2016 "_$c(9),2) 
	if n=1,date'="1"{
		f i2=1:1:$l(rec,Q) {
		w $Piece(rec,Q,i2)_"xx",!	
		i $g(martin)'="" s date =$$checkDate^martin3($Piece(rec,Q,i2)) 
		s ^mar("test2",i2)=date
		w date,!
		i date'="0" d
		.w "date found",!
		}
		w "end for loop",! 
	}	
	q	
test22	
	s rec="Collection Date 	21 December, 2016 "
	f i2=1:1:$l(rec) {
	w $e(rec,i2)_" : "_ $a($e(rec,i2)),!
	}
	q
	
CreateBuckets
	s setting=6
	s bname="jonda-reports-prod-euc1-v1" ;"chilongevity" ;"jondaxpoc01" ;"jondatesting" ;"jonda-bucket-development"
	s folder="78caa1a2-2aed-40f6-8704-7c8ccb5a22f7"
	s objx=##class(MX.Setting).%OpenId(setting)
	if (objx.Buckets '= ""){
		;s count = objx.Buckets.Count()
		&sql(SELECT TOP 1 element_key INTO :count FROM Setting_Buckets WHERE Setting=:setting ORDER BY element_key DESC)
	}else {s count = 0 }
	s objx1=##class(MX.Buckets).%New()
.
	s objx1.Name= bname
	
	;s objx1.Folder = "Staging"
	;s objx1.Folder = "Completed"
	;s objx1.Folder = "Failure"
	;s objx1.Folder = "In-Process"
	s objx1.Folder =folder
	/*
	
	s objx1.Folder = "1d8e6921-0592-486e-aefb-384177529dda"
	s objx1.Folder = "224053d4-a964-4633-8ac4-bcc00ec0a743"
	s objx1.Folder = "256a24f6-fb3d-4a26-b592-964efc1bc342"
	s objx1.Folder = "26160fe8-884d-4bdc-a5df-1cdda88633e8"
	s objx1.Folder = "2f4400ab-ec2d-483f-bf70-7f0774faf952
	s objx1.Folder = "7e2d40fa-0b71-4bd9-a80c-e6f651afd6cf"
	s objx1.Folder = "dd4c73f2-ae77-4613-a1bd-dad6750c059e"
	*/
	s objx1.CliProfileName = "biolytica4"
	s objx1.Type = "Transformation"	; check MX.Setting
	s dt = $zdatetime($h,3)
	s objx1.CreatedDate = dt
	d objx.Buckets.SetAt(objx1,+count+1)
	
	d objx.%Save()
	q	
	
Clone	; Clone from Setting 5 to Setting 6
	d INIT^CSP999
	#import MX 
	;&sql(DELETE FROM Template WHERE Setting=6)
	&sql(DECLARE cClone1 CURSOR FOR
		SELECT BucketName,CreatedDate,DiagnosticTest,Name,Setting,UnitName 
		INTO :r1,:r2,:r3,:r4,:r5,:r6
		FROM Template
		WHERE BucketName='jonda-reports-prod-euc1-v1/ac21a65a-6eb2-4d5d-82d8-b747b6196d2e' 
	)
	&sql(OPEN cClone1)
	&sql(FETCH cClone1)
	WHILE SQLCODE=0{
	;s objx1.Folder = "Staging"
	;s objx1.Folder = "Completed"
	;s objx1.Folder = "Failure"
	;s objx1.Folder = "In-Process"
	s setting=7
		s bucket="jonda-reports-prod-euc1-v1/d086330f-3f5e-43c8-8f66-8331e8693d51"
		&sql(INSERT INTO "Template" (BucketName,CreatedDate,ModifiedDate,DiagnosticTest,Name,Setting,UnitName) VALUES (:bucket,:r2,:r2,:r3,:r4,:setting,:r6))
		/*
		s bucket="jonda-bucket-development/Completed",setting=6
		&sql(INSERT INTO "Template" (BucketName,CreatedDate,ModifiedDate,DiagnosticTest,Name,Setting,UnitName) VALUES (:bucket,:r2,:r2,:r3,:r4,:setting,:r6))
		s bucket="jonda-bucket-development/Failure",setting=6
		&sql(INSERT INTO "Template" (BucketName,CreatedDate,ModifiedDate,DiagnosticTest,Name,Setting,UnitName) VALUES (:bucket,:r2,:r2,:r3,:r4,:setting,:r6))
		s bucket="jonda-bucket-development/In-Process",setting=6
		&sql(INSERT INTO "Template" (BucketName,CreatedDate,ModifiedDate,DiagnosticTest,Name,Setting,UnitName) VALUES (:bucket,:r2,:r2,:r3,:r4,:setting,:r6))
		*/
		&sql(FETCH cClone1)
	}
	&sql(CLOSE cClone1)
	q	
	
CreateNewUser
	s t=$zdatetime($h,3)
	&sql(Insert into Setting(CliProfileName,CreatedDate,ServerName) values('Chi',:t,'Chi'))	
	q
	
test3
	s setting=6
	s count=0
	s objx=##class(MX.Setting).%OpenId(6)
	if (objx.Buckets '= ""){
		&sql(SELECT TOP 1 element_key INTO :count FROM Setting_Buckets WHERE Setting=:setting ORDER BY element_key DESC)
		w count,!
	}else {s count = 0 }	
	q
.
AddNewTest2Templates
	#import MX
	s JXName="25-Hydroxy Vitamin D3"
	s Cname="Vitamin D3"
	s unit="ng/mL",i=1
	s dt = $zdatetime($h,3)
	&sql(DECLARE c1 CURSOR FOR
		SELECT Buckets_Name,Buckets_Folder,Setting
		INTO :r1,:r2,:r3
		FROM Setting_Buckets
		WHERE Buckets_Folder<>'4321-qa-jondaffr' AND  Buckets_Folder<>'1234-dev-jondaffr' AND Buckets_Name<>'jondatesting'
		
	)
	&sql(OPEN c1)
	&sql(FETCH c1)
	WHILE SQLCODE=0{
		s bucketName=r1_"/"_r2
		if r2="-" s bucketName=r1
		;w i_bucketName_","_dt_","_JXName_","_Cname_","_unit_","_r3,!
		;s i=i+1
		&sql(INSERT INTO Template(BucketName,CreatedDate,DiagnosticTest,Name,UnitName,Setting) VALUES (:bucketName,:dt,:JXName,:Cname,:unit,:r3))
	&sql(FETCH c1)	
	}
	&sql(CLOSE c1)
	q	
	
PrintTemplate2CSV
	#import MX
	s i=0
	s fnam1="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\file for testing\test1.csv"
	o fnam1:"wns"
	u fnam1
	&sql(DECLARE c11 CURSOR FOR
		SELECT Name,UnitName
		INTO :r1,:r2
		FROM Template
		WHERE BucketName='jonda-reports-prod-euc1-v1/27c1d39f-b4ed-457e-8c76-891ee118b2a8'
		
	)
	&sql(OPEN c11)
	&sql(FETCH c11)
	WHILE SQLCODE=0{
		w i_$c(9)_r1_$c(9)_r2,!
		s i=i+1
		
	&sql(FETCH c11)	
	}
	&sql(CLOSE c11)
	c fnam1
	q	
	

martin4^MAC^^67167,32281.358806^0
ConvertResults 		; HL7 to FHIR Conversion
					; Change fileFormat as desired "json" or "xml"
					; Output to same directory
	#import MX
	
	s filePath="C:\Users\jondadev1\Downloads\22112024-output.hl7" 
	s fileFormat="xml"
	
	d StandardizeHL7IND(filePath)
	d HL7ToSDAIND
	if (fileFormat["json")	
	{
		d SDAToFHIRJson(filePath)
		}
	else{
		d SDAToFHIRXml(filePath)
	}
.
	q
		
StandardizeHL7IND(fname)
	s hl7msg = ##class(EnsLib.HL7.Message).ImportFromFile(fname)
	i ('hl7msg){
		w !, "ERROR IMPORTING HL7 FILE: "
		&js<alert("WRONG FILE FORMAT! IMPORTED FILE. ")>
		q
	}
	//new added
	s tMSH = hl7msg.FindSegment("MSH")
	if (tMSH){
		s tEncNum = tMSH.GetValueAt(4, "x")
		if ('tEncNum){
			s EncStatus = tMSH.SetValueAt("x",4)
		}
	} //end 	
	; setting Encounter
	s tPV1 = hl7msg.FindSegment("PV1")
	if (tPV1){
		s tEncNum = tPV1.GetValueAt(19, ":_~\&")
		if ('tEncNum){
			s EncStatus = tPV1.SetValueAt("123456789", 19)
			;w !,"Added Encounter number 123456789 at PV1:19"
		} 
	} else{
		s tPV1 = ##class(EnsLib.HL7.Segment).%New()
		s PV1Status = tPV1.SetValueAt("PV1", 0)
		s EncNumStatus = tPV1.SetValueAt("123456789",19)
		
		d hl7msg.FindSegment("PID", .PIDIndex)
		if (PIDIndex){
			s PV1Index = PIDIndex + 1
		} else {
			s PV1Index = 3
		}
		s setSegStatus = hl7msg.InsertSegmentAt(tPV1, PV1Index)
		if ('setSegStatus){
			w !, "Failed to insert PV1 segment",!
			q
		}
		;w !,"Added added PV1 segment with encounter number 123456789 after PID"
		KILL tPV1, PIDIndex, PV1Index
	}
	
	
	; finding OBRs
	s OBRIndex = 0
	s listOBR = $LISTBUILD()
	WHILE (OBRIndex '= ""){
		d hl7msg.FindSegment("OBR", .OBRIndex)
		if (OBRIndex){
			s listOBR = listOBR_$LISTBUILD(OBRIndex)	
		}
	}
	//new added
	s tOBR=hl7msg.FindSegment("OBR")
	s obrStatus = tOBR.SetValueAt("1",1) 
	s obrStatus = tOBR.SetValueAt("x",4)
	;s obrStatus = tOBR.SetValueAt("F",25)
	//end added
	; finding ORCs
	s ORCIndex = 0
	s listORC = $LISTBUILD()
	WHILE(ORCIndex '=""){
		d hl7msg.FindSegment("ORC", .ORCIndex)
		if (ORCIndex){
			s listORC = listORC_$LISTBUILD(ORCIndex)	
		}
	}
	
	i ($LISTLENGTH(listOBR)<$LISTLENGTH(listORC)){
		w !,"Bad Format: numbers of OBR is less than numbers of ORC in the file."
		q 
	}
	;zw listOBR
	s ORCIndexCarry = 0
	s numAddedSegments = 0
	FOR index=2:1:($LISTLENGTH(listOBR)){
		s curOBRIndex = $LISTGET(listOBR,index)
		s orcindex = index - ORCIndexCarry
		s curORCIndex = $LISTGET(listORC,orcindex)
.
		; setting ORC
		if ((curORCIndex '= "") && (curORCIndex < curOBRIndex)){
		
			s segIndex = curORCIndex - 1
			s tORC = hl7msg.FindSegment("ORC",.segIndex)
			i ((tORC '="") && (ORCIndex < curOBRIndex)){
				s tOBS = tORC.GetValueAt(29, ":_~\&")
				if ('tOBS){
					s obsStatus = tORC.SetValueAt("LAB",29)
					s obsStatus = tORC.SetValueAt("A",5)
				}
			}
			;w !,"Added value for ORC at index: "_segIndex
		} else {
	
			s tORC = ##class(EnsLib.HL7.Segment).%New()
			s orcStatus = tORC.SetValueAt("ORC",0)
			s obsStatus = tORC.SetValueAt("LAB",29)
			s obsStatus = tORC.SetValueAt("A",5)
			s curOBRIndex = curOBRIndex + numAddedSegments
			s setSegStatus = hl7msg.InsertSegmentAt(tORC, curOBRIndex)
			if ('setSegStatus){
				w !, "Failed to insert ORC segment",!
				q
			}
			;w !,"Added ORC at index: "_curOBRIndex
			s ORCIndexCarry = ORCIndexCarry + 1
			s numAddedSegments = numAddedSegments + 1
		} 
		
		
	}
		
.
	KILL tORC, OBRIndex, ORCIndex, ORCIndexCarry
	
	s hl7Str = hl7msg.OutputToString()
	s ^martin("hl7")=hl7Str	
	q
	
HL7ToSDAIND
.
	s hl7Stream = ##class(%Stream.GlobalCharacter).%New()
	d hl7Stream.Write($g(^martin("hl7")))
	s tMSH = hl7msg.FindSegment("MSH")	; setting DocType
	i (tMSH){
		s ^martin("SDA", "MSH") = tMSH.OutputToString()
		s tType = tMSH.GetValueAt(9, ":_~\&")
		s tVersion = tMSH.GetValueAt(12, ":_~\&")
		i (tType && tVersion){
			s hl7msg.DocType = tVersion_":"_tType
		}
	} else {
		s ^martin("SDA", "MSH") = ""
	}
	d ##class(HS.Gateway.HL7.HL7ToSDA3).GetSDA(hl7msg,.tSDA, 1 ,1)
	
	; tSDA is the SDA %Stream.GlobalCharacter
	s SDAStr = tSDA.Read()
	s ^martin("SDA") = $$UnescapeHL7^jxDataTransform(SDAStr)
		
	q	
SDAToFHIRJson(fname)
.
	s tSDA = ##class(%Stream.GlobalCharacter).%New()
	d tSDA.Write($g(^martin("SDA")))
	Set regexPattern = "[ \r\n\t\S]+"
	Set matcher = ##class(%Regex.Matcher).%New(regexPattern)
	Set isMatch = matcher.Match(tSDA)
	if (isMatch){
	s fhirObj = ##class(HS.FHIR.DTL.Util.API.Transform.SDA3ToFHIR).TransformStream(tSDA,"HS.SDA3.Container","R4")
	s fhirJson = fhirObj.bundle.%ToJSON()
	
	s fsStream = ##class(%GlobalCharacterStream).%New()
	s streamStatus = fsStream.Write(fhirJson)
	
	d fsStream.Rewind()
	s downloadStr = fsStream.Read()
	
	s fName= $replace($PIECE(fname, "\", $LENGTH(fname, "\")) ,".hl7","")
	s fPath=##class(%File).GetDirectory(fname)
	s f1=fPath_fName_"_FHIRJson.json"
	o f1:"wns"
	u f1
	w downloadStr
	c f1
	w "Output FHIRjson to "_f1,!
	}
	q  
	
SDAToFHIRXml(fname)
.
	s tSDA = ##class(%Stream.GlobalCharacter).%New()
	d tSDA.Write($g(^martin("SDA")))
	Set regexPattern = "[ \r\n\t\S]+"
	Set matcher = ##class(%Regex.Matcher).%New(regexPattern)
	Set isMatch = matcher.Match(tSDA)
	if (isMatch){
	s fhirObj = ##class(HS.FHIR.DTL.Util.API.Transform.SDA3ToFHIR).TransformStream(tSDA,"HS.SDA3.Container","R4")
	s fhirJson = fhirObj.bundle.%ToJSON()
	
	s fsStream = ##class(%GlobalCharacterStream).%New()
	s streamStatus = fsStream.Write(fhirJson)
	
	d fsStream.Rewind()
	s downloadStr = fsStream.Read()
	s fName= $replace($PIECE(fname, "\", $LENGTH(fname, "\")) ,".hl7","")
	s fPath=##class(%File).GetDirectory(fname)
	s f1=fPath_fName_"_FHIRxml.xml"
	o f1:"wns"
	u f1
	w downloadStr
	c f1
	w "Output FHIRxml to "_f1,!
	}
	q	

martin5^MAC^^67050,37929.6575202^0
martin5
jxResult2HL7(rid, devMode=0)
	#import MX
	
	&sql(SELECT Profile->CompanyName, Profile->Setting->ID, OrgFile, BucketName, ReportDate INTO :CompanyName, :setting, :fileName, :bk, :reportDate FROM Record WHERE ID=:rid)
.
	&sql(SELECT ReportDate INTO :RBTReportDate FROM ResultBloodTest WHERE Record->ID=:rid)
	if (RBTReportDate '= ""){
		s reportDate = RBTReportDate
	}
	
	&sql(SELECT CliProfileName INTO :CliProfileName FROM Setting WHERE ID=:setting)
.
	n d1,key,Q
	n d1,d2,d3,d4,d5,r1,r2,r3,r4
.
	if (bk["/"){
		s bksys = $replace(bk,"/","\")
	} else { s bksys = bk}
.
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"
	s outputsDir = "C:\InterSystems\Cache\JondaX\"_CompanyName_"\"_bksys_"\outputs\"
	
	&sql(SELECT ID INTO :rbt From ResultBloodTest WHERE Record->ID=:rid)
	
	i (devMode){w !,"RBT: ", rbt}
	
	;&js<console.log(`#(rbt)#`)>
	
	if ((rid = "")!(rbt="")){q 0}
	
	; take place holder from table.
	; dummy
	s emptyPlaceHolder = ""
	s hl7msg = ##class(EnsLib.HL7.Message).%New()
	d hl7msg.Clear()
	
	s MSH = ##class(EnsLib.HL7.Segment).%New()
	s MSHstatus = MSH.SetValueAt("^~\\&",1)
	s MSHstatus = MSH.SetValueAt("mshSendingFaciliy", 4)
	s MSHstatus = MSH.SetValueAt("ORU^R01",8)
	s MSHstatus = MSH.SetValueAt("2.3",11)
	s MSHstatus = MSH.SetValueAt("MSH",0)
	s setSegStatus = hl7msg.InsertSegmentAt(MSH, 1)
	
	s PID = ##class(EnsLib.HL7.Segment).%New()
	s PIDstatus = PID.SetValueAt("PID",0)
	s PIDstatus = PID.SetValueAt(emptyPlaceHolder,3)
	s PIDstatus = PID.SetValueAt(emptyPlaceHolder,5)
	s setSegStatus = hl7msg.InsertSegmentAt(PID, 2)
	
	s PV1 = ##class(EnsLib.HL7.Segment).%New()
	s PV1status = PV1.SetValueAt("PV1",0)
	s PV1status = PV1.SetValueAt(emptyPlaceHolder,2)
	s PV1status = PV1.SetValueAt(emptyPlaceHolder,19)
	s setSegStatus = hl7msg.InsertSegmentAt(PV1, 3)
	
	s ORC = ##class(EnsLib.HL7.Segment).%New()
	s ORCstatus = ORC.SetValueAt("ORC",0)
	s ORCstatus = ORC.SetValueAt("1",1)
	s ORCstatus = ORC.SetValueAt("LAB",29)
	s setSegStatus = hl7msg.InsertSegmentAt(ORC, 4)
.
	s reportDateHL7 = $ZDT(reportDate,8)
	s reportDateHL7 = reportDateHL7_"000000"
	if (reportDate = ""){s reportDateHL7 = ""}
	
	s OBR = ##class(EnsLib.HL7.Segment).%New()
	s OBRstatus = OBR.SetValueAt("OBR",0)
	s OBRstatus = OBR.SetValueAt(emptyPlaceHolder,4)
	s OBRstatus = OBR.SetValueAt(reportDateHL7,14)
	s setSegStatus = hl7msg.InsertSegmentAt(OBR, 5)
.
	k MissingSIName
	k MissingTemplate
	k MissingUnitConversion
	
	&sql(DECLARE CRHL CURSOR FOR
		SELECT Tests_HighRange, Tests_LowRange, Tests_Result, Tests_SIUnit, Tests_TestName, Tests_TestDate
		INTO :d1,:d2,:d3,:d4,:d5, :d6
		FROM ResultBloodTest_Tests
		WHERE ResultBloodTest=:rbt
	)
	&sql(OPEN CRHL)
	
	&sql(FETCH CRHL)
.
	if SQLCODE '= 0{
		q 0
	}
	s OBXIndex = 0
	s NTEIndex=0
	WHILE SQLCODE=0{  
		;&js<console.log(#(d5)#, #(d4)#, #(d3)#, #(d2)#, #(d1)#);>
		;i (devMode){w !,d5_", "_d4_", "_d3_", "_d2_", "_d1}
		if (d5=""){&sql(FETCH CRHL) continue}
	
		&sql(SELECT SIName, SIUnit INTO :r1,:r2 FROM DiagnosticTest WHERE (Name=:d5 OR SIName=:d5) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
		if (r1=""){
			s MissingSIName(d5)=""
			
		} else {
			&sql(SELECT Top 1 Name, UnitName INTO :r3, :r4 FROM Template WHERE DiagnosticTest=:r1 AND BucketName=:bk AND "Setting"=:setting)
			if (r3 = ""){
				s MissingTemplate(r1)=""
.
			}elseif($d(r3) & $d(r4)){
				s d5 = r3
				;s d4 = r4
				
				
				i (($L(d1)'=0) & ($L(d2)'=0) & ($L(d3)'=0)){
					i (r2 '= r4){
						/*
						s d1 = $$U2U^WSP999(r1, d1, r2, r4)
						s d2 = $$U2U^WSP999(r1, d2, r2, r4)
						s d3 = $$U2U^WSP999(r1, d3, r2, r4)
						*/
					} 
	
					i (($L(d1)=0) & ($L(d2)=0) & ($L(d3)=0)){
						s MissingUnitConversion(r3_":"_r2_"->"_r4) = ""
					}
				}
			}	
			
		
		}
		
		i ($L(d1)>0) {s d1 = $$FormatNumber^cMain(d1,2)}
		i ($L(d2)>0) {s d2 = $$FormatNumber^cMain(d2,2)}
		i ($L(d3)>0) {s d3 = $$FormatNumber^cMain(d3,2)}
		
		s OBXIndex = OBXIndex + 1
		s OBX = ##class(EnsLib.HL7.Segment).%New()
		s OBXstatus = OBX.SetValueAt("OBX",0)
		s OBXstatus = OBX.SetValueAt($$EscapeHL7^jxSDAToResults(OBXIndex), 1)
		s OBXstatus = OBX.SetValueAt("NM", 2)
		s OBXstatus = OBX.SetValueAt($$EscapeHL7^jxSDAToResults(d5)_"^"_$$EscapeHL7^jxSDAToResults(d5),3)   ; there must be code
		s OBXstatus = OBX.SetValueAt($$EscapeHL7^jxSDAToResults(d3), 5)
		s d4 = $ZSTRIP(d4,"<>w")
		s OBXstatus = OBX.SetValueAt($$EscapeHL7^jxSDAToResults(d4), 6)
		
		s d1 = $$EscapeHL7^jxSDAToResults(d1)
		s d2 = $$EscapeHL7^jxSDAToResults(d2)
		i (($L(d1)>0) & ($L(d2)>0)){
			s OBXstatus = OBX.SetValueAt(d2_"-"_d1, 7)
		} elseif (($L(d1) > 0) & ($L(d2)=0)){
			s OBXstatus = OBX.SetValueAt(d1, 7)
		} elseif (($L(d1) = 0) & ($L(d2)>0)) {
			s OBXstatus = OBX.SetValueAt(d2, 7)
		}
		s OBXstatus = OBX.SetValueAt("F", 11)
.
		; added No Upper/Lower Ref Range
		k NTE
		i $l(d1)=0,$l(d2)>0 d
		. s NTE = ##class(EnsLib.HL7.Segment).%New()
		. s NTEstatus = NTE.SetValueAt("NTE",0)
		. s NTEstatus = NTE.SetValueAt($$EscapeHL7^jxSDAToResults(OBXIndex), 1)
		. s NTEstatus = NTE.SetValueAt("O",2)
		. s NTEstatus = NTE.SetValueAt("Upper-Ref-Range",3)
		
		i $l(d1)>0,$l(d2)=0 d
		. s NTE = ##class(EnsLib.HL7.Segment).%New()
		. s NTEstatus = NTE.SetValueAt("NTE",0)
		. s NTEstatus = NTE.SetValueAt($$EscapeHL7^jxSDAToResults(OBXIndex), 1)
		. s NTEstatus = NTE.SetValueAt("O",2)
		. s NTEstatus = NTE.SetValueAt("Lower-Ref-Range",3)
.
		; END added No Upper/Lower Ref Range
			
		// date time 
		if ($L(d6)>0){
			
			s testDateHL7 = $zdate(d6,3)
			s testDateHL7 = $replace(testDateHL7, "-","")
			s testDateHL7 = testDateHL7_"000000"
			
			s OBXstatus = OBX.SetValueAt(testDateHL7, 14)
		}
		
		s setSegStatus = hl7msg.InsertSegmentAt(OBX, OBXIndex + (5 + NTEIndex))
		i $g(NTE)'="" s NTEIndex=NTEIndex+1,setSegStatus = hl7msg.InsertSegmentAt(NTE, OBXIndex + (5 + NTEIndex))
		
	
		
		
		&sql(FETCH CRHL)
	}
	&sql(CLOSE CRHL)
.
	if ( ($L($o(MissingSIName("")))>0) ! ($L($o(MissingTemplate("")))>0) ! ($L($o(MissingUnitConversion("")))>0) ){
		if (devMode){w !,"MISSING ATTRIBUTES"}
		;&js<console.log(`Attribute Missing!`)>
		s dt = $zdatetime($h, 3)
		
		s errCode = "JX3007" ;err code for missing attributes 
		s errData = fileName_" in "_bk_" is missing these templates. "
		
		if ($L($o(MissingSIName("")))>0){
			s errData =  errData_$c(13,10)_"Missing SINames: "
			s missingSIName = $o(MissingSIName(""))
			while (missingSIName'=""){
				s errData = errData_missingSIName_", "
				k MissingSIName(missingSIName)
				s missingSIName = $o(MissingSIName(""))
			}
			 
		}
		
		if ($L($o(MissingTemplate("")))>0){
			s errData =  errData_$c(13,10)_"Missing Template: "
			s missingTemplate = $o(MissingTemplate(""))
			while (missingTemplate'=""){
				s errData = errData_missingTemplate_", "
				k MissingTemplate(missingTemplate)
				s missingTemplate = $o(MissingTemplate(""))
			}	 
		}
		
		if ($L($o(MissingUnitConversion("")))>0){
			s errData =  errData_$c(13,10)_"Missing UnitConversion: "
			s missingUnitConversion = $o(MissingUnitConversion(""))
			while (missingUnitConversion'=""){
				s errData = errData_missingUnitConversion_", "
				k MissingUnitConversion(missingUnitConversion)
				s missingUnitConversion = $o(MissingUnitConversion(""))
			}	 
		}
		
		if (devMode) {w !,errData}
		
		s errName =  $$GenerateErrorName^jxErrorReport(errCode)
		s Location = "jxResult2HL7^jxResult2HL7"
		s Stack = ""
		
		i ($L(errData)>0){s errData = """"_errData_""""}
		
		&sql(INSERT INTO MX.Error (Code, Data, Name, Location, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :dt, :rid, :bk))
.
		;&sql(UPDATE MX.Record SET Status='Failure', ProcessedDate=:dt WHERE ID = :rid)
		
	}
	;w !,hl7msg.OutputToString()
	s status= hl7msg.OutputToFile(outputsDir_$p(fileName,".",1,*-1)_"-output.hl7")
	h 1
	i (status=1 && devMode){w !,"OUTPUT HL7 COMPLETED: ",outputsDir_$p(fileName,".",1,*-1)_"-output.hl7"}
	
	; uncomment this for production
	;&sql(SELECT CLiProfileName INTO :CliProfileName FROM Setting WHERE ID=:setting)
	;if ($L(CliProfileName)=0){q 0 }
	
	; This is for testing, remove in production
	;s CliProfileName = "default"
	
	;s cmdflag = "/SHELL" 
	;s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",inProcessBucket_fileName, completedBucket, "--profile", CliProfileName)
	;s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv", outputsDir_$p(fileName,".",1,*-1)_".hl7", completedBucket, "--profile", CliProfileName)
	;d StripTables
	if (status = 1){ q outputsDir_$p(fileName,".",1,*-1)_"-output.hl7"}
	q 0
	
	
UpdateRBT(rid, testName, testValue, testUnit, testHiRange, testLoRange, testDate)
	#import MX
	
	&sql(SELECT ID INTO :rbt FROM ResultBloodTest WHERE Record->ID=:rid)
	if ($L(rbt)=0){q}
	&sql(SELECT COUNT(ID) INTO :objCount FROM ResultBloodTest_Tests WHERE ResultBloodTest=:rbt)
	s objxcount = +objCount
	s objxcount=objxcount+1
	s objx=##class(MX.ResultBloodTest).%OpenId(rbt)
	s objx1=##class(MX.ResultBloodTestValue).%New()
	s objx1.TestName= testName
	s objx1.Result=testValue
	s objx1.SIUnit=testUnit
	s objx1.LowRange=testLoRange
	s objx1.HighRange=testHiRange
	
	if ($L(testDate)>0){
		s testDate = $replace(testDate, "-","/")
		s testDateInternal = $zdateh(testDate, 4)
		//s objx1.TestDate = $zdate(testDateInternal, 1)
		//s objx1.TestDate = $zdateh(testDate,6,,,,,,,-1)
		s objx1.TestDate = $zdateh(testDate, 4)
		
		//database wants mm/dd/yyyy
	}
	
	
	d objx.Tests.SetAt(objx1,objxcount)
.
	s sts = objx.%Save()
.
	q	
	
ClearRBT(rid)
	#import MX
	&sql(SELECT ID INTO :rbt from MX.ResultBloodTest WHERE Record->ID=:rid)
	if ($L(rbt)=0){q}
	&sql(DELETE FROM MX.ResultBloodTest_Tests WHERE ResultBloodTest=:rbt)
	q
.
.
StripTablesAndCleanUp(rid)
	
	#import MX
	
	&sql(SELECT ID INTO :rbt From ResultBloodTest WHERE Record->ID=:rid)
		
	&sql(DELETE FROM ResultBloodTest_Tests WHERE ResultBloodTest = :rbt)
	&sql(DELETE FROM ResultBloodTest WHERE Record->ID=:rid)
	&sql(UPDATE Record SET BinaryData=NULL, OrgFile=NULL, OCR=NULL WHERE ID = :rid)
	q
	
.

martin6^MAC^^67171,32191.5266304^0
martin6		;testing for utilTemplateImport
.
Match	; Load test and unit from csv and find match in MX.DiagnosticTest
	s Q=",", K=$c(9)
	s i=1
	s cnt=0	
	s fnam="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\file for testing\Medicia\Template.csv"
	s %dev="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\file for testing\Medicia\MEDICIA Client Template.csv"	; NOTE: use TAB delimited to avoid the comma problem with CSV
	s $ztrap="EndMatch^martin6"
	o %dev
Match1
	u %dev r rec
	s dt=$zdate($h,3,,4)
	s d1=$p(rec,Q,1),d2=$p(rec,Q,2)
	s d1=$replace(d1,"	","")
	g:d1="" Match1
	
	s arr(cnt,"Name")=d1
	s arr(cnt,"Unit")=d2
	;u 0 w d1,"  and ",d2,!
	&sql(SELECT SIName INTO :jxName FROM DiagnosticTest WHERE Name=:d1 or SIName=:d1)  ;SIName=jxName, Name= external name
	if d2'="" &sql(SELECT SIName INTO :jxUnit FROM SIUnit WHERE Name=:d2 OR SIName=:d2)
	
	i jxName'="" s arr(cnt,"jxName")=jxName
	e  s arr(cnt,"jxName")=""
	
	i jxUnit'="" s arr(cnt,"jxUnit")=jxUnit
	e  s arr(cnt,"jxUnit")=""
	
	s cnt=cnt+1
	g Match1
EndMatch
	c %dev
	s $ztrap=""
	;u 0 w $ZERROR,!,cnt," records processed",!
	o fnam:"wsn"
	;u fnam w "NO	CName	CUnit	jxName",!
	u fnam w "NO,CName,Cunit,jxName",!
	f i=1:1:$o(arr(""),-1) {
		u fnam
		;w i,"	",arr(i,"Name"),"	",arr(i,"Unit"),"	",arr(i,"jxName"),!
		w i,",",arr(i,"Name"),",",arr(i,"Unit"),",",arr(i,"jxName"),!
		;if arr(i,"jxName")="" w i,", ",arr(i,"Name"),", ",arr(i,"Unit")," Name missing" ,!
		;if arr(i,"jxUnit")="" w i,", ",arr(i,"Name"),", ",arr(i,"Unit"),",  ",arr(i,"jxName")," Unit missing" ,!
		}
	c fnam
	q
.
.
Import 	; Insert new template into MX.Template after matching is done and all missing TestNames are added to Data Dictionary
		; NOTE: use TAB delimited to avoid the comma problem with CSV
	#Import MX
	n bucket,setting,uid,bk,bkfd,bucket,cName,cUnit,jxName,dt,fnam,tName
	s Q=$c(9)	;tab
	s uid=0		; ***change UserId***
	s tName=""	; ***change Template name***
	
	&sql(SELECT Setting INTO :setting FROM "User" WHERE ID=:uid)
	&sql(SELECT Buckets_Name,Buckets_Folder INTO :bk,:bkfd FROM Setting_Buckets WHERE Setting=:setting)
	
	if bkfd'["-" s bucket=bk_"/"_bkfd
	e  s bucket=bk
	;w bucket,", ",setting,!
	s fnam="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\file for testing\Medicia\Template.txt"
	s $ztrap="EndImport^martin6"
	o fnam
Import1
	u fnam r rec
	s dt=$zdatetime($h,3)
	s cName=$p(rec,Q,2),cUnit=$p(rec,Q,3),jxName=$p(rec,Q,4)
	g:d1="" Import1
	
	;if jxName="" u 0 w $p(rec,Q,1),"	",cName,"	",cUnit,"	",jxName,!
	&sql(INSERT INTO "Template" (BucketName,CreatedDate,DiagnosticTest,Name,Setting,UnitName,ModifiedDate,TemplateName) 
		 VALUES (:bucket,:dt,:jxName,:cName,:setting,:cUnit,:dt,:tName))
	if SQLCODE=0 u 0 w "Insert!",!	 
	g Import1
EndImport
	c fnam
	s $ztrap=""
	q

martin7^MAC^^67117,19355.2091379^0
martin7
	s userid=""
	&sql(DECLARE cBGTask1 CURSOR FOR
		 SELECT Profile
		 INTO :userid 
		 FROM MX.Subscription 
		 WHERE Subscription=8
	)
	&sql(OPEN cBGTask1)
	&sql(FETCH cBGTask1)
	WHILE SQLCODE=0{
		s (r1,r2,r3)="" 
		&sql(SELECT RemainingOCRUnit,RemainingTransformationUnit,EndDate 
			 INTO :r1,:r2,:r3 FROM MX.Subscription WHERE Profile=:userid AND Type='Transformation')
		i r3<=+$h!(r1+r2>0) d ^trialBGProcessing
		&sql(FETCH cBGTask1)
	}
	&sql(CLOSE cBGTask1)
	
	q
	
Clone	; Clone template to trialTemplate
.
	d INIT^CSP999
	#import MX 
	;&sql(DELETE FROM Template WHERE Setting=6)
	&sql(DECLARE cClone1 CURSOR FOR
		SELECT BucketName,CreatedDate,DiagnosticTest,Name,Setting,UnitName 
		INTO :r1,:r2,:r3,:r4,:r5,:r6
		FROM Template
		WHERE BucketName='jondaffr2' 
	)
	&sql(OPEN cClone1)
	&sql(FETCH cClone1)
	WHILE SQLCODE=0{
		s setting=15
		s bucket="jondaffr2"
		&sql(INSERT INTO "TrialTemplate" (BucketName,TemplateName,CreatedDate,ModifiedDate,DiagnosticTest,Name,UnitName) VALUES (:bucket,:bucket,:r2,:r2,:r3,:r4,:r6))
		/*
		s bucket="jonda-bucket-development/Completed",setting=6
		&sql(INSERT INTO "Template" (BucketName,CreatedDate,ModifiedDate,DiagnosticTest,Name,Setting,UnitName) VALUES (:bucket,:r2,:r2,:r3,:r4,:setting,:r6))
		s bucket="jonda-bucket-development/Failure",setting=6
		&sql(INSERT INTO "Template" (BucketName,CreatedDate,ModifiedDate,DiagnosticTest,Name,Setting,UnitName) VALUES (:bucket,:r2,:r2,:r3,:r4,:setting,:r6))
		s bucket="jonda-bucket-development/In-Process",setting=6
		&sql(INSERT INTO "Template" (BucketName,CreatedDate,ModifiedDate,DiagnosticTest,Name,Setting,UnitName) VALUES (:bucket,:r2,:r2,:r3,:r4,:setting,:r6))
		*/
		&sql(FETCH cClone1)
	}
	&sql(CLOSE cClone1)
	q	
	
	
CreateBuckets
	s cName="Jonda Health"
	s setting=21
	s bname="jondaffr2"
	s folder="jondax-trial/"_cName
	s pname="default"
	s type="Transformation"
	
	s objx=##class(MX.Setting).%OpenId(setting)
	if (objx.Buckets '= ""){
		;s count = objx.Buckets.Count()
		&sql(SELECT TOP 1 element_key INTO :count FROM Setting_Buckets WHERE Setting=:setting ORDER BY element_key DESC)
	}else {s count = 0 }
	s objx1=##class(MX.Buckets).%New()
.
	s objx1.Name= bname
	s objx1.Folder = folder
	s objx1.CliProfileName = pname
	s objx1.Type = type	
	s dt = $zdatetime($h,3)
	s objx1.CreatedDate = dt
	d objx.Buckets.SetAt(objx1,+count+1)
	
	d objx.%Save()
	q
CreateS3Buckets
	s sts1 = ##class(python.s3Utils).createFolder(pname,bname,folder_"/")
	s sts2 = ##class(python.s3Utils).createFolder(pname,bname,folder_"/Failure/")
	s sts3 = ##class(python.s3Utils).createFolder(pname,bname,folder_"/Completed/")
	s sts4 = ##class(python.s3Utils).createFolder(pname,bname,folder_"/Staging/")
	s sts5 = ##class(python.s3Utils).createFolder(pname,bname,folder_"/In-Process/")

martin8^MAC^^67198,18673.839638^0
Test
	/*
	s Q=",",date=0
	s rec="BMI (Body Mass Index) ,22.5 kg/m2 ,185 ,24.9 ,In range ,"
	if date=0{
		f i2=1:1:$l(rec,Q) {
		i date'=0 q
		s date =$$checkDate^martin8($Piece(rec,Q,i2)) 
		i date'=0 d
		. w "Date : ",$Piece(rec,Q,i2),!
		
		}
	}
	*/
	write "hello",!
	set variable=12
	w variable,!
	q
.
WriteSkipID
	#Import MX
	s i=1,count=0
	&sql(DECLARE C1 CURSOR FOR
		 SELECT ID INTO :id 
		 FROM DiagnosticTest 
		 Order By ID 
		 )
	&sql(OPEN C1)	 	
	&sql(FETCH C1)
	WHILE SQLCODE=0
	{	if i<7000 d
		.;w i,", ",id,!
		.if id'=i s count=count+1 w count,"  Skipped : ",i," ; Jumped to : ",id,! s i=id+1 
		.e  s i=i+1
	&sql(FETCH C1)	
		 }
	&sql(CLOSE C1)	 
	q
.
AICLAUDE2text
	s fcount=1,row=0
	s count=$g(^AICLAUDE("Paddle"_fcount,"rowCount"))
	for i=0:1:(count-1) {
		s row=row+1
		w ^AICLAUDE("Paddle"_fcount,row,"row"_row),!
		}		
.
 q
.
CleanText
	s count=0
	s dir="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\file for testing\Test_Output\"
	set dir = ##class(%File).NormalizeDirectory(dir)
	set file=$ZSEARCH(dir_"*.txt")
	while file'="" {
		;d CleanCSV(file)
		s count=count+1
		d ##class(python.Claude).AiCompletion(file, "Paddle"_count)
	set file=$ZSEARCH("")
	}	
	
 q
.
CleanCSV(fnam)
	;s fnam=csvName
	new content,n,rec,i,arr,arri,x,col,date,j
    #import MX
    ;Set fnam="D:\#Data\#aws\Textract\LT1\LT1all.txt"
    Kill content
    Set n=1
    Set $ztrap="CleanCSV2^martin8"
    set content =""
    s Q=$c(9)
	s date=0
	s j=1
.
    Open fnam:"rs"
    u 0 w fnam,!
CleanCSV1
   // Read records from the file
    Use fnam Read rec
    If rec="" Goto CleanCSV1
    s i=$o(arr(""),-1),i=i+1
    s arr(i)=rec
    g CleanCSV1
CleanCSV2
	c fnam
    Set $ztrap=""
	s arri=""
	;d CheckCol(2)
CleanCSV2a
	s arri=$o(arr(arri)) g:arri="" END	
	n isTest ;  ,r1a,r0,IsMatch,tCol1
	
	s rec=arr(arri)
	if n=1,date=0{
		f i2=1:1:$l(rec,Q) {
		i date'=0 q
		s date =$$checkDate^martin8($Piece(rec,Q,i2)) 
		i date'=0 d
		.Set content(n)=rec 
		.s ^Textract(fnam,n)=rec 
		.s n=n+1 q
		}
	}
	f i1=2:1:$l(rec,Q) d
	.s $p(rec,Q,i1)=$replace($replace($p(rec,Q,i1),"[",""),"]","")
	;.s $p(rec,Q,i1)=$replace($p(rec,Q,i1)," ","")
    If $Piece(rec,Q,1)="" Goto CleanCSV2a  ; no test name
    ;If ($Piece(rec,Q,2)="")&($Piece(rec,Q,3)="") Goto CleanCSV2a  ; no result
    If ($Piece(rec,Q,3)="")&($Piece(rec,Q,4)="")&($Piece(rec,Q,5)="")&($Piece(rec,Q,6)="") Goto CleanCSV2a  ;
 
    f i=1:1:$l(rec,Q) d
    .i $e($p(rec,Q,i),$l($p(rec,Q,i)))=" " s $p(rec,Q,i)=$e($p(rec,Q,i),1,$l($p(rec,Q,i))-1) ;remove trailing space
    .s $p(rec,Q,i)=$replace($p(rec,Q,i),"|","l")
    .s $p(rec,Q,i)=$replace($p(rec,Q,i),",",".")
    .s $p(rec,Q,i)=$replace($p(rec,Q,i)," / ","/")
    .i $e($p(rec,Q,i),$l($p(rec,Q,i)))="_" s $p(rec,Q,i)=$p(rec,Q,i)_"l"  ;for "g_"
    .s @("tCol"_i)=$Piece(rec,Q,i) ;for ^Textract Global
    .i $p(rec,Q,i)'["""" s $p(rec,Q,i)=""""_$p(rec,Q,i)_""""  ;adding quote for each piece
	s ^Textract(fnam,n)=rec
	
		
    ;added by Martin 12/03/2024 ;getting textract total rows of Biomarkers
	 
	i ($zconvert(tCol1,"l")="test")!($zconvert(tCol1,"l")="analyte")!($zconvert(tCol1,"l")["name") Goto CleanCSV2a
	s x=$$GetSIName^WSP999(tCol1)
	i x="" {
	 	s IsMatch=0,r1a=tCol1
		WHILE IsMatch=0&($l(r1a)'=0){
			s tname="" &sql(SELECT ID INTO :tname FROM DiagnosticTest WHERE Name=:r1a OR SIName=:r1a AND IsNull(DeletedDate,'')<>'')
			i tname'="" s IsMatch=1 d setComparison(r1a) ;s matchTest=r1a  ;s $p(rec,Q,1)=""""_r1a_""""  
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
	}else {d setComparison(x)}
	;added by Martin 12/03/2024 END 
	
	Set content(n)=rec
    Set n=n+1
    if '$d(^Textract(fnam,j-1,"BB")) s ^Textract(fnam,"rowCount")=0
    Goto CleanCSV2a
setComparison(d1)   ;added by Martin
	s text=$replace(rec,"""","") 
	s text=$replace(text,Q,",") 
	s tCol1=d1  ;$p(text,",",1)
	s text=$replace(text," ","")
	;s $p(text,",",1)=tCol1
	s ^Textract(fnam,j,"BB")=text 
	s ^Textract(fnam,"rowCount")=j 
	s j=j+1 
	q
Ztrap
END
	s $ztrap=""
    use 0
	close fnam
	; overwrite the original CSV file with content(n)
	o fnam:"wns"
	f i=1:1:$o(content(""),-1) d
	. s content(i)=$$Replace^utilUmlaut(content(i))
	. u fnam w $replace(content(i),Q,","),!
	c fnam
 	u 0
	q 
CheckCol(col)
	n errcount,totcount
	s errcount=0,totcount=0
CheckCol1
	s arri=$o(arr(arri)) g:arri="" CheckColEnd
	s rec=arr(arri)
	s rec=$p(rec,Q,col)
	s rec=$replace(rec," ","")
	i col=2 d	; test if col 2 = value or unit
	. s totcount=totcount+1
	. i rec["<"!(rec[">")!(rec["=") q		; assume this is a value
	. i rec="" s errcount=errcount+1 q
	. i $e(rec,1,1)'=0,+rec'=0 q	; assume this is a value
	. s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:rec OR SIName=:rec)
	. i x'="" q		; this is  a unit
	. s errcount=errcount+1
	g CheckCol1
CheckColEnd
	q:totcount=0!(errcount=0)
	i $p((errcount/totcount*100),".",1)<80 q	; cutoff for error
	
	q
	
checkDate(x) 
	;s $ztrap="DW^martin8"
	s x=$zconvert(x,"l")
	i x["december" s x=$replace(x,"december" ,"12")
	s dFlag=0
	for dft=1:1:9 
		{
			if $zdateh(x,dft,,2,,,,,"0") s dFlag=1 q  
			if $zdateh(x,dft,,4,,,,,"0") s dFlag=1 q 
		}
	if $d(dFlag),dFlag=1 quit dft
	for dft=15:1:21 
		{
			if $zdateh(x,dft,,2,,,,,"0") s dFlag=1 q
			if $zdateh(x,dft,,4,,,,,"0") s dFlag=1 q	
		}
	
	if $d(dFlag),dFlag=1 quit dft
	;i $g(martin)'="" u 0 w 2,! b 
	s dft=13	
	if $zdateh(x,dft,,2,,,,,"0") q dft
	if $zdateh(x,dft,,4,,,,,"0") q dft
		
	quit 0 
DW	
	s $ztrap=""
	q
	u 0
	w $ZERROR,!
	w 1
	;b
	q
.

martin9^MAC^^67270,23383.0549336^0
martin9
	s stagingBucket="jondaffr2/4321-qa-jondaffr/"
	s CliProfileName="default"
	s cmdflag="/SHELL/STDOUT=""c:\intersystems\cache\jondax\JondaX\jondaffr2\4321-qa-jondaffr\stdOutputs\log.txt""/STDERR=""c:\intersystems\cache\jondax\JondaX\jondaffr2\4321-qa-jondaffr\stdOutputs\err.txt"""
	;w cmdflag
	s status = $ZF(-100, cmdflag, "aws","s3","ls", stagingBucket, "--profile",  CliProfileName)
	w status
	q
DeleteGlobals
	for i=6:1:39 {k ^AIGEMINI(4005,i)}
 q
calculate
	set num1=d1
	s num2=d2, operation=d3 //'add'
	;w num1,!,num2,!,operation,!
.
	;&js<alert(`#(num1)#`)>	//embedded js
.
	s res=num1+num2
.
	&js<document.getElementById('result').innerHTML="Result: "+`#(res)#`> 
 q
.
.
OCR2Table
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = "C:\InterSystems\Cache\JondaX\JondaX\jondatesting\OD001037.png.txt"
	d fs.Rewind() //put the cursor back to the top file
	s str = fs.Read($$$MaxLocalLength)
	
	s jsonObj = {}.%FromJSON(str)
	
	s Blocks = jsonObj.%Get("Blocks")
	s itr = Blocks.%GetIterator()
	
	while itr.%GetNext(.key,.val){
		s Block = Blocks.%Get(key)
		s BlockType = Block.BlockType
		if (BlockType = "WORD"){
			s word = Block.Text
			s word = $TRANSLATE(word, """()", "")
			w !,word
			/*
			s obj=##class(MX.Record).%OpenId(rid)
			d obj.OCR.Insert(word)
			d obj.%Save()
			s obj=""
			*/
		}
	}
	q
	
	
	
CleanCSV(fnam)
	;s fnam=csvName
	new content,n,rec,i,arr,arri,x,col,date,j
    #import MX
    ;Set fnam="D:\#Data\#aws\Textract\LT1\LT1all.txt"
    Kill content
    Set n=1
    Set $ztrap="CleanCSV2^martin9"
    set content =""
    s Q=$c(9)
	s date=0
	s j=1
.
    Open fnam:"rs"
    u 0 w fnam,!
    
CleanCSV1
   // Read records from the file
    Use fnam Read rec
    If rec="" Goto CleanCSV1
    s i=$o(arr(""),-1),i=i+1
    s arr(i)=rec
    g CleanCSV1
CleanCSV2
	c fnam
    Set $ztrap=""
	s arri=""
	;d CheckCol(2)
CleanCSV2a
	s arri=$o(arr(arri)) g:arri="" END	
	n isTest ;  ,r1a,r0,IsMatch,tCol1
	
	s rec=arr(arri)
	if n=1,date=0{
		f i2=1:1:$l(rec,Q) {
		i date'=0 q
		s date =$$checkDate^utilAWS($Piece(rec,Q,i2)) 
		i date'=0 d
		.Set content(n)=rec 
		.s ^Textract(fnam,n)=rec 
		.s n=n+1 q
		}
	}
.
	;.s $p(rec,Q,i1)=$replace($p(rec,Q,i1)," ","")
    If $Piece(rec,Q,1)="" Goto CleanCSV2a  ; no test name
    ;If ($Piece(rec,Q,2)="")&($Piece(rec,Q,3)="") Goto CleanCSV2a  ; no result
    ;If ($Piece(rec,Q,3)="")&($Piece(rec,Q,4)="")&($Piece(rec,Q,5)="")&($Piece(rec,Q,6)="") Goto CleanCSV2a  ;
    If ($Piece(rec,Q,4)="")&($Piece(rec,Q,5)="")&($Piece(rec,Q,6)="") Goto CleanCSV2a  ;
 
    f i=1:1:$l(rec,Q) d
    .s $p(rec,Q,i)=$ZSTRIP($p(rec,Q,i),"<>W") ;remove trailing and leading white space
    .;i $e($p(rec,Q,i),$l($p(rec,Q,i)))=" " s $p(rec,Q,i)=$e($p(rec,Q,i),1,$l($p(rec,Q,i))-1) ;remove trailing space
    .s $p(rec,Q,i)=$replace($p(rec,Q,i),"  "," ") ; double space into single space
    .s $p(rec,Q,i)=$replace($p(rec,Q,i),"|","l")
    .s $p(rec,Q,i)=$replace($p(rec,Q,i),",",".")
    .s $p(rec,Q,i)=$replace($p(rec,Q,i)," / ","/")
    .i i>1 d
	.. s $p(rec,Q,i)=$replace($replace($p(rec,Q,i),"[",""),"]","")
	.. if $p(rec,Q,i)[" " s $p(rec,Q,i)= $replace($p(rec,Q,i)," ",Q)
	.. s $p(rec,Q,i)=$replace($p(rec,Q,i),"-I","-l")
	.. s $p(rec,Q,i)=$replace($p(rec,Q,i),"_I","_l")
	.. s $p(rec,Q,i)=$replace($p(rec,Q,i),"_1","_l")
	..; s $p(rec,Q,i)=$replace($p(rec,Q,i),"-!","_l")
	.. ;s $p(rec,Q,i)=$replace($p(rec,Q,i),"_!","_l")
    .i $e($p(rec,Q,i),$l($p(rec,Q,i)))="_" s $p(rec,Q,i)=$p(rec,Q,i)_"l"  ;for "g_"
    .i $e($p(rec,Q,i),$l($p(rec,Q,i)))="!" s $p(rec,Q,i)=$replace($p(rec,Q,i),"!","l")
    .s @("tCol"_i)=$Piece(rec,Q,i) ;for ^Textract Global
    .i $p(rec,Q,i)'["""" s $p(rec,Q,i)=""""_$p(rec,Q,i)_""""  ;adding quote for each piece
	s ^Textract(fnam,n)=rec
	
		
    ;added by Martin 12/03/2024 ;getting textract total rows of Biomarkers
	 
	i ($zconvert(tCol1,"l")="test")!($zconvert(tCol1,"l")="analyte")!($zconvert(tCol1,"l")["name") Goto CleanCSV2a
	s x=$$GetSIName^WSP999(tCol1)
	i x="" {
	 	s IsMatch=0,r1a=tCol1
		WHILE IsMatch=0&($l(r1a)'=0){
			s tname="" &sql(SELECT ID INTO :tname FROM DiagnosticTest WHERE Name=:r1a OR SIName=:r1a AND IsNull(DeletedDate,'')<>'')
			i tname'="" s IsMatch=1 d setComparison(r1a) ;s matchTest=r1a  ;s $p(rec,Q,1)=""""_r1a_""""  
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
	}else {d setComparison(x)}
	;added by Martin 12/03/2024 END 
	
	Set content(n)=rec
    Set n=n+1
    if '$d(^Textract(fnam,j-1,"BB")) s ^Textract(fnam,"rowCount")=0
    Goto CleanCSV2a
setComparison(d1)   ;added by Martin
	s text=$replace(rec,"""","") 
	s text=$replace(text,Q,",") 
	s tCol1=d1  ;$p(text,",",1)
	s text=$replace(text," ","")
	;s $p(text,",",1)=tCol1
	s ^Textract(fnam,j,"BB")=text 
	s ^Textract(fnam,"rowCount")=j 
	s j=j+1 
	q
Ztrap
END
	s $ztrap=""
    use 0
	close fnam
	; overwrite the original CSV file with content(n)
	o fnam:"wns"
	f i=1:1:$o(content(""),-1) d
	. s content(i)=$$Replace^utilUmlaut(content(i))
	. u fnam w $replace(content(i),Q,","),!
	c fnam
 	u 0
	q 	
	
	
	
	

matinUnitTesting^MAC^^67156,46109.7068949^0
UnitTesting
.
PIINotification
	;s rid=3474
	&sql(SELECT Profile->CompanyName, Profile->Setting->ID, OrgFile, BucketName, ReportDate INTO :CompanyName, :setting, :fileName, :bk, :reportDate FROM Record WHERE ID=:rid)
	
	if (bk["/"){
		s bksys = $replace(bk,"/","\")
	} 
	else { s bksys = bk}
	
	s outputsDir = "C:\InterSystems\Cache\JondaX\"_CompanyName_"\"_bksys_"\outputs\"
	s dt = $zdatetime($h, 3)
	
	s errCode = "JX5001" ;err code 
	s errData = fileName_" in "_bk_" contains Personal Identifiable Information. "
	
	s errName =  $$GenerateErrorName^jxErrorReport(errCode)
	s Location = "jxResult2HL7^jxResult2HL7"
	s Stack = ""
	
	i ($L(errData)>0){s errData = """"_errData_""""}
	
	w "Error Code : ",errCode,!
	w "Error Name : ",errName,!
	w "Location : ",Location,!
	w "Data : ",errData,!
	
	&sql(INSERT INTO MX.Error (Code, Data, Name, Location, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :dt, :rid, :bk))
	s status= $$GenerateErrorReportByRid^jxErrorReport(rid,2)
	i (status '= 0)
	{
		w "Done",!
		w status,!	
	}
	q
	
.
		

python.DW15^MAC^^66894,19723.6188262^0
DW15	; check MX.DiagnosticTest for UMLAUT characters and convert
	#import MX
	s Q=$c(9)
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID,SIName,Name
		INTO :r1,:r2,:r3
		FROM DiagnosticTest
		ORDER BY SIName
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	WHILE SQLCODE=0{
		s err=0
		f i=1:1:$o(^UMLAUT(""),-1) s rec=^(i),umlaut=$p(rec,Q,1) i r2[umlaut!(r3[umlaut) w r1," - ",r2," - ",r3,!
		
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	

python.utilAWS^MAC^^66761,25149.0621371^0
utilAWS
TextractTables(document)
	; Convert PDF & Images to Textract Tables 
	; pass in document as a parameter. document is the name of the file in AWS S3 bucket  (e.g. lipids.pdf)
	n jobId,outputFileName,filename,status,csvName
	#import MX
	d INIT^CSP999
	s document = "Lipids.pdf" // name of document in bucket
	s jobId = ##class(python.textractUtils).SDTDTables(document)
	
	s outputFileName = "testdoc"	
	s filename = "C:\data_transform\AI\"_outputFileName  // path to file name output without the file extension
	d ##class(%File).Delete(filename_".csv")
	
	s status = ##class(python.textractUtils).GenerateCSVFromJobID(jobId, filename)
	
	if (status = 0){
		w !,"ERROR"
		q
	} else {
		w !,"Processing CSV."
		s csvName = filename_".csv"
		d ##class(python.textractUtils).ProcessCSV(csvName)
	}
	q	
	
	

redacting^MAC^^66912,31017.7997239^0
redacting(FName)
	
	//s docDir="C:\InterSystems\Cache\JondaX\jondaffr2\redact\"
	//s outputPath="C:\InterSystems\Cache\CSP\jondax\redactDemo\"
	//s textractBucket = "s3://jondatesting"
	
	s filename=$PIECE(FName, ".", 1)
	s fExt=  $PIECE(FName, ".", $LENGTH(FName, "."))
	s i=1
	
	;s %session.Data("jxRedactRecord")=FName
	;s %session.Data("jxRedactRecord","fext")=fExt
	s ^jxRedact(FName)=FName
	s ^jxRedact(FName,"Uploaded")=$h
.
	w !,!,"Redaction Started....."
	s ext=$zconvert(fExt,"U")
	if (ext="PDF") g PDF
	if (ext'="PDF") g IMAGE
PDF		
	d ##class(%File).CreateDirectory(outputsDir_filename)  ;outputPath
	; split PDF into per-page png
	;d ##class(python.pdfhandler).pdf2png(docDir_filename_"."_fExt,docDir_filename_"\"_filename)
	s cmd="win2pdfd pdf2png """_docDir_filename_"."_fExt_""" """_outputsDir_"\"_filename_"\"_filename_".png"" 0"
	s x=$zf(-1,cmd_" && exit")
		
	set dir = ##class(%File).NormalizeDirectory(outputsDir_filename_"\")
	
	set file=$ZSEARCH(dir_"*.png")
	While file'="" {
			;Write !,"File found: ", file, !
.
			d deskew		
			d ##class(python.RedactPii).analyzeImg(file)
			/* for analysis_document 
			s buc=$zf(-1,"aws s3 cp """_file_""" "_textractBucket_" && exit")
			s ^M("1","buc")=buc
			s ^M("1","file")=filename_"."_i_".png"
			s jID = ##class(python.RedactPii).SDTDForms(filename_"."_i_".png")
			s ^M=jID 
			s ^M("1","file")=file
			d ##class(python.RedactPii).GenerateCSVFromJobID(jID,file,"")  //(jID,docDir_filename,fExt)
			*/
			Set file = $ZSEARCH("")
			s i=+1
		}
	
	if i=1
	{
		Set cmd = "win2pdfd png2pdf """_dir_filename_".png"" """_outputsDir_filename_"-redacted.pdf"" "
		s y=$zf(-1,cmd_" && exit")
		;s ^done=y
	}
	d ##class(python.pdfhandler).DePiipng2pdf(dir,outputsDir_filename_"-redacted."_fExt,filename)
	;s ^done=1
	w !,!, "File is Redacted!",!
	d ##class(%File).RemoveDirectoryTree(dir)
.
	q
				
IMAGE
	s file = docDir_filename_"."_fExt
	if (ext="WEBP")!(ext="HEIC")!(ext="AVIF"){ ; change format to png
		s cmd="mogrify -format png "_file
		s x=$zf(-1,cmd_" && exit")	
		d ##class(%File).Delete(file)
		s fExt = "png"
		&sql(Update MX.Redact SET fExt=:fExt WHERE id=:rid)	
		s file = docDir_filename_"."_fExt
		}		
	s output= outputsDir_filename_"-redacted."_fExt
	d deskew
	Set cmd = "move """_file_""" """_output_""" "
	Set x = $zf(-1, cmd_" && exit")
	;s ^done= ##class(python.RedactPii).analyzeImg(outputPath_filename_"-redacted."_fExt)
	d ##class(python.RedactPii).analyzeImg(output)
	w !,!, "File is Redacted!",!
	;s ^done=1
	
.
	;d ##class(python.RedactPii).GenerateCSVFromJobID(jID,docDir_filename,fExt)
	//s jID = ##class(python.RedactPii).SDTDForms(filename_"."_fExt)
	//d ##class(python.RedactPii).GenerateCSVFromJobID(jID,docDir_filename_"."_fExt)
	q
	
	
.
deskew
	s scale=100
	s cmd="convert """_file_""" -deskew 40% """_file_""""
	s x=$zf(-1,cmd_" && exit")
	s fsize=##class(%File).GetFileSize(file)
	i fsize>9999999 d		; 10Mb limit for AWS
	. s scale=$p(100-(fsize/99999999*100),".",1)-1
	. s cmd="convert "_file_" -scale "_scale_"% -deskew 40% "_file
	. s x=$zf(-1,cmd_" && exit")
	q
	
ConvertResults ;use in DEMODePii.csp
	
	s Fext=%session.Data("jxRedactUploadRecord","fext")
	s x=$PIECE(%session.Data("jxRedactUploadRecord"), ".", 1)
	s orgFileName=%session.Data("jxRedactUploadRecord","fext")
	s x="../redactDemo/"_x
	&js<fileName='#(x)#',formalFileExt = '#(orgFileName)#', fExt='#(Fext)#'> 
	q	
.
.
	
		

trialBGProcessing^MAC^^67236,19832.6447928^0
trialBGProcessing
	; call from ^trialBGTask
	s devMode = 1
	d INIT1^WSP999	; background task, so no %session or usernames
	#import MX
	i devMode=1 w !,"JondaX Trial TRANSFORMING..."
	
	; loop through "User" to process multiple users
	; loop  is in ^trialBGTask
	;s userid = 1 ; 1 for Biolytica, 9 for JondaX
	
	k buckets k bucketIds d GetBuckets	; get a list of Biolytica AWS buckets to process and set to array buckets
	q:'$d(buckets)
	s bkRoot=""
	
	s FileCounter=0
	s dt = $zdatetime($h,3)
Step1
.
	; check subscription
	s TransSubId = $$GetTransSubscription^trialSubscriptionUtils(userid)
	if (TransSubId = 0 ){
		i (devMode) { w "No subscription. Quitting..."}
		q
	}
	
	s downloadLimit = 10
.
	s bkRoot=$o(buckets(bkRoot)) 
.
GetNextFolder
.
	if (bkRoot = ""){
		i (devMode){w !,"NO MORE BUCKET TO PROCESS. QUITTING",!}
		if ($zconvert(CompanyName,"l")'["jonda"){
			i FileCounter>0 d SendReviewMailTrial^AutoMail if (devMode) {w !,"sent review email to the reviewer team.",!}	
		}
		
		q
	}	
	s CompanyName=$replace(CompanyName," ","")	
	i (devMode){w !,"current Bucket: ",bkRoot,!}
	s bucketFolder = $o(buckets(bkRoot,""))
	i (devMode){w !,"current Folder: ",bucketFolder,!}
	s CliProfileName = $o(buckets(bkRoot,bucketFolder,""))
		
	if (bucketFolder = "-"){
		s bk = bkRoot
		s bksys = bk
	} else {
		s bk = bkRoot_"/"_bucketFolder
		s bksys = bkRoot_"\"_$replace(bucketFolder,"/","\")
	}	
		
	s systemDir = "c:\intersystems\cache\jondax-trial\"
	s localDir = "C:\InterSystems\Cache\jondax-trial\adhoc\"_userid_"\"
	s companyDir = systemDir_$replace(CompanyName," ","")_"\"
	d CreateDir(companyDir)
	if (bucketFolder '= "-"){
		d CreateDir(companyDir_"\"_bkRoot_"\")
	}
	if (bucketFolder["/"){
		s subBucketFolder= $p(bucketFolder,"/",1)
		d CreateDir(companyDir_"\"_bkRoot_"\"_subBucketFolder)
	}
	s devDir = systemDir_$replace(CompanyName," ","")_"\"_bksys_"\"
	s stdDir = systemDir_$replace(CompanyName," ","")_"\"_bksys_"\stdOutputs\"
	s docDir = systemDir_$replace(CompanyName," ","")_"\"_bksys_"\documents\"
	s outputsDir = systemDir_$replace(CompanyName," ","")_"\"_bksys_"\outputs\"
	s resultsDir = systemDir_$replace(CompanyName," ","")_"\"_bksys_"\results\"
	
	
	d CreateDir(devDir)
	d CreateDir(stdDir)
	d CreateDir(docDir)
	d CreateDir(outputsDir)
	d CreateDir(resultsDir)
	
	s stagingBucket = "s3://"_bk_"/Staging/"
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"
	
	s textractBucketName = "jondaffr"
	;s textractBucketFolder ="jondax-trial/"
	s textractBucket = "s3://"_textractBucketName_"/"
		
	
Step2
.
	try{	
		s stdoutDir = stdDir_"log.txt"
		s stderrDir = stdDir_"err.txt" 
	
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_"""" 
		s status = $ZF(-100, cmdflag, "aws","s3","ls", stagingBucket, "--profile",  CliProfileName)
		
		i (status = 0) { ; remove ghost files in s3 bucket
			
			s str = $$ReadFile(stdoutDir)
			s secLine = $p(str, $c(13,10), 2)
			if (secLine '= ""){
				w "Removing ghost files",!
				s status = $ZF(-100, cmdflag, "aws", "s3", "rm", stagingBucket, "--profile", CliProfileName)}
		} 
		
		s numOfDownloads = 0
		
Step2GetDocuments
		
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_"""" 
		s status = $ZF(-100, cmdflag, "aws","s3","ls", stagingBucket , "--profile", CliProfileName)
.
		s fileName = ""
		s fileName = $$ExtractFileNameFromBucketLog(stdoutDir)	
		
		i (devMode) {w !,"Number of downloads = ", numOfDownloads}
		
		i ((fileName = "") ! (numOfDownloads = downloadLimit)){ ;empty bucket returns as error
			i (devMode & (fileName = "")){w !,"EMPTY BUCKET"}	
			
			; recreating staging folder regardless of it exists or not
			i (fileName = "") {
				if (bucketFolder = "-"){s stagingFolder = "Staging/"} else {s stagingFolder = bucketFolder_"/Staging/"}
				s status = $ZF(-100, cmdflag, "aws","s3api","put-object", "--bucket" , bkRoot, "--key", stagingFolder, "--profile", CliProfileName)
			}
			
			;g Step5
			g SubscriptionCheck
		}
		
		if (devMode){w !,"current file name from bucket: ", fileName}
		
		;s tempFile = $$ATTNAME^WSP999()
		
		g Step3PdfCheck
.
Step2InProgress	
		; copy file to dev env
		
		s fileExt = $p(fileName,".",*)
		&sql(SELECT ID,TempFile,fExt,OutputFormat INTO :rid,:tempFile,:fileExt,:outputFormat FROM Record WHERE OrgFile=:fileName AND Status='Staging' AND Profile=:userid AND BucketName=:bk AND IsTrial=1)
		if outputFormat="" {
			w !,"No Output Format!" 
			w !,"Moving file to Failure"
			&sql(UPDATE Record SET DeletedDate=:dt,Status='Failure' WHERE ID=:rid)
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv", stagingBucket_fileName, failureBucket, "--profile", CliProfileName)
			i (status '= 0) {
				s errData = $$ReadFile(stderrDir)
				s errCode = "JX2006"
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step2InProgress^trialBGProcessing",errData)
			}
		g Step2GetDocuments			
		}
		
		/*
		s status = $ZF(-100, cmdflag, "aws", "s3", "cp", stagingBucket_fileName, docDir_tempFile_"."_fileExt, "--profile", CliProfileName)		
		
		if (status '= 0){
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLIError", "JX2006","Step2InProgress^trialBGProcessing",errData)
		}*/
		
		s status= ##class(%File).CopyFile(localDir_tempFile_"."_fileExt,docDir_tempFile_"."_fileExt)
		;To Do : copy orgfile to "C:\InterSystems\Cache\jondax-trial\"_CompanyName_"\"_bksys_"\results\"_rid"
		; to download both org and output in jxS3Download.csp
		
		;w !,"Copying "_localDir_tempFile_"."_fileExt_" to "_docDir_tempFile_"."_fileExt_": "_status
		if (status '= 1){
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLIError", "JX2006","Step2InProgress^trialBGProcessing",errData)
		}
		
		; obtain file binary
		s binaryFs = ##class(%Stream.FileBinary).%New()
		s binaryFs.Filename = docDir_tempFile_"."_fileExt
		s binaryFs2 = ##class(%Stream.FileBinary).%New()
		WHILE 'binaryFs.AtEnd{
			s fileBinaryStream = binaryFs.Read()
			d binaryFs2.Write(fileBinaryStream)
		}
		d binaryFs2.%Save()
		s binaryName = binaryFs2.Filename
		; log the download to table
		s dt = $zdatetime($h,3)
		
		;&sql(INSERT INTO MX.Record (OrgFile,Status, fExt,Profile,TempFile, CreatedDate, BucketName, BinaryData, BinaryName) VALUES (:fileName, 'In-Process', :fileExt, :userid, :tempFile, :dt, :bk, :binaryFs2, :binaryName))
		&sql(UPDATE Record SET Status='In-Process',BinaryData=:binaryFs2, BinaryName=:binaryName  WHERE ID=:rid)
		; move file from staging to in-progress 
		s status = $ZF(-100, cmdflag, "aws", "s3", "mv", stagingBucket_fileName, inProcessBucket, "--profile", CliProfileName)
		if (status '= 0) {
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLIError", "JX2006","Step2InProgress^trialBGProcessing",errData)
		}
		if (devMode){w !,"moved file to in-process"}
	} catch(err){
		d ErrorHandler(err)
	}
	
	s numOfDownloads = +numOfDownloads + 1
	
	g Step2GetDocuments
	q
	
Step3PdfCheck
	try {
		; file usability check		
		s fileExt = $p(fileName,".",*)
		s fileExtUpper = $zconvert(fileExt, "U")
		
		i ((fileExtUpper'="PDF")&(fileExtUpper'="XLSX")&(fileExtUpper'="PNG")&(fileExtUpper'="JPG")&(fileExtUpper'="JPEG")&(fileExtUpper'="HEIC")&(fileExtUpper'="AVIF")&(fileExtUpper'="WEBP")&(fileExtUpper'="HL7") & (fileExtUpper'="XML") & (fileExtUpper'="JSON")) {
						
			i (devMode){w !,"Not supported file. Moving to Failure"}
			
			; log and report to the db table
			s dt = $zdatetime($h,3)
			;&sql(INSERT INTO MX.Record (OrgFile,Status, fExt,Profile,TempFile, CreatedDate, ProcessedDate) VALUES (:fileName, 'Failure', :fileExt, :userId, :tempFile, :dt, :dt))			
			
			&sql(SELECT ID,TempFile,fExt INTO :rid,:tempFile,:fileExt FROM Record WHERE OrgFile=:fileName AND Status='Staging' AND Profile=:userid AND BucketName=:bk AND IsTrial=1)
			&sql(UPDATE MX.Record SET Status='Failure', ProcessedDate=:dt WHERE ID=:rid)			
			;&sql(SELECT ID INTO :rid FROM MX.Record WHERE OrgFile=:fileName AND Profile=:userid AND BucketName=:bk AND IsTrial=1)
			
			s errCode = "JX1002"
			s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
			s errName = $$GenerateErrorName^jxErrorReport(errCode)
			s errLocation = "Step3PdfCheck^trialBGProcessing"
			&sql(INSERT INTO MX.Error (Code, Data, Name, Location, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :dt, :rid, :bk))
			
			; move file from staging to failure
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv", stagingBucket_fileName, failureBucket, "--profile", CliProfileName)
			i (status '= 0){
				s errData = $$ReadFile(stderrDir)
				s errCode = "JX2006"
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step3PdfCheck^trialBGProcessing",errData)
			}
			g Step2GetDocuments
		}
	} catch(err){
		d ErrorHandler(err)
	}
	g Step2InProgress
	q
	
SubscriptionCheck
	
	s TransSubId = $$GetTransSubscription^trialSubscriptionUtils(userid)
	if (TransSubId = 0 ){
		i (devMode) { w "No Transformation subscription. Quitting..."}
		; ENABLE THIS AFTER SUBSCRIPTION BUYING PAGE IS COMPLETED
		;d SendSubscriptionOverMail^trialSubscriptionUtils(contactEmail, contactPerson)
		q
	}
	
	s OcrSubId = $$GetOcrSubscription^trialSubscriptionUtils(userid)
	i (devMode){
		w !,"Ocr Sub ID: ",OcrSubId
		w !,"Trans Sub ID: ",TransSubId
	}
	d SubscriptionPoolDetails^trialSubscriptionUtils(userid)
	
Step5
	
	try{ 
		
		s rid=""
		
		if ((OcrSubId = 0)&(TransSubId'=0)){
			&sql(SELECT TOP 1 ID,TempFile,fExt, OrgFile INTO :rid,:tempFile, :fExt, :fileName FROM Record WHERE IsNull(ProcessedDate,'')='' AND OrgFile<>'' AND Status='In-Process' AND BucketName=:bk AND fExt NOT IN ('pdf','jpeg','png','heic','avif','webp') ORDER BY CreatedDate) 
		} elseif((OcrSubId '= 0)&(TransSubId '=0)){
			&sql(SELECT TOP 1 ID,TempFile,fExt, OrgFile INTO :rid,:tempFile, :fExt, :fileName FROM Record WHERE IsNull(ProcessedDate,'')='' AND OrgFile<>'' AND Status='In-Process' AND BucketName=:bk ORDER BY CreatedDate)  ;(Status='In-Process' OR Status='Staging')
		} elseif ((OcrSubId = 0) & (TransSubId = 0)){
			if (devMode) {w !,"No subscription available. Quitting..." }
			q
		}
		
		w !,"RID: ",rid
Step5ProcessFile
		if rid="" {
			i (devMode) {w !,"NO MORE FILE TO PROCESS.",!}
			
			i (numOfDownloads = downloadLimit){
				g Step2
			} else {
				d ^jxErrorReport 
				
				k buckets(bkRoot,bucketFolder)
				
				if ($d(buckets(bkRoot)) = 11){g GetNextFolder}
				else {
					k buckets(bkRoot)
					s bkRoot="" 
			
					g Step1
				}
			}
		}
		s fileStatus=""
		&sql(SELECT Status INTO :fileStatus FROM Record WHERE ID=:rid)
		if fileStatus="Staging" &sql(UPDATE Record SET Status="In-Process" WHERE ID=:rid)
		s FileCounter=1
		
		s maxFileSize = 4999999 ;5MB
		s fileSize =  ##class(%File).GetFileSize(docDir_tempFile_"."_fExt)
		if (fileSize > maxFileSize){
			s errCode = "JX1003"
			s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
			s errName = $$GenerateErrorName^jxErrorReport(errCode)
			Throw ##class(%Exception.General).%New(errName,errCode,"Step5ProcessFile^trialBGProcessing",errData)
		}
		
		; insert resultbloodtest
		&sql(INSERT INTO ResultBloodTest (Record,Type) VALUES (:rid, 'Blood Test'))
		
		s ext=$zconvert(fExt,"U")
		if (ext = "PDF"){
			d ^jxAWSBGa
			
			;&sql(SELECT Profile,Profile->UserID,TempFile,fExt,Profile->CompanyName,IsTrial INTO :pid,:k1,:d2,:ext,:CompanyName,:IsTrial FROM Record WHERE ID=:rid)
			;d ^jxTrialAWSBGPDF
			;d OCR2Table^jxOCRPNG(OCRstr, rid)
			;d GPT^utilAWS(rid)
			
			&sql(SELECT OCR INTO :OCRstr FROM Record WHERE ID=:rid)
			/*	; commented by DW 2024-01-30 to bypass AWS textract slow return of values
			if ($L(ocrstr) = 0){
				s errCode = "JX2003"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step5ProcessFile^trialBGProcessing",errData)
			}
			*/
			d ^jxShowResults
		}
		if (ext = "XLSX"){
			s filePath = docDir_tempFile_"."_fExt
			
			d ^jxAWSBGXLSX
		
		}
		if (ext="PNG")!(ext="JPG")!(ext="HEIC")!(ext="AVIF")!(ext="WEBP")!(ext="JPEG"){
			
			if (ext'="PNG"){ ;change format to png
				s cmd="mogrify -format png "_docDir_tempFile_"."_fExt
				s x=$zf(-1,cmd_" && exit")	
				d ##class(%File).Delete(docDir_tempFile_"."_fExt)
				s fExt = "png"
			}
			&sql(Update Record SET PageCount ='1' WHERE id=:rid)
			s OCRstr = $$jxOCRPNG^jxOCRPNG(docDir_tempFile_"."_fExt)
			
			i ((OCRstr '["WORD") ! (OCRstr '["LINE")){
				s errCode = "JX2005"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step5ProcessFile^trialBGProcessing",errData)
			}
			
			i ($L(OCRstr)=0){
				s errCode = "JX2003"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step5ProcessFile^trialBGProcessing",errData)
			}
			i (OCRstr="FAILURE"){
				s errCode = "JX2001"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode,"Step5ProcessFile^trialBGProcessing",errData)
			}
			d OCR2Table^jxOCRPNG(OCRstr, rid)
			d GPT^utilAWS(rid)
			d ^jxShowResults
		}
		if (ext="HL7"){
			s HL7StandardizedStr = $$StandardizeHL7^jxSDAToResults(docDir_tempFile_"."_fExt)
			s SDAStr = $$HL7ToSDA^jxSDAToResults(HL7StandardizedStr)
			s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
			d jxSDAToResults^jxSDAToResults(sda, rid, 1)
		}
		if (ext="JSON"){
			s SDAStr = $$FHIRJsonToSDA^jxSDAToResults(docDir_tempFile_"."_fExt)
			s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
			d jxSDAToResults^jxSDAToResults(sda, rid, 1)
		}
		if (ext= "XML"){
			s fContent = $$ReadFile(docDir_tempFile_"."_fExt)
			if (fContent["ClinicalDocument"){
				; CDA
				s SDAStr = $$CDAToSDA^jxSDAToResults(docDir_tempFile_"."_fExt)
				s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
				d jxSDAToResults^jxSDAToResults(sda, rid, 1)
			}
			elseif (fContent["Bundle"){
				; FHIR
				s SDAStr = $$FHIRXmlToSDA^jxSDAToResults(docDir_tempFile_"."_fExt)
				s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
				d jxSDAToResults^jxSDAToResults(sda, rid, 1)
			}
			else {
				s errCode = "JX1007"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk,"Neither CDA or FHIR file")
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step5ProcessFile^trialBGProcessing",errData)
			}
		}
		
		s processedDate = $zdatetime($h,3)
		&sql(UPDATE MX.Record SET ProcessedDate=:processedDate WHERE ID = :rid)
		
		// update the subscription pool
		s recordPageCount = 0
		&sql(SELECT Status, PageCount, fExt INTO :recordStatus, :recordPageCount, fileExtension FROM Record WHERE id = :rid)
		if (recordStatus = "In-Process"){
			s status = $$DeductUnit^trialSubscriptionUtils(TransSubId, "T", 1)
			if ((fileExtension ="pdf") ! (fileExtension = "jpeg") ! (fileExtension="png") ! (fileExtension="heic") ! (fileExtension = "avif" ) ! (fileExtension = "webp")){
				s status2 = $$DeductUnit^trialSubscriptionUtils(OcrSubId, "O", +recordPageCount)
			}
			d AdjustSubscriptionPool^trialSubscriptionUtils(userid)
		}
		
		d ##class(%File).Delete(docDir_tempFile_"."_fExt)
		
		i (devMode){ w !,"DONE PROCESSING - RID: ",rid, "  ","RBT: ",rbt, "  ProcessedDate: ", processedDate}
		
		s errorCSV = $$GenerateErrorReportByRid^jxErrorReport(rid)
		if (errorCSV '=0){
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",errorCSV, failureBucket, "--profile", CliProfileName)
			d ##class(%File).Delete(errorCSV)
		}
	} catch(err){
		d ErrorHandler(err)
	}
	;g Step5	; get next file
	g SubscriptionCheck
	
GetBuckets
	; NOTE: WE NEED TO CREATE A TABLE TO STORE BUCKET NAMES AND DETAILS
	; get list of Biolytica root buckets
	&sql(SELECT Setting, CompanyName,  ContactPerson, Email INTO :setting, :CompanyName, :contactPerson, :contactEmail FROM "User" WHERE ID=:userid)
	i (devMode) {w !, "Setting ID: ",setting, !,"CompanyName: ",CompanyName,!}
	&sql(DECLARE cBucket CURSOR FOR
		SELECT Buckets_Name, Buckets_Folder, Buckets_CliProfileName
		INTO :r2, :bfd, :bcp
		FROM Setting_Buckets
		WHERE Setting=:setting AND Buckets_Type['Transformation'
	)  ;'jonda-bucket-development'
	&sql(OPEN cBucket)
	&sql(FETCH cBucket)
	WHILE SQLCODE=0{
		s buckets(r2)=""
		s buckets(r2, bfd) = ""
		s buckets(r2, bfd, bcp) = ""
		&sql(FETCH cBucket)
	}
	&sql(CLOSE cBucket)
	q
END
	;cleanup and quit
	
	return
	
CreateDir(dirFullPath)
	try{
		if (##class(%File).DirectoryExists(dirFullPath) = 0){
			d ##class(%File).CreateDirectory(dirFullPath)
		}
	} catch(err){
		d ErrorHandler(err)
	}
	q
.
	
ExtractFileNameFromBucketLog(logPath)
	s str = $$ReadFile(logPath)
	s topLine = $p(str, $c(13,10), 1)
	s fileName = $E(topLine, 32,*)
	q fileName
	
ReadFile(fileFullPath)
	
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = fileFullPath
	try {
		s str = fs.Read($$$MaxLocalLength)
	}catch(err){
		d ErrorHandler(err)
	}
	q str
.
ExtractJobId(fullFilePath)
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = fullFilePath
	s str = fs.Read($$$MaxLocalLength)
	i (str=""){
		q ""
	}
	s jobIdObj = ##class(%DynamicAbstractObject).%FromJSON(str)
	s jobId = jobIdObj."JobId"
	q jobId
	
	
ErrorHandler(err)
		
	s dt = $zdatetime($h, 3)
	
	i (devMode){
		w !,"------ ERROR MESSAGE ------"
		w !,"Name: ",err.Name
		w !,"Code: ",err.Code
		w !,"Location: ",err.Location
		w !,"Data: ",err.Data
		w !,"------ END ERROR MESSAGE ------"
	}
	d ErrorMail
	i err.Name="" {s errName=""} else {s errName=err.Name}
	i err.Location="" {s errLocation=""} else {s errLocation = err.Location}
	i err.Code ="" {s errCode=""} else {s errCode = err.Code}
	i err.Data ="" {s errData=""} else {s errData = err.Data}
	i err.iStack="" {s erriStack=""} else {s erriStack = err.iStack}
	i ($d(tempFile) && $L(tempFile)>0){
		if (($d(rid)) && (rid="")){s bucketName = "" s recordName = "" } else {s bucketName = bk s recordName=fileName}
		&sql(INSERT INTO MX.Error (Code, Data, Name, Location, Stack, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :erriStack, :dt, :rid, :bucketName))
		
		&sql(UPDATE MX.Record SET Status='Failure', ProcessedDate=:dt WHERE ID = :rid)
		s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",inProcessBucket_fileName, failureBucket, "--profile", CliProfileName)
		
		s errorCSV = $$GenerateErrorReportByRid^jxErrorReport(rid)
		if (errorCSV '=0){
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",errorCSV, failureBucket, "--profile", CliProfileName)
			d CreateDir(resultsDir_rid_"\")
			d ##class(%File).CopyFile(errorCSV,resultsDir_rid_"\")
			d ##class(%File).Delete(errorCSV)
		}
		
		d CleanFiles(rid)
		d StripTables(rid)
		
	} else {
		&sql(INSERT INTO MX.Error (Code, Data, Location, Name, Stack, CreatedDate) VALUES (:errCode, :errData, :errLocation, :errName, :erriStack, :dt))
	}
	
	
	hang 1
	q
	
CleanFiles(rid)
	q
	&sql(SELECT TempFile,fExt, OrgFile,Profile->CompanyName,BucketName INTO :tempFile,:ext,:fileName, :comName, :bkName FROM Record WHERE ID=:rid)
	
	s resDir = "C:\InterSystems\Cache\JondaX\"_comName_"\"_$replace(bkName,"/","\")_"\results\"
	s dcDir = "C:\InterSystems\Cache\JondaX\"_comName_"\"_$replace(bkName,"/","\")_"\documents\"
	
	s file=resDir_tempFile_"."_ext
	d ##class(%File).Delete(file)
	s file=dcDir_tempFile_"."_ext
	d ##class(%File).Delete(file)
	s file=dcDir_tempFile_"\"
	d ##class(%File).RemoveDirectoryTree(file)
	s tRS=##class(%ResultSet).%New("%Library.File:FileSet")
	s tStatus=tRS.Execute(resDir)    
	while (tRS.Next()){
		d ##class(%File).Delete(tRS.Get("Name"))
	}
	
	q	
	
	
StripTables(rid)
	#import MX
	&sql(SELECT ID INTO :rbt From ResultBloodTest WHERE Record->ID=:rid)
	&sql(SELECT BinaryName INTO :binaryName FROM Record WHERE ID=:rid)
	&sql(DELETE FROM ResultBloodTest_Tests WHERE ResultBloodTest = :rbt)
	&sql(DELETE FROM ResultBloodTest WHERE Record->ID=:rid)
	//&sql(UPDATE Record SET BinaryData=NULL, OrgFile=NULL, OCR=NULL, BinaryName=NULL WHERE ID = :rid)
	&sql(UPDATE Record SET BinaryData=NULL, OCR=NULL, BinaryName=NULL WHERE ID = :rid)
	d ##class(%File).Delete(binaryName)
	q
.
.
CLEANALLTABLES ; only for testing, DO NOT USE THIS
	q
	&sql(DELETE FROM Record)
	&sql(DELETE FROM ResultBloodTest)
	&sql(DELETE FROM ResultBloodTest_Tests)
	&sql(DELETE FROM Error)
.
	s CliProfileName = "default"
	s bk = "jondaffr2"
	s CompanyName = "JondaX"
	s systemDir = "c:\intersystems\cache\jondax\"
	s cmdflag = "/SHELL"
	s devDir = systemDir_CompanyName_"\"_bk_"\"
	
	s stagingBucket = "s3://"_bk_"/Staging/"
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"
.
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", inProcessBucket, "--profile", CliProfileName)
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", failureBucket, "--profile", CliProfileName)
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", completedBucket, "--profile", CliProfileName)
.
	d ##class(%File).RemoveDirectoryTree(devDir)
.
	q
ErrorMail	; Notify JondaX of error
	s EmailAddress="notifications@jonda.health"
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	do mail.Cc.Clear()
	do mail.Cc.Insert("nan@jonda.health")
	set mail.Subject="ERROR JondaX Trial Frankfurt ^trialBGProcessing encountered an error"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	set status=mail.TextData.Write("<html><body>------ ERROR MESSAGE ------<br><br>RecId: "_$g(rid)_"<br>Name: "_err.Name_"<br>Code: "_err.Code_"<br>Location: "_err.Location_"<br>Data: "_err.Data_"<br><br>This is an automated message. Do no reply to this message.</body></html>")
	set status=mailserver.Send(mail)
	q
.

trialBGProcessing01^MAC^^67304,34942.6442335^0
trialBGProcessing01
	; call from ^jxBGTask
	s devMode = 1
	d INIT1^WSP999	; background task, so no %session or usernames
	#import MX
	i devMode=1 w !,"JondaX Trial TRANSFORMING..."
	
	; loop through "User" to process multiple users
	; loop  is in ^trialBGTask
	;s userid = 1 ; 1 for Biolytica, 9 for JondaX
	
	k buckets k bucketIds d GetBuckets	; get a list of Biolytica AWS buckets to process and set to array buckets
	q:'$d(buckets)
	s bkRoot=""
	
	s FileCounter=0
	s dt = $zdatetime($h,3)
Step1
.
	; check subscription
	s TransSubId = $$GetTransSubscription^trialSubscriptionUtils(userid)
	if (TransSubId = 0 ){
		i (devMode) { w "No subscription. Quitting..."}
		q
	}
	
	s downloadLimit = 10
.
	s bkRoot=$o(buckets(bkRoot)) 
.
GetNextFolder
.
	if (bkRoot = ""){
		i (devMode){w !,"NO MORE BUCKET TO PROCESS. QUITTING",!}
		if ($zconvert(CompanyName,"l")'["jonda"){
			i FileCounter>0 d SendReviewMailTrial^AutoMail if (devMode) {w !,"sent review email to the reviewer team.",!}	
		}
		
		q
	}	
	s CompanyName=$replace(CompanyName," ","")	
	i (devMode){w !,"current Bucket: ",bkRoot,!}
	s bucketFolder = $o(buckets(bkRoot,""))
	i (devMode){w !,"current Folder: ",bucketFolder,!}
	s CliProfileName = $o(buckets(bkRoot,bucketFolder,""))
		
	if (bucketFolder = "-"){
		s bk = bkRoot
		s bksys = bk
	} else {
		s bk = bkRoot_"/"_bucketFolder
		s bksys = bkRoot_"\"_$replace(bucketFolder,"/","\")
	}	
		
	s systemDir = "c:\intersystems\cache\jondax-trial\"
	s localDir = "C:\InterSystems\Cache\jondax-trial\adhoc\"_userid_"\"
	s companyDir = systemDir_$replace(CompanyName," ","")_"\"
	d CreateDir(companyDir)
	if (bucketFolder '= "-"){
		d CreateDir(companyDir_"\"_bkRoot_"\")
	}
	if (bucketFolder["/"){
		s subBucketFolder= $p(bucketFolder,"/",1)
		d CreateDir(companyDir_"\"_bkRoot_"\"_subBucketFolder)
	}
	s devDir = systemDir_$replace(CompanyName," ","")_"\"_bksys_"\"
	s stdDir = systemDir_$replace(CompanyName," ","")_"\"_bksys_"\stdOutputs\"
	s docDir = systemDir_$replace(CompanyName," ","")_"\"_bksys_"\documents\"
	s outputsDir = systemDir_$replace(CompanyName," ","")_"\"_bksys_"\outputs\"
	s resultsDir = systemDir_$replace(CompanyName," ","")_"\"_bksys_"\results\"
	
	
	d CreateDir(devDir)
	d CreateDir(stdDir)
	d CreateDir(docDir)
	d CreateDir(outputsDir)
	d CreateDir(resultsDir)
	
	s stagingBucket = "s3://"_bk_"/Staging/"
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"
	
	s textractBucketName = "jondaffr"
	;s textractBucketFolder ="jondax-trial/"
	s textractBucket = "s3://"_textractBucketName_"/"
		
	
Step2
.
	try{	
		s stdoutDir = stdDir_"log.txt"
		s stderrDir = stdDir_"err.txt" 
	
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_"""" 
		s status = $ZF(-100, cmdflag, "aws","s3","ls", stagingBucket, "--profile",  CliProfileName)
		
		i (status = 0) { ; remove ghost files in s3 bucket
			
			s str = $$ReadFile(stdoutDir)
			s secLine = $p(str, $c(13,10), 2)
			if (secLine '= ""){
				w "Removing ghost files",!
				s status = $ZF(-100, cmdflag, "aws", "s3", "rm", stagingBucket, "--profile", CliProfileName)}
		} 
		
		s numOfDownloads = 0
		
Step2GetDocuments
		
		s cmdflag = "/SHELL/STDOUT="""_stdoutDir_""""_"/STDERR="""_stderrDir_"""" 
		s status = $ZF(-100, cmdflag, "aws","s3","ls", stagingBucket , "--profile", CliProfileName)
.
		s fileName = ""
		s fileName = $$ExtractFileNameFromBucketLog(stdoutDir)	
		
		i (devMode) {w !,"Number of downloads = ", numOfDownloads}
		
		i ((fileName = "") ! (numOfDownloads = downloadLimit)){ ;empty bucket returns as error
			i (devMode & (fileName = "")){w !,"EMPTY BUCKET"}	
			
			; recreating staging folder regardless of it exists or not
			i (fileName = "") {
				if (bucketFolder = "-"){s stagingFolder = "Staging/"} else {s stagingFolder = bucketFolder_"/Staging/"}
				s status = $ZF(-100, cmdflag, "aws","s3api","put-object", "--bucket" , bkRoot, "--key", stagingFolder, "--profile", CliProfileName)
			}
			
			;g Step5
			g SubscriptionCheck
		}
		
		if (devMode){w !,"current file name from bucket: ", fileName}
		
		;s tempFile = $$ATTNAME^WSP999()
		
		g Step3PdfCheck
.
Step2InProgress	
		; copy file to dev env
		
		s fileExt = $p(fileName,".",*)
		&sql(SELECT ID,TempFile,fExt,OutputFormat INTO :rid,:tempFile,:fileExt,:outputFormat FROM Record WHERE OrgFile=:fileName AND Status='Staging' AND Profile=:userid AND BucketName=:bk AND IsTrial=1)
		if outputFormat="" {
			w !,"No Output Format!" 
			w !,"Moving file to Failure"
			&sql(UPDATE Record SET DeletedDate=:dt,Status='Failure' WHERE ID=:rid)
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv", stagingBucket_fileName, failureBucket, "--profile", CliProfileName)
			i (status '= 0) {
				s errData = $$ReadFile(stderrDir)
				s errCode = "JX2006"
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step2InProgress^trialBGProcessing",errData)
			}
		g Step2GetDocuments			
		}
		
		/*
		s status = $ZF(-100, cmdflag, "aws", "s3", "cp", stagingBucket_fileName, docDir_tempFile_"."_fileExt, "--profile", CliProfileName)		
		
		if (status '= 0){
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLIError", "JX2006","Step2InProgress^trialBGProcessing",errData)
		}*/
		
		s status= ##class(%File).CopyFile(localDir_tempFile_"."_fileExt,docDir_tempFile_"."_fileExt)
		;To Do : copy orgfile to "C:\InterSystems\Cache\jondax-trial\"_CompanyName_"\"_bksys_"\results\"_rid"
		; to download both org and output in jxS3Download.csp
		
		;w !,"Copying "_localDir_tempFile_"."_fileExt_" to "_docDir_tempFile_"."_fileExt_": "_status
		if (status '= 1){
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLIError", "JX2006","Step2InProgress^trialBGProcessing",errData)
		}
		
		; obtain file binary
		s binaryFs = ##class(%Stream.FileBinary).%New()
		s binaryFs.Filename = docDir_tempFile_"."_fileExt
		s binaryFs2 = ##class(%Stream.FileBinary).%New()
		WHILE 'binaryFs.AtEnd{
			s fileBinaryStream = binaryFs.Read()
			d binaryFs2.Write(fileBinaryStream)
		}
		d binaryFs2.%Save()
		s binaryName = binaryFs2.Filename
		; log the download to table
		s dt = $zdatetime($h,3)
		
		;&sql(INSERT INTO MX.Record (OrgFile,Status, fExt,Profile,TempFile, CreatedDate, BucketName, BinaryData, BinaryName) VALUES (:fileName, 'In-Process', :fileExt, :userid, :tempFile, :dt, :bk, :binaryFs2, :binaryName))
		&sql(UPDATE Record SET Status='In-Process',BinaryData=:binaryFs2, BinaryName=:binaryName  WHERE ID=:rid)
		; move file from staging to in-progress 
		s status = $ZF(-100, cmdflag, "aws", "s3", "mv", stagingBucket_fileName, inProcessBucket, "--profile", CliProfileName)
		if (status '= 0) {
			s errData = $$ReadFile(stderrDir)
			Throw ##class(%Exception.General).%New("CLIError", "JX2006","Step2InProgress^trialBGProcessing",errData)
		}
		if (devMode){w !,"moved file to in-process"}
	} catch(err){
		d ErrorHandler(err)
	}
	
	s numOfDownloads = +numOfDownloads + 1
	
	g Step2GetDocuments
	q
	
Step3PdfCheck
	try {
		; file usability check		
		s fileExt = $p(fileName,".",*)
		s fileExtUpper = $zconvert(fileExt, "U")
		
		i ((fileExtUpper'="PDF")&(fileExtUpper'="XLSX")&(fileExtUpper'="PNG")&(fileExtUpper'="JPG")&(fileExtUpper'="JPEG")&(fileExtUpper'="HEIC")&(fileExtUpper'="AVIF")&(fileExtUpper'="WEBP")&(fileExtUpper'="HL7") & (fileExtUpper'="XML") & (fileExtUpper'="JSON")) {
						
			i (devMode){w !,"Not supported file. Moving to Failure"}
			
			; log and report to the db table
			s dt = $zdatetime($h,3)
			;&sql(INSERT INTO MX.Record (OrgFile,Status, fExt,Profile,TempFile, CreatedDate, ProcessedDate) VALUES (:fileName, 'Failure', :fileExt, :userId, :tempFile, :dt, :dt))			
			
			&sql(SELECT ID,TempFile,fExt INTO :rid,:tempFile,:fileExt FROM Record WHERE OrgFile=:fileName AND Status='Staging' AND Profile=:userid AND BucketName=:bk AND IsTrial=1)
			&sql(UPDATE MX.Record SET Status='Failure', ProcessedDate=:dt WHERE ID=:rid)			
			;&sql(SELECT ID INTO :rid FROM MX.Record WHERE OrgFile=:fileName AND Profile=:userid AND BucketName=:bk AND IsTrial=1)
			
			s errCode = "JX1002"
			s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
			s errName = $$GenerateErrorName^jxErrorReport(errCode)
			s errLocation = "Step3PdfCheck^trialBGProcessing"
			&sql(INSERT INTO MX.Error (Code, Data, Name, Location, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :dt, :rid, :bk))
			
			; move file from staging to failure
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv", stagingBucket_fileName, failureBucket, "--profile", CliProfileName)
			i (status '= 0){
				s errData = $$ReadFile(stderrDir)
				s errCode = "JX2006"
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step3PdfCheck^trialBGProcessing",errData)
			}
			g Step2GetDocuments
		}
	} catch(err){
		d ErrorHandler(err)
	}
	g Step2InProgress
	q
	
SubscriptionCheck
	
	s TransSubId = $$GetTransSubscription^trialSubscriptionUtils(userid)
	if (TransSubId = 0 ){
		i (devMode) { w "No Transformation subscription. Quitting..."}
		; ENABLE THIS AFTER SUBSCRIPTION BUYING PAGE IS COMPLETED
		;d SendSubscriptionOverMail^trialSubscriptionUtils(contactEmail, contactPerson)
		q
	}
	
	s OcrSubId = $$GetOcrSubscription^trialSubscriptionUtils(userid)
	i (devMode){
		w !,"Ocr Sub ID: ",OcrSubId
		w !,"Trans Sub ID: ",TransSubId
	}
	d SubscriptionPoolDetails^trialSubscriptionUtils(userid)
	
Step5
	
	try{ 
		
		s rid=""
		
		if ((OcrSubId = 0)&(TransSubId'=0)){
			&sql(SELECT TOP 1 ID,TempFile,fExt, OrgFile INTO :rid,:tempFile, :fExt, :fileName FROM Record WHERE IsNull(ProcessedDate,'')='' AND OrgFile<>'' AND Status='In-Process' AND BucketName=:bk AND fExt NOT IN ('pdf','jpeg','png','heic','avif','webp') ORDER BY CreatedDate) 
		} elseif((OcrSubId '= 0)&(TransSubId '=0)){
			&sql(SELECT TOP 1 ID,TempFile,fExt, OrgFile INTO :rid,:tempFile, :fExt, :fileName FROM Record WHERE IsNull(ProcessedDate,'')='' AND OrgFile<>'' AND Status='In-Process' AND BucketName=:bk ORDER BY CreatedDate)  ;(Status='In-Process' OR Status='Staging')
		} elseif ((OcrSubId = 0) & (TransSubId = 0)){
			if (devMode) {w !,"No subscription available. Quitting..." }
			q
		}
		
		w !,"RID: ",rid
Step5ProcessFile
		if rid="" {
			i (devMode) {w !,"NO MORE FILE TO PROCESS.",!}
			
			i (numOfDownloads = downloadLimit){
				g Step2
			} else {
				d ^jxErrorReport 
				
				k buckets(bkRoot,bucketFolder)
				
				if ($d(buckets(bkRoot)) = 11){g GetNextFolder}
				else {
					k buckets(bkRoot)
					s bkRoot="" 
			
					g Step1
				}
			}
		}
		s fileStatus=""
		&sql(SELECT Status INTO :fileStatus FROM Record WHERE ID=:rid)
		if fileStatus="Staging" &sql(UPDATE Record SET Status="In-Process" WHERE ID=:rid)
		s FileCounter=1
		
		s maxFileSize = 4999999 ;5MB
		s fileSize =  ##class(%File).GetFileSize(docDir_tempFile_"."_fExt)
		if (fileSize > maxFileSize){
			s errCode = "JX1003"
			s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
			s errName = $$GenerateErrorName^jxErrorReport(errCode)
			Throw ##class(%Exception.General).%New(errName,errCode,"Step5ProcessFile^trialBGProcessing",errData)
		}
		
		; insert resultbloodtest
		&sql(INSERT INTO ResultBloodTest (Record,Type) VALUES (:rid, 'Blood Test'))
		
		s ext=$zconvert(fExt,"U")
		if (ext = "PDF"){
			w "Started jxGemini...",!
			d ^jxGemini
			d ^jxAWSBGa01
			
			
			&sql(SELECT OCR INTO :OCRstr FROM Record WHERE ID=:rid)
			d ^jxShowResults
			d ^jxDataMappingTransformation(rid)
		}
		if (ext = "XLSX"){
			s filePath = docDir_tempFile_"."_fExt
			
			d ^jxAWSBGXLSX
		
		}
		if (ext="PNG")!(ext="JPG")!(ext="HEIC")!(ext="AVIF")!(ext="WEBP")!(ext="JPEG"){
			
			if (ext'="PNG"){ ;change format to png
				s cmd="mogrify -format png "_docDir_tempFile_"."_fExt
				s x=$zf(-1,cmd_" && exit")	
				d ##class(%File).Delete(docDir_tempFile_"."_fExt)
				s fExt = "png"
			}
Gemini
			s gIndex = ##class(python.GeminiAi).AiCompletion(docDir_tempFile_"."_fExt,rid,0,"png")
			i gIndex=-429 h 5 g Gemini
			
			s OCRstr = $$jxOCRPNG^jxOCRPNG01(docDir_tempFile_"."_fExt)
			
			i ($L(OCRstr)=0){
				s errCode = "JX2003"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step5ProcessFile^jxBiolytica",errData)
			}
			i (OCRstr="FAILURE"){
				s errCode = "JX2001"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk)
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode,"Step5ProcessFile^jxBiolytica",errData)
			}
			d OCR2Table^jxOCRPNG01(OCRstr, rid)
			d GPT^utilAWS01(rid)
			d ^jxShowResults
			d ^jxDataMappingTransformation(rid)
		}
		if (ext="HL7"){
			s HL7StandardizedStr = $$StandardizeHL7^jxSDAToResults(docDir_tempFile_"."_fExt)
			s SDAStr = $$HL7ToSDA^jxSDAToResults(HL7StandardizedStr)
			s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
			d jxSDAToResults^jxSDAToResults(sda, rid, 1)
		}
		if (ext="JSON"){
			s SDAStr = $$FHIRJsonToSDA^jxSDAToResults(docDir_tempFile_"."_fExt)
			s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
			d jxSDAToResults^jxSDAToResults(sda, rid, 1)
		}
		if (ext= "XML"){
			s fContent = $$ReadFile(docDir_tempFile_"."_fExt)
			if (fContent["ClinicalDocument"){
				; CDA
				s SDAStr = $$CDAToSDA^jxSDAToResults(docDir_tempFile_"."_fExt)
				s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
				d jxSDAToResults^jxSDAToResults(sda, rid, 1)
			}
			elseif (fContent["Bundle"){
				; FHIR
				s SDAStr = $$FHIRXmlToSDA^jxSDAToResults(docDir_tempFile_"."_fExt)
				s sda = $$SDAStrToSDAObj^jxSDAToResults(SDAStr)
				d jxSDAToResults^jxSDAToResults(sda, rid, 1)
			}
			else {
				s errCode = "JX1007"
				s errData = $$GenerateErrorData^jxErrorReport(errCode,fileName,bk,"Neither CDA or FHIR file")
				s errName = $$GenerateErrorName^jxErrorReport(errCode)
				Throw ##class(%Exception.General).%New(errName,errCode ,"Step5ProcessFile^trialBGProcessing",errData)
			}
		}
		
		s processedDate = $zdatetime($h,3)
		&sql(UPDATE MX.Record SET ProcessedDate=:processedDate WHERE ID = :rid)
		
		// update the subscription pool
		s recordPageCount = 0
		&sql(SELECT Status, PageCount, fExt INTO :recordStatus, :recordPageCount, fileExtension FROM Record WHERE id = :rid)
		if (recordStatus = "In-Process"){
			s status = $$DeductUnit^trialSubscriptionUtils(TransSubId, "T", 1)
			if ((fileExtension ="pdf") ! (fileExtension = "jpeg") ! (fileExtension="png") ! (fileExtension="heic") ! (fileExtension = "avif" ) ! (fileExtension = "webp")){
				s status2 = $$DeductUnit^trialSubscriptionUtils(OcrSubId, "O", +recordPageCount)
			}
			d AdjustSubscriptionPool^trialSubscriptionUtils(userid)
		}
		
		d ##class(%File).Delete(docDir_tempFile_"."_fExt)
		
		i (devMode){ w !,"DONE PROCESSING - RID: ",rid, "  ","RBT: ",rbt, "  ProcessedDate: ", processedDate}
		
		s errorCSV = $$GenerateErrorReportByRid^jxErrorReport(rid)
		if (errorCSV '=0){
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",errorCSV, failureBucket, "--profile", CliProfileName)
			d ##class(%File).Delete(errorCSV)
		}
	} catch(err){
		d ErrorHandler(err)
	}
	;g Step5	; get next file
	g SubscriptionCheck
	
GetBuckets
	; NOTE: WE NEED TO CREATE A TABLE TO STORE BUCKET NAMES AND DETAILS
	; get list of Biolytica root buckets
	&sql(SELECT Setting, CompanyName,  ContactPerson, Email INTO :setting, :CompanyName, :contactPerson, :contactEmail FROM "User" WHERE ID=:userid)
	i (devMode) {w !, "Setting ID: ",setting, !,"CompanyName: ",CompanyName,!}
	&sql(DECLARE cBucket CURSOR FOR
		SELECT Buckets_Name, Buckets_Folder, Buckets_CliProfileName
		INTO :r2, :bfd, :bcp
		FROM Setting_Buckets
		WHERE Setting=:setting AND Buckets_Type['Transformation'
	)  ;'jonda-bucket-development'
	&sql(OPEN cBucket)
	&sql(FETCH cBucket)
	WHILE SQLCODE=0{
		s buckets(r2)=""
		s buckets(r2, bfd) = ""
		s buckets(r2, bfd, bcp) = ""
		&sql(FETCH cBucket)
	}
	&sql(CLOSE cBucket)
	q
END
	;cleanup and quit
	
	return
	
CreateDir(dirFullPath)
	try{
		if (##class(%File).DirectoryExists(dirFullPath) = 0){
			d ##class(%File).CreateDirectory(dirFullPath)
		}
	} catch(err){
		d ErrorHandler(err)
	}
	q
.
	
ExtractFileNameFromBucketLog(logPath)
	s str = $$ReadFile(logPath)
	s topLine = $p(str, $c(13,10), 1)
	s fileName = $E(topLine, 32,*)
	q fileName
	
ReadFile(fileFullPath)
	
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = fileFullPath
	try {
		s str = fs.Read($$$MaxLocalLength)
	}catch(err){
		d ErrorHandler(err)
	}
	q str
.
ExtractJobId(fullFilePath)
	#include %msql
	s fs = ##class(%Stream.FileCharacter).%New()
	s fs.Filename = fullFilePath
	s str = fs.Read($$$MaxLocalLength)
	i (str=""){
		q ""
	}
	s jobIdObj = ##class(%DynamicAbstractObject).%FromJSON(str)
	s jobId = jobIdObj."JobId"
	q jobId
	
	
ErrorHandler(err)
		
	s dt = $zdatetime($h, 3)
	
	i (devMode){
		w !,"------ ERROR MESSAGE ------"
		w !,"Name: ",err.Name
		w !,"Code: ",err.Code
		w !,"Location: ",err.Location
		w !,"Data: ",err.Data
		w !,"------ END ERROR MESSAGE ------"
	}
	d ErrorMail
	i err.Name="" {s errName=""} else {s errName=err.Name}
	i err.Location="" {s errLocation=""} else {s errLocation = err.Location}
	i err.Code ="" {s errCode=""} else {s errCode = err.Code}
	i err.Data ="" {s errData=""} else {s errData = err.Data}
	i err.iStack="" {s erriStack=""} else {s erriStack = err.iStack}
	i ($d(tempFile) && $L(tempFile)>0){
		if (($d(rid)) && (rid="")){s bucketName = "" s recordName = "" } else {s bucketName = bk s recordName=fileName}
		&sql(INSERT INTO MX.Error (Code, Data, Name, Location, Stack, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :erriStack, :dt, :rid, :bucketName))
		
		&sql(UPDATE MX.Record SET Status='Failure', ProcessedDate=:dt WHERE ID = :rid)
		s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",inProcessBucket_fileName, failureBucket, "--profile", CliProfileName)
		
		s errorCSV = $$GenerateErrorReportByRid^jxErrorReport(rid)
		if (errorCSV '=0){
			s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",errorCSV, failureBucket, "--profile", CliProfileName)
			d CreateDir(resultsDir_rid_"\")
			d ##class(%File).CopyFile(errorCSV,resultsDir_rid_"\")
			d ##class(%File).Delete(errorCSV)
		}
		
		d CleanFiles(rid)
		d StripTables(rid)
		
	} else {
		&sql(INSERT INTO MX.Error (Code, Data, Location, Name, Stack, CreatedDate) VALUES (:errCode, :errData, :errLocation, :errName, :erriStack, :dt))
	}
	
	
	hang 1
	q
	
CleanFiles(rid)
	q
	&sql(SELECT TempFile,fExt, OrgFile,Profile->CompanyName,BucketName INTO :tempFile,:ext,:fileName, :comName, :bkName FROM Record WHERE ID=:rid)
	
	s resDir = "C:\InterSystems\Cache\JondaX\"_comName_"\"_$replace(bkName,"/","\")_"\results\"
	s dcDir = "C:\InterSystems\Cache\JondaX\"_comName_"\"_$replace(bkName,"/","\")_"\documents\"
	
	s file=resDir_tempFile_"."_ext
	d ##class(%File).Delete(file)
	s file=dcDir_tempFile_"."_ext
	d ##class(%File).Delete(file)
	s file=dcDir_tempFile_"\"
	d ##class(%File).RemoveDirectoryTree(file)
	s tRS=##class(%ResultSet).%New("%Library.File:FileSet")
	s tStatus=tRS.Execute(resDir)    
	while (tRS.Next()){
		d ##class(%File).Delete(tRS.Get("Name"))
	}
	
	q	
	
	
StripTables(rid)
	#import MX
	&sql(SELECT ID INTO :rbt From ResultBloodTest WHERE Record->ID=:rid)
	&sql(SELECT BinaryName INTO :binaryName FROM Record WHERE ID=:rid)
	&sql(DELETE FROM ResultBloodTest_Tests WHERE ResultBloodTest = :rbt)
	&sql(DELETE FROM ResultBloodTest WHERE Record->ID=:rid)
	//&sql(UPDATE Record SET BinaryData=NULL, OrgFile=NULL, OCR=NULL, BinaryName=NULL WHERE ID = :rid)
	&sql(UPDATE Record SET BinaryData=NULL, OCR=NULL, BinaryName=NULL WHERE ID = :rid)
	d ##class(%File).Delete(binaryName)
	q
.
.
CLEANALLTABLES ; only for testing, DO NOT USE THIS
	q
	&sql(DELETE FROM Record)
	&sql(DELETE FROM ResultBloodTest)
	&sql(DELETE FROM ResultBloodTest_Tests)
	&sql(DELETE FROM Error)
.
	s CliProfileName = "default"
	s bk = "jondaffr2"
	s CompanyName = "JondaX"
	s systemDir = "c:\intersystems\cache\jondax\"
	s cmdflag = "/SHELL"
	s devDir = systemDir_CompanyName_"\"_bk_"\"
	
	s stagingBucket = "s3://"_bk_"/Staging/"
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"
.
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", inProcessBucket, "--profile", CliProfileName)
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", failureBucket, "--profile", CliProfileName)
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "rm","--recursive", completedBucket, "--profile", CliProfileName)
.
	d ##class(%File).RemoveDirectoryTree(devDir)
.
	q
ErrorMail	; Notify JondaX of error
	s EmailAddress="notifications@jonda.health"
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	do mail.Cc.Clear()
	do mail.Cc.Insert("nan@jonda.health")
	set mail.Subject="ERROR JondaX Trial Frankfurt ^trialBGProcessing encountered an error"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	set status=mail.TextData.Write("<html><body>------ ERROR MESSAGE ------<br><br>RecId: "_$g(rid)_"<br>Name: "_err.Name_"<br>Code: "_err.Code_"<br>Location: "_err.Location_"<br>Data: "_err.Data_"<br><br>This is an automated message. Do no reply to this message.</body></html>")
	set status=mailserver.Send(mail)
	q
.

trialChangePassword^MAC^^67233,11193.0493725^0
trialChangePassword
	q
CheckNUpdatePW
	// Checks and update password
	#import MX
	d INIT^WSP999
	&sql(SELECT count(*)
		INTO :loginCount
		FROM User_LastLogin
		WHERE "User"=:UserID)
		
	&sql(SELECT Count(ID) INTO :count FROM "User" WHERE ID=:UserID AND %Exact(Password)=:d1)
	if (count=0){
		&js<document.getElementById("org-pass").querySelector(".error-text").classList.add("active")>
		q
	}
	//Update password SQL and alert messages
	&sql(UPDATE "User" SET Password=:d2 WHERE ID=:UserID)
	if (SQLCODE=0){
		if loginCount=1 &js<document.getElementById("popup1").classList.remove("inactive")>
		e  &js<document.getElementById("popup").classList.remove("inactive")>
		q
	}
	else{
		&js<alert("Some errors occur while updating the password")>
	}
	q

trialDownload^MAC^^67242,16635.0279348^0
trialDownload
Init
	#import MX
	d INIT1^CSP999
	s fCount=0
	&sql(SELECT COUNT(ID) INTO :fCount FROM Record WHERE Profile=:UserID AND DeletedDate IS NULL AND DownloadedDate IS NULL AND Status='Completed' AND IsTrial=1)
	&js<document.getElementById("fileCount").innerHTML=`#(fCount)#`;>
	q
WriteRecords
	#import MX
	d INIT1^CSP999
	i ($g(%session.Data("UserID"))=""){
		&js<window.open("trialLockdown.csp","_self")>
		q 
	}
	s UserID=$g(%session.Data("UserID"))
	
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID, CreatedDate,OrgFile,	OutputFormat,OutputUnit,Status,BucketName,Profile->CompanyName
		INTO :r0,:r1,:r2,:r3,:r4,:r5,:bksys,:CompanyName
		FROM Record
		WHERE Profile=:UserID AND DownloadedDate IS NULL AND DeletedDate IS NULL AND IsTrial=1
		ORDER BY ID DESC
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	WHILE SQLCODE=0{
		s filePath="C:\InterSystems\Cache\jondax-trial\"_CompanyName_"\"_$replace(bksys,"/","\")_"\results\"_r0
		w "<tr>",!
		w "<td class='rid' hidden>"_r0_"</td>",!
		w "<td>"_r1_"</td>",!
		w "<td class='file-name'>"_r2_"</td>",!
		w "<td>"_r3_"</td>",!
		w "<td>"_r4_"</td>",!
		//Status
		if (r5="In-Process")!(r5="Staging")!(r5="In-Transfer") {
			w "<td>Processing</td>",!
		}
		elseif(r5="Completed"){
			w "<td>Success</td>"
		}else{
			w "<td class='issue'>Issue</td>"
		}
		//action-btns
		if (r5="In-Process")!(r5="Staging")!(r5="In-Transfer"){
			w "<td></td>",!
		}
		elseif(r5="Completed"){
			w "<td><button type='button' class='download-btn blue-btn' onclick='jDownload(event)'>Download</button></td>"
		}else{
			if (##class(%File).DirectoryExists(filePath_"\") = 0) d
			.w "<td><button type='button' class='report-btn blue-btn' onclick='jDownload(event)' disabled>Report Details</button></td>"	
			e  w "<td><button type='button' class='report-btn blue-btn' onclick='jDownload(event)'>Report Details</button></td>"
		}
		
		w "</tr>",!
		
		&sql(FETCH C1)
		
	}
	&sql(CLOSE C1)
	
	q
.
Download	
	
	;TO DO: Put Downloaded date, delete files after downloaded according to Data redention
	s rid=d2
	s uid=$g(%session.Data("UserID"))
	n bksys,CompanyName,format,ext,fName,filename
	&sql(SELECT BucketName,Profile->CompanyName,OutputFormat INTO :bksys,:CompanyName,:format FROM MX.Record WHERE ID=:rid)
	s filePath="C:\InterSystems\Cache\jondax-trial\"_CompanyName_"\"_$replace(bksys,"/","\")_"\results\"_rid
	s copyPath="C:\InterSystems\Cache\CSP\JondaX-Trials\"_CompanyName_"\"
	d CreateDir^trialBGProcessing(copyPath)
	s %session.Data("Copy Dir")=copyPath
	
	if (##class(%File).DirectoryExists(filePath_"\") = 1){
			set dir = ##class(%File).NormalizeDirectory(filePath_"\")
			s ext=$select(format["HL7":"hl7",format["XML":"xml",format["JSON":"json")
			set file=$ZSEARCH(dir_"*."_ext)
	
			if file'="" {
				set filename = $p($p(file, "\", *),".",1)
				s filename=filename_"."_ext
				d ##class(%File).CopyFile(file,copyPath_filename)
				s copyPath="../"_$replace($p(copyPath,"\Cache\CSP\",2),"\","/")
				&js<filePath=`#(copyPath)#`; fName=`#(filename)#`;>
				Set file = $ZSEARCH("")
			}
			else {
				set file=$ZSEARCH(dir_"*.csv")
				if file'=""{
					set filename = $p(file, "\", *)
					d ##class(%File).CopyFile(file,copyPath)
					s copyPath="../"_$replace($p(copyPath,"\Cache\CSP\",2),"\","/")
					&js<filePath=`#(copyPath)#`; fName=`#(filename)#`;>
					Set file = $ZSEARCH("")
				}
			}
	}else {&js<alert("File not Found");>}	
	q
DeleteCopy
	d ##class(%File).Delete($g(%session.Data("Copy Dir"))_"*.*")
	q		

trialErrorReport^MAC^^67172,13023.1172189^0
trialErrorReport
	#import MX
	i bk="" q
	&sql(SELECT COUNT(ID) INTO :errorCount FROM Error WHERE BucketName=:bk AND IsNull(ReportedDate,'')='' AND Record->Profile->ID=:userid)
	i (+errorCount < 1) {
		i (devMode) {w !,"NO ERRORS TO REPORT"}
		q
	}
	d GenerateCSV
	if (csvStr = "" ) {q}
	s csvStream = ##class(%Stream.FileCharacter).%New()
	s dt = $zdatetime($h,3)
	s filedt = $TR($TR($zdatetime($h,2),":","-")," ","-")
	s csvFileName =  "ErrorReport for "_$replace(bk,"/",",")_"-"_filedt_".csv"
	s csvStream.Filename = outputsDir_csvFileName
	s csvStream.TranslateTable="UTF8"
 	s csvStream.BOM=$C(239,187,191)
	s writeStatus = csvStream.Write(csvStr)
	d csvStream.%Save()
	
	s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",outputsDir_csvFileName, failureBucket, "--profile", CliProfileName)
	d ##class(%File).Delete(outputsDir_csvFileName)
	
	d SendErrorMail
	
	;&sql(UPDATE MX.Error SET ReportedDate=:dt WHERE BucketName=:bk)
	d ##class(%File).Delete(outputsDir_csvFileName)
	q
	
.
SendErrorMail
	#import MX
	s EmailAddress="notifications@jonda.health"
 
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	; Calling Connect
.
	set mail.Subject="Error Report for "_bk
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	set status=mail.TextData.Write("<html><body>ERROR REPORT FOR: "_bk_" ,DATE: "_dt_"</body></html>")
	set status = mail.AttachFile(outputsDir, csvFileName)
.
	set status=mailserver.Send(mail)
.
 	q
	
	
GenerateCSV
	#import MX
	&sql(DECLARE C1 CURSOR FOR
		SELECT Code, CreatedDate, Record->OrgFile, Name, Data, Id
		INTO :d1,:d2,:d3,:d4,:d5,:eid
		FROM Error
		WHERE BucketName=:bk AND IsNull(ReportedDate,'')=''
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
.
	i SQLCODE '= 0{
		&sql(CLOSE C1)
		q
	}
	s cr = $c(13,10)
	s csvStr=""
	WHILE SQLCODE=0{
		&sql(SELECT Facing Into :facing FROM ErrorCode WHERE Code=:d1)
		;if (facing = "Internal"){&sql(FETCH C1) continue}
		
		s csvStr = csvStr_d3_","_d1_","_d4_","_d5_","_d2_cr
		
		s dt= $zdatetime($h,3)
		&sql(UPDATE MX.Error SET ReportedDate=:dt WHERE ID=:eid)
		
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	if (csvStr '= ""){
		s csvStr="File_Name,Error_Code,Error,Data,Date"_cr_csvStr
	}
	q
	
GenerateErrorReportByRid(rid, errorType=1)
	#import MX
	n bk,fileName,companyName,note,reason
	n d1,d2,d3,d4,d5,d6,dt,outputsDir
	; errorType 1 for ErrorReport and 2 for Notification
	
	&sql(SELECT BucketName, OrgFile, Profile->CompanyName, Note, Reason INTO :bk, :fileName, :companyName, :note, :reason FROM Record WHERE id=:rid)
	;w !,"generateing error by rid: "
	;zw SQLCODE
	&sql(DECLARE C2 CURSOR FOR
		SELECT Code, CreatedDate, Record->OrgFile, Name, Data, ID
		INTO :d1,:d2,:d3,:d4,:d5,:d6
		FROM Error
		WHERE Record->id=:rid
	)
	;WHERE BucketName=:bk AND Record=:rid AND IsNull(ReportedDate,'')=''
	&sql(CLOSE C2)
	&sql(OPEN C2)
	;zw SQLCODE
	&sql(FETCH C2)
	;zw SQLCODE
	i SQLCODE '= 0{
		;{w !,"No Error Report. Skipping."}
		q 0
	}
	s cr = $c(13,10)
	s csvStr = ""
	WHILE SQLCODE=0{
		&sql(SELECT Facing Into :facing FROM ErrorCode WHERE Code=:d1)
		if (facing = "Internal"){&sql(FETCH C2) continue}
		
		s csvStr = csvStr_d3_","_d1_","_d4_","_d5_","_d2_cr
		s dt = $zdatetime($h,3)
		&sql(UPDATE MX.Error SET ReportedDate=:dt WHERE ID=:d6)
		&sql(FETCH C2)
	}
	&sql(CLOSE C2)
	if (csvStr=""){q 0}
	
	s csvStr="File_Name,Error_Code,Error,Data,Date"_cr_csvStr
	
	if (($L(note)>0) ! ($L(reason)>0) ){
		s noteAndReason = ""
		if ($L(note)>0){s noteAndReason = noteAndReason_"Notes: "_note}
		if ($L(reason)>0){s noteAndReason = noteAndReason_" Reasons: "_reason}
		s csvStr = csvStr_",,,"_noteAndReason_","_cr
	}
	
	s csvStream = ##class(%Stream.FileCharacter).%New()
	s dt = $zdatetime($h,3)
	s filedt = $TR($TR($zdatetime($h,2),":","-")," ","-")
	
	
	
	if (errorType = 2){
		s csvFileName =  "Notifications for "_fileName_"-"_filedt_".csv"   ;"Notifications for "_fileName_" in "_$replace(bk,"/",",")_"-"_filedt_".csv"
	} else {
		s csvFileName = "ErrorReport for "_fileName_"-"_filedt_".csv"    ; "ErrorReport for "_fileName_" in "_$replace(bk,"/",",")_"-"_filedt_".csv"
	}
	
	s outputsDir = "c:\intersystems\cache\jondax-trial\"_companyName_"\"_$replace(bk,"/","\")_"\outputs\"
	s csvStream.Filename = outputsDir_csvFileName
	s csvStream.TranslateTable="UTF8"
 	s csvStream.BOM=$C(239,187,191)
 	if ##class(%File).Exists(outputsDir_csvFileName) d ##class(%File).Delete(outputsDir_csvFileName) 	
	s writeStatus = csvStream.Write(csvStr)
	d csvStream.%Save()
		
	q outputsDir_csvFileName
	
GenerateErrorData(errorCode,fileName="",bucketName="",reason="",fromFormat="",toFormat="")
	#import MX
	&sql(SELECT Description INTO :errorData FROM ErrorCode WHERE Code=:errorCode)
	i ($L(fileName)>0){s errorData = $REPLACE(errorData,"[filename]",fileName)}
	i ($L(bucketName)>0){s errorData = $REPLACE(errorData,"[bucket]",bucketName)}
	i ($L(reason)>0){s errorData = $REPLACE(errorData,"[:reason]",reason)}
	i ($L(fromFormat)>0){s errorData = $REPLACE(errorData,"[:format]",fromFormat, 0, 1)}
	i ($L(toFormat)>0){s errorData = $REPLACE(errorData,"[:format]",toFormat,0,1)}
	q errorData
	
GenerateErrorName(errorCode)
	#import MX
	&sql(SELECT Name INTO :errorName FROM ErrorCode WHERE Code=:errorCode)
	q errorName
	
GenerateRedactionErrorReportByRid(rid)
	q "1"

trialHL7ToFHIRjson^MAC^^67186,40831.0600653^0
trialHL7ToFHIRjson
.
ConvertResults(filePath,rid) ;fileName is full HL7 filepath
	#import MX
	d INIT^WSP999
	s fileFormat=$g(%session.Data("OutputFormat"))
	d StandardizeHL7(filePath)
	d HL7ToSDA(filePath)
.
	if (fileFormat["json")	
	{
		d SDAToFHIRJson(filePath)
		}
	else{
		d SDAToFHIRXml(filePath)
	}	
	if xml'="" d
	.d Upload2Files(filePath,xml,rid)
	.s %session.Data("jxTrial","OutputDir","HL7")=filePath
	.s %session.Data("jxTrial","OutputDir","xml/json")=xml
	e  &js<alert("ERROR creating FHIRjson output file. Please contact the developers with the file ID.")>
	
	q
StandardizeHL7(fname)
	s hl7msg = ##class(EnsLib.HL7.Message).ImportFromFile(fname)
	i ('hl7msg){
		;w !, "ERROR IMPORTING HL7 FILE: "
		&js<alert("WRONG FILE FORMAT! IMPORTED FILE. ")>
		q
	}
	//new added
	s tMSH = hl7msg.FindSegment("MSH")
	if (tMSH){
		s tEncNum = tMSH.GetValueAt(4, "x")
		if ('tEncNum){
			s EncStatus = tMSH.SetValueAt("x",4)
			;w !,"Added 'x' at MSH:4"
		}
	} //end 	
	; setting Encounter
	s tPV1 = hl7msg.FindSegment("PV1")
	if (tPV1){
		s tEncNum = tPV1.GetValueAt(19, ":_~\&")
		if ('tEncNum){
			s EncStatus = tPV1.SetValueAt("123456789", 19)
			;w !,"Added Encounter number 123456789 at PV1:19"
		} 
	} else{
		s tPV1 = ##class(EnsLib.HL7.Segment).%New()
		s PV1Status = tPV1.SetValueAt("PV1", 0)
		s EncNumStatus = tPV1.SetValueAt("123456789",19)
		
		d hl7msg.FindSegment("PID", .PIDIndex)
		if (PIDIndex){
			s PV1Index = PIDIndex + 1
		} else {
			s PV1Index = 3
		}
		s setSegStatus = hl7msg.InsertSegmentAt(tPV1, PV1Index)
		if ('setSegStatus){
			;w !, "Failed to insert PV1 segment",!
			&js<alert("Failed to insert PV1 segment");>
			q
		}
		;w !,"Added added PV1 segment with encounter number 123456789 after PID"
		KILL tPV1, PIDIndex, PV1Index
	}
	
	
	; finding OBRs
	s OBRIndex = 0
	s listOBR = $LISTBUILD()
	WHILE (OBRIndex '= ""){
		d hl7msg.FindSegment("OBR", .OBRIndex)
		if (OBRIndex){
			s listOBR = listOBR_$LISTBUILD(OBRIndex)	
		}
	}
	//new added
	s tOBR=hl7msg.FindSegment("OBR")
	s obrStatus = tOBR.SetValueAt("1",1) 
	s obrStatus = tOBR.SetValueAt("x",4)
	;s obrStatus = tOBR.SetValueAt("F",25)
	//end added
	; finding ORCs
	s ORCIndex = 0
	s listORC = $LISTBUILD()
	WHILE(ORCIndex '=""){
		d hl7msg.FindSegment("ORC", .ORCIndex)
		if (ORCIndex){
			s listORC = listORC_$LISTBUILD(ORCIndex)	
		}
	}
	
	i ($LISTLENGTH(listOBR)<$LISTLENGTH(listORC)){
		w !,"Bad Format: numbers of OBR is less than numbers of ORC in the file."
		&js<alert("Bad Format: numbers of OBR is less than numbers of ORC in the file.");>
		q 
	}
	;zw listOBR
	s ORCIndexCarry = 0
	s numAddedSegments = 0
	FOR index=2:1:($LISTLENGTH(listOBR)){
		s curOBRIndex = $LISTGET(listOBR,index)
		s orcindex = index - ORCIndexCarry
		s curORCIndex = $LISTGET(listORC,orcindex)
.
		; setting ORC
		if ((curORCIndex '= "") && (curORCIndex < curOBRIndex)){
		
			s segIndex = curORCIndex - 1
			s tORC = hl7msg.FindSegment("ORC",.segIndex)
			i ((tORC '="") && (ORCIndex < curOBRIndex)){
				s tOBS = tORC.GetValueAt(29, ":_~\&")
				if ('tOBS){
					s obsStatus = tORC.SetValueAt("LAB",29)
					s obsStatus = tORC.SetValueAt("A",5)
				}
			}
			;w !,"Added value for ORC at index: "_segIndex
		} else {
	
			s tORC = ##class(EnsLib.HL7.Segment).%New()
			s orcStatus = tORC.SetValueAt("ORC",0)
			s obsStatus = tORC.SetValueAt("LAB",29)
			s obsStatus = tORC.SetValueAt("A",5)
			s curOBRIndex = curOBRIndex + numAddedSegments
			s setSegStatus = hl7msg.InsertSegmentAt(tORC, curOBRIndex)
			if ('setSegStatus){
				;w !, "Failed to insert ORC segment",!
				&js<alert("Failed to insert ORC segment");>
				q
			}
			;w !,"Added ORC at index: "_curOBRIndex
			s ORCIndexCarry = ORCIndexCarry + 1
			s numAddedSegments = numAddedSegments + 1
		} 
		
		
	}
		
.
	KILL tORC, OBRIndex, ORCIndex, ORCIndexCarry
	
	s hl7Str = hl7msg.OutputToString()
	/*
	s f1="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\testing\stdHL7.txt"
	o f1:"wns"
	u f1
	w hl7Str
	c f1
	;k ^jxTransform("hl7")
	;s ^jxTransform("hl7")=hl7Str */
	s %session.Data("jxTransform","hl7Standardized")=hl7Str
	
	q
HL7ToSDA(fName)
.
	s hl7Stream = ##class(%Stream.GlobalCharacter).%New()
	d hl7Stream.Write($g(%session.Data("jxTransform","hl7Standardized")))
	;d hl7Stream.Write($g(^jxTransform("hl7")))
	;s hl7msg = ##class(EnsLib.HL7.Message).ImportFromFile(fName)
.
	s tMSH = hl7msg.FindSegment("MSH")	; setting DocType
	i (tMSH){
		;k ^jxTransform("SDA", "MSH")
		;s ^jxTransform("SDA", "MSH") = tMSH.OutputToString()
		s %session.Data("jxTransform", "MSH") = tMSH.OutputToString()
		s tType = tMSH.GetValueAt(9, ":_~\&")
		s tVersion = tMSH.GetValueAt(12, ":_~\&")
		i (tType && tVersion){
			s hl7msg.DocType = tVersion_":"_tType
		}
	} else {
		;k ^jxTransform("SDA", "MSH")
		;s ^jxTransform("SDA", "MSH") = ""
		s %session.Data("jxTransform", "MSH") = ""
	}
	d ##class(HS.Gateway.HL7.HL7ToSDA3).GetSDA(hl7msg,.tSDA, 1 ,1)
	; tSDA is the SDA %Stream.GlobalCharacter
	s SDAStr = tSDA.Read()
	
	;kill %session.Data("jxTransform")
	;k ^jxTransform("SDAstr")
	;s ^jxTransform("SDAstr") = $$UnescapeHL7^jxDataTransform(SDAStr)
	s %session.Data("jxTransform", "SDAStr") = $$UnescapeHL7^jxDataTransform(SDAStr)
	/*
	s f1="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\testing\SDA.txt"
	o f1:"wns"
	u f1
	w $$UnescapeHL7^jxDataTransform(SDAStr)
	c f1 */
		
	q	
	  
SDAToFHIRJson(fname)
	s xml=""
	s SDAstr=$g(%session.Data("jxTransform", "SDAStr"))
	set SDAstr = $$EscapeFHIR^jxHL7ToFHIRjson(SDAstr)
		
    s tSDA = ##class(%Stream.GlobalCharacter).%New()
    d tSDA.Write(SDAstr)
    try {
        s fhirObj = ##class(HS.FHIR.DTL.Util.API.Transform.SDA3ToFHIR).TransformStream(tSDA, "HS.SDA3.Container", "R4")
        if '$isobject(fhirObj) {
        ;set status = $$$ERROR($$$GeneralError, "Transformation failed: invalid FHIR object.")
        q
    	}       
        s fhirJson = fhirObj.bundle.%ToJSON()
.
        s fsStream = ##class(%GlobalCharacterStream).%New()
        s streamStatus = fsStream.Write(fhirJson)
.
        d fsStream.Rewind()
        s downloadStr = fsStream.Read()
        s fName = $replace($piece(fname, "\", $length(fname, "\")), ".hl7", "")
        
        set fullPath = fname
        set xmlFilePath = $p(fullPath, "\", 1, $l(fullPath, "\") - 1)
        s xml = xmlFilePath_"\"_fName_"_FHIRjson.json"
        
        o xml:"wns"
        u xml
        w downloadStr
        c xml
.
        q 
    } catch ex {
        // Handle the exception
        ;write !,"An error occurred during transformation: ", ex.DisplayString(), !
        ;write "Error details: ", ex.Data("error"), !
        q 
    }
.
SDAToFHIRXml(fname)
	s xml=""
	s SDAstr=$g(%session.Data("jxTransform", "SDAStr"))
	set SDAstr = $$EscapeFHIR^jxHL7ToFHIRjson(SDAstr)
		
    s tSDA = ##class(%Stream.GlobalCharacter).%New()
    d tSDA.Write(SDAstr)
.
    try {
		s fhirObj = ##class(HS.FHIR.DTL.Util.API.Transform.SDA3ToFHIR).TransformStream(tSDA,"HS.SDA3.Container","R4")
        if '$isobject(fhirObj) {
        ;set status = $$$ERROR($$$GeneralError, "Transformation failed: invalid FHIR object.")
        q
    	}       
		s xmlStream = ##class(%Stream.GlobalCharacter).%New()
		s schema = ##class(HS.FHIRServer.Schema).LoadSchema("R4")
  		d ##class(HS.FHIRServer.Util.JSONToXML).JSONToXML(fhirObj.bundle, .xmlStream, schema) 
  		d xmlStream.Rewind()
		s downloadStr = xmlStream.Read()
		
        s fName = $replace($piece(fname, "\", $length(fname, "\")), ".hl7", "")
        set fullPath = fname
        set xmlFilePath = $p(fullPath, "\", 1, $l(fullPath, "\") - 1)
        s xml = xmlFilePath_"\"_fName_"_FHIRxml.xml"
        
        o xml:"wns"
        u xml
        w downloadStr
        c xml
.
        q 
    } catch ex {
        // Handle the exception
        ;write !,"An error occurred during transformation: ", ex.DisplayString(), !
        ;write "Error details: ", ex.Data("error"), !
        q 
    }	
.
Upload2Files(hl7File,outputFile,rid)
	
	&sql(SELECT Profile->CompanyName,Profile->Setting, BucketName, OrgFile INTO :CompanyName,:userSetting, :bk, :fileName FROM MX.Record WHERE ID=:rid)
	s copyDir= "C:\InterSystems\Cache\jondax-trial\"_CompanyName_"\"_$replace(bk,"/","\")_"\results\"
			if (##class(%File).DirectoryExists(copyDir_rid_"\") = 0){
				d ##class(%File).CreateDirectory(copyDir_rid_"\") }
	if (bk["/"){
		s bkfd = $p(bk,"/",2,*)
		s bkn = $p(bk,"/",1)
		&sql(SELECT Buckets_CliProfileName into :CliProfileName FROM MX.Setting_buckets  
		WHERE buckets_folder =:bkfd and buckets_name = :bkn and setting=:userSetting
		)
	} else {
		s bkfd = "-"
		s bkn = bk
		&sql(SELECT Buckets_CliProfileName into :CliProfileName FROM MX.Setting_buckets  
		WHERE buckets_folder =:bkfd and buckets_name = :bkn and setting=:userSetting
		)
	}
	
	if (bk["/"){
		s sourceFolderInProcess = $p(bk,"/",2,*)_"/In-Process"
		s destinationFolderCompleted = $p(bk,"/",2,*)_"/Completed"
		s bk = $p(bk,"/",1)	
	} else {
		s sourceFolderInProcess = "In-Process"
		s destinationFolderCompleted = "Completed"
	}
	
	&js<console.log("#(userSetting)#")>
	&js<console.log("#(CliProfileName)#")>
	
	s sts1 = ##class(python.s3Utils).uploadFile(CliProfileName, hl7File, bk, destinationFolderCompleted)
	s sts2 = ##class(python.s3Utils).uploadFile(CliProfileName, outputFile, bk, destinationFolderCompleted)
	s fileName=$$C2H^WSP999(fileName)
	s sts3 = ##class(python.s3Utils).moveFile(CliProfileName,bk,bk, fileName, sourceFolderInProcess , destinationFolderCompleted)	
	&js<console.log("#(sts1)#")>
	&js<console.log("#(sts2)#, #(bk)#, #(fileName)#")>
	
	if ((+sts1=0)!(+sts2=0)!(+sts3=0)){
		&js<alert("An error occurred in moving files between buckets. Alert developers with file ID: #(rid)# , File Name: #($p(fileName, "\",*))#")>
	} else {
	;}// old close tag of if
	if (+sts1 = 1){
		; copy the HL7 result
		;d ##class(%File).CopyFile(hl7File,"C:\InterSystems\Cache\JondaX\JondaX\jondaffr2\copies")
		d ##class(%File).CopyFile(hl7File,copyDir_rid_"\")
		d ##class(%File).Delete(hl7File)
	}
	if (+sts2 = 1){
		; copy the FHIR result
		;d ##class(%File).CopyFile(outputFile,"C:\InterSystems\Cache\JondaX\JondaX\jondaffr2\copies")
		d ##class(%File).CopyFile(outputFile,copyDir_rid_"\")
		d ##class(%File).Delete(outputFile)
	}
	s dt = $zdatetime($h,3)
	s uid = %session.Data("UserID")
	&sql(UPDATE MX.Record SET Status='Completed', ReviewedDate=:dt, ReviewedBy=:uid WHERE ID = :rid)
	
	s status= $$GenerateErrorReportByRid^trialErrorReport(rid,2)
	i (status '= 0){
		//&sql(SELECT Profile->Setting->CliProfileName, BucketName, OrgFile INTO :CliProfileName, :bk, :fileName FROM MX.Record WHERE ID=:rid)
		
		s sts = ##class(python.s3Utils).uploadFile(CliProfileName, status, bk, destinationFolderCompleted)
	
		; copy the error result
		d ##class(%File).CopyFile(status,"C:\InterSystems\Cache\JondaX\JondaX\jondaffr2\copies\"_fileName)
		s errFname=##class(%File).GetFilename(status)
		d ##class(%File).CopyFile(status,copyDir_rid_"\"_errFname)
		d ##class(%File).Delete(status)	
	
	}
	; Commented by DW 21/11/2023
	;d StripTables^jxBiolytica(rid)
	
	s uid = %session.Data("UserID")
	s rid = %session.Data("jxTransform","rid")
	if ($d(^FormData(uid, rid)) = 10){
		; Commented by DW 21/11/2023
		;K ^FormData(uid,rid)
	}
	}
	q
		
	

trialHome^MAC^^67121,43109.817789^0
trialHome
InitMe
	#Import MX
	s cID=$g(%session.Data("UserID"))
	&sql(SELECT ContactPerson,UserID INTO :cName,:uName FROM "User" WHERE ID=:cID)
	
	if ($LENGTH(uName)'=0){
	s uName=$ZCONVERT($P(uName,"@",1),"s")
	&js<document.getElementById("uName").innerHTML = "#(uName)#">}
	
	&sql(SELECT EndDate INTO :day FROM SUBSCRIPTION WHERE Profile=:cID AND Subscription=8)
	s day= $zdate(day) 
	&js<document.getElementById("days").innerHTML = "#(day)#";>
	q
SetFooter
	w "<div class='links'><footer>",!
	w "<a href='trialAux.csp?section=terms' target='_blank' class='footer-link'><span class='footer-span'>Terms of use</span></a>",!
    w "<span class='t1'>&emsp;|&emsp;</span>",!
    w "<a href='trialAux.csp?section=privacy' target='_blank' class='footer-link'><span class='footer-span'>Privacy policy</span></a>",!
    w "<span class='t1'>&emsp;|&emsp;</span>",!
    w "<a href='mailto:partnerships@jonda.health?subject=More%20Information%20About%20JondaX&body=I%20would%20like%20to%20know%20more%20about%20JondaX.' class='footer-link'>"
    w "<span class='footer-span'>Contact us</span></a>",!
    w "</footer></div>",!
	q	

trialLogin^MAC^^67241,54818.1734427^0
trialLogin
Validate	
	#import MX
	d INIT1^CSP999
	s id=""
	s dt=$zdatetime($h,3)
	s d1=$zconvert(d1,"l")
	if '$d(^LoginAttempt(d1)) {s ^LoginAttempt(d1)=5}
	i +$h>+$g(^Timeout(d1)) k ^Timeout(d1)
	i $d(^Timeout(d1)) ,+$h=+$g(^Timeout(d1)),($p($h,",",2)-$p($g(^Timeout(d1)),",",2)) > 300 {k ^Timeout(d1)} 
	if $g(^LoginAttempt(d1))<1,'$d(^Timeout(d1)) {s ^LoginAttempt(d1)=5}
	s timeFrame=180
	if $g(^LoginAttempt(d1))=5 s ^FirstAtmpt(d1)=$h ;$p($h,",",2) 
	
	&sql(SELECT ID,CompanyName,CompanyLogo,Address_City,Address_Country->Name,ContactPerson
		INTO :id,:r1,:r2,:r3,:r4,:r5
		FROM "User" 
		WHERE UserID=:d1 AND %EXACT(Password)=:d2 AND IsNull(DeletedDate,'')='' AND IsTrial=1)
	i id="" d  q
	. s ^LoginAttempt(d1)=$g(^LoginAttempt(d1))-1
	. &js<document.getElementById("AlertText").style.opacity=1; document.getElementById("AlertText").innerHTML="Incorrect email or password";> 
	. if $g(^LoginAttempt(d1))<1,$p($h,",",1)=$p($g(^FirstAtmpt(d1)),",",1),($p($h,",",2)-$p($g(^FirstAtmpt(d1)),",",2))< timeFrame d
	..i '$d(^Timeout(d1)) s ^Timeout(d1)=$h d TimeOutMail^AutoMail(d1)
	..&js<document.getElementById("AlertText").innerHTML="Incorrect email or password<br>Too Many Attempts<br>";> ;&js<alert("Too Many Attempts"); > document.getElementById("AlertText").style.opacity=1;
	..;&js<document.getElementById("FailedText").style.opacity=1;document.getElementById("FailedText").innerHTML="Too Many Attempts";> ;&js<alert("Too Many Attempts");>
	. s valid=0 d LoginMail^AutoMail(valid)
	. q:id="" 
	
	i '$d(^Timeout(d1)){
		s loginCount = 0,endDate=""
		&sql(SELECT EndDate
		  	INTO :endDate
		  	FROM MX.Subscription
		  	WHERE Profile=:id AND Subscription=8 AND IsNull(CancelRequest,'')='')
		if +endDate < +$h	 {
			&js<openPopup1();>
	 	}
	 	else{	
			&sql(SELECT count(*)
				INTO :loginCount
				FROM User_LastLogin
				WHERE "User"=:id)
			s user=##class(User).%OpenId(id)
			s lastLogin=$zdatetime($horolog,3)
			d user.LastLogin.SetAt(lastLogin,loginCount+1)
			d user.%Save()
.
			if r1="Jonda Health" s r1="JondaX"
			s fDir="C:/InterSystems/Cache/JondaX-Trials/"_r1_"/" 
			s %session.Data("UserID")=id
			s %session.Data("CompanyName")=r1
			s %session.Data("CompanyLogo")=r2
			s %session.Data("City")=r3
			s %session.Data("Country")=r4
			s %session.Data("UserName")=r5
			s %session.Data("Dir")=fDir ;not use
			s %session.Data("SessionId")=%session.SessionId
			s valid=1 d LoginMail^AutoMail(valid)
			if loginCount=0 &js<window.open('trialChangePassword.csp','_self')>
			e  &js<window.open('trialMain.csp','_self')> ;change the landing page 
		}
		
		
	}else {&js<document.getElementById("AlertText").style.opacity=1;document.getElementById("AlertText").innerHTML="You have exceeded your login attempts. Try again Later.";> } ;&js<alert("Try Again Later");> }
	
	q		
	
Logout(d1)
	k ^LoginAttempt(d1)
	k %session.Data
	&js<window.open('trialLogin.csp','_self')>
	q	

trialResetPassword^MAC^^67123,31765.4589366^0
trialResetPassword
CheckUser
	#import MX
	d INIT^CSP999
	s mail=$zconvert(d1,"l")
	&sql(SELECT ID INTO uID FROM "User" WHERE UserID=:mail)
	i uID'="" {
		if $d(^TrialUser(mail,"ResetPswdTime")),(+$h<=+$g(^TrialUser(mail,"ResetPswdTime"))!$p($h,",",2)<=$p($g(^TrialUser(mail,"ResetPswdTime")),",",2)) d
		.&js<AlertText.innerHTML="You can reset password only one time in 24 hours!">
		e  d
		.s %session.Data("TrialResetPassword","Email")=mail 
		.s %session.Data("UserID")=uID
	}else  {&js<AlertText.innerHTML="User does not exist with this mail!">}
	q
SetNewPassword
	#import MX
	d INIT^CSP999
	;	i $d(^Timeout(d1)),+$h=+$g(^Timeout(d1)),($p($h,",",2)-$p($g(^Timeout(d1)),",",2)) > 300 {k ^Timeout(d1)} 
	if d2=""{
		s uMail=$g(%session.Data("Email"))
		&sql(UPDATE "User" SET Password=:d1 WHERE UserID=:uMail)
		i SQLCODE=0 {
			k ^TrialUser(uMail,"ResetPswd")
			d ResetSuccessful^AutoMail(uMail)
			s ^TrialUser(uMail,"ResetPswdTime")=$h
			k %session.Data
			&js<window.open("trialLogin.csp","_self")>
			}
	}
	q	
ResetPassword	;not used, moved to ^AutoMail
	;d INIT^CSP999
	s EmailAddress=d1
	s EmailAddress=$zconvert(EmailAddress,"l")
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ;use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.io"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	set mail.Subject="JondaX Trial Reset Password"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	s AuthNum=$random(999999)
	while $l(AuthNum)<6{s AuthNum=$random(999999)}
	s ^TrialUser(EmailAddress,"ResetPswd")=AuthNum
	s FName=""
	&sql(SELECT ContactPerson INTO :FName FROM MX."User" WHERE UserID=:EmailAddress)
	
	s MailMsg="<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'><html><head><link href='https://fonts.googleapis.com' rel='preconnect'><link crossorigin='' href='https://fonts.gstatic.com' rel='preconnect'><link href='https://fonts.googleapis.com/css2?family=Montserrat:wght@200&amp;display=swap' rel='stylesheet'></head><body style='background-color: #FFFFFF;font-family: 'Montserrat', sans-serif; margin: 0px'><div align='center' style='background-color: #FFFFFF;'><div align='left' style='width: 500px'><br><div align='right'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/logo.png' style='width:130px'></div><br><br><div align='center'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/resetPwd1.png' style='width:300px'></div><div align='center' style='font-size: 18pt'>Reset your password</div><br><br>Hi "_FName_", <br><br>We&#39;re sorry to hear that you forgot your password! Don&#39;t worry, it happens to all of us at some point. To reset your password, please use the confirmation code below to complete the process. <br><br><br><div align='center'><div style='font-size: 50pt'>"_AuthNum_"</div></div><br><br><br><div style='background-color: #F2F2F2; width: 100%; padding: 15px; color: white; border-radius: 15px;'><table cellpadding='5px' style='width: 100%'><tr><td style='color:#000000'>If you didn&#39;t make this request or have any questions, please contact us via mail at <a href='mailto:partnerships@jonda.health'>partnerships@jonda.health</a> </td></tr></table></div><br><br><br></div><div align='center' style='background-color:#405470; width: 600px; padding: 15px; color: white; border-radius: 15px 15px 0px 0px;'>      <img src='https://www.jondax.eu/csp/jondax/assets/images/trial/chain.png' style='width:40px;margin:0 4px 0 4px;' onclick='window.open('https://www.jonda.health/')'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/Youtube.png' style='width:40px;margin:0 4px 0 4px;' onclick='window.open('https://www.youtube.com/@JondaHealth')'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/LinkedIn.png' style='width:40px;margin:0 4px 0 4px;' onclick='window.open('https://sg.linkedin.com/company/jonda-health')'><br><br><div style='font-size: 10pt'>You're receiving this email because you have a Jonda X Trial profile. This email is not a marketing or promotional email. That is why this email does not contain an unsubscribe link. You will receive this email even if you have unsubscribed from Jonda Health's marketing emails.<br><br>Copyright &copy; 2024 Jonda Health </div></div></div></body></html>"
	s status=mail.TextData.Write(MailMsg)	
	s status=mail.TextData.Write($char(13,10))
	set status=mailserver.Send(mail)
	s dt=$h
	s ^TrialAutomail(dt)=status
	s ^TrialAutomail(dt,"Subject")="LIST: JondaX Trial USER RESET PASSWORD"
	s ^TrialAutomail(dt,"To")=EmailAddress
	&js<window.open("trialResetPassword2.csp","_self")>
	q
	
ResetSuccessful(d1) ;not used, moved to ^AutoMail
	s EmailAddress=d1
	s EmailAddress=$zconvert(EmailAddress,"l")
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ;use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.io"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
.
	set mail.Subject="JondaX Trial password has been changed"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
.
	s FName=""
	&sql(SELECT ContactPerson INTO :FName FROM MX."User" WHERE UserID=:EmailAddress)
	
	s MailMsg="<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'><html><head><link href='https://fonts.googleapis.com' rel='preconnect'><link crossorigin='' href='https://fonts.gstatic.com' rel='preconnect'><link href='https://fonts.googleapis.com/css2?family=Montserrat:wght@200&amp;display=swap' rel='stylesheet'></head><body style='background-color: #FFFFFF;font-family: 'Montserrat', sans-serif; margin: 0px'><div align='center' style='background-color: #FFFFFF;'><div align='left' style='width: 500px'><br><div align='right'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/logo.png' style='width:130px'></div><br><br><div align='center'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/resetPwd2.png' style='width:300px'></div><div align='center' style='font-size: 18pt'>Password successfully changed</div><br><br>Hi "_FName_", <br><br><div align='center'>You have successfully changed your password. </div><br><br><br><div style='background-color: #F2F2F2; width: 100%; padding: 15px; color: white; border-radius: 15px;'><table cellpadding='5px' style='width: 100%'><tr><td style='color:#000000'>If you didn&#39;t make this request or have any questions, please contact us via mail at <a href='mailto:partnerships@jonda.health'>partnerships@jonda.health</a> </td></tr></table></div><br><br><br></div><div align='center' style='background-color:#405470; width: 600px; padding: 15px; color: white; border-radius: 15px 15px 0px 0px;'>      <img src='https://www.jondax.eu/csp/jondax/assets/images/trial/chain.png' style='width:40px;margin:0 4px 0 4px;' onclick='window.open('https://www.jonda.health/')'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/Youtube.png' style='width:40px;margin:0 4px 0 4px;' onclick='window.open('https://www.youtube.com/@JondaHealth')'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/LinkedIn.png' style='width:40px;margin:0 4px 0 4px;' onclick='window.open('https://sg.linkedin.com/company/jonda-health')'><br><br><div style='font-size: 10pt'>You're receiving this email because you have a Jonda X Trial profile. This email is not a marketing or promotional email. That is why this email does not contain an unsubscribe link. You will receive this email even if you have unsubscribed from Jonda Health's marketing emails.<br><br>Copyright &copy; 2024 Jonda Health </div></div></div></body></html>"
	d mail.TextData.Write(MailMsg)
	set status=mailserver.Send(mail)
	
	s dt=$h
	s ^Automail(dt)=status
	s ^Automail(dt,"Subject")="LIST: JondaX Trial USER RESET PASSWORD"
	s ^Automail(dt,"To")=EmailAddress
	
	q	

trialResult2HL7^MAC^^67268,18937.9387623^0
trialResult2HL7(rid, devMode=0)
	#import MX
	
	&sql(SELECT Profile->CompanyName, Profile->Setting->ID, OrgFile, BucketName, ReportDate INTO :CompanyName, :setting, :fileName, :bk, :reportDate FROM Record WHERE ID=:rid)
	s CompanyName=$replace(CompanyName," ","")
	&sql(SELECT ReportDate INTO :RBTReportDate FROM ResultBloodTest WHERE Record->ID=:rid)
	if (RBTReportDate '= ""){
		s reportDate = RBTReportDate
	}
	
	&sql(SELECT CliProfileName INTO :CliProfileName FROM Setting WHERE ID=:setting)
.
	n d1,key,Q
	n d1,d2,d3,d4,d5,r1,r2,r3,r4
.
	if (bk["/"){
		s bksys = $replace(bk,"/","\")
	} else { s bksys = bk}
.
	s inProcessBucket = "s3://"_bk_"/In-Process/"
	s failureBucket = "s3://"_bk_"/Failure/"
	s completedBucket = "s3://"_bk_"/Completed/"
	s outputsDir = "C:\InterSystems\Cache\jondax-trial\"_CompanyName_"\"_bksys_"\outputs\"
	
	&sql(SELECT ID INTO :rbt From ResultBloodTest WHERE Record->ID=:rid)
	
	i (devMode){w !,"RBT: ", rbt}
	
	;&js<console.log(`#(rbt)#`)>
	
	if ((rid = "")!(rbt="")){q 0}
	
	; take place holder from table.
	; dummy
	s emptyPlaceHolder = ""
	s hl7msg = ##class(EnsLib.HL7.Message).%New()
	d hl7msg.Clear()
	
	s MSH = ##class(EnsLib.HL7.Segment).%New()
	s MSHstatus = MSH.SetValueAt("^~\\&",1)
	s MSHstatus = MSH.SetValueAt("mshSendingFaciliy", 4)
	s MSHstatus = MSH.SetValueAt("ORU^R01",8)
	s MSHstatus = MSH.SetValueAt("2.3",11)
	s MSHstatus = MSH.SetValueAt("MSH",0)
	s setSegStatus = hl7msg.InsertSegmentAt(MSH, 1)
	
	s PID = ##class(EnsLib.HL7.Segment).%New()
	s PIDstatus = PID.SetValueAt("PID",0)
	s PIDstatus = PID.SetValueAt(emptyPlaceHolder,3)
	s PIDstatus = PID.SetValueAt(emptyPlaceHolder,5)
	s setSegStatus = hl7msg.InsertSegmentAt(PID, 2)
	
	s PV1 = ##class(EnsLib.HL7.Segment).%New()
	s PV1status = PV1.SetValueAt("PV1",0)
	s PV1status = PV1.SetValueAt(emptyPlaceHolder,2)
	s PV1status = PV1.SetValueAt(emptyPlaceHolder,19)
	s setSegStatus = hl7msg.InsertSegmentAt(PV1, 3)
	
	s ORC = ##class(EnsLib.HL7.Segment).%New()
	s ORCstatus = ORC.SetValueAt("ORC",0)
	s ORCstatus = ORC.SetValueAt("1",1)
	s ORCstatus = ORC.SetValueAt("LAB",29)
	s setSegStatus = hl7msg.InsertSegmentAt(ORC, 4)
.
	s reportDateHL7 = $ZDT(reportDate,8)
	s reportDateHL7 = reportDateHL7_"000000"
	if (reportDate = ""){s reportDateHL7 = ""}
	
	s OBR = ##class(EnsLib.HL7.Segment).%New()
	s OBRstatus = OBR.SetValueAt("OBR",0)
	s OBRstatus = OBR.SetValueAt(emptyPlaceHolder,4)
	s OBRstatus = OBR.SetValueAt(reportDateHL7,14)
	s setSegStatus = hl7msg.InsertSegmentAt(OBR, 5)
.
	k MissingSIName
	k MissingTemplate
	k MissingUnitConversion
	
	&sql(DECLARE CRHL CURSOR FOR
		SELECT Tests_HighRange, Tests_LowRange, Tests_Result, Tests_SIUnit, Tests_TestName, Tests_TestDate
		INTO :d1,:d2,:d3,:d4,:d5, :d6
		FROM ResultBloodTest_Tests
		WHERE ResultBloodTest=:rbt
	)
	&sql(OPEN CRHL)
	
	&sql(FETCH CRHL)
.
	if SQLCODE '= 0{
		q 0
	}
	s OBXIndex = 0
	s NTEIndex=0
	WHILE SQLCODE=0{  
		if (d5=""){&sql(FETCH CRHL) continue}
	
		&sql(SELECT SIName, SIUnit INTO :r1,:r2 FROM DiagnosticTest WHERE Name=:d5 OR SIName=:d5)
		if (r1=""){
			s MissingSIName(d5)=""
			
		} else {
			&sql(SELECT Top 1 Name, UnitName INTO :r3, :r4 FROM trialTemplate WHERE DiagnosticTest=:r1 AND BucketName=:bk AND "Setting"=:setting)
			if (r3 = ""){
				s MissingTemplate(r1)=""
.
			}elseif($d(r3) & $d(r4)){
				s d5 = r3
				s d4 = r4
				
				
				i (($L(d1)'=0) & ($L(d2)'=0) & ($L(d3)'=0)){
					i (r2 '= r4){
						/*
						s d1 = $$U2U^WSP999(r1, d1, r2, r4)
						s d2 = $$U2U^WSP999(r1, d2, r2, r4)
						s d3 = $$U2U^WSP999(r1, d3, r2, r4)
						*/
					} 
	
					i (($L(d1)=0) & ($L(d2)=0) & ($L(d3)=0)){
						s MissingUnitConversion(r3_":"_r2_"->"_r4) = ""
					}
				}
			}	
			
		
		}
		
		i ($L(d1)>0) {s d1 = $$FormatNumber^cMain(d1,2)}
		i ($L(d2)>0) {s d2 = $$FormatNumber^cMain(d2,2)}
		i ($L(d3)>0) {s d3 = $$FormatNumber^cMain(d3,2)}
		
		s OBXIndex = OBXIndex + 1
		s OBX = ##class(EnsLib.HL7.Segment).%New()
		s OBXstatus = OBX.SetValueAt("OBX",0)
		s OBXstatus = OBX.SetValueAt($$EscapeHL7^jxSDAToResults(OBXIndex), 1)
		s OBXstatus = OBX.SetValueAt("NM", 2)
		s OBXstatus = OBX.SetValueAt($$EscapeHL7^jxSDAToResults(d5)_"^"_$$EscapeHL7^jxSDAToResults(d5),3)   ; there must be code
		s OBXstatus = OBX.SetValueAt($$EscapeHL7^jxSDAToResults(d3), 5)
		s d4 = $ZSTRIP(d4,"<>w")
		s OBXstatus = OBX.SetValueAt($$EscapeHL7^jxSDAToResults(d4), 6)
		
		s d1 = $$EscapeHL7^jxSDAToResults(d1)
		s d2 = $$EscapeHL7^jxSDAToResults(d2)
		i (($L(d1)>0) & ($L(d2)>0)){
			s OBXstatus = OBX.SetValueAt(d2_"-"_d1, 7)
		} elseif (($L(d1) > 0) & ($L(d2)=0)){
			s OBXstatus = OBX.SetValueAt(d1, 7)
		} elseif (($L(d1) = 0) & ($L(d2)>0)) {
			s OBXstatus = OBX.SetValueAt(d2, 7)
		}
		s OBXstatus = OBX.SetValueAt("F", 11)
.
		; added No Upper/Lower Ref Range
		k NTE
		i $l(d1)=0,$l(d2)>0 d
		. s NTE = ##class(EnsLib.HL7.Segment).%New()
		. s NTEstatus = NTE.SetValueAt("NTE",0)
		. s NTEstatus = NTE.SetValueAt($$EscapeHL7^jxSDAToResults(OBXIndex), 1)
		. s NTEstatus = NTE.SetValueAt("O",2)
		. s NTEstatus = NTE.SetValueAt("Upper-Ref-Range",3)
		
		i $l(d1)>0,$l(d2)=0 d
		. s NTE = ##class(EnsLib.HL7.Segment).%New()
		. s NTEstatus = NTE.SetValueAt("NTE",0)
		. s NTEstatus = NTE.SetValueAt($$EscapeHL7^jxSDAToResults(OBXIndex), 1)
		. s NTEstatus = NTE.SetValueAt("O",2)
		. s NTEstatus = NTE.SetValueAt("Lower-Ref-Range",3)
.
		; END added No Upper/Lower Ref Range
			
		// date time 
		if ($L(d6)>0){
			
			s testDateHL7 = $zdate(d6,3)
			s testDateHL7 = $replace(testDateHL7, "-","")
			s testDateHL7 = testDateHL7_"000000"
			
			s OBXstatus = OBX.SetValueAt(testDateHL7, 14)
		}
		
		s setSegStatus = hl7msg.InsertSegmentAt(OBX, OBXIndex + (5 + NTEIndex))
		i $g(NTE)'="" s NTEIndex=NTEIndex+1,setSegStatus = hl7msg.InsertSegmentAt(NTE, OBXIndex + (5 + NTEIndex))
		
	
		
		
		&sql(FETCH CRHL)
	}
	&sql(CLOSE CRHL)
.
	if ( ($L($o(MissingSIName("")))>0) ! ($L($o(MissingTemplate("")))>0) ! ($L($o(MissingUnitConversion("")))>0) ){
		if (devMode){w !,"MISSING ATTRIBUTES"}
		;&js<console.log(`Attribute Missing!`)>
		s dt = $zdatetime($h, 3)
		
		s errCode = "JX3007" ;err code for missing attributes 
		s errData = fileName_" is missing these templates. "
		
		if ($L($o(MissingSIName("")))>0){
			s errData =  errData_$c(13,10)_"Missing SINames: "
			s missingSIName = $o(MissingSIName(""))
			while (missingSIName'=""){
				s errData = errData_missingSIName_", "
				k MissingSIName(missingSIName)
				s missingSIName = $o(MissingSIName(""))
			}
			 
		}
		
		if ($L($o(MissingTemplate("")))>0){
			s errData =  errData_$c(13,10)_"Missing Template: "
			s missingTemplate = $o(MissingTemplate(""))
			while (missingTemplate'=""){
				s errData = errData_missingTemplate_", "
				k MissingTemplate(missingTemplate)
				s missingTemplate = $o(MissingTemplate(""))
			}	 
		}
		
		if ($L($o(MissingUnitConversion("")))>0){
			s errData =  errData_$c(13,10)_"Missing UnitConversion: "
			s missingUnitConversion = $o(MissingUnitConversion(""))
			while (missingUnitConversion'=""){
				s errData = errData_missingUnitConversion_", "
				k MissingUnitConversion(missingUnitConversion)
				s missingUnitConversion = $o(MissingUnitConversion(""))
			}	 
		}
		
		if (devMode) {w !,errData}
		
		s errName =  $$GenerateErrorName^trialErrorReport(errCode)
		s Location = "trialResult2HL7^trialResult2HL7"
		s Stack = ""
		
		i ($L(errData)>0){s errData = """"_errData_""""}
		
		&sql(INSERT INTO MX.Error (Code, Data, Name, Location, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :dt, :rid, :bk))
		
	}
	;w !,hl7msg.OutputToString()
	if ##class(%File).Exists(outputsDir_$p(fileName,".",1,*-1)_"-output.hl7") d ##class(%File).Delete(outputsDir_$p(fileName,".",1,*-1)_"-output.hl7")
	s status= hl7msg.OutputToFile(outputsDir_$p(fileName,".",1,*-1)_"-output.hl7")
	h 1
	i (status=1 && devMode){w !,"OUTPUT HL7 COMPLETED: ",outputsDir_$p(fileName,".",1,*-1)_"-output.hl7"}
	
	; uncomment this for production
	;&sql(SELECT CLiProfileName INTO :CliProfileName FROM Setting WHERE ID=:setting)
	;if ($L(CliProfileName)=0){q 0 }
	
	; This is for testing, remove in production
	;s CliProfileName = "default"
	
	;s cmdflag = "/SHELL" 
	;s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv",inProcessBucket_fileName, completedBucket, "--profile", CliProfileName)
	;s status = 	$ZF(-100, cmdflag, "aws", "s3", "mv", outputsDir_$p(fileName,".",1,*-1)_".hl7", completedBucket, "--profile", CliProfileName)
	;d StripTables
	if (status = 1){ q outputsDir_$p(fileName,".",1,*-1)_"-output.hl7"}
	q 0
	
	
UpdateRBT(rid, testName, testValue, testUnit, testHiRange, testLoRange, testDate, testComment)
	#import MX
	
	&sql(SELECT ID INTO :rbt FROM ResultBloodTest WHERE Record->ID=:rid)
	if ($L(rbt)=0){q}
	&sql(SELECT COUNT(ID) INTO :objCount FROM ResultBloodTest_Tests WHERE ResultBloodTest=:rbt)
	s objxcount = +objCount
	s objxcount=objxcount+1
	s objx=##class(MX.ResultBloodTest).%OpenId(rbt)
	s objx1=##class(MX.ResultBloodTestValue).%New()
	s objx1.TestName= testName
	s objx1.Result=testValue
	s objx1.SIUnit=testUnit
	s objx1.LowRange=testLoRange
	s objx1.HighRange=testHiRange
	s objx1.Comment=testComment
	
	if ($L(testDate)>0){
		s testDate = $replace(testDate, "-","/")
		s testDateInternal = $zdateh(testDate, 4)
		//s objx1.TestDate = $zdate(testDateInternal, 1)
		//s objx1.TestDate = $zdateh(testDate,6,,,,,,,-1)
		s objx1.TestDate = $zdateh(testDate, 4)
		
		//database wants mm/dd/yyyy
	}
	
	
	d objx.Tests.SetAt(objx1,objxcount)
.
	s sts = objx.%Save()
.
	q	
	
ClearRBT(rid)
	#import MX
	&sql(SELECT ID INTO :rbt from MX.ResultBloodTest WHERE Record->ID=:rid)
	if ($L(rbt)=0){q}
	&sql(DELETE FROM MX.ResultBloodTest_Tests WHERE ResultBloodTest=:rbt)
	q
.
.
StripTablesAndCleanUp(rid)
	
	#import MX
	
	&sql(SELECT ID INTO :rbt From ResultBloodTest WHERE Record->ID=:rid)
		
	&sql(DELETE FROM ResultBloodTest_Tests WHERE ResultBloodTest = :rbt)
	&sql(DELETE FROM ResultBloodTest WHERE Record->ID=:rid)
	&sql(UPDATE Record SET BinaryData=NULL, OrgFile=NULL, OCR=NULL WHERE ID = :rid)
	q
	
.

trialReviewResult^MAC^^67304,35808.2666689^0
trialReviewResultGroot
InitMe
	#import MX
	d INIT1^CSP999
	// lock down
	i ($g(%session.Data("UserID"))=""){
		&js<window.open("cLockdown.csp","_self")>
		q 
	}
	// Get rid & set rid in csp
	s rid=$g(%session.Data("jxTransform","rid"))
	&js<document.getElementById("trans-id").innerHTML="Transaction ID. #(rid)#";rid=#(rid)#>
	
	// Pull data of the file & Report Date
	&sql(SELECT Profile,BucketName,fExt,TempFile,Type,ReportDate,Profile->ContactPerson,Profile->UserID
		INTO :cID,:tName,:fExt,:tmpname,:reportType,:rReportDate,:cName,:uName
	 	FROM Record 
	 	WHERE ID=:rid)
	&sql(SELECT ID,ReportDate
		INTO :rbt,:rbtReportDate
		FROM ResultBloodTest
		WHERE Record=:rid
	)
	// Set Client name, Template name,report date and report format in csp
	&js<rbt="#(rbt)#">
	if ($LENGTH(cName)=0){
		s uName=$ZCONVERT($P(uName,"@",1),"s")
		&js<document.getElementById("cName").innerHTML = "#(uName)#">
		&js<document.getElementById("cName1").innerHTML = "#(uName)#">
	}
	else{
		&js<document.getElementById("cName").innerHTML = "#(cName)#">
		&js<document.getElementById("cName1").innerHTML = "#(cName)#">
	}
	&js<document.getElementById("tName").innerHTML = "#(tName)#">
	&js<document.getElementById("tName1").innerHTML = "#(tName)#">
	
	s reportDate=""
	if (rbtReportDate'=""){
		s reportDate=$ZDate(rbtReportDate,3)
	}
	else{
		if (rReportDate'=""){
			s reportDate=$ZDate(rReportDate,3)
		}
	}
	if (reportDate'=""){
		&js<
			//alert(`#(reportDate)#`);
			document.querySelector("#report-date").value=`#(reportDate)#`;
			date = new Date("#(reportDate)#");
			document.querySelector(".date-input").innerHTML=date.getDate().toString().padStart(2, '0')+"/"+(date.getMonth()+1).toString().padStart(2, '0')+"/"+date.getFullYear()+calendarText;
		>
	}
.
	if (reportType=""){
		// set Blood Test as default report type
		&js<reportType="Blood Test">
	}
	else{
		// Inject report type
		&js<reportType="#(reportType)#">
	}
	// Get roe count of textract scan and set in csp
	s path="C:\data_transform\AI\"_tmpname_".csv"
	s trc=$g(^Textract(path,"rowCount"))
	&js<document.getElementById('OCRrowCount').innerHTML = "OCR - " +`#(trc)#`+ " row(s) |";>
	
	// Check for old selection of FileRedaction in ^jxRedacted , 22Nov2024
	i $d(^jxRedacted(rid)) d
	.s jxRedacted=$g(^jxRedacted(rid)) //"Yes" or "No"
	.// Inject the selection into js
	.&js<const value = `#(jxRedacted)#`;
         document.querySelector(`input[name="redact"][value="${value}"]`).checked = true;
         >
	
	s %session.Data("jxTrial","TempDir")="C:\InterSystems\Cache\jondax-trial\adhoc\"_cID_"\"_tmpname_"."_fExt
	s path="C:\data_transform\AI\"_tmpname_".csv"
	s trc=$g(^Textract(path,"rowCount"))
	&js<document.getElementById('OCRrowCount').innerHTML = "OCR - " +`#(trc)#`+ " row(s)";>
	s ^LastView("cReviewResults",UserID,rid)="trialReviewResultGroot.csp"
	q
.
 // Poppulate the result table
 // New file -> if ^AICLAUDE exists, do WriteTableClaudeA 
 //				else pull from MX.ResultBloodTest_Tests
 // In-review -> use ^FormData, do WriteTable1a, latest updated 
WriteResults
	; Initialize variables
	#import MX
	d INIT1^CSP999
	; Lock down
	i ($g(%session.Data("UserID"))=""){
		&js<window.open("cLockdown.csp","_self")>
		q 
	}
	s rid=$g(%session.Data("jxTransform","rid"))
	&sql(SELECT ID 
		INTO :rbt
		FROM ResultBloodTest
		WHERE Record=:rid
	)
	s UserID=$g(%session.Data("UserID"))
	s Q=$c(9) ; tab
	n fname,tmp,fext
	&sql(SELECT OrgFile,TempFile,fExt INTO :fname,:tmp,:fext FROM Record WHERE ID=:rid)
	
	s %dev1="C:\data_transform\AI\"_tmp_".csv"
	s fname=$replace(fname,fext,"")
	s %dev="c:\intersystems\cache\csp\jondax\elfieDemo\"_fname_".csv"
	o %dev:"wns"
	s c1="#405470"	; blue
	s c2="#e63876"	; pink
	s c3="#048f2a"	; green
	s row=""
	s trow=1
	n d0,tempName,tempUnit
	s d0=1,tempName="",tempUnit=""
	k ^martin
	;s ^martin("NM")=0
	
	if ($d(^FormData(UserID, rid)) = 10) {&js<"FormData"> d WriteTable1a	}
	elseif ($d(^AIGEMINI(rid))){&js<"GEMINI"> d WriteTableGeminiA} ;Take Data from ^AIGEMINI
	elseif ($d(^AICLAUDE(rid))){&js<"CLAUDE"> d WriteTableClaudeA} ;Take Data from ^AICLAUDE
	else {&js<"RBT"> d WriteTableRBT }
	q
.
FileStatusChange(d1,d2,d3)
	; Set file status in MX.record, Note=d1,Status=d2,Reason=d3
	#import MX
	d INIT1^CSP999
	s rid=%session.Data("jxTransform","rid")
	; For error files
	if (d2="Failure")!(d2="In-Process"){
		&sql(UPDATE Record SET Note=:d1,Status=:d2,Reason=:d3,ReviewedDate=GETDATE() WHERE ID=:rid)
		// must add to error table based on the selection of reasion
		s errCode = "100"
		s errData = "test data"
		s errName = "test error from review"
		//The new errors are not populated yet, thus leads to '' in errCode,errData,errName
		&sql(SELECT Code,Description,Name INTO :errCode,:errData,:errName FROM ErrorCode WHERE FriendlyDescription=:d3)
		
		s dt = $zdatetime($h,3)
		&sql(SELECT BucketName,OrgFile INTO :bk,:fName FROM Record WHERE ID=:rid)
		s errData = $REPLACE(errData,"[yyyy-mm-dd hh:mm]",dt)
		s errData = $REPLACE(errData,"[filename]",fName)
		s errData = $REPLACE(errData,"[bucket]",bk)
		&sql(INSERT INTO MX.Error (Code, Data, Name, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :dt, :rid, :bk))
	}
	else{
		&sql(UPDATE Record SET Note=:d1,Status=:d2,Reason=:d3 WHERE ID=:rid)
	}	
	q
	
ConvertResults	; not used
	#import MX
	d INIT1^CSP999
	&sql(SELECT SIName 
	INTO :r1
	FROM DiagnosticTest
	WHERE LOWER(Name)[LOWER(:d1)
	)
	//&js<alert(`#(d2)#`+", "+`#(d3)#`+", "+`#(d4)#`+", "+`#(d5)#`+", "+`#(d6)#`);>
	s cVal = $$U2U^WSP999(r1,d2,d5,d6)   ;changed on 2024-03-26 Martin
	s lVal = $$U2U^WSP999(r1,d3,d5,d6) 
	s uVal = $$U2U^WSP999(r1,d4,d5,d6) 
	&js<unitsCal.push("#($s(cVal="":"",1:$$FormatNumber^cMain(cVal,2)))#","#($s(lVal="":"",1:$$FormatNumber^cMain(lVal,2)))#","#($s(uVal="":"",1:$$FormatNumber^cMain(uVal,2)))#")>
	q
	
ConvertNewResults
	; calculate the values 
	; d1=TransformedName, d2= initial value, d3/d4= initial l-range/u-range, d5=from-unit, d6=to-unit
	#import MX
	d INIT1^CSP999
	s rid=$g(%session.Data("jxTransform","rid"))
	&sql(SELECT BucketName INTO :bk FROM Record WHERE ID=:rid)
	&sql(SELECT DiagnosticTest 
	INTO :r1
	FROM TrialTemplate
	WHERE LOWER(Name)=LOWER(:d1) AND BucketName=:bk
	)
	//&js<console.log("Before "+`#(r1)#`+""+`#(d2)#`+", '"+`#(d5)#`+"', '"+`#(d6)#`+"'")>
	//&js<console.log(`#(r1)#`+","+`#(d2)#`+`#(d5)#`+"/"+`#(d6)#`+"/")>  ;+`#(d3)#`+`#(d4)#`)>
	s cVal = $$U2U^WSP999(r1,d2,d5,d6) 
	s lVal = $$U2U^WSP999(r1,d3,d5,d6) 
	s uVal = $$U2U^WSP999(r1,d4,d5,d6) 
	&js<console.log("results  "+`#(cVal)#`+`#(lVal)#`+`#(uVal)#`)>
	&js<unitsCal.push("#($s(cVal="":"",1:$$FormatNumber^cMain(cVal,2)))#","#($s(lVal="":"",1:$$FormatNumber^cMain(lVal,2)))#","#($s(uVal="":"",1:$$FormatNumber^cMain(uVal,2)))#")>
	//s martin=$FNUMBER(cVal,"",2)
	//&js<alert("Result is "+`#(cVal)#`+"Round off "+`#(martin)#`)>	
	q	
WriteReasons
	; Load error reasons from MX.ErrorCode
	#import MX
	d INIT1^CSP999
	&sql(DECLARE C3 CURSOR FOR
		SELECT FriendlyDescription 
		INTO :r1
		FROM ErrorCode
		WHERE IsReason=1
	)
	&sql(OPEN C3)
	&sql(FETCH C3)
	WHILE SQLCODE=0{
		w "<li onclick='selectReason(event)'>"_r1_"</li>"
		&sql(FETCH C3)
	}
	&sql(CLOSE C3)
	q
	
LoadTemplateNames
	; Load template name suggestions
	#import MX
	d INIT1^CSP999
	;&sql(SELECT Setting INTO :setting FROM "User" WHERE ID=:UserID)
	s rid=$g(%session.Data("jxTransform","rid"))
	&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	s testNames = ""
	&sql(DECLARE C4 CURSOR FOR
	SELECT DISTINCT %EXACT(name)
	INTO :r1 
	FROM TrialTemplate
	WHERE LOWER(name)[LOWER(:d1)
	AND BucketName=:bk
	ORDER BY name
	)
	&sql(OPEN C4)
	&sql(FETCH C4)
	if SQLCODE=100 s testNames = "<li class='no-result'>No result found</li>"
	WHILE SQLCODE=0{
		s testNames=testNames_"<li onclick='changeTestName(event)' tabIndex='-1'>"_r1_"</li>\n"
		&sql(FETCH C4)
	}
	&sql(CLOSE C4)
	&js<document.querySelector(".testname-dropdown").firstElementChild.innerHTML = "#(testNames)#">
	q
.
BiomarkerTranslation1(name,bk) ; not used
	s tempName="",tempUnit=""
	s x=$$GetSIName^WSP999(name)
	i x'="" {
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x AND BucketName=:bk )
		}
	q x_$c(1)_tempName_$c(1)_tempUnit
	
		
.
xPopOriginal
	#import MX
	d INIT1^CSP999
.
	s rid=%session.Data("jxTransform","rid")
	
	d ^cReviewRedact
	s r1="",r2=""
	&sql(SELECT TempFile,fExt INTO :r1,:r2 FROM Record WHERE ID=:rid)
	;&sql(SELECT TempFile INTO :r1 FROM Record WHERE ID=:rid)
	
	s file="Review/"_rid_"/"_r1_"."_r2
	;&js<window.open("#(file)#","new")>
	;q
	s r1=""
	
	s ffile="c:\intersystems\cache\csp\review\"_rid_"\"_r1_"."_r2
	s r2=$zconvert(r2,"l")
		
	i r2="heic"!(r2="webp")!(r2="avif") d
	. s cmd="mogrify -resize 50% -format png "_ffile
	. s x=$zf(-1,cmd_" && exit")
	. s r2="PNG"
	. s file="Review/"_rid_"/"_r1_"."_r2
	
	//html result
	i r2="html" d
	. s file="Review/"_rid_"/"_r1_"."_r2
	;&js<alert("#(file)#")>
	s %session.Data("ReviewResults","File")="Review/"_rid
	&js<window.open("#(file)#","_blank")>
	
	;d ##class(%File).Delete(^INST("CSPDir")_"\"_^INST("NS")_"\"_file)
	q
PopOriginal
	#import MX
	d INIT1^CSP999
	//Nyein added on 19th Sept
	s rid=%session.Data("jxTransform","rid")
	
	d ^cReviewRedact
	s r1="",r2=""
	&sql(SELECT TempFile,fExt INTO :r1,:r2 FROM Record WHERE ID=:rid)
	;&sql(SELECT TempFile INTO :r1 FROM Record WHERE ID=:rid)
	
	s file="Review/"_rid_"/"_r1_"."_r2
	s r1=""
	
	&sql(SELECT TempFile,fExt INTO :r1,:r2 FROM Record WHERE ID=:rid)
	&sql(SELECT TempFile INTO :r1 FROM Record WHERE ID=:rid)
	s ffile="c:\intersystems\cache\csp\jondax\review\"_rid_"\"_r1_"."_r2
	s r2=$zconvert(r2,"l")
	
	;i r2="heic"!(r2="webp")!(r2="avif")!(r2="jpg")!(r2="jpeg") d	
	i r2="heic"!(r2="webp")!(r2="avif") d
	. s cmd="mogrify -resize 50% -format png "_ffile
	. s x=$zf(-1,cmd_" && exit")
	. s r2="PNG"
	. s file="Review/"_rid_"/"_r1_"."_r2
	
	//html result
	i r2="html" d
	. s file="Review/"_rid_"/"_r1_"."_r2
	s %session.Data("ReviewResults","File")="Review/"_rid
	s %session.Data("jxTrialPreview","File")="c:\intersystems\cache\csp\jondax\review\"_rid
	&js<window.open("#(file)#","_blank")>
	
	;d ##class(%File).Delete(^INST("CSPDir")_"\"_^INST("NS")_"\"_file)
	q	
	
WriteResultTypes
	; Populate report types
	s rid=%session.Data("jxTransform","rid")
	&sql(SELECT Type
		INTO :reportType
	 	FROM MX.Record 
	 	WHERE ID=:rid)
	&sql(DECLARE C2 CURSOR FOR
		SELECT DISTINCT %EXACT(ResultType)
		INTO :r1
		FROM MX.DiagnosticType
		WHERE DeletedDate IS NULL
	)
	&sql(OPEN C2)
	&sql(FETCH C2)
	s num=1
	WHILE SQLCODE=0{
		w "<div class='report-item'>",!
        w "<div class='round'>",!
        w "<input autocomplete='off' name='report' id='C"_num_"' type='checkbox' value='"_r1_"'"
	 	if (reportType=r1) || (num=1){
		 	w " checked"
	 	}
        w ">",!
        w "<label for='C"_num_"'></label>",!
        w "</div>",!
        w "<p>"_r1_"</p>",!
        w "</div>",!
        s num=num+1
        &sql(FETCH C2)
	}
	&sql(CLOSE C2)
	q	
.
DeleteReviewerFile		; Delete reviewer download file in system
	d ##class(%File).RemoveDirectoryTree($g(%session.Data("reviewerFileDir")))
	k %session.Data("reviewerFileDir"),%session.Data("FileName"),%session.Data("OutputFormat")
	q	
.
UnredactedError // Add record to MX.Error 12-Nov-2024, Martin
	
	s rid=d1
	; if the file isn't redacted
	if ^jxRedacted(rid)="No"
	{
		// Initialize necessary data in variable, pull from MX.Record
		&sql(SELECT OrgFile, BucketName INTO :fileName, :bk FROM MX.Record WHERE ID=:rid)
		s dt = $zdatetime($h, 3)
		s errCode = "JX5001" ;err code for unredacted file
		s errData = fileName_" in "_bk_" contains Personal Identifiable Information. This notification is for compliance as per our contract. The file has been processed and we will delete all records on our end as per our standard process."
		s errName =  $$GenerateErrorName^jxErrorReport(errCode)
		s errLocation = "Review Process"
		s Stack = ""
		i ($L(errData)>0){s errData = """"_errData_""""}
		
		&sql(INSERT INTO MX.Error (Code, Data, Name, Location, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :errLocation, :dt, :rid, :bk))
	}
	q	
	
SaveReport
	; Save report type and date when a report type is selected, js> closeReportSelect()
	#import MX
	s rid=$g(%session.Data("jxTransform","rid"))
	s sid=$g(%session.Data("SessionId"))
	i sid'="",rid="" s rid=$g(^jxTransform(sid,"cReviewResults"))
	&sql(UPDATE Record SET Type=:d1,ReportDate=Date(:d2) WHERE ID=:rid)
	&sql(UPDATE ResultBloodTest SET ReportDate=Date(:d2) WHERE ID=:rbt)
	q	
SaveReportDate ;30/10/2024 New funtion to save report date when clicking "Apply All" button
	#import MX
	&sql(UPDATE Record SET ReportDate=Date(:d1) WHERE ID=:rid)
	&sql(UPDATE ResultBloodTest SET ReportDate=Date(:d1) WHERE Record=:rid)
	q	
	
LoadJXNames(d1)	; Transformed d1(new test name) into template test name
	#import MX
	s UserID=$g(%session.Data("UserID"))
	&sql(SELECT Setting INTO :setting FROM "User" WHERE ID=:UserID)
	s rid=$g(%session.Data("jxTransform","rid"))
	&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	n tempName,tempUnit,IsMatch,ro,r1,r1a
	s testName = ""
	s c1="#405470"	; blue
	s c2="#e63876"	; pink
	s c3="#048f2a"	; green
	s cTestName=$$GetSIName^WSP999(d1)
	; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
	;if cTestName["#",r2="%" s cTestName=$p(cTestName," ",1)
	s r1a=""
	i cTestName="" {
	 	s IsMatch=0,r1a=d1
		WHILE IsMatch=0&($l(r1a)'=0){
			s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
			i r0'="" s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
		i r1a'="" d
		.&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:r1a AND BucketName=:bk)
		.i tempName'="" d
		..s testName=tempName 
		..s testName="<td class='transformed-name issue' style='color:"_c2_"' title='No match-Picking closest JX match'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" 
		.e  d 
		..s testName=r1a 
		..s testName="<td class='transformed-name issue' style='color:"_c2_"' title='No matching Template:Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_d1_"'></td>"
		e  d
		.s tempUnit="" s testName=d1 
		.s testName="<td class='transformed-name issue' style='color:"_c2_";' title='No matching JX Name & Template:Using original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_d1_"'></td>"
		&js<newTestname=`#(testName)#`>
	}
	i cTestName'="" {
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:cTestName AND BucketName=:bk)
		i tempName'="" d
		.;i tempName["(percent)",r2'="%" d
		..;s x1=cTestName_" #" 
		..;&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x1 AND BucketName=:bk)
		.i $zconvert(tempName,"l")=$zconvert(d1,"l") s testName="<td class='transformed-name converted' style='color:"_c1_"' title='Converted:Same BB'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>"
		.e  s d1=cTestName s testName= "<td class='transformed-name converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>"
		e  s testName=d1  s testName="<td class='transformed-name issue' style='color:"_c2_"; ' title='No matching Template- Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_d1_"'></td>"
		&js<newTestname=`#(testName)#`>
		}
	q testName
		
LoadUnitsBasedOnName	; Load unit of the transformed testname
	s units=""
	s rid=$g(%session.Data("jxTransform","rid"))
	&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	&sql(SELECT UnitName 
	INTO :r1
	FROM TrialTemplate
	WHERE LOWER(Name)=LOWER(:d1) 
	AND BucketName=:bk
	) ;query is edited from "LOWER(Name)[LOWER(:d1)' to 'LOWER(Name)=LOWER(:d1)' 17/10/2024
	if (SQLCODE=0){
		s units="<li onclick='changeUnit(event)' tabindex='-1'>"_r1_"</li>\n"
	}
	if (d2="") {
		s units = units_"<li onclick='changeUnit(event)' tabindex='-1'><br></li>\n"
	}
	if (r1'=d2){
		;s units="<li onclick='changeUnit(event)' tabindex='-1'>"_r1_"</li>\n"
		s units = units_"<li onclick='changeUnit(event)' tabindex='-1'>"_d2_"</li>\n"
	}
	&js<document.querySelector(".unit-dropdown").firstElementChild.innerHTML = "#(units)#">
	
	q
	
unitCleanUp	; Clean up from-unit, not use
	; d1= from-unit
	n x,x1,d1x,x2
	s d1x=d1
	s rid=$g(%session.Data("jxTransform","rid"))
.
	s d1=$replace(d1," / ","/")
	s d1=$replace(d1,"|","l")
	s d1=$replace(d1," ","")
	s d1=$replace(d1,".","")
    i $e(d1,$l(d1))="_" s d1=d1_"l"  ;for "g_"
    i $e(d1,$l(d1)-1,$l(d1))="/1" s d1=$replace(d1,"/1","/l")
	s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:d1 OR SIName=:d1)
	i x="",(d1["lU")!(d1["Ul") s d1=$replace(d1,"l","I")
	i x="",d1'="" s d1=d1_"/l"	; because of g. ; commented by DW 2024-03-14 ;uncommented by Martin 2024-03-20
	s x1="" &sql(SELECT ID INTO :x1 FROM SIUnit WHERE Name=:d1 OR SIName=:d1) 
	i x1="",d1'="" s d1=$replace(d1,"/l","")
	i x'="" &sql(SELECT SIName INTO :x2 FROM SIUnit WHERE ID=:x) s d1=x2
	i x1'="" &sql(SELECT SIName INTO :x2 FROM SIUnit WHERE ID=:x1) s d1=x2
	if d1'=d1x &js<newFromUnit1= "#(d1)#">
	e  &js<newFromUnit1= "#(d1x)#">
	q	
.
Binary2file	
	; pass in Record.ID as rid
	#import MX
	n obj
	n r1
	;n r2
	n stream
	n x
	n cmd
	n dir
	n file
	n filelist
	
	; copy binary stream to c:\intersystems\cache\csp\jondax\review and convert to png & deskew
	s obj=##class(Record).%OpenId(rid)
	i obj.BinaryData.FileBinarySize()=0 q
	s filesiz=obj.BinaryData.FileBinarySize()
	s stream=##class(%Stream.FileBinary).%New()
	d ##class(%File).CreateDirectory("c:\intersystems\cache\csp\jondax\review\"_rid)
	d stream.CopyFrom(obj.BinaryData)
	s r1=obj.OrgFile
	
	; Directory for preview file
	s %dev="c:\intersystems\cache\csp\jondax\review\"_rid_"\"_r1
	o %dev:"wns" u %dev
	s status=stream.OutputToDevice()	;Write output in that file
	c %dev
	q
RemoveFile
	s previewFile=$g(%session.Data("jxTrialPreview","File"))
	s tempFile=$g(%session.Data("jxTrial","TempDir"))
	if $d(%session.Data("jxTrial","OutputDir","xml/json")) d ##class(%File).Delete($g(%session.Data("jxTrial","OutputDir","xml/json")))
	d ##class(%File).Delete($g(%session.Data("jxTrial","OutputDir","HL7")))
	d ##class(%File).RemoveDirectoryTree(previewFile)
	d ##class(%File).Delete(tempFile)
	q		
WriteTable1a
	; Populated result table using ^FormData
	; Data clean up, transform, flag errors, flag new Biomarkers, compare rows with Textract scan
	; some variables are set in WriteResults
	s row=$o(^FormData(UserID, rid,row)) g:row="" WriteTable1End
	s r0 = $g(^FormData(UserID, rid, row, "testDate"))
	s r1 = $g(^FormData(UserID, rid, row, "testName"))
	s r2 = $g(^FormData(UserID, rid, row, "testUnit"))
	s r3 = $g(^FormData(UserID, rid, row, "testValue"))	
	s r4 = $g(^FormData(UserID, rid, row, "testLoRange"))	
	s r5 = $g(^FormData(UserID, rid, row, "testHiRange"))
	s r7 = $g(^FormData(UserID, rid, row, "testComment"))
	&sql(SELECT OutputUnit INTO :bk FROM Record WHERE id=:rid)
	
	s r2x=r2	
	g:r1="" WriteTable1a
.
	; clean up units
		s r2=$replace(r2,"|","l")
		s r2=$replace(r2," ","")
		s r3=$replace(r3,",",".")
		i $e(r2,$l(r2)-1,$l(r2))="/1" s r2=$replace(r2,"/1","/l")
		i $e(r2,$l(r2))="_" s r2=r2_"l"
		s r2=$replace(r2," / ","/") 
		s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:r2 OR SIName=:r2)
		i x="",(r2["lU")!(r2["Ul") s r2=$replace(r2,"l","I")
		i x="",r2'="" s r2=r2_"/l"	; because of g. ; commented by DW 2024-03-14 ;uncommented by Martin 2024-03-20
		s x1="" &sql(SELECT ID INTO :x1 FROM SIUnit WHERE Name=:r2 OR SIName=:r2) 
		i x1="",r2'="" s r2=$replace(r2,"/l","")
	; end clean up
	; missing units- check textract
	;for unit is misplaced in value eg."0.10 10e9-l" or "H 3.60 mmol/L" by Martin 2024-04-08
	;s ^martin(row,"1")=r3_", "_r2
	i r3[" " { 
		for i = 1:1:$length(r3, " ") 
		{   if $number($piece(r3, " ", i))  d
	    	.if r2="" s r2=$piece(r3, " ", i+1)
	    	.s r3= $piece(r3, " ", i)  
			}
	}
	;s ^martin(row,"2")=r3_", "_r2
	; clean up value and range
		s r3=$replace(r3,"*","")
		s r3=$replace(r3," ","")
		s r4=$replace(r4," ","")
		i $p(r4,"-",1)'="",$p(r4,"-",2)'="" d	; cater for 1-3
		. s r5=$p(r4,"-",2),r4=$p(r4,"-",1)
		s r5=$replace(r5," ","")
		i $p(r5,"-",1)'="",$p(r5,"-",2)'="" d	; cater for 1-3
		. s r4=$p(r5,"-",1),r5=$p(r5,"-",2)
		i bk["INDO"!(bk["JXTesting") {
			; Use the original from GEMINI
			// treat "." as comma
			;s ^martin(row,"c1")=r1_", "_r3_", "_r4_", "_r5
			s r3=$replace(r3,".",""),r4=$replace(r4,".",""),r5=$replace(r5,".","")
			// treat commas as "."
			s r3=$replace(r3,",","."),r4=$replace(r4,",","."),r5=$replace(r5,",",".")
			;s ^martin(row,"c2")=r1_", "_r3_", "_r4_", "_r5
		}else 
		{	s r3=$replace(r3,",","."),r4=$replace(r4,",","."),r5=$replace(r5,",",".")
			}
	; end clean up
	;cater for "<", ">" signs column placement
	if (r4["<"),(r5="") s r5=r4 s r4=""
	if (r4=""),(r5[">") s r4=r5 s r5=""
	
	
	w "<tr class=''>" 
	w "<td class='actions'><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)' > <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)' >  <img class='add-row-icon' src='./assets/images/row.png' alt='add row' onclick='addNewRow(event)' ></td>"
	w "<td class='date' onclick='jEditBox(event)' style='color:"_c1_"'>"_r0_"</td>"
	w "<td class='test-name' onclick='jEditBox(event)'>"_r1_"</td>"
	s x=$$GetSIName^WSP999(r1)
	; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
	if x["#",r2="%" s x=$p(x," ",1)
	
	/*&sql(select ID INTO x2 from TrialTemplate where DiagnosticTest[:x_" #")
	if x2'="",r2'="%" s x=x_" #" */
	
	if $d(^FormData(UserID, rid, row, "TNameEdited")),$g(^FormData(UserID, rid, row, "TNameEdited"))'=""{
		s r1Edited=$g(^FormData(UserID, rid, row, "TNameEdited"))
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE Name=:r1Edited AND BucketName=:bk)
		if tempName'="" w "<td class='transformed-name edited' style='color:"_c1_";' title='Edited' ><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1Edited_"'></td>"
		e  w "<td class='transformed-name edited' style='color:"_c2_";'title='No matching Template-Edited'  ><input type='text' style='color:"_c2_";' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1Edited_"'></td>"
		}
	else{	//else1
	s r1a=""
	i x="" {
	 	s IsMatch=0,r1a=r1
		WHILE IsMatch=0&($l(r1a)'=0){
			s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
			i r0'="" s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
		
		i r1a'="" d
		.&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:r1a AND BucketName=:bk)
		.i tempName'="" s r1=tempName w "<td class='transformed-name issue' style='color:"_c2_"' title='No match-Picking closest JX match'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1a
		.e  w "<td class='transformed-name issue' style='color:"_c2_"' title='No matching Template:Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>" ;r1a
		e  s tempUnit="" w "<td class='transformed-name issue' style='color:"_c2_";' title='No matching JX Name & Template:Using original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
		
	}
	i x'="" {
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x AND BucketName=:bk)
		i tempName'="" d
		.i tempName["(percent)",r2'="%" d
		..s x=x_" #" ;s tempName=$replace(tempName,"(percent)","(Abs)") 
		..&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x AND BucketName=:bk)
		.i $zconvert(tempName,"l")=$zconvert(r1,"l") w "<td class='transformed-name converted' style='color:"_c1_"' title='Converted:Same BB'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>" ;r1	
		.e  s r1=x w "<td class='transformed-name converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>"
		e  w "<td class='transformed-name issue' style='color:"_c2_"; ' title='No matching Template- Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
		}
	} //end of 	else1
		
	w "<td class='result' onclick='jEditBox(event)'>"_r3_"</td>"
	w "<td class='from-unit' onclick='jEditBox(event)'>"_r2_"</td>"
	if tempUnit'="" {
	s x=$$GetJXUnit^WSP999(r2)
	s r2a=tempUnit
	i x'="" s r2=x 
 
	; more clean up
		i r2="%" d
		. i $l($p(r3,".",1))>3 s r3=$replace(r3,".",""),r3=$e(r3,1,2)_"."_$e(r3,3,999)
		. i $l($p(r4,".",1))>3 s r4=$replace(r4,".",""),r4=$e(r4,1,2)_"."_$e(r4,3,999)
		. i $l($p(r5,".",1))>3 s r5=$replace(r5,".",""),r5=$e(r5,1,2)_"."_$e(r5,3,999)
		 ;end more
		; test if original unit can be converted
		s x="",x=$$U2U^WSP999(r1,r3,r2,r2a)
		;s ^martin("t",row,r1)=r3_","_r2_" ; "_r2a_","_x
		;i x["ERROR" s r2a=tempUnit 
		i x["ERROR" 
	
	 	s r3x=r3,r4x=r4,r5x=r5
		s r3=$$U2U^WSP999(r1,r3,r2,r2a)
		s r4=$$U2U^WSP999(r1,r4,r2,r2a)
		s r5=$$U2U^WSP999(r1,r5,r2,r2a)
		;s ^martin(row,"t2")=r1_","_r2_","_r2a
	}else  {s x="ERROR Converting" s r2a=r2,r3x=r3,r4x=r4,r5x=r5  }
	//s r3=$$C2H^WSP999($g(^FormData(UserID, rid, row, "TValue")))
	s r4=$g(^FormData(UserID, rid, row, "TLoRange"))
	s r5=$g(^FormData(UserID, rid, row, "THiRange"))
	s r4Org = $g(^FormData(UserID, rid, row, "testLoRange"))	
	s r5Org = $g(^FormData(UserID, rid, row, "testHiRange"))
.
	s recalc=0
	
	i $d(^FormData(UserID, rid, row, "TUnitEdited")),$g(^FormData(UserID, rid, row, "TUnitEdited"))'="" {
		s r2Edited=$g(^FormData(UserID, rid, row, "TUnitEdited"))
		s r3=$g(^FormData(UserID, rid, row, "TValue"))
		w "<td class='convert-result-unit edited' style='color:"_c1_";' title='Edited' ><div class='dropdown' style='color:"_c1_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2Edited_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>"
		w "<td class='convert-result-val edited' style='color:"_c1_"' title='Edited'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
		w "<td class='l-range' onclick='jEditBox(event)'>"_r4Org_"</td>",!  ; "_r2x_"
		w "<td class='l-result-val' style='color:"_c1_"' title='Edited'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!
		;w "<td class='l-result-unit'>"_r2a_"</td>",!
		w "<td class='u-range' onclick='jEditBox(event)'>"_r5Org_"</td>",!  ; "_r2x_"
		w "<td class='u-result-val' style='color:"_c1_"' title='Edited'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!
		;w "<td class='u-result-unit'>"_r2a_"</td>",!
		w "<td class='comment' style='display:none;'><textarea autocomplete='off' rows='5' cols='50' onkeyup=''>"_r7_"</textarea></td>",!
		w "<td class='row-num' style='display:none;'>"_row_"</td>"
		w "</tr>",!
	}
	else{
		i tempUnit="" ,x["ERROR" d
		.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching Template Unit, Using Original : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
		i tempUnit'="" ,x["ERROR" d
		.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching JX Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
		
		i tempUnit'="",x'["ERROR" d	;r2a=tempUnit, r2x=original r2(unit)
		. i (r2a="")!($zconvert(r2a,"l")=$zconvert(r2x,"l")) w "<td class='convert-result-unit converted' style='color:"_c1_"' title='Converted:Same Unit'><div class='dropdown' style='color:"_c1_";/*border-color:"_c3_"*/'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>"
		. ;s ^testing("unit",row)=r2a_", "_r2_", "_tempUnit_", "_r2x
		. e  s recalc=1 s r2=r2a w "<td class='convert-result-unit converted' style='color:"_c3_"' title='Converted'><div class='dropdown' style='color:"_c3_"' onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td></td>" 
	
		i recalc {
			;i recalc d
			;s ave=$$AveRes^WSP999(tempName,r3,r2,"") &js<alert(`#(ave)#`)>
			i r3'["ERROR"  w "<td class='convert-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"   ;_ave_"// " s ave=$$AveRes^WSP999(r1,r3,r2,"")
			i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			
			w "<td class='l-range' onclick='jEditBox(event)'>"_r4Org_"</td>",! ; "_r2x_"
			if r4["ERROR" {w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4Org_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"}
			elseif (tempUnit="" ){w "<td class='l-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			else  {w "<td class='l-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			;w "<td class='l-result-unit'>"_r2a_"</td>",!
			
			w "<td class='u-range' onclick='jEditBox(event)'>"_r5Org_"</td>",! ; "_r2x_"
			i r5["ERROR" {w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5Org_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			ELSEIF (tempUnit="") {w "<td class='u-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			else {w "<td class='u-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			;w "<td class='u-result-unit'>"_r2a_"</td>",!
			w "<td class='comment' style='display:none;'><textarea autocomplete='off' rows='5' cols='50' onkeyup=''>"_r7_"</textarea></td>",!
			w "<td class='row-num' style='display:none;'>"_row_"</td>"
			w "</tr>",!
	
		  }else{
		
			i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			e  d
			.i tempUnit="" w "<td class='convert-result-val issue' style='color:"_c1_"' title='No template:Using Original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			.e  s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
.
			w "<td class='l-range' onclick='jEditBox(event)'>"_r4Org_"</td>",!
			if r4["ERROR" {w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4Org_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"}
			elseif (tempUnit="" ){w "<td class='l-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			else  {w "<td class='l-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			;w "<td class='l-result-unit'>"_r2a_"</td>",!
			
			w "<td class='u-range' onclick='jEditBox(event)'>"_r5Org_"</td>",!
			i r5["ERROR" {w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5Org_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			ELSEIF (tempUnit="") {w "<td class='u-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			else {w "<td class='u-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			;w "<td class='u-result-unit'>"_r2a_"</td>",!
			w "<td class='comment' style='display:none;'><textarea autocomplete='off' rows='5' cols='50' onkeyup=''>"_r7_"</textarea></td>",!
			w "<td class='row-num' style='display:none;'>"_row_"</td>"
			w "</tr>",!
		}
	}  ;end of TUnitEdited else
	;u %dev w r0_Q_r1_Q_r2_Q_r3_Q_r4_Q_r5,! 
	u 0
	g WriteTable1a	
WriteTable1End
	;c %dev
	;u 0
	q
WriteTableRBT	
		&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
		 ; From ResultBloodTest_Tests for HL7,Json,xml,xlsx, or if no ^AICLAUDE , doesn't compare with textract
		 &sql(DECLARE C1 CURSOR FOR
			SELECT COUNT(element_key),element_key,Tests_TestName,Tests_SIUnit,Tests_Result,Tests_LowRange,Tests_HighRange,ResultBloodTest->ReportDate
			INTO :rowkey,:key,:r1,:r2,:r3,:r4,:r5,:r0
			FROM ResultBloodTest_Tests 
			WHERE ResultBloodTest=:rbt
		)
		&sql(OPEN C1)
		&sql(FETCH C1)
		WHILE SQLCODE=0{
WriteTable2a
			s row=key
			s r2x=r2
			s trowCount=$g(^Textract(%dev1,"rowCount"))
			s dCount=2*trowCount	
			g:r1="" WriteTable2End
.
			; clean up units
			s r2=$replace(r2,"|","l")
			s r2=$replace(r2," ","")
			s r3=$replace(r3,",",".")
			i $e(r2,$l(r2)-1,$l(r2))="/1" s r2=$replace(r2,"/1","/l")
			i $e(r2,$l(r2))="_" s r2=r2_"l"
			s r2=$replace(r2," / ","/") 
			s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:r2 OR SIName=:r2)
			i x="",(r2["lU")!(r2["Ul") s r2=$replace(r2,"l","I")
			i x="",r2'="" s r2=r2_"/l"	; because of g. ; commented by DW 2024-03-14 ;uncommented by Martin 2024-03-20
			s x1="" &sql(SELECT ID INTO :x1 FROM SIUnit WHERE Name=:r2 OR SIName=:r2) 
			i x1="",r2'="" s r2=$replace(r2,"/l","")
			i r3[" " { 
				for i = 1:1:$length(r3, " ") 
				{   if $number($piece(r3, " ", i))  d
			    	.if r2="" s r2=$piece(r3, " ", i+1)
			    	.s r3= $piece(r3, " ", i)  
					}
			}
			; clean up value and range
				s r3=$replace(r3,",",".")
				s r3=$replace(r3,"*","")
				s r3=$replace(r3," ","")
				s r4=$replace(r4,",",".")
				s r4=$replace(r4," ","")
				i $p(r4,"-",1)'="",$p(r4,"-",2)'="" d	; cater for 1-3
				. s r5=$p(r4,"-",2),r4=$p(r4,"-",1)
				s r5=$replace(r5,",",".")
				s r5=$replace(r5," ","")
				i $p(r5,"-",1)'="",$p(r5,"-",2)'="" d	; cater for 1-3
				. s r4=$p(r5,"-",1),r5=$p(r5,"-",2)
				i bk["INDO"!(bk["JXTesting") {
					;s ^testing("Red",row)=r2_", "_r3_", "_r4_", "_r5
					if r3[".",($zconvert(r2,"l")="/ul")!($zconvert(r2,"l")="ul/") d
					.s r3=$replace(r3,".",""),r4=$replace(r4,".",""),r5=$replace(r5,".","")
					;s ^testing("Blue",row)=r2_", "_r3_", "_r4_", "_r5
				}
			; end clean up
			;cater for "<", ">" signs column placement
			if (r4["<"),(r5="") s r5=r4 s r4=""
			if (r4=""),(r5[">") s r4=r5 s r5=""
			
			w "<tr class=''>"
			w "<td class='actions'><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)' > <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)' >  <img class='add-row-icon' src='./assets/images/row.png' alt='add row' onclick='addNewRow(event)' ></td>"
			w "<td class='date' style='color:"_c1_"'>"_r0_"</td>"
			w "<td class='test-name' onclick='jEditBox(event)'>"_r1_"</td>"
			s x=$$GetSIName^WSP999(r1)
			; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
			if x["#",r2="%" s x=$p(x," ",1)
			
			s r1a=""
			i x="" {
	 			s IsMatch=0,r1a=r1
				WHILE IsMatch=0&($l(r1a)'=0){
					s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
					i r0'="" s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
					i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
			}
		
			i r1a'="" d
			.&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:r1a AND BucketName=:bk)
			.i tempName'="" w "<td class='transformed-name issue' style='color:"_c2_"' title='No match-Picking closest JX match'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1a
			.e  w "<td class='transformed-name issue' style='color:"_c2_"' title='No matching Template:Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>" ;r1a
			e  s tempUnit="" w "<td class='transformed-name issue' style='color:"_c2_";' title='No matching JX Name & Template:Using original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
		
			}
			i x'="" {
				&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x AND BucketName=:bk)
				i tempName'="" d
				.i tempName["(percent)",r2'="%" d
				..s x=x_" #" ;s tempName=$replace(tempName,"(percent)","(Abs)") 
				..&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x AND BucketName=:bk)
				.i $zconvert(tempName,"l")=$zconvert(r1,"l") w "<td class='transformed-name converted' style='color:"_c1_"' title='Converted:Same BB'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>" ;r1	
				.e  s r1=x w "<td class='transformed-name converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>"
				e  w "<td class='transformed-name issue' style='color:"_c2_"; ' title='No matching Template- Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
			}	
			
			w "<td class='result' onclick='jEditBox(event)'>"_r3_"</td>"
			w "<td class='from-unit' onclick='jEditBox(event)'>"_r2_"</td>"
			if tempUnit'="" {
			s x=$$GetJXUnit^WSP999(r2)
			s r2a=tempUnit
			i x'="" s r2=x 
		 
			; more clean up
				i r2="%" d
				. i $l($p(r3,".",1))>3 s r3=$replace(r3,".",""),r3=$e(r3,1,2)_"."_$e(r3,3,999)
				. i $l($p(r4,".",1))>3 s r4=$replace(r4,".",""),r4=$e(r4,1,2)_"."_$e(r4,3,999)
				. i $l($p(r5,".",1))>3 s r5=$replace(r5,".",""),r5=$e(r5,1,2)_"."_$e(r5,3,999)
				; test if original unit can be converted
				s x="",x=$$U2U^WSP999(r1,r3,r2,r2a)
				;s ^martin("t",row,r1)=r3_","_r2_" ; "_r2a_","_x
				i x["ERROR" s r2a=tempUnit 
			; end more
			d
			. s r3x=r3,r4x=r4,r5x=r5
			. s r3=$$U2U^WSP999(r1,r3,r2,r2a)
			. s r4=$$U2U^WSP999(r1,r4,r2,r2a)
			. s r5=$$U2U^WSP999(r1,r5,r2,r2a)
			;s ^martin(row,"t2")=r1_r5_r2_r2a
			}else  {s x="ERROR Converting" s r2a=r2,r3x=r3,r4x=r4,r5x=r5  }
			s recalc=0
			i tempUnit="" ,x["ERROR" d
			.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching Template Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
			i tempUnit'="" ,x["ERROR" d
			.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching JX Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
			i x'["ERROR" d
			. i (r2a="")!($zconvert(r2a,"l")=$zconvert(r2,"l")) w "<td class='convert-result-unit' style='color:"_c1_"'><div class='dropdown' style='color:"_c1_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>"
			. e  s recalc=1 s r2=r2a w "<td class='convert-result-unit' style='color:"_c3_"'><div class='dropdown' style='color:"_c3_"' onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td></td>" 
.
			i recalc d
			. i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"   ;_ave_"// " s ave=$$AveRes^WSP999(r1,r3,r2,"")
			. i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			. w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_" "_r2x_"</td>",!
			. i r4'["ERROR" w "<td  class='l-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
			. i r4["ERROR" w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
			. w "<td class='l-result-unit' >"_r2a_"</td>",!
			. w "<td class='u-range' onclick='jEditBox(event)'>"_r5x_" "_r2x_"</td>",!
			. i r5'["ERROR" w "<td class='u-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"
			. i r5["ERROR" w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"
			. w "<td class='u-result-unit'>"_r2a_"</td>",!
			. ;w "<td style='color:"_c3_"'>"_$s(r4'="":r4,1:"")_"</td>"
			. ;w "<td style='color:"_c3_"'>"_$s(r5'="":r5,1:"")_"</td>"
			e  d
			. i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			. i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			. w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_" "_r2x_"</td>",!
			. i r4'["ERROR" w "<td class='l-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
			. i r4["ERROR" w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
			. w "<td class='l-result-unit'>"_r2a_"</td>",!
			. w "<td class='u-range' onclick='jEditBox(event)'>"_r5x_" "_r2x_"</td>",!
			. i r5'["ERROR" w "<td class='u-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"  //"_$s(r5'="":r5,1:"")
			. i r5["ERROR" w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"  //$s(r5'="":r5,1:"")
			. w "<td class='u-result-unit'>"_r2a_"</td>",!
			w "</tr>",!
			
WriteTable2End
			&sql(FETCH C1) 
		}
		&sql(CLOSE C1)
		q
	 //} // end of else */
	 //q
    
.
WriteTableClaudeA
	;&js<"Hi">
	s row=$o(^AICLAUDE(rid,row)) g:row="" WriteTableEnd
	s r0=$g(^AICLAUDE(rid,row,"date"))
	s r1=$g(^AICLAUDE(rid,row,"name"))
	s r2=$g(^AICLAUDE(rid,row,"unit"))
	s r3=$g(^AICLAUDE(rid,row,"value"))
	s r4=$g(^AICLAUDE(rid,row,"loRange"))
	s r5=$g(^AICLAUDE(rid,row,"hiRange"))
	&sql(SELECT BucketName INTO :bk FROM Record WHERE id=:rid)
	s r2x=r2
	s trowCount=$g(^Textract(%dev1,"rowCount"))
	s dCount=2*trowCount
	; test ^AICLAUDE vs ^AICLAUDE for duplicate rows
	if row>1 
	{	n pRow s pRow= row-1
		s r1p=$g(^AICLAUDE(rid,pRow,"name"))
		if (r1=r1p),($g(^AICLAUDE(rid,"rowCount"))'=dCount) s trow=trow+1  g WriteTableClaudeA
		if ^AICLAUDE(rid,row,"row"_row)= ^AICLAUDE(rid,pRow,"row"_pRow) d 
		.s ^AICLAUDE(rid,"rowCount")=$g(^AICLAUDE(rid,"rowCount"))-1 
		.g WriteTableClaudeA
		
	} 
	g:r1="" WriteTableClaudeA
		
	; clean up units
		s r2=$replace(r2,"|","l")
		s r2=$replace(r2," ","")
		s r3=$replace(r3,",",".")
		i $e(r2,$l(r2)-1,$l(r2))="/1" s r2=$replace(r2,"/1","/l")
		i $e(r2,$l(r2))="_" s r2=r2_"l"
		s r2=$replace(r2," / ","/") 
		s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:r2 OR SIName=:r2)
		i x="",(r2["lU")!(r2["Ul") s r2=$replace(r2,"l","I")
		i x="",r2'="" s r2=r2_"/l"	; because of g. ; commented by DW 2024-03-14 ;uncommented by Martin 2024-03-20
		s x1="" &sql(SELECT ID INTO :x1 FROM SIUnit WHERE Name=:r2 OR SIName=:r2) 
		i x1="",r2'="" s r2=$replace(r2,"/l","")
	; end clean up
	; missing units- check textract
	;for unit is misplaced in value eg."0.10 10e9-l" or "H 3.60 mmol/L" by Martin 2024-04-08
	;s ^martin(row,"1")=r3_", "_r2
	i r3[" " { 
		for i = 1:1:$length(r3, " ") 
		{   if $number($piece(r3, " ", i))  d
	    	.if r2="" s r2=$piece(r3, " ", i+1)
	    	.s r3= $piece(r3, " ", i)  
			}
	}
	;s ^martin(row,"2")=r3_", "_r2
	; clean up value and range
		s r3=$replace(r3,",",".")
		s r3=$replace(r3,"*","")
		s r3=$replace(r3," ","")
		s r4=$replace(r4,",",".")
		s r4=$replace(r4," ","")
		i $p(r4,"-",1)'="",$p(r4,"-",2)'="" d	; cater for 1-3
		. s r5=$p(r4,"-",2),r4=$p(r4,"-",1)
		s r5=$replace(r5,",",".")
		s r5=$replace(r5," ","")
		i $p(r5,"-",1)'="",$p(r5,"-",2)'="" d	; cater for 1-3
		. s r4=$p(r5,"-",1),r5=$p(r5,"-",2)
		; For Indo clients
		;&js<alert(`#(bk)#`)>
		i bk["INDO"!(bk["JXTesting") {
			;k ^testing
			;s ^testing("Red",row)=r2_", "_r3_", "_r4_", "_r5
			if r3["." d
			.s r3=$replace(r3,".",""),r4=$replace(r4,".",""),r5=$replace(r5,".","")
			;s ^testing("Blue",row)=r2_", "_r3_", "_r4_", "_r5
		}
		
	; end clean up
	;cater for "<", ">" signs column placement
	if (r4["<"),(r5="") s r5=r4 s r4=""
	if (r4=""),(r5[">") s r4=r5 s r5=""
	
	
	; Compare ^AICLAUDE vs ^Textract
	i trow<=trowCount
	{
		s t1=$p(^Textract(%dev1,trow,"BB"),",",1) ; get testname from ^Textract
		if $e(t1,$l(t1))=" " s t1=$e(t1,1,$l(t1)-1) ;remove trailing space from testname
		
		;Check r1,r2,r3,r4,r5 all contain in ^Textract(%dev,row,"BB")
		if $replace(r1," ","")[t1, ^Textract(%dev1,trow,"BB")[r2, ^Textract(%dev1,trow,"BB")[r3, ^Textract(%dev1,trow,"BB")[r4, ^Textract(%dev1,trow,"BB")[r5 
		{	;s ^martin("match",row,trow)=r1_","_r2x_","_r3_" are match with "_^Textract(%dev1,trow,"BB")
			s match=1
			s trow=trow+1 }
		else
		{ 	
			if ($g(^AICLAUDE(rid,"rowCount"))=dCount)
			{	//for 2 sets of result
				i r2="" s r2=$g(^AICLAUDE(rid,row-1,"unit"))
				i r4="" s r4=$g(^AICLAUDE(rid,row-1,"loRange"))
				i r5="" s r5=$g(^AICLAUDE(rid,row-1,"hiRange"))
				s r2x=r2
				s match=0
				;s ^martin(row,r2,r4,r5)=$g(^AICLAUDE(rid,row-1,"unit"))_" , "_$g(^AICLAUDE(rid,row-1,"loRange"))_" , "_$g(^AICLAUDE(rid,row-1,"hiRange"))
			    ;s ^martin("NM",trow)=1 s ^martin("not match1",row,trow)=r1_","_r2_","_r3_","_r4_","_r5_" is not match with "_^Textract(%dev1,trow,"BB")
				}
			elseif r1[t1 { s match=0 s trow=trow+1} ;s ^martin("NM")=1   s ^martin("NM",trow)=1 s ^martin("not match2",row,trow)=r1_","_r2_","_r3_","_r4_","_r5_" is not match with "_^Textract(%dev1,trow,"BB") 	
			elseif  trow<trowCount{
				s trow1=trow+1
				s t2=$p(^Textract(%dev1,trow1,"BB"),",",1) ;get next testname from ^Textract
				;s ^martin("tname2",trow1,trow)=t2_r1 ; 
				if $e(t2,$l(t2))=" " s t2=$e(t2,1,$l(t2)-1) ;remove trailing space from testname 
				if r1'=t2 s trow=trow+1 s match=1  ;s ^martin("match2",row,trow)=r1_","_r2x_","_r3_" are match with "_^Textract(%dev1,trow,"BB")
				e  d 
				.;s ^martin("row Test",trow)=r1_" , "_t2
				.s match=0 ;s ^martin("NM",trow)=1 s ^martin("not match3",row,trow)=r1_","_r2_","_r3_","_r4_","_r5_" is not match with "_^Textract(%dev1,trow,"BB")
				.s trow=trow1
			
			}else{ s match=0}
		}
	}else { s match=0}
	
	if match=0 w "<tr class='' style='background-color: #F7D896;'>" 
	if match=1 w "<tr class=''>" 
	;END
.
	
	
	w "<td class='actions'><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)' > <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)' >  <img class='add-row-icon' src='./assets/images/row.png' alt='add row' onclick='addNewRow(event)' ></td>"
	w "<td class='date' style='color:"_c1_"'>"_r0_"</td>"
	w "<td class='test-name' onclick='jEditBox(event)'>"_r1_"</td>"
	s x=$$GetSIName^WSP999(r1)
	; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
	if x["#",r2="%" s x=$p(x," ",1)
	
	s r1a=""
	i x="" {
	 	s IsMatch=0,r1a=r1
		WHILE IsMatch=0&($l(r1a)'=0){
			s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
			i r0'="" s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
		
		i r1a'="" d
		.&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:r1a AND BucketName=:bk)
		.i tempName'="" s r1=tempName w "<td class='transformed-name issue' style='color:"_c2_"' title='No match-Picking closest JX match'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1a
		.e  w "<td class='transformed-name issue' style='color:"_c2_"' title='No matching Template:Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>" ;r1a
		e  s tempUnit="" w "<td class='transformed-name issue' style='color:"_c2_";' title='No matching JX Name & Template:Using original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
		
	}
	i x'="" {
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x AND BucketName=:bk)
		i tempName'="" d
		.i tempName["(percent)",r2'="%" d
		..s x=x_" #" ;s tempName=$replace(tempName,"(percent)","(Abs)") 
		..&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x AND BucketName=:bk)
		.i $zconvert(tempName,"l")=$zconvert(r1,"l") w "<td class='transformed-name converted' style='color:"_c1_"' title='Converted:Same BB'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>" ;r1	
		.e  s r1=x w "<td class='transformed-name converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>"
		e  w "<td class='transformed-name issue' style='color:"_c2_"; ' title='No matching Template- Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
		}	
	w "<td class='result' onclick='jEditBox(event)'>"_r3_"</td>"
	w "<td class='from-unit' onclick='jEditBox(event)'>"_r2_"</td>"
	if tempUnit'="" {
	s x=$$GetJXUnit^WSP999(r2)
	s r2a=tempUnit
	i x'="" s r2=x 
 
	; more clean up
		i r2="%" d
		. i $l($p(r3,".",1))>3 s r3=$replace(r3,".",""),r3=$e(r3,1,2)_"."_$e(r3,3,999)
		. i $l($p(r4,".",1))>3 s r4=$replace(r4,".",""),r4=$e(r4,1,2)_"."_$e(r4,3,999)
		. i $l($p(r5,".",1))>3 s r5=$replace(r5,".",""),r5=$e(r5,1,2)_"."_$e(r5,3,999)
		; test if original unit can be converted
		s x="",x=$$U2U^WSP999(r1,r3,r2,r2a)
		;s ^martin("t",row,r1)=r3_","_r2_" ; "_r2a_","_x
		i x["ERROR" s r2a=tempUnit 
	; end more
	d
	. s r3x=r3,r4x=r4,r5x=r5
	. s r3=$$U2U^WSP999(r1,r3,r2,r2a)
	. s r4=$$U2U^WSP999(r1,r4,r2,r2a)
	. s r5=$$U2U^WSP999(r1,r5,r2,r2a)
	;s ^martin(row,"t2")=r1_r5_r2_r2a
	}else  {s x="ERROR Converting" s r2a=r2,r3x=r3,r4x=r4,r5x=r5  }
	
	s recalc=0
	i tempUnit="" ,x["ERROR" d
		.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching Template Unit, Using Original : "_r2x_"'><div class='dropdown' style='color:"_c1_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
	i tempUnit'="" ,x["ERROR" d
		.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching JX Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
		
	i tempUnit'="",x'["ERROR" d ;r2a=tempUnit, r2x=original r2(unit)
		. i (r2a="")!($zconvert(r2a,"l")=$zconvert(r2x,"l")) w "<td class='convert-result-unit converted' style='color:"_c1_"' title='Converted:Same Unit'><div class='dropdown' style='color:"_c1_";/*border-color:"_c3_"*/'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>"
		. e  s recalc=1 s r2=r2a w "<td class='convert-result-unit converted' style='color:"_c3_"' title='Converted'><div class='dropdown' style='color:"_c3_"' onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td></td>" 
	
		i recalc {
			i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"   ;_ave_"// " s ave=$$AveRes^WSP999(r1,r3,r2,"")
			i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			
			w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_" "_r2x_"</td>",!
			if r4["ERROR" {w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"}
			elseif (tempUnit="" ){w "<td class='l-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			else  {w "<td class='l-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			w "<td class='l-result-unit'>"_r2a_"</td>",!
			w "<td class='u-range' onclick='jEditBox(event)'>"_r5x_" "_r2x_"</td>",!
			i r5["ERROR" {w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			ELSEIF (tempUnit="") {w "<td class='u-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			else {w "<td class='u-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			w "<td class='u-result-unit'>"_r2a_"</td>",!
			w "<td class='row-num' style='display:none;'>"_row_"</td>"
			w "</tr>",!
	
		  }else{
		
			i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			e  d
			.i tempUnit="" w "<td class='convert-result-val issue' style='color:"_c1_"' title='No template:Using Original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			.e  s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
.
			w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_" "_r2x_"</td>",!
			if r4["ERROR" {w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"}
			elseif (tempUnit="" ){w "<td class='l-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			else  {w "<td class='l-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			w "<td class='l-result-unit'>"_r2a_"</td>",!
			
			w "<td class='u-range' onclick='jEditBox(event)'>"_r5x_" "_r2x_"</td>",!
			i r5["ERROR" {w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			ELSEIF (tempUnit="") {w "<td class='u-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			else {w "<td class='u-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			w "<td class='u-result-unit'>"_r2a_"</td>",!
			w "<td class='row-num' style='display:none;'>"_row_"</td>"
			w "</tr>",!
		}
	/*	i tempUnit="" ,x["ERROR" d
	.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching Template Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
	i tempUnit'="" ,x["ERROR" d
	.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching JX Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
	i x'["ERROR" d
	. i (r2a="")!($zconvert(r2a,"l")=$zconvert(r2,"l")) w "<td class='convert-result-unit' style='color:"_c1_"'><div class='dropdown' style='color:"_c1_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>"
	. e  s recalc=1 s r2=r2a w "<td class='convert-result-unit' style='color:"_c3_"'><div class='dropdown' style='color:"_c3_"' onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td></td>" 
.
	i recalc d
	. i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"   ;_ave_"// " s ave=$$AveRes^WSP999(r1,r3,r2,"")
	. i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
	. w "<td class='l-range'>"_r4x_" "_r2x_"</td>",!
	. i r4'["ERROR" w "<td  class='l-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
	. i r4["ERROR" w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
	. w "<td class='l-result-unit'>"_r2a_"</td>",!
	. w "<td class='u-range'>"_r5x_" "_r2x_"</td>",!
	. i r5'["ERROR" w "<td class='u-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"
	. i r5["ERROR" w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"
	. w "<td class='u-result-unit'>"_r2a_"</td>",!
	. ;w "<td style='color:"_c3_"'>"_$s(r4'="":r4,1:"")_"</td>"
	. ;w "<td style='color:"_c3_"'>"_$s(r5'="":r5,1:"")_"</td>"
	e  d
	. i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
	. i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
	. w "<td class='l-range'>"_r4x_" "_r2x_"</td>",!
	. i r4'["ERROR" w "<td class='l-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
	. i r4["ERROR" w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
	. w "<td class='l-result-unit'>"_r2a_"</td>",!
	. w "<td class='u-range'>"_r5x_" "_r2x_"</td>",!
	. i r5'["ERROR" w "<td class='u-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"  //"_$s(r5'="":r5,1:"")
	. i r5["ERROR" w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"  //$s(r5'="":r5,1:"")
	. w "<td class='u-result-unit'>"_r2a_"</td>",!
	
	w "</tr>",! */ 
	u %dev w r0_Q_r1_Q_r2_Q_r3_Q_r4_Q_r5,! u 0
	g WriteTableClaudeA	
WriteTableEnd
	c %dev
	u 0
	q	
.
TwoSets
	s row=$o(^AIGEMINI(rid,row)) g:row="" TwoSetsEnd
	s r1=$g(^AIGEMINI(rid,row,"name"))
	s r2=$g(^AIGEMINI(rid,row,"unit"))
	s r3=$g(^AIGEMINI(rid,row,"value"))
	s r4=$g(^AIGEMINI(rid,row,"loRange"))
	s r5=$g(^AIGEMINI(rid,row,"hiRange"))
	if row>1 
	{	n pRow s pRow= row-1
		s pName=$g(^AIGEMINI(rid,pRow,"name"))
		if (r1=pName),(^AIGEMINI(rid,row,"row"_row)'= ^AIGEMINI(rid,pRow,"row"_pRow)) 
		{	;w "no RR",row,!
			i (r4="")!(r5="")
			{	;w "no RR current row",row,!
				s ^AIGEMINI(rid,row,"loRange")=^AIGEMINI(rid,pRow,"loRange")
		 		s ^AIGEMINI(rid,row,"hiRange")=^AIGEMINI(rid,pRow,"hiRange")
			}
			elseif ($g(^AIGEMINI(rid,pRow,"loRange"))="") ! ($g(^AIGEMINI(rid,pRow,"hiRange"))="") 
			{
				s ^AIGEMINI(rid,pRow,"loRange")=r4
				s ^AIGEMINI(rid,pRow,"hiRange")=r5
			}
		
		}
	}
	g TwoSets
TwoSetsEnd	
	q 
WriteTableGeminiA
	;u 0
	;&js<console.log(`#(row)#`);>
	s row=$o(^AIGEMINI(rid,row)) g:row="" WriteTableGeminiEnd
	s r0=$g(^AIGEMINI(rid,row,"date")) 
	s r1=$g(^AIGEMINI(rid,row,"name"))
	s r2=$g(^AIGEMINI(rid,row,"unit"))
	s r3=$g(^AIGEMINI(rid,row,"value"))
	s r4=$g(^AIGEMINI(rid,row,"loRange"))
	s r5=$g(^AIGEMINI(rid,row,"hiRange"))
	s r6=$g(^AIGEMINI(rid,row,"category"))
	s r7=$g(^AIGEMINI(rid,row,"comment"))
.
	/*
	i r6'="" 
	{	
		&sql(SELECT ID,ResultType INTO :c1,:c2 FROM DiagnosticType WHERE Lower(Name)=LOWER(:r6))
		i c1'="" s r6x=c2 s CatMatch=1
		e  s r6x="Blood Test" s CatMatch=0
		
	}else {s r6x="Blood Test" s CatMatch=0}
	*/
	
	&sql(SELECT OutputUnit INTO :bk FROM Record WHERE id=:rid)
	s r2x=r2,r3x=r3,r4x=r4,r5x=r5
	; test ^AIGEMINI vs ^AIGEMINI for duplicate rows
	if row>1 
	{	n pRow s pRow= row-1
		s r1p=$g(^AIGEMINI(rid,pRow,"name"))
		for i=1:1:pRow
		{
			if ^AIGEMINI(rid,row,"row"_row)= ^AIGEMINI(rid,i,"row"_i) s ^martin(row,"dup")=^AIGEMINI(rid,row,"row"_row) g WriteTableGeminiA
			
			}
#;		if ^AIGEMINI(rid,row,"row"_row)= ^AIGEMINI(rid,pRow,"row"_pRow) {
#;			;s ^AIGEMINI(rid,"rowCount")=$g(^AIGEMINI(rid,"rowCount"))-1 
#;		 	;;s pp=^AIGEMINI(rid,pRow,"row"_pRow) &js<console.log(`#(row)#`);> 
#;			g WriteTableGeminiA
#;		}
	} 
	g:r1="" WriteTableGeminiA
	g:r3="" WriteTableGeminiA
		
	; clean up units
		s r2=$replace(r2,"|","l")
		s r2=$replace(r2," ","")
		s r2=$replace(r2,"-1","-l")
		s r2=$replace(r2,"_1","_l")
		i $e(r2,$l(r2)-1,$l(r2))="/1" s r2=$replace(r2,"/1","/l")
		i $e(r2,$l(r2))="_" s r2=r2_"l"
		s r2=$replace(r2," / ","/") 
		s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:r2 OR SIName=:r2)
		i x="",(r2["lU")!(r2["Ul") s r2=$replace(r2,"l","I")
		i x="",r2'="" s r2=r2_"/l"	; because of g. ; commented by DW 2024-03-14 ;uncommented by Martin 2024-03-20
		s x1="" &sql(SELECT ID INTO :x1 FROM SIUnit WHERE Name=:r2 OR SIName=:r2) 
		i x1="",r2'="" s r2=$replace(r2,"/l","")
	; end clean up
	; missing units- check textract
	;for unit is misplaced in value eg."0.10 10e9-l" or "H 3.60 mmol/L" by Martin 2024-04-08
	;s ^martin(row,"1")=r3_", "_r2
	i r3[" " { 
		for i = 1:1:$length(r3, " ") 
		{   if $number($piece(r3, " ", i))  d
	    	.if r2="" s r2=$piece(r3, " ", i+1)
	    	.s r3= $piece(r3, " ", i)  
			}
	}
	;s ^martin(row,"2")=r3_", "_r2
	; clean up value and range
		s r3=$replace(r3,"*","")
		s r3=$replace(r3," ","")
		s r4=$replace(r4," ","")
		i $p(r4,"-",1)'="",$p(r4,"-",2)'="" d	; cater for 1-3
		. s r5=$p(r4,"-",2),r4=$p(r4,"-",1)
		s r5=$replace(r5," ","")
		i $p(r5,"-",1)'="",$p(r5,"-",2)'="" d	; cater for 1-3
		. s r4=$p(r5,"-",1),r5=$p(r5,"-",2)
		; For Indo clients
		i bk["INDO"!(bk["JXTesting") {
			; Use the original from GEMINI
			// treat "." as comma
			;s ^martin(row,"c1")=r1_", "_r3_", "_r4_", "_r5
			s r3=$replace(r3,".",""),r4=$replace(r4,".",""),r5=$replace(r5,".","")
			// treat commas as "."
			s r3=$replace(r3,",","."),r4=$replace(r4,",","."),r5=$replace(r5,",",".")
			;s ^martin(row,"c2")=r1_", "_r3_", "_r4_", "_r5
		}else 
		{	s r3=$replace(r3,",","."),r4=$replace(r4,",","."),r5=$replace(r5,",",".")
			}
		/* Set Result as the standard
		i bk["INDO"!(bk["4321-qa-jondaffr") {
			if r3["." d
			. s r4=$replace(r4,",","."),r5=$replace(r5,",",".")
			. s r3=$replace(r3,".",""),r4=$replace(r4,".",""),r5=$replace(r5,".","")
			if r3["," d
			. s r4=$replace(r4,".",","),r5=$replace(r5,".",",")
			.s r3=$replace(r3,",","."),r4=$replace(r4,",","."),r5=$replace(r5,",",".")
		}		
		*/
	; end clean up
	;cater for "<", ">" signs column placement
	if (r4["<"),(r5="") s r5=r4 s r4=""
	if (r4=""),(r5[">") s r4=r5 s r5=""
	
	s match=1
	if match=0 w "<tr class='' >" ;style='background-color: #F7D896;'>" 
	if match=1 w "<tr class=''>" 
	;END
	
	w "<td class='actions'><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)' > <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)' >  <img class='add-row-icon' src='./assets/images/row.png' alt='add row' onclick='addNewRow(event)' ></td>"
	w "<td class='date' onclick='jEditBox(event)' style='color:"_c1_"'>"_r0_"</td>"
	w "<td class='test-name' onclick='jEditBox(event)'>"_r1_"</td>"
	s x=$$GetSIName^WSP999(r1)
	; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
	if x["#",r2="%" s x=$p(x," ",1)
	
	s r1a=""
	i x="" {
	 	s IsMatch=0,r1a=r1
		WHILE IsMatch=0&($l(r1a)'=0){
			s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
			i r0'=""  s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
		
		i r1a'="" d
		.;s r1ax=r1a w "<td class='test-name' onclick='jEditBox(event)'>"_r1ax_"</td>"
		.&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:r1a AND BucketName=:bk)
		.i tempName'="" s r1=tempName w "<td class='transformed-name issue' style='color:"_c2_"' title='No match-Picking closest JX match'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1a
		.e  w "<td class='transformed-name issue' style='color:"_c2_"' title='No matching Template:Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>" ;r1a
		e  s tempUnit="" w "<td class='transformed-name issue' style='color:"_c2_";' title='No matching JX Name & Template:Using original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
		
	}
	i x'="" {
		;w "<td class='test-name' onclick='jEditBox(event)'>"_r1_"</td>"
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x AND BucketName=:bk)
		i tempName'="" d
		.i tempName["(percent)",r2'="%" d
		..s x=x_" #" ;s tempName=$replace(tempName,"(percent)","(Abs)") 
		..&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x AND BucketName=:bk)
		.i $zconvert(tempName,"l")=$zconvert(r1,"l") w "<td class='transformed-name converted' style='color:"_c1_"' title='Converted:Same BB'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>" ;r1	
		.e  s r1=x w "<td class='transformed-name converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>"
		e  w "<td class='transformed-name issue' style='color:"_c2_"; ' title='No matching Template- Using original"_x_","_bk_"'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
		}	
	w "<td class='result' onclick='jEditBox(event)'>"_r3x_"</td>"
	w "<td class='from-unit' onclick='jEditBox(event)'>"_r2_"</td>"
	if tempUnit'="" {
		s x=$$GetJXUnit^WSP999(r2)
		s r2a=tempUnit
		i x'="" s r2=x 
	 
		; more clean up
		i r2="%" d
		. i $l($p(r3,".",1))>3 s r3=$replace(r3,".",""),r3=$e(r3,1,2)_"."_$e(r3,3,999)
		. i $l($p(r4,".",1))>3 s r4=$replace(r4,".",""),r4=$e(r4,1,2)_"."_$e(r4,3,999)
		. i $l($p(r5,".",1))>3 s r5=$replace(r5,".",""),r5=$e(r5,1,2)_"."_$e(r5,3,999)
		; test if original unit can be converted
		s x="",x=$$U2U^WSP999(r1,r3,r2,r2a)
		;s ^martin("t",row,r1)=r3_","_r2_" ; "_r2a_","_x
		i x["ERROR" s r2a=tempUnit 
		; end more
.
		;s ^martin(row,"t1")=r1_", "_r3_", "_r4_", "_r5
		s r3=$$U2U^WSP999(r1,r3,r2,r2a)
		s r4=$$U2U^WSP999(r1,r4,r2,r2a)
		s r5=$$U2U^WSP999(r1,r5,r2,r2a)
		;s ^martin(row,"t2")=r1_", "_r3_", "_r4_", "_r5
	}
	else
	{	
		s x="ERROR Converting" s r2a=r2,r3x=r3,r4x=r4,r5x=r5  
	}
	
	s recalc=0
	i tempUnit="" ,x["ERROR" d
		.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching Template Unit, Using Original : "_r2x_"'><div class='dropdown' style='color:"_c1_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
	i tempUnit'="" ,x["ERROR" d
		.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching JX Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
		
	i tempUnit'="",x'["ERROR" d ;r2a=tempUnit, r2x=original r2(unit)
		. i (r2a="")!($zconvert(r2a,"l")=$zconvert(r2x,"l")) w "<td class='convert-result-unit converted' style='color:"_c1_"' title='Converted:Same Unit'><div class='dropdown' style='color:"_c1_";/*border-color:"_c3_"*/'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>"
		. e  s recalc=1 s r2=r2a w "<td class='convert-result-unit converted' style='color:"_c3_"' title='Converted'><div class='dropdown' style='color:"_c3_"' onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td></td>" 
	
		i recalc {
			i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			
			w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_"</td>",! ;_" "_r2x_"
			if r4["ERROR" {w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"}
			elseif (tempUnit="" ){w "<td class='l-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			else  {w "<td class='l-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			;w "<td class='l-result-unit'>"_r2a_"</td>",!
			w "<td class='u-range' onclick='jEditBox(event)'>"_r5x_"</td>",!  ; "_r2x_"
			i r5["ERROR" {w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			ELSEIF (tempUnit="") {w "<td class='u-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			else {w "<td class='u-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			;w "<td class='u-result-unit'>"_r2a_"</td>",!
			w "<td class='comment' style='display:none;'><textarea autocomplete='off' rows='5' cols='50' onkeyup=''>"_r7_"</textarea></td>",!
			w "<td class='row-num' style='display:none;'>"_row_"</td>"
			w "</tr>",!
	
		  }else{
		
			i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			e  d
			.i tempUnit="" w "<td class='convert-result-val issue' style='color:"_c1_"' title='No template:Using Original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			.e  s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
.
			w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_"</td>",! ; "_r2x_"
			if r4["ERROR" {w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"}
			elseif (tempUnit="" ){w "<td class='l-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			else  {w "<td class='l-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			;w "<td class='l-result-unit'>"_r2a_"</td>",!
			
			w "<td class='u-range' onclick='jEditBox(event)'>"_r5x_"</td>",! ; "_r2x_"
			i r5["ERROR" {w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			ELSEIF (tempUnit="") {w "<td class='u-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			else {w "<td class='u-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			;w "<td class='u-result-unit'>"_r2a_"</td>",!
			w "<td class='comment' style='display:none;'><textarea autocomplete='off' rows='5' cols='50' onkeyup=''>"_r7_"</textarea></td>",!
			w "<td class='row-num' style='display:none;'>"_row_"</td>"
			w "</tr>",!
		}
	
	 ;u %dev w r0_Q_r1_Q_r2_Q_r3_Q_r4_Q_r5,! 
	 u 0
	g WriteTableGeminiA	
WriteTableGeminiEnd
	;c %dev
	;u 0
	q	
.

trialSelectTransformation^MAC^^67114,35284.2463314^0
trialSelectTransformation
.
Init
 	s UserID=$g(%session.Data("UserID")),cTemp=""
 	s count=$g(^trialUpload(UserID,"UploadedFile","success"))
 	&js<document.getElementById("tCount").innerHTML=#(count)#>
 	&sql(DECLARE C1 CURSOR FOR
 		SELECT TemplateName 
 		INTO cTemp 
 		FROM MX.trialCustomTemplateSetup 
 		WHERE Profile=:UserID
 		ORDER BY ID)
 	&sql(OPEN C1)
	&sql(FETCH C1)
	WHILE SQLCODE=0{
 		&js<addNewLabel(`#(cTemp)#`);>
 		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	q		
	q
SetFormat(d1)
	s UserID=$g(%session.Data("UserID"))
	s fType=d1
	s count=$g(^trialUpload(UserID,"UploadedFile","success"))
	for i=1:1:count {
		s rid=$p(^trialUpload("UploadedFile",UserID),",",i)
		&sql(UPDATE MX.Record SET OutputFormat=:fType WHERE ID=:rid)
	}
	q
	
SetUnit(d1)
	s UserID=$g(%session.Data("UserID"))
	s uType=$p(d1," ",1)
	s count=$g(^trialUpload(UserID,"UploadedFile","success"))
	for i=1:1:count {
		s rid=$p(^trialUpload("UploadedFile",UserID),",",i)
		&sql(UPDATE MX.Record SET OutputUnit=:uType WHERE ID=:rid)
	}
	q
DeleteUploaded
   	s UserID=$g(%session.Data("UserID"))
	s count=$g(^trialUpload(UserID,"UploadedFile","success"))
	s dt=$zdatetime($h,3,1)
	for i=1:1:count {
		s rid=$p(^trialUpload("UploadedFile",UserID),",",i)
		&sql(SELECT OrgFile,BucketName,Profile->Setting->CliProfileName INTO :fName,:fullBucket,:cProfileName FROM Record WHERE ID=:rid)
	
		s bName=$p(fullBucket,"/",1),bfolder=$replace(fullBucket,bName_"/","")	
		s stagingFolder=bfolder_"/Staging"
		s sts=##class(python.s3Utils).deleteFile(cProfileName,fName,bName,stagingFolder)
		if sts=1 {
			&sql(UPDATE MX.Record SET DeletedDate=:dt,Status='Failure' WHERE ID=:rid)
		}
	}
	k ^trialUpload(UserID,"UploadedFile","success")				
	q
	
		

trialSignUp^MAC^^67120,16886.5081818^0
trialSignUp
CheckUser
	#import MX
	d INIT1^CSP999
	s mail=$zconvert(d1,"l")
	&sql(SELECT ID INTO uID FROM "User" WHERE UserID=:mail)
	i uID'="" &js<AlertText.innerHTML="User already exists with this mail!">
	e  s %session.Data("Email")=mail
	q
	
VerifyByEmail	;not use, in ^AutoMail
	;d INIT^CSP999
	s EmailAddress=d1
	s EmailAddress=$zconvert(EmailAddress,"l")
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.io"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	set mail.Subject="JondaX Trial Verification"
	set mail.Charset="iso-8859-1"
	set mail.ContentType="text/html"
	s vCode=$random(99999)
	while $l(vCode)<5 {s vCode=$random(99999)}
	s ^TrialUser(EmailAddress,"vCode")=vCode
	&sql(SELECT ContactPerson INTO FName FROM MX.Record WHERE UserId=:EmailAddress)
	s mailMsg="<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'><html><head><link href='https://fonts.googleapis.com' rel='preconnect'><link crossorigin='' href='https://fonts.gstatic.com' rel='preconnect'><link href='https://fonts.googleapis.com/css2?family=Montserrat:wght@200&amp;display=swap' rel='stylesheet'></head><body style='background-color: #FFFFFF;font-family: 'Montserrat', sans-serif; margin: 0px'><div align='center' style='background-color: #FFFFFF;'><div align='left' style='width: 500px'><br><div align='right'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/logo.png' style='width:130px'></div><br><br><div align='center'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/Verifyemail1.png' style='width:300px'></div><div align='center' style='font-size: 18pt'>Verify your email address</div><br><br>Hi "_FName_", <br><br>Verifying your email address is simple! Please use the code below and you’ll be on your way with your JondaX Trial profile.<br><br><br><div align='center'><div style='font-size: 50pt'>"_vCode_"</div></div><br><br><br><div style='background-color: #F2F2F2; width: 100%; padding: 15px; color: white; border-radius: 15px;'><table cellpadding='5px' style='width: 100%'><tr><td style='color:#000000'>If you didn&#39;t make this request or have any questions, please contact us via mail at <a href='mailto:partnerships@jonda.health'>partnerships@jonda.health</a> </td></tr></table></div><br><br><br></div><div align='center' style='background-color:#405470; width: 600px; padding: 15px; color: white; border-radius: 15px 15px 0px 0px;'><a href='https://www.jonda.health/' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/chain.png' style='width:40px;margin:0 4px 0 4px;'></a><a href='https://www.youtube.com/@JondaHealth' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/Youtube.png' style='width:40px;margin:0 4px 0 4px;'></a><a href='https://sg.linkedin.com/company/jonda-health' style='text-decoration:none;'><img src='https://www.jondax.eu/csp/jondax/assets/images/trial/LinkedIn.png' style='width:40px;margin:0 4px 0 4px;'></a><br><br><div style='font-size: 10pt'>You're receiving this email because you have a Jonda X Trial profile. This email is not a marketing or promotional email. That is why this email does not contain an unsubscribe link. You will receive this email even if you have unsubscribed from Jonda Health's marketing emails.<br><br>Copyright &copy; 2024 Jonda Health</div></div></div></body></html>"
	s status=mail.TextData.Write(mailMsg)
	s status=mail.TextData.Write($char(13,10))
	set status=mailserver.Send(mail)
	q	
	
WriteCountry 
	#import MX
	;d INIT1^CSP999
	;s UserID=$g(%session.Data("UserID"))
	;s UserID=1
	s (setting,bk,bkfd)=""
	&sql(SELECT Name INTO :country FROM "Country" )
	
	&sql(DECLARE CT CURSOR FOR
		SELECT Name 
		INTO :country
		FROM Country
		WHERE ISNULL(DeletedDate,'')=''
		ORDER BY Name
	)
	&sql(OPEN CT)
	&sql(FETCH CT)
	WHILE SQLCODE=0{
		w "<li onclick='changeCountry(event)'>"_country_"</li>"
.
		&sql(FETCH CT)
	}
	&sql(CLOSE CT)
	q
.
CreateProfile
	#import MX
	s contact=d1_" "_d2,cName=$replace(d3," ",""), cType=d4, country=d5
	s dt= $zdatetime($h,3)
	s sDate=+$h
	s eDate=+$h+30
	s mail=$g(%session.Data("Email"))
	s pwsd=$g(^TrialUser(mail,"pswd"))
	&sql(INSERT INTO MX.Setting ( CliProfileName, ServerName, CreatedDate) VALUES ('default',:cName, :dt))
	if SQLCODE=0 &sql(SELECT ID INTO :userSetting FROM Setting WHERE ServerName=:cName )  ;AND CreatedDate=:dt)
	e  &js<alert("Error creating account. Contact developer");>
	if userSetting'="" &sql(INSERT INTO "User"(CompanyLogo,CompanyName,ContactPerson,CreatedDate,Email,IsAdmin,Password,Setting,UserID,Address_Address1,CompanyType) VALUES('default.png',:cName,:contact,:dt,:mail,0,:pwsd,:userSetting,:mail,:country,:cType))
	&sql(SELECT ID,ContactPerson INTO  :uID,:clientName FROM "User" WHERE Setting=:userSetting )
	if uID'="" &sql(INSERT INTO Subscription(EndDate,Profile,RemainingOCRUnit, RemainingRedactionUnit, RemainingTransformationUnit, StartDate, Subscription, Type)
		 VALUES(:eDate,:uID,50,0,10,:sDate,8,'Transformation'))
	d CreateBuckets
	q		
.
CreateBuckets
	s setting=userSetting
	s bname="jondaffr2"
	s folder="jondax-trial/jxtrial"_uID ;"jondax-trial/"_cName  ;
	s pname="default"
	s type="Transformation"
	
	s objx=##class(MX.Setting).%OpenId(setting)
	if (objx.Buckets '= ""){
		;s count = objx.Buckets.Count()
		&sql(SELECT TOP 1 element_key INTO :count FROM Setting_Buckets WHERE Setting=:setting ORDER BY element_key DESC)
	}else {s count = 0 }
	s objx1=##class(MX.Buckets).%New()
.
	s objx1.Name= bname
	s objx1.Folder = folder
	s objx1.CliProfileName = pname
	s objx1.Type = type	
	s dt = $zdatetime($h,3)
	s objx1.CreatedDate = dt
	d objx.Buckets.SetAt(objx1,+count+1)
	
	d objx.%Save()
CreateS3Buckets
	s sts1 = ##class(python.s3Utils).createFolder(pname,bname,folder_"/")
	s sts2 = ##class(python.s3Utils).createFolder(pname,bname,folder_"/Failure/")
	s sts3 = ##class(python.s3Utils).createFolder(pname,bname,folder_"/Completed/")
	s sts4 = ##class(python.s3Utils).createFolder(pname,bname,folder_"/Staging/")
	s sts5 = ##class(python.s3Utils).createFolder(pname,bname,folder_"/In-Process/")
	if ((+sts1=1)!(+sts2=1)!(+sts3=1)!(+sts4=1)!(+sts5=1)) d
	.d AccCreation^AutoMail(mail,clientName)
	.&js<window.open("trialAccCompletion.csp","_self")>
	
	;TO Do CreateTemplate
	q

trialSubscriptionUtils^MAC^^67172,13023.1812527^0
AddSubToUser(userID, subSetupID)
	s startDate = $p($h,",",1)
	
	&sql(SELECT OCRUnit, TransformationUnit,Monthly,Yearly 
		INTO :remainingOcrUnit, :remainingTransformationUnit, :monthly, :yearly 
		FROM SubscriptionSetup WHERE ID=:subSetupID)
	if (SQLCODE '= 0 ) {q 0}
	
	s endDate = startDate + 30
	&sql(INSERT INTO Subscription (Profile, Subscription, RemainingOcrUnit, RemainingTransformationUnit, EndDate, StartDate) 
		VALUES(:userID, :subSetupID, :remainingOcrUnit, :remainingTransformationUnit, :endDate, :startDate))
	if (SQLCODE '= 0 ) {q 0}
	q 1
.
CreateSubscriptionSetup
	&sql(INSERT INTO MX.SubscriptionSetup 
		(Code, Name, OCRUnit, TransformationUnit) 
		VALUES ('003','TRIAL', 1000, 1000))
	zw SQLCODE
	q
.
SubscriptionPoolDetails(userID)
	&sql(select SUM(RemainingOCRUnit),SUM(RemainingTransformationUnit),SUM(RemainingRedactionUnit) INTO :remainingOcrUnit, :remainingTransformationUnit, :remainingRedactionUnit FROM Subscription WHERE Profile=:userID AND Subscription=8)
	w !,"Remaining OCR: ", remainingOcrUnit
	w !,"Remaining Trans: ", remainingTransformationUnit
	w !,"Remaining Redactions: ", remainingRedactionUnit
	q
.
GetOcrSubscription(userID)
	#import MX
	s currentDate = $p($h,",",1)
	&sql(SELECT TOP 1 ID
		INTO :subID
		FROM Subscription
		WHERE Profile = :userID AND EndDate > :currentDate AND RemainingOCRUnit > 0 AND Type='Transformation' AND Subscription=8
		ORDER BY StartDate ASC
		)
	if (SQLCODE '=0){
		;w !,"FAILED TO GET OCR SUBSCRIPTION. SQLCODE= ", SQLCODE
		q 0
	} else {
		q subID
	}
	q 0
.
GetTransSubscription(userID)
	#import MX
	s currentDate = $p($h,",",1)
	&sql(SELECT TOP 1 ID
		INTO :subID
		FROM Subscription
		WHERE Profile = :userID AND EndDate > :currentDate AND RemainingTransformationUnit > 0 AND Type='Transformation' AND Subscription=8
		ORDER BY StartDate ASC
		)
	if (SQLCODE '=0){
		w !,"FAILED TO GET Transformation SUBSCRIPTION. SQLCODE= ", SQLCODE
		q 0
	} else {
		q subID
	}
	q 0
	
GetRedactionSubscription(userID)
	#import MX
	s currentDate = $p($h,",",1)
	&sql(SELECT TOP 1 ID
		INTO :subID
		FROM Subscription
		WHERE Profile = :userID AND EndDate > :currentDate AND RemainingRedactionUnit > 0 AND Type='Redaction'
		ORDER BY StartDate ASC
		)
	if (SQLCODE '=0){
		w !,"FAILED TO GET Redaction SUBSCRIPTION. SQLCODE = ", SQLCODE,!
		q 0
	} else {
		q subID
	}
	q 0
.
DeductUnit(subID, unitType ="T", count=0)
	if (unitType = "T"){
		&sql(UPDATE MX.Subscription SET RemainingTransformationUnit = RemainingTransformationUnit - :count WHERE id = :subID)
		
	}elseif(unitType="O"){
		&sql(UPDATE MX.Subscription SET RemainingOCRUnit = RemainingOCRUnit - :count WHERE id = :subID)
		
	}
	elseif(unitType="R"){
		&sql(UPDATE MX.Subscription SET RemainingRedactionUnit = RemainingRedactionUnit - :count WHERE id = :subID)
		
	}
	if (SQLCODE '= 0){q 0} 
	q 1 
	
AdjustSubscriptionPool(userID)
	&sql(DECLARE SubAdjustCursor CURSOR FOR
		SELECT RemainingOCRUnit , ID
		INTO :remainingOcrUnit, :subId
		FROM Subscription
		WHERE Profile=:userID AND RemainingOCRUnit < 0 AND Subscription=8
	)
	&sql(OPEN SubAdjustCursor)
	&sql(FETCH SubAdjustCursor)
	if (SQLCODE '= 0 ){
		w !,"NO NEED TO ADJUST SUBSCRIPTION POOL."
		q
	}
	WHILE (SQLCODE '= 0){
		s ocrSubId = $$GetOcrSubscription(userID)
		if (ocrSubId = 0){
			w !,"NO subscription available to adjust the exceeded OCR units."
			q
		} else {
			w !,"Adjusting Subscription Pool."
			s ocrSub = ##class(MX.Subscription).%OpenId(ocrSubId)
			s ocrSubRemainingOCRUnit = ocrSub.RemainingOCRUnit
			if ( ocrSubRemainingOCRUnit < $ZABS(remainingOcrUnit)){
				&sql(UPDATE MX.Subscription SET RemainingOCRUnit = RemainingOCRUnit + :ocrSubRemainingOCRUnit WHERE id = :subID)
				&sql(UPDATE MX.Subscription SET RemainingOCRUnit = RemainingOCRUnit - :ocrSubRemainingOCRUnit WHERE id = :ocrSubID)
				continue
			}else{
				&sql(UPDATE MX.Subscription SET RemainingOCRUnit = RemainingOCRUnit + :ocrSubRemainingOCRUnit WHERE id = :subID)
				&sql(UPDATE MX.Subscription SET RemainingOCRUnit = RemainingOCRUnit - :ocrSubRemainingOCRUnit WHERE id = :ocrSubID)
				&sql(FETCH SubAdjustCursor)
			}
		}
	}
	&sql(CLOSE SubAdjustCursor)
	q
	
.
.
	; SendSubscriptionOverMail^jxSubscriptionUtils("minnbobo@jonda.health", "BoBo", "www.google.com")
SendSubscriptionOverMail(toEmail, clientName)
	#import MX
	s EmailAddress=toEmail
 
 	s upgradeLink = "https://www.google.com"
 
	#include %occOptions
	#include %occStatus
	s ServerName="in.mailjet.com"
	s UserName="28369fa0193b502ebe79ec07fd49d144"
	s Password="b4003f71afd71de76728485a3d6d42b5"
	s mailserver=##class(%Net.SMTP).%New()
	s mailserver.port="587"
	set auth=##class(%Net.Authenticator).%New() ; use default authentication list
	set auth.UserName=UserName
	set auth.Password=Password
	set mailserver.authenticator=auth
	s mailserver.smtpserver=ServerName
	s mail=##class(%Net.MailMessage).%New()
	s mail.From="notifications@jonda.health"
	do mail.To.Clear()
	do mail.To.Insert(EmailAddress)
	; Calling Connect
.
	set mail.Subject="Your JondaX Trial has wrapped up. Ready for the next step?"
	;set mail.Charset="iso-8859-1"
	set mail.Charset = "UTF-8"
	set mail.ContentType="text/html"
	
	s mailBody = "<p>Dear {{clientName}},</p><p>We hope you&apos;ve enjoyed your trial experience with JondaX! You&apos;ve now exhausted your file transformations and pre-processing for PDFs and image files.&nbsp;</p><p>Ready to move ahead with JondaX? Dive into our package details with one of our team members and find the one that best aligns with your needs. &nbsp;</p><p> &#128279; <a href="""_upgradeLink_""">Upgrade Now</a></p><p>Your friends at Jonda Health&nbsp;</p>"
	//s mailBody = "<p>Dear {{clientName}},</p><p>We hope you&apos;ve enjoyed your trial experience with JondaX! You&apos;ve now exhausted your file transformations and pre-processing for PDFs and image files.&nbsp;</p><p>Ready to move ahead with JondaX? Dive into our package details with one of our team members and find the one that best aligns with your needs. &nbsp;</p><p> &#128279; <a href=""https://www.google.com"">Upgrade Now</a></p><p>Your friends at Jonda Health&nbsp;</p>"
.
	s mailBody = $replace(mailBody, "{{clientName}}", clientName)
	;s mailBody = $replace(mailBody, "{{upgradeLink}}", upgradeLink)
	
	w !,mailBody
	
	set status=mail.TextData.Write("<html><body>"_mailBody_"</body></html>")
	
	set status=mailserver.Send(mail)
.
 	q
	

trialUpload^MAC^^67121,32754.8237195^0
trialUpload
Init
	#import MX
	d INIT^WSP999
	s UserID=$g(%session.Data("UserID"))
	s tCount=""
	&sql(SELECT RemainingTransformationUnit	INTO :tCount FROM Subscription WHERE Profile=:UserID)
	;if '$number(tCount),UserID=16 s tCount=10
	&js<document.getElementById("tCount").innerHTML=#(tCount)#>
	;&js<alert(`#(tCount)#`);>
	if tCount=0{&js<document.getElementById("iFrame1").src="trialExceededQuota.csp">}
	else {&js<document.getElementById("iFrame1").src="trialUploadProgress.csp">}
	s ^trialUpload("UploadedFile",UserID)=""
	q
Save
	#import MX
	d INIT^WSP999
	n setting
	s UserID=$g(%session.Data("UserID"))
	s tmpname=$$ATTNAME^WSP999
	s FName=%request.Data("FName",1)
	s FName=$zconvert(FName,"l")
	k ^trialUpload(FName)
	k %session.Data("trialUploadRecord")
	s pCount="",r1=""
	s status="Staging", reason="Upload Success"
	s fext=$p(FName,".",$l(FName,".")),fext=$zconvert(fext,"l")
	; check file extension
	s allowedext="*bmp*pdf*heic*png*jpg*jpeg*gif*webp*hl7*xml*json*ttl*ccd-a*hl7*fhir*"  ;CCD-A, HL7 v2, HL7 FHIR, PDF, BMP, HEIC, JPG, JPEG, GIF, WEBP"
	i allowedext'[("*"_fext_"*") s reason="Upload Issue: Invalid format",status="Failure" s ^trialUpload(FName)=0 
	s dt=$zdatetime($h,3,1)
	
  	new bytes
.
    s fsize=%request.MimeData("fileupload",1).Size
    i +fsize>4999999 s reason="Upload Issue: File Too Large",status="Failure" 	;size limit 5MB 
	i +fsize=0 s ^trialUpload(FName)=0 q	; no file uploaded
	
	s stream=##class(%Stream.FileBinary).%New()
	s x=""
	while 1{
		s bytes=%request.MimeData("fileupload",1).Read(.a)
		;s bytes=%request.MimeData("fileupload",1).Read(fsize)
		d stream.Write(bytes)
		quit:%request.MimeData("fileupload",1).AtEnd
		s x=x+bytes
	}
	d stream.%Save()
	s ^trialUpload(FName)=tmpname
	s ^trialUpload(FName,"Uploaded")=$h
	s %dev="C:\InterSystems\Cache\jondax-trial\adhoc\"_UserID
	d ##class(%File).CreateDirectory(%dev) 
	s %dev="C:\InterSystems\Cache\jondax-trial\adhoc\"_UserID_"\"_tmpname_"."_fext
	s %dev1="C:\InterSystems\Cache\jondax-trial\adhoc\"_UserID_"\"_FName
	o %dev:"wns" u %dev
	s output=stream.OutputToDevice()
	c %dev
	o %dev1:"wns" u %dev1
	s output=stream.OutputToDevice()
	c %dev1
	i fext="pdf" s pCount=##class(python.pdfhandler).pageCount(%dev)
	i pCount'["ERROR",pCount>5 s reason="Upload Issue: Max. pages exceeded",status="Failure"
	
	if status="Failure" {
		&sql(INSERT INTO Record(OrgFile,TempFile,fExt,Profile,CreatedDate,DeletedDate,Status,StatusDetails,OutputUnit,IsTrial) 
			  VALUES(:FName,:tmpname,:fext,:UserID,:dt,:dt,:status,:reason,'SI',1))
		d ##class(%File).Delete(%dev)
		d ##class(%File).Delete(%dev1)  }
	else {
		&sql(SELECT Setting INTO :setting FROM "User" WHERE ID=:UserID)
		&sql(SELECT Buckets_Name,Buckets_Folder,Buckets_CliProfileName 
			INTO :bName,:bfolder,:cProfileName FROM Setting_Buckets WHERE Setting=:setting)
		s fullBucket=bName_"/"_bfolder	
		s stagingFolder=bfolder_"/Staging"
		;s ^testing("s3")=cProfileName_","_%dev1_","_bName_","_stagingFolder
		s sts=##class(python.s3Utils).uploadFile(cProfileName,%dev1,bName,stagingFolder)
		if sts'=0{
		&sql(INSERT INTO Record(OrgFile,TempFile,fExt,Profile,CreatedDate,Status,StatusDetails, OutputUnit,BucketName,IsTrial) 
			 VALUES(:FName,:tmpname,:fext,:UserID,:dt,:status,:reason,'SI',:fullBucket,1))
			}
		}
			 
	&sql(SELECT ID INTO :r1 FROM Record WHERE OrgFile=:FName AND TempFile=:tmpname AND Profile=:UserID AND IsTrial=1 ORDER BY ID DESC)
	if SQLCODE=0 s ^trialUpload("UploadedFile",UserID)=$g(^trialUpload("UploadedFile",UserID))_r1_","
	q
.
WriteReports  ;call from trialUploadReport.csp
	#import MX
	d INIT1^CSP999
	s UserID=$g(%session.Data("UserID"))
	i (UserID=""){
		&js<window.open("trialLockdown.csp","_self")>
		q 
	}
	s firstUpload=$p(^trialUpload("UploadedFile",UserID),",",1)
	
	&sql(DECLARE C1 CURSOR FOR
		SELECT OrgFile,fExt,Status,StatusDetails
		INTO :r1,:r2,:r3,:r4
		FROM Record
		WHERE Profile=:UserID AND DownloadedDate IS NULL AND ID>=:firstUpload AND IsTrial=1
		ORDER BY ID DESC
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	WHILE SQLCODE=0{
		w "<tr>",!
        w "<td><img src='./assets/images/trial/File.png' alt='File Icon' class='file-icon'></td>",!
        if r3="Staging" {
			w "<td ><span class='fileName'>"_r1_"</span><br><span class='status success'>"_r4_"</span><br></td>",!
		}
		else{
			w "<td ><span class='fileName'>"_r1_"</span><br><span class='status fail'>"_r4_"</span><br></td>",!
		}
        w "</tr>",!
	&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	q
	
Init1   //uploadReport INit
	#import MX
	d INIT^WSP999
	s UserID=$g(%session.Data("UserID"))
	s firstUpload=$p(^trialUpload("UploadedFile",UserID),",",1)
	
	&sql(SELECT Count(ID)	INTO :sCount FROM Record WHERE Profile=:UserID AND DownloadedDate IS NULL AND ID>=:firstUpload AND Status='Staging' AND IsTrial=1)
	&sql(SELECT Count(ID)	INTO :fCount FROM Record WHERE Profile=:UserID AND DownloadedDate IS NULL AND ID>=:firstUpload AND Status='Failure' AND IsTrial=1)
	s ^trialUpload(UserID,"UploadedFile","success")=sCount
	&js<document.getElementById("success").innerHTML=#(sCount)#>
	&js<document.getElementById("fail").innerHTML=#(fCount)#>
	q	

trialViewTemp^MAC^^67101,28836.8638604^0
cViewTemp
InitMe
	#import MX
	d INIT1^CSP999
	s rid=%session.Data("jxTransform","rid")
	&sql(SELECT OutputUnit INTO :bk FROM Record WHERE ID=:rid)
	&js<document.getElementById("tName").innerHTML="#(bk)#">
	d LoadTemplates("")
	q
LoadTemplates(d1)
	s rid=%session.Data("jxTransform","rid")
	&sql(SELECT OutputUnit INTO :bk FROM Record WHERE ID=:rid)
	s temp=""
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID,DiagnosticTest,Name,UnitName
		INTO :r0,:r1,:r2,:r3
		FROM trialTemplate
		WHERE BucketName=:bk AND Name %STARTSWITH(:d1)
		ORDER BY 3
	)
	if (d1="num"){
		s d1=1
		while d1<10{
			&sql(OPEN C1)
			&sql(FETCH C1)
			WHILE SQLCODE=0{
				s tr="<tr><td>"_r1_"</td><td>"_r2_"</td><td>"_r3_"</td></tr>"
				s temp=temp_tr
				&sql(FETCH C1)
			}
			&sql(CLOSE C1)
			s d1=d1+1
		}
	}
	else{
		&sql(OPEN C1)
		&sql(FETCH C1)
		WHILE SQLCODE=0{
			s tr="<tr><td>"_r1_"</td><td>"_r2_"</td><td>"_r3_"</td></tr>"
			s temp=temp_tr
			&sql(FETCH C1)
		}
		&sql(CLOSE C1)
	}
	&js<document.querySelector("tbody").innerHTML="#(temp)#">
	q

utilAWS^MAC^^67242,14958.2236966^0
utilAWS
	q
GPT(rid)
	w !,"in utilAWS",!
	; Convert PDF & Images to Textract Tables 
	; pass in document as a parameter. document is the name of the file in AWS S3 bucket  (e.g. lipids.pdf)
	n x,jobId,outputFileName,filename,status,csvName
	n aws1,aws2,aws3,aws4,aws5,aws6,aws7,aws8,aws9,aws10
	#import MX
	d INIT^CSP999
	&sql(SELECT TempFile,fExt INTO :aws1,:aws2 FROM Record WHERE ID=:rid)
.
	q:$g(aws1)=""
	s awsx="*"_$zconvert($g(aws2),"U")_"*"
	q:"*PNG*PDF*AVIF*WEBP*HEIC*JPG*JPEG*TIF*TIFF*BMP*"'[awsx
.
	; check if global exists
	;k ^AIDATA(rid)
	i $d(^AIDATA(rid)) g GPTEnd
	
	s obj=##class(MX.Record).%OpenId(rid)
	i obj.BinaryData.FileBinarySize()=0 q
	s stream=##class(%Stream.FileBinary).%New()
	;d ##class(%File).CreateDirectory("c:\intersystems\cache\csp\jonda\review\"_rid)
	d stream.CopyFrom(obj.BinaryData)
	s %dev="c:\intersystems\cache\jondax\textracttables\"_aws1_"."_aws2
	o %dev:"wns" u %dev
	s status=stream.OutputToDevice()
	c %dev
	//Added 5Feb2025 for heic files
	if $zconvert(aws2,"l")="heic" d
	. s cmd="mogrify -format png """_%dev_""""
	. s x=$zf(-1,cmd_" && exit")
	. d ##class(%File).Delete("c:\intersystems\cache\jondax\textracttables\"_aws1_"."_aws2)
	. s aws2="png" s %dev="c:\intersystems\cache\jondax\textracttables\"_aws1_"."_aws2
	. d ##class(%File).CreateDirectory("C:\InterSystems\Cache\CSP\jondax\Review\"_rid)
	. d ##class(%File).CopyFile(%dev,"C:\InterSystems\Cache\CSP\jondax\Review\"_rid)
		
	d ##class(python.s3Utils).uploadFile("default",%dev,"jondaffr2")
	;s x=$zf(-1,"aws s3 cp """_%dev_""" jondaffr2 && exit")
	//s document = "Lipids.pdf" // name of document in jondaffr bucket
	s document=aws1_"."_aws2
	s jobId=##class(python.textractUtils).SDTDTables(document)
	
	s outputFileName = $p(document,".",1)	;"testdoc"	
	s filename = "C:\data_transform\AI\"_outputFileName  // path to file name output without the file extension
	d ##class(%File).Delete(filename_".csv")
	
	s status = ##class(python.textractUtils).GenerateCSVFromJobID(jobId, filename)
	
	if (status = 0){
		w !,"ERROR"
		q
	} else {
		w !,"Processing CSV."
		s csvName = filename_".csv"
		; clean the CSV first
		d CleanCSV^utilAWS(csvName) // Clean the textract OCR responce
		d ##class(python.textractUtils).ProcessCSV(csvName, rid) //GPT ^AIDATA
		d ##class(%File).Delete(%dev)
		d ##class(python.s3Utils).deleteFile("default",document,"jondaffr2")
	}
.
GPTEnd
	; do Claude
	i $d(^AICLAUDE(rid)) q
	w !,"Processing Claude"
	s document=aws1_"."_aws2
	s outputFileName = $p(document,".",1)	;"testdoc"	
	s filename = "C:\data_transform\AI\"_outputFileName  // path to file name output without the file extension
	s csvName = filename_".csv"
	s csvName=$replace($zconvert(csvName,"l"),"\","/")
	d ##class(python.Claude).AiCompletion(csvName, rid)
	q
CleanCSV(fnam)
	;s fnam=csvName
	new content,n,rec,i,arr,arri,x,col,date,j
    #import MX
    ;Set fnam="D:\#Data\#aws\Textract\LT1\LT1all.txt"
    Kill content
    Set n=1
    Set $ztrap="CleanCSV2^utilAWS"
    set content =""
    s Q=$c(9)
	s date=0
	s j=1
.
    Open fnam:"rs"
    u 0 w fnam,!
CleanCSV1
   // Read records from the file
    Use fnam Read rec
    If rec="" Goto CleanCSV1
    s i=$o(arr(""),-1),i=i+1
    s arr(i)=rec
    g CleanCSV1
CleanCSV2
	c fnam
    Set $ztrap=""
	s arri=""
	;d CheckCol(2)
CleanCSV2a
	s arri=$o(arr(arri)) g:arri="" END	
	n isTest ;  ,r1a,r0,IsMatch,tCol1
	
	s rec=arr(arri)
	if n=1,date=0{
		f i2=1:1:$l(rec,Q) {
		i date'=0 q
		s date =$$checkDate^utilAWS($Piece(rec,Q,i2)) 
		i date'=0 d
		.Set content(n)=rec 
		.s ^Textract(fnam,n)=rec 
		.s n=n+1 q
		}
	}
	f i1=2:1:$l(rec,Q) d
	.s $p(rec,Q,i1)=$replace($replace($p(rec,Q,i1),"[",""),"]","")
	;.s $p(rec,Q,i1)=$replace($p(rec,Q,i1)," ","")
    If $Piece(rec,Q,1)="" Goto CleanCSV2a  ; no test name
    ;If ($Piece(rec,Q,2)="")&($Piece(rec,Q,3)="") Goto CleanCSV2a  ; no result
    If ($Piece(rec,Q,3)="")&($Piece(rec,Q,4)="")&($Piece(rec,Q,5)="")&($Piece(rec,Q,6)="") Goto CleanCSV2a  ;
    ;If ($Piece(rec,Q,4)="")&($Piece(rec,Q,5)="")&($Piece(rec,Q,6)="") Goto CleanCSV2a  ;
 
    f i=1:1:$l(rec,Q) d
    .i $e($p(rec,Q,i),$l($p(rec,Q,i)))=" " s $p(rec,Q,i)=$e($p(rec,Q,i),1,$l($p(rec,Q,i))-1) ;remove trailing space
    .s $p(rec,Q,i)=$replace($p(rec,Q,i),"|","l")
    .s $p(rec,Q,i)=$replace($p(rec,Q,i),",",".")
    .s $p(rec,Q,i)=$replace($p(rec,Q,i)," / ","/")
    .i $e($p(rec,Q,i),$l($p(rec,Q,i)))="_" s $p(rec,Q,i)=$p(rec,Q,i)_"l"  ;for "g_"
    .s @("tCol"_i)=$Piece(rec,Q,i) ;for ^Textract Global
    .i $p(rec,Q,i)'["""" s $p(rec,Q,i)=""""_$p(rec,Q,i)_""""  ;adding quote for each piece
	s ^Textract(fnam,n)=rec
	
		
    ;added by Martin 12/03/2024 ;getting textract total rows of Biomarkers
	 
	i ($zconvert(tCol1,"l")="test")!($zconvert(tCol1,"l")="analyte")!($zconvert(tCol1,"l")["name") Goto CleanCSV2a
	s x=$$GetSIName^WSP999(tCol1)
	i x="" {
	 	s IsMatch=0,r1a=tCol1
		WHILE IsMatch=0&($l(r1a)'=0){
			s tname="" &sql(SELECT ID INTO :tname FROM DiagnosticTest WHERE Name=:r1a OR SIName=:r1a AND IsNull(DeletedDate,'')<>'')
			i tname'="" s IsMatch=1 d setComparison(r1a) s $p(rec,Q,1)=""""_r1a_""""  
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
	}else {d setComparison(x)}
	;added by Martin 12/03/2024 END 
	
	Set content(n)=rec
    Set n=n+1
    if '$d(^Textract(fnam,j-1,"BB")) s ^Textract(fnam,"rowCount")=0
    Goto CleanCSV2a
setComparison(d1)   ;added by Martin
	s text=$replace(rec,"""","") 
	s text=$replace(text,Q,",") 
	s tCol1=d1  ;$p(text,",",1)
	s text=$replace(text," ","")
	;s $p(text,",",1)=tCol1
	s ^Textract(fnam,j,"BB")=text 
	s ^Textract(fnam,"rowCount")=j 
	s j=j+1 
	q
Ztrap
END
	s $ztrap=""
    use 0
	close fnam
	; overwrite the original CSV file with content(n)
	o fnam:"wns"
	f i=1:1:$o(content(""),-1) d
	. s content(i)=$$Replace^utilUmlaut(content(i))
	. u fnam w $replace(content(i),Q,","),!
	c fnam
 	u 0
	q 
CheckCol(col)
	n errcount,totcount
	s errcount=0,totcount=0
CheckCol1
	s arri=$o(arr(arri)) g:arri="" CheckColEnd
	s rec=arr(arri)
	s rec=$p(rec,Q,col)
	s rec=$replace(rec," ","")
	i col=2 d	; test if col 2 = value or unit
	. s totcount=totcount+1
	. i rec["<"!(rec[">")!(rec["=") q		; assume this is a value
	. i rec="" s errcount=errcount+1 q
	. i $e(rec,1,1)'=0,+rec'=0 q	; assume this is a value
	. s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:rec OR SIName=:rec)
	. i x'="" q		; this is  a unit
	. s errcount=errcount+1
	g CheckCol1
CheckColEnd
	q:totcount=0!(errcount=0)
	i $p((errcount/totcount*100),".",1)<80 q	; cutoff for error
	
	q
	
checkDate(x) 
	;s $ztrap="DW^utilAWS"
	s x=$zconvert(x,"l")
	i x["december" s x=$replace(x,"december" ,"12")
	s dFlag=0
	for dft=1:1:9 
		{
			if $zdateh(x,dft,,2,,,,,"0") s dFlag=1 q  
			if $zdateh(x,dft,,4,,,,,"0") s dFlag=1 q 
		}
	if $d(dFlag),dFlag=1 quit dft
	for dft=15:1:21 
		{
			if $zdateh(x,dft,,2,,,,,"0") s dFlag=1 q
			if $zdateh(x,dft,,4,,,,,"0") s dFlag=1 q	
		}
	
	if $d(dFlag),dFlag=1 quit dft
	;i $g(martin)'="" u 0 w 2,! b 
	s dft=13	
	if $zdateh(x,dft,,2,,,,,"0") q dft
	if $zdateh(x,dft,,4,,,,,"0") q dft
		
	quit 0 
DW	
	s $ztrap=""
	q
	u 0
	w $ZERROR,!
	w 1
	;b
	q
.

utilAWS01^MAC^^67246,26372.3111525^0
utilAWS
	q
GPT(rid)
.
	n x,jobId,outputFileName,filename,status,csvName
	n aws1,aws2,aws3,aws4,aws5,aws6,aws7,aws8,aws9,aws10
	#import MX
	d INIT^CSP999
	&sql(SELECT TempFile,fExt INTO :aws1,:aws2 FROM Record WHERE ID=:rid)
.
	q:$g(aws1)=""
	s awsx="*"_$zconvert($g(aws2),"U")_"*"
	q:"*PNG*PDF*AVIF*WEBP*HEIC*JPG*JPEG*TIF*TIFF*BMP*"'[awsx
	
	if $zconvert(aws2,"l")="heic" d
	. s obj=##class(MX.Record).%OpenId(rid)
	. i obj.BinaryData.FileBinarySize()=0 q
	. s stream=##class(%Stream.FileBinary).%New()
	. d stream.CopyFrom(obj.BinaryData)
	. s %dev="c:\intersystems\cache\jondax\textracttables\"_aws1_"."_aws2
	. o %dev:"wns" u %dev
	. s status=stream.OutputToDevice()
	. c %dev
	.	
	. s cmd="mogrify -format png """_%dev_""""
	. s x=$zf(-1,cmd_" && exit")
	. d ##class(%File).Delete("c:\intersystems\cache\jondax\textracttables\"_aws1_"."_aws2)
	. s aws2="png" s %dev="c:\intersystems\cache\jondax\textracttables\"_aws1_"."_aws2
	. d ##class(%File).CreateDirectory("C:\InterSystems\Cache\CSP\jondax\Review\"_rid)
	. d ##class(%File).CopyFile(%dev,"C:\InterSystems\Cache\CSP\jondax\Review\"_rid)
	. d ##class(%File).Delete(%dev)
.
	s document=aws1_"."_aws2
	s outputFileName = $p(document,".",1)	;"testdoc"	
	s filename = "C:\data_transform\AI\"_outputFileName  // path to file name output without the file extension
	
	s status = ##class(%File).Exists(filename_".txt")
	if (status = 0){
		w !,"ERROR"
		q
	} else {
		w !,"Processing CSV."
		s csvName = filename_".txt"
		; clean the CSV first
		d CleanCSV^utilAWS01(csvName) // Clean the textract OCR responce
	}
.
GPTEnd
	q
.
CleanCSV(fnam)
	;s fnam=csvName
	new content,n,rec,i,arr,arri,x,col,date,j
    #import MX
    ;Set fnam="D:\#Data\#aws\Textract\LT1\LT1all.txt"
    Kill content
    Set n=1
    Set $ztrap="CleanCSV2^utilAWS01"
    set content =""
    s Q=$c(9)
	s date=0
	s j=1
.
    Open fnam:"rs"
    u 0 w fnam,!
    
CleanCSV1
   // Read records from the file
    Use fnam Read rec
    If rec="" Goto CleanCSV1
    s i=$o(arr(""),-1),i=i+1
    s arr(i)=rec
    g CleanCSV1
CleanCSV2
	c fnam
    Set $ztrap=""
	s arri=""
	;d CheckCol(2)
CleanCSV2a
	s arri=$o(arr(arri)) g:arri="" END	
	n isTest ;  ,r1a,r0,IsMatch,tCol1
	
	s rec=arr(arri)
	if n=1,date=0{
		f i2=1:1:$l(rec,Q) {
		i date'=0 q
		s date =$$checkDate^utilAWS01($Piece(rec,Q,i2)) 
		i date'=0 d
		.Set content(n)=rec 
		.s ^Textract(fnam,n)=rec 
		.s n=n+1 q
		}
	}
.
	;.s $p(rec,Q,i1)=$replace($p(rec,Q,i1)," ","")
    If $Piece(rec,Q,1)="" Goto CleanCSV2a  ; no test name
    ;If ($Piece(rec,Q,2)="")&($Piece(rec,Q,3)="") Goto CleanCSV2a  ; no result
    ;If ($Piece(rec,Q,3)="")&($Piece(rec,Q,4)="")&($Piece(rec,Q,5)="")&($Piece(rec,Q,6)="") Goto CleanCSV2a  ;
    If ($Piece(rec,Q,4)="")&($Piece(rec,Q,5)="")&($Piece(rec,Q,6)="") Goto CleanCSV2a  ;
 
    f i=1:1:$l(rec,Q) d
    .s $p(rec,Q,i)=$ZSTRIP($p(rec,Q,i),"<>W") ;remove trailing and leading white space
    .;i $e($p(rec,Q,i),$l($p(rec,Q,i)))=" " s $p(rec,Q,i)=$e($p(rec,Q,i),1,$l($p(rec,Q,i))-1) ;remove trailing space
    .s $p(rec,Q,i)=$replace($p(rec,Q,i),"  "," ") ; double space into single space
    .s $p(rec,Q,i)=$replace($p(rec,Q,i),"|","l")
    .s $p(rec,Q,i)=$replace($p(rec,Q,i),",",".")
    .s $p(rec,Q,i)=$replace($p(rec,Q,i)," / ","/")
    .i i>1 d
	.. s $p(rec,Q,i)=$replace($replace($p(rec,Q,i),"[",""),"]","")
	.. ;if $p(rec,Q,i)[" " s $p(rec,Q,i)= $replace($p(rec,Q,i)," ",Q)
	.. s $p(rec,Q,i)=$replace($p(rec,Q,i),"-I","-l")
	.. s $p(rec,Q,i)=$replace($p(rec,Q,i),"_I","_l")
	.. s $p(rec,Q,i)=$replace($p(rec,Q,i),"_1","_l")
	..; s $p(rec,Q,i)=$replace($p(rec,Q,i),"-!","_l")
	.. ;s $p(rec,Q,i)=$replace($p(rec,Q,i),"_!","_l")
    .i $e($p(rec,Q,i),$l($p(rec,Q,i)))="_" s $p(rec,Q,i)=$p(rec,Q,i)_"l"  ;for "g_"
    .i $e($p(rec,Q,i),$l($p(rec,Q,i)))="!" s $p(rec,Q,i)=$replace($p(rec,Q,i),"!","l")
    .s @("tCol"_i)=$Piece(rec,Q,i) ;for ^Textract Global
    .i $p(rec,Q,i)'["""" s $p(rec,Q,i)=""""_$p(rec,Q,i)_""""  ;adding quote for each piece
	s ^Textract(fnam,n)=rec
	
		
    ;added by Martin 12/03/2024 ;getting textract total rows of Biomarkers
	 
	i ($zconvert(tCol1,"l")="test")!($zconvert(tCol1,"l")="analyte")!($zconvert(tCol1,"l")["name") Goto CleanCSV2a
	s x=$$GetSIName^WSP999(tCol1)
	i x="" {
	 	s IsMatch=0,r1a=tCol1
		WHILE IsMatch=0&($l(r1a)'=0){
			s tname="" &sql(SELECT ID INTO :tname FROM DiagnosticTest WHERE Name=:r1a OR SIName=:r1a AND IsNull(DeletedDate,'')<>'')
			i tname'="" s IsMatch=1 d setComparison(r1a) ;s matchTest=r1a  ;s $p(rec,Q,1)=""""_r1a_""""  
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
	}else {d setComparison(x)}
	;added by Martin 12/03/2024 END 
	
	Set content(n)=rec
    Set n=n+1
    if '$d(^Textract(fnam,j-1,"BB")) s ^Textract(fnam,"rowCount")=0
    Goto CleanCSV2a
setComparison(d1)   ;added by Martin
	s text=$replace(rec,"""","") 
	s text=$replace(text,Q,",") 
	s tCol1=d1  ;$p(text,",",1)
	s text=$replace(text," ","")
	;s $p(text,",",1)=tCol1
	s ^Textract(fnam,j,"BB")=text 
	s ^Textract(fnam,"rowCount")=j 
	s j=j+1 
	q
Ztrap
END
	s $ztrap=""
    use 0
	close fnam
	; overwrite the original CSV file with content(n)
	o fnam:"wns"
	f i=1:1:$o(content(""),-1) d
	. s content(i)=$$Replace^utilUmlaut(content(i))
	. u fnam w $replace(content(i),Q,","),!
	c fnam
 	u 0
	q 	 
CheckCol(col)
	n errcount,totcount
	s errcount=0,totcount=0
CheckCol1
	s arri=$o(arr(arri)) g:arri="" CheckColEnd
	s rec=arr(arri)
	s rec=$p(rec,Q,col)
	s rec=$replace(rec," ","")
	i col=2 d	; test if col 2 = value or unit
	. s totcount=totcount+1
	. i rec["<"!(rec[">")!(rec["=") q		; assume this is a value
	. i rec="" s errcount=errcount+1 q
	. i $e(rec,1,1)'=0,+rec'=0 q	; assume this is a value
	. s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:rec OR SIName=:rec)
	. i x'="" q		; this is  a unit
	. s errcount=errcount+1
	g CheckCol1
CheckColEnd
	q:totcount=0!(errcount=0)
	i $p((errcount/totcount*100),".",1)<80 q	; cutoff for error
	
	q
	
checkDate(x) 
	s x=$zconvert(x,"l")
	i x["december" s x=$replace(x,"december" ,"12")
	s dFlag=0
	for dft=1:1:9 
		{
			if $zdateh(x,dft,,2,,,,,"0") s dFlag=1 q  
			if $zdateh(x,dft,,4,,,,,"0") s dFlag=1 q 
		}
	if $d(dFlag),dFlag=1 quit dft
	for dft=15:1:21 
		{
			if $zdateh(x,dft,,2,,,,,"0") s dFlag=1 q
			if $zdateh(x,dft,,4,,,,,"0") s dFlag=1 q	
		}
	
	if $d(dFlag),dFlag=1 quit dft
	;i $g(martin)'="" u 0 w 2,! b 
	s dft=13	
	if $zdateh(x,dft,,2,,,,,"0") q dft
	if $zdateh(x,dft,,4,,,,,"0") q dft
		
	quit 0 
DW	
	s $ztrap=""
	q
	u 0
	w $ZERROR,!
	w 1
	;b
	q
.

utilAutoApproveDiagnosticTest^MAC^^67159,31065.7801696^0
utilAutoApproveDiagnosticTest
	#import MX
	s dt=$zdatetime($h,3)
	s i=1,num=1,num1=1
	s fnam1="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\file for testing\BB Auto Approval\test1.csv"
	s fnam2="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\file for testing\BB Auto Approval\test2.csv"
	s fnam3="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\file for testing\BB Auto Approval\test3.csv"
	o fnam1:"wns"
	o fnam2:"wns"
	o fnam3:"wns"
	
	; auto approve these (Approved but modified, old records)
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID,Name,SIName, ApprovedDate, ModifiedDate
		INTO :r0,:r1,:r2,:r3,:r4
		FROM DiagnosticTest
		WHERE IsNull(ApprovedDate,'')<>'' AND ModifiedDate>ApprovedDate AND IsNull(DeletedDate,'')=''
		ORDER BY SIName
	)
	/*
	SELECT DiagnosticTest,DiagnosticTest->Name,DiagnosticTest->SIName,DiagnosticTest->SIUnit,
	Languages,Languages->Name,DiagnosticTest->ApprovedDate,DiagnosticTest->ModifiedDate  
	FROM DiagnosticTest_Languages 
	WHERE IsNull(DiagnosticTest->ApprovedDate,'')<>'' AND DiagnosticTest->ModifiedDate>DiagnosticTest->ApprovedDate 
	AND IsNull(DiagnosticTest->DeletedDate,'')=''
	ORDER BY DiagnosticTest->Name
	*/
	u fnam1
	w "These BBs are approved before but modified later, old records",!,!
	w "No",$c(9),"Name",$c(9),"SIName",$c(9),"ApprovedDate",$c(9),"ModifiedDate",!
	; open cursor and process records
	&sql(OPEN C1)
	while SQLCODE=0 {
		&sql(FETCH C1)
		u fnam1		; Approved before but modified later, old records
		w i_$c(9)_r1_$c(9)_r2_$c(9)_r3_$c(9)_r4,! ;&sql(UPDATE DiagnosticTest SET ApprovedDate=:dt WHERE ID=:r0)
		s i=i+1
	}
	&sql(CLOSE C1)
	
	; totally new records
	&sql(DECLARE C2 CURSOR FOR
		 SELECT DiagnosticTest,DiagnosticTest->Name,DiagnosticTest->SIName, DiagnosticTest->SIUnit,Languages->Name, DiagnosticTest->CreatedDate,DiagnosticTest->ApprovedDate,DiagnosticTest->ModifiedDate
		 INTO :r0,:r1,:r2,:r3,:r4,:r5,:r6,:r7
		 FROM DiagnosticTest_Languages 
		 WHERE IsNull(DiagnosticTest->ApprovedDate,'')='' AND IsNull(DiagnosticTest->DeletedDate,'')=''
		 ORDER BY DiagnosticTest->Name
	)
	/*
		SELECT ID,Name,SIName 
		INTO :r0,:r1,:r2
		FROM DiagnosticTest
		WHERE IsNull(ApprovedDate,'')='' AND IsNull(DeletedDate,'')='' 
	*/
	u fnam2
	w "These are newly added BBs, but duplicate with ones in Data dictionary",!,!
	w "No",$c(9),"Name",$c(9),"SIName",$c(9),"SIUnit",$c(9),"CreatedDate",!   ;"Language",$c(9),"ApprovedDate",$c(9),"ModifiedDate",!
	
	u fnam3
	w "These are newly added BBs, found same approved SIName and SIUnit with the ones in Data dictionary",!
	w "Second row is the BBs already exited",!
	w "No",$c(9),"Name",$c(9),"SIName",$c(9),"SIUnit",$c(9),"Language",$c(9),"CreatedDate",!
	&sql(OPEN C2)
	while SQLCODE=0 {
		&sql(FETCH C2)
		; Check New BB is already in DataDictionary or not
		s x=$$GetSIName^WSP999(r1)
		s r1a=""
		; approve & loop next r1
		; If new BB exists, Auto Approve
		u fnam2
		i x'="" d
		. w num_$c(9)_r1_$c(9)_r2_$c(9)_r3_$c(9)_r5,!  ;&sql(UPDATE DiagnosticTest SET ApprovedDate=:dt WHERE ID=:r0)
		.s num=num+1
		
		; If new BB doesn't exist, check for closest SIName with same SIUnit by deducting last one character and loop
		i x="" {
		 	s IsMatch=0,r1a=r1
			WHILE IsMatch=0&($l(r1a)'=0){
				s r1x="" &sql(SELECT ID INTO :r1x FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND SIUnit=:r3 AND IsNull(ApprovedDate,'')<>'' AND IsNull(DeletedDate,'')='')
				i r1x'="" d
				.s IsMatch=1 
				.&sql(SELECT Name,SIName,SIUnit INTO :r1N,:r1a,:r1U FROM DiagnosticTest  WHERE ID=:r1x)
				.&sql(SELECT Languages->Name INTO :r1L FROM DiagnosticTest_Languages WHERE DiagnosticTest=:r1x)
				i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
			}
			
			; If closest match found, compare match(SIName) with new BB's SIName
			u fnam3
			i r1a'="" d
			. i r1a=r2 d ; approve & loop next r1
			..w num1_$c(9)_r1_$c(9)_r2_$c(9)_r3_$c(9)_r4_$c(9)_r5,! ;&sql(UPDATE DiagnosticTest SET ApprovedDate=:dt WHERE ID=:r0)
			..w ""_$c(9)_r1N_$c(9)_r1a_$c(9)_r1U_$c(9)_r1L_$c(9)_"",!,!
			..s num1=num1+1	
			
			
		}
		&sql(FETCH C2)
		}
		&sql(CLOSE C2)
		c fnam1
		c fnam2,fnam3
	q
	
	
	//old version
	/*
utilAutoApproveDiagnosticTest
	#import MX
	s dt=$zdatetime($h,3)
	s i=1,num=1,num1=1
	s fnam1="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\file for testing\test1.csv"
	s fnam2="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\file for testing\test2.csv"
	s fnam3="C:\InterSystems\Cache\JondaX\JondaX\jondatesting\file for testing\test3.csv"
	o fnam1:"wns"
	o fnam2:"wns"
	o fnam3:"wns"
	
	; auto approve these (modified, not new records)
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID,Name,SIName 
		INTO :r0,:r1,:r2
		FROM DiagnosticTest
		WHERE IsNull(ApprovedDate,'')<>'' AND ModifiedDate>ApprovedDate AND IsNull(DeletedDate,'')=''
	)
	
	; open cursor and process records
	&sql(OPEN C1)
	while SQLCODE=0 {
		&sql(FETCH C1)
		u fnam1
		w i_$c(9)_r1_$c(9)_r2,! ;&sql(UPDATE DiagnosticTest SET ApprovedDate=:dt WHERE ID=:r0)
		s i=i+1
	}
	&sql(CLOSE C1)
	
	; totally new records
	&sql(DECLARE C2 CURSOR FOR
		SELECT ID,Name,SIName 
		INTO :r0,:r1,:r2
		FROM DiagnosticTest
		WHERE IsNull(ApprovedDate,'')='' AND IsNull(DeletedDate,'')='' 
	)
	&sql(OPEN C2)
	while SQLCODE=0 {
		&sql(FETCH C2)
		s x=$$GetSIName^WSP999(r1)
		s r1a=""
		; approve & loop next r1
		u fnam2
		i x'="" d
		.w num_$c(9)_r1_$c(9)_r2,!  ;&sql(UPDATE DiagnosticTest SET ApprovedDate=:dt WHERE ID=:r0)
		.s num=num+1
		
		i x="" {
		 	s IsMatch=0,r1a=r1
			WHILE IsMatch=0&($l(r1a)'=0){
				s r1x="" &sql(SELECT ID INTO :r1x FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='')
				i r1x'="" s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r1x)
				i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
			}
			u fnam3
			i r1a'="" d
			. i r1a=r2 d ; approve & loop next r1
			..w num1_$c(9)_r1_$c(9)_r2,! ;&sql(UPDATE DiagnosticTest SET ApprovedDate=:dt WHERE ID=:r0)
			..s num1=num1+1	
		}
		}
		&sql(CLOSE C2)
		c fnam
		c fnam2,fnam3
	q
			*/

utilFileDeletion^MAC^^67170,24576.2781343^0
utilFileDeletion	; Delete Copied files for "Download files" tab in Client Portal
					; Function is to delete the copied files after 14 days of Processed Date		
					; Scheduled to run after bgRenewSubscription everyday
					; Logs are in C:\InterSystems\Cache\JondaX\ClientDownload\TaskLogs.txt
	#import MX
	s dt= +$h			; current date
	s dhr=$p($h,",",2)	; current hour
	s ddt=$zdatetime($h,3) 	;current datetime
	s fDir="C:\InterSystems\Cache\JondaX\ClientDownload\"
.
	&sql(DECLARE C1 CURSOR FOR 
		 SELECT ID,Profile,Status, ProcessedDate
		 INTO :r1, :r2, :r3, :r4
		 FROM Record
		 WHERE IsNull(DeletedDate,'')='' AND IsNull(ProcessedDate,'')<>'' 
		 AND IsNull(IsTrial,'')=''
		 ORDER BY ID DESC
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	WHILE SQLCODE=0{
.
		s pdt=$zdatetimeh(r4,3)		
		s pdt14Days=$p(pdt,",",1)+14_","_$p(pdt,",",2)		; 14days after processedDate
		s pdtHr=$p(pdt14Days,",",2)							; hour of 14days after processedDate hour
		
		;If today's date is greater date
		i (+dt>+pdt14Days){
			d DeleteFile
		}
		elseif (+dt=+pdt14Days),(dhr>pdtHr) {;If today's date is samedate but greater hours
			d DeleteFile
			}
		else {
			;w "File is not due yet ",r1," Due date is ",$zdatetime(pdt14Days,3),!
		}
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	q
.
DeleteFile
		w "Files of Record ID: ", r1," set to be deleted."
		d ##class(%File).RemoveDirectoryTree(fDir_r2_"\"_r3_"\"_r1)
		&sql(UPDATE Record SET DeletedDate=:ddt WHERE ID=:r1)
		i SQLCODE=0 w "Deleted Date is ",ddt,!,! 
		e  w "Updating table fails!",!,! 
		q

utilGlobals2Txt^MAC^^67222,31223.454474^0
utilGlobals2Txt
.
	;3744-3759
	for rid=3744:1:3759 d
	. i $d(^AICLAUDE(rid)) w !,rid,! d WriteAICLAUDE
	q
	
WriteAICLAUDE ;for ^AICLAUDE to text
	s filePath="C:\InterSystems\Cache\JondaX\LLMtxt\"_rid_"-LLM.csv"
	s row=""	
    // Create a new file stream
    SET fileStream = ##class(%Stream.FileCharacter).%New()
    // Set the file name
    SET fileStream.Filename = filePath
    // Write Headers
    DO fileStream.WriteLine("Date	TestName	Result	Unit	Low Ref	High Ref")
WriteRow    
    s row=$o(^AICLAUDE(rid,row)) g:row="rowCount" END
    // Write content to the file
    i '$d(^AICLAUDE(rid,row,"date")) s date=""
    e  s date=^AICLAUDE(rid,row,"date")
    s rec = date_$c(9)_^AICLAUDE(rid,row,"name")_$c(9)_^AICLAUDE(rid,row,"value")_$c(9)
    s rec = rec_^AICLAUDE(rid,row,"unit")_$c(9)_^AICLAUDE(rid,row,"loRange")_$c(9)_^AICLAUDE(rid,row,"hiRange")
    DO fileStream.WriteLine(rec)
    g WriteRow
.
END    
    // Save and close the file
    DO fileStream.%Save()
    DO fileStream.%Close()
    w "File is saved! - "_filePath
	q

utilGroot^MAC^^66870,27720.3636836^0
utilGroot
	q
CSV(rid)	; convert textract tables to results
	; pass in the record id
	#import MX
	;s fnam="C:\data_transform\AI\NM000065.csv"
	;&sql(DELETE FROM ResultBloodTest_Tests WHERE ResultBloodTest->Record=1221)
	&sql(SELECT TempFile INTO :fnam FROM Record WHERE ID=:rid)
	s fnam="c:\data_transform\AI\"_fnam_".csv"
	k ^jxGroot(rid)
	s c=","
	s n=1
	s $ztrap="End^jxGroot"
	o fnam:"rs"
A
	u fnam r rec
	s rec=$$Replace^utilUmlaut(rec)
	s rec=$replace(rec,"""","")
	i $p(rec,c,1)="" g A
	i $p(rec,c,2)="" g A
	i ($p(rec,c,3)_$p(rec,c,4)_$p(rec,c,5)_$p(rec,c,6))="" g A
	s rec=$replace(rec,"< ","<")
	s rec=$replace(rec,"> ",">")
	s ^jxGroot("Original",n)=rec
	f i=1:1:10 s @("d"_i)=$p(rec,c,i) i $e(@("d"_i),$l(@("d"_i)))=" " s @("d"_i)=$e(@("d"_i),1,$l(@("d"_i))-1)
	s d3=$replace(d3," ","-")
	s d3=$replace(d3," - ","-")
	i d3["-" d
	. s d3a=$p(d3,"-",1),d3a=$replace(d3a," ","")
	. s d3b=$p(d3,"-",2),d3b=$replace(d3b," ","")
	e  i d3[" " d
	. s d3a=$p(d3," ",1),d3a=$replace(d3a," ","")
	. s d3b=$p(d3," ",2),d3b=$replace(d3b," ","")
	s ^jxGroot("Clean",n)=d1_c_d2_c_d4_c_d3a_c_d3b
	;&sql(INSERT INTO ResultBloodTest_Tests (element_key,ResultBloodTest,Tests_TestName,Tests_Result,Tests_SIUnit,Tests_LowRange,Tests_HighRange)
	;	VALUES (:n,895,:d1,:d2,:d4,:d3a,:d3b)
	;)
	;u 0 w SQLCODE,!
	s n=n+1
	g A
End
	u 0
	i $zerror'["<ENDOFFILE>" w $zerror,!
	e  w "Done!",!
	c fnam
	q

utilImportCSVTemplate^MAC^^67066,13550.5796364^0
utilImportCSVTemplate	; Import and Match Template to JXNames
	q
ImportStart
	d INIT^CSP999
	#import MX 
	; IMPORTANT: Back up MX.TemplateI and MX.TemplateD before running this program!
	s setting=10
	s bucket="IND"
	&sql(DELETE FROM Template WHERE Setting=:setting)
	s Q=$c(9)	; tab
	s cnt=0
	s %dev="c:\intersystems\Templatev1.0.txt"	; NOTE: use TAB delimited to avoid the comma problem with CSV
	s $ztrap="EndImport^utilImportCSVTemplate"
	o %dev
Import
	u %dev r rec
	s dt=$zdate($h,3,,4)
	s d1=$p(rec,Q,1),d2=$p(rec,Q,2)
	; strip out quotation marks
	s d1=$replace(d1,"""","")
	;s d2=$replace(d2,"""","")
.
	g:d1="" Import
	&sql(INSERT INTO "Template" (BucketName,CreatedDate,DiagnosticTest,Name,Setting,UnitName,ModifiedDate) VALUES (:bucket,:dt,'',:d1,:setting,:d2,:dt))
	u 0 w d1," ",SQLCODE,!
	s cnt=cnt+1
	g Import
EndImport
	c %dev
	s $ztrap=""
	u 0 w $ZERROR,!,cnt," records processed",!
	s r1=""
	&sql(DECLARE C1 CURSOR FOR
		SELECT ID,Name
		INTO :r1,:r2
		FROM Template
		WHERE IsNull(DiagnosticTest,'')='' AND Setting=:setting
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	; strip brackets
	s r2=$replace(r2,"(percent)","(%)")
	s r2=$replace($replace(r2,"(",""),")","")
	w #
	w r2,!
	WHILE SQLCODE=0{
		s r2a=""
		&sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE SIName=:r2)	
		i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
.
		i r2a="" d
		. &sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE Name=:r2)	
		. i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
.
		i r2a="" d
		. &sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE SIName %STARTSWITH :r2 )	
		. i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
	
		i r2a="" d
		. &sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE Name %STARTSWITH :r2 )	
		. i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
.
		i r2a="" d
		. &sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE :r2 %STARTSWITH SIName )	
		. i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
	
		i r2a="" d
		. &sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE :r2 %STARTSWITH Name )	
		. i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
.
		; still no matches... try again using only brackets
.
		&sql(FETCH C1)
	}
	&sql(CLOSE C1)
	
	; still no matches... try again using only brackets
.
	&sql(DECLARE C2 CURSOR FOR
		SELECT ID,Name
		INTO :r1,:r2
		FROM Template
		WHERE IsNull(DiagnosticTest,'')='' AND Name['('
	)
	&sql(OPEN C2)
	&sql(FETCH C2)
	; strip brackets
	s r2=$p($p(r2,"(",2),")",1)
	w "round 2",!
	w r2,!	
	WHILE SQLCODE=0{
		s r2a=""
		&sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE SIName=:r2)	
		i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
.
		i r2a="" d
		. &sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE Name=:r2)	
		. i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
.
		i r2a="" d
		. &sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE SIName %STARTSWITH :r2 )	
		. i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
	
		i r2a="" d
		. &sql(SELECT SIName INTO :r2a FROM DiagnosticTest WHERE Name %STARTSWITH :r2 )	
		. i r2a'="" &sql(UPDATE Template SET DiagnosticTest=:r2a WHERE ID=:r1)
.
		; still NO match... get creative!
		i r2a="" d
		. &sql(select SIName INTO :r2a FROM DiagnosticTest WHERE REPLACE(REPLACE(REPLACE(SIName,'(',''),')',''),'-',' ')=:r2)
.
		i r2a="" d
		. &sql(select SIName INTO :r2a FROM DiagnosticTest WHERE REPLACE(REPLACE(REPLACE(Name,'(',''),')',''),'-',' ')=:r2)
		&sql(FETCH C2)
	}
	&sql(CLOSE C2)
	q
Clone	; Clone from Setting 5 to Setting 6
	d INIT^CSP999
	#import MX 
	;&sql(DELETE FROM Template WHERE Setting=6)
	&sql(DECLARE cClone1 CURSOR FOR
		SELECT BucketName,CreatedDate,DiagnosticTest,Name,Setting,UnitName 
		INTO :r1,:r2,:r3,:r4,:r5,:r6
		FROM Template
		WHERE BucketName='JONDA-REPORTS-DEV-EUC1-V1/D21B07E1-4C8E-4004-8D09-DBB7C3A9CB68'
	)
	&sql(OPEN cClone1)
	&sql(FETCH cClone1)
	WHILE SQLCODE=0{
		s bucket="jonda-reports-stage-euc1-v1/1d8e6921-0592-486e-aefb-384177529dda",setting=6
		&sql(INSERT INTO "Template" (BucketName,CreatedDate,DiagnosticTest,Name,Setting,UnitName) VALUES (:bucket,:r2,:r3,:r4,:setting,:r6))
		s bucket="jonda-reports-stage-euc1-v1/224053d4-a964-4633-8ac4-bcc00ec0a743",setting=6
		&sql(INSERT INTO "Template" (BucketName,CreatedDate,DiagnosticTest,Name,Setting,UnitName) VALUES (:bucket,:r2,:r3,:r4,:setting,:r6))
		s bucket="jonda-reports-stage-euc1-v1/256a24f6-fb3d-4a26-b592-964efc1bc342",setting=6
		&sql(INSERT INTO "Template" (BucketName,CreatedDate,DiagnosticTest,Name,Setting,UnitName) VALUES (:bucket,:r2,:r3,:r4,:setting,:r6))
		s bucket="jonda-reports-stage-euc1-v1/26160fe8-884d-4bdc-a5df-1cdda88633e8",setting=6
		&sql(INSERT INTO "Template" (BucketName,CreatedDate,DiagnosticTest,Name,Setting,UnitName) VALUES (:bucket,:r2,:r3,:r4,:setting,:r6))
		s bucket="jonda-reports-stage-euc1-v1/2f4400ab-ec2d-483f-bf70-7f0774faf952",setting=6
		&sql(INSERT INTO "Template" (BucketName,CreatedDate,DiagnosticTest,Name,Setting,UnitName) VALUES (:bucket,:r2,:r3,:r4,:setting,:r6))
		s bucket="jonda-reports-stage-euc1-v1/7e2d40fa-0b71-4bd9-a80c-e6f651afd6cf",setting=6
		&sql(INSERT INTO "Template" (BucketName,CreatedDate,DiagnosticTest,Name,Setting,UnitName) VALUES (:bucket,:r2,:r3,:r4,:setting,:r6))
		s bucket="jonda-reports-stage-euc1-v1/dd4c73f2-ae77-4613-a1bd-dad6750c059e",setting=6
		&sql(INSERT INTO "Template" (BucketName,CreatedDate,DiagnosticTest,Name,Setting,UnitName) VALUES (:bucket,:r2,:r3,:r4,:setting,:r6))
		;s bucket="JONDA-REPORTS-QA-EUC1-V1/B3954D8F-CC75-4C40-A286-A9ED6DF01A02",setting=6
		;&sql(INSERT INTO "Template" (BucketName,CreatedDate,DiagnosticTest,Name,Setting,UnitName) VALUES (:bucket,:r2,:r3,:r4,:setting,:r6))
		;s bucket="JONDA-REPORTS-QA-EUC1-V1/C8033AB8-DBF7-471B-9998-0FD45D15BBC4",setting=6
		;&sql(INSERT INTO "Template" (BucketName,CreatedDate,DiagnosticTest,Name,Setting,UnitName) VALUES (:bucket,:r2,:r3,:r4,:setting,:r6))
		;s bucket="JONDA-REPORTS-QA-EUC1-V1/EA294873-8157-400B-B265-80B122BAFE4D",setting=6	
		;&sql(INSERT INTO "Template" (BucketName,CreatedDate,DiagnosticTest,Name,Setting,UnitName) VALUES (:bucket,:r2,:r3,:r4,:setting,:r6))
		&sql(FETCH cClone1)
	}
	&sql(CLOSE cClone1)
	q	

utilNewAccount^MAC^^67303,14177.4961556^0
utilNewAccount
	/*
	NOTE: Update python.s3Utils for aws access keys if not using 'default' whose bucket is 'jondaffr2'
		- moveFile 
		- uploadFile and etc 
		as well as C:\Users\jondalocal\.aws\credentials and 
		C:\Windows\System32\config\systemprofile\.aws\credentials to add new access key
		
	Create setting , user, subscription, buckets and template
	*/
	q
	//Requirements for TRIAL platform account
	s bname="jondaffr2"		; Bucket name
	s name=""
	s email=""
	s password=""
	s companyName=""
	// for TRIAL Platform
	s IsTrial=1	
	// for Trial env from Client Portal
	s IsTrial=0
	/*
	cmd
	s bname="jondaffr2", IsTrial=1, name="TestName", email="testing01@gmail.com", companyName="Testing01", password="Beta1.0:)"
	*/
CreateUser
	#import MX
	s dt= $zdatetime($h,3)
	&sql(SELECT ID INTO :uid FROM "User" WHERE UserID=:email)
	i uid="" {
		&sql(INSERT INTO "User" (CreatedDate,ContactPerson,Email,UserID,Password,CompanyName,IsAdmin,CompanyLogo,IsTrial) 
				 VALUES (:dt,:name,:email,:email,:password,:companyName,0,'default.png',:IsTrial))
		
		i SQLCODE=0 &sql(SELECT ID INTO :uid FROM "User" WHERE UserID=:email) w "User created. ID = ",uid,!
		e  w "Failed to created user.",! q
		
	}else  {
		w "User with same mail exists!" 
		q
		}
CreateSetting
	i IsTrial=1 s serverName="jxtrial"_uid
	e  s serverName=$replace(companyName," ","")
	
	&sql(INSERT INTO MX.Setting ( CliProfileName,OutputFormat, ServerName, CreatedDate) VALUES ('default','',:serverName, :dt))
	i SQLCODE=0 d
	. &sql(SELECT ID INTO :setting FROM Setting where CreatedDate=:dt AND ServerName=:serverName)
	. w "Setting Created.Setting id= ",setting,!
	. &sql(UPDATE "USER" SET Setting=:setting WHERE ID=:uid)
	. w "User's Setting is updated. User ID: ",uid,", Setting id= ",setting,!
	e  w "Failed to create Setting! User ID: ",uid,! &sql(DELETE FROM "USER" WHERE ID=:uid) q
			 	
CreateSubscription
	s sDate=+$h
	s eDate=(+$h+30)		; 30days from current date
	
	if IsTrial=1 &sql(SELECT ID,OCRUnit,TransformationUnit INTO :sub, :ocrUnit, :tUnit FROM SubscriptionSetUp WHERE ID=8)
	else  &sql(SELECT ID,OCRUnit,TransformationUnit INTO :sub, :ocrUnit, :tUnit FROM SubscriptionSetUp WHERE ID=1)
	
	&sql(INSERT INTO Subscription(EndDate,Profile,RemainingOCRUnit, 
		 RemainingRedactionUnit, RemainingTransformationUnit, StartDate, Subscription, Type)
		 VALUES(:eDate,:uid,:ocrUnit,0,:tUnit,:sDate,:sub,'Transformation'))
	i SQLCODE=0 d
	. &sql(SELECT ID INTO :subid FROM Subscription WHERE Profile=:uid) 
	. w "Subscription created. Sub ID = ",subid,!
	e  w "Failed to created Subscription.User ID: ",uid,! &sql(DELETE FROM "USER" WHERE ID=:uid) &sql(DELETE FROM "Setting" WHERE ID=:setting) q
	
CreateBuckets
	#Import MX	
	s type="Transformation"
	
	&SQL(SELECT CliProfileName INTO :pname FROM Setting WHERE ID=:setting)
	w "CliProfileName : ",pname,!
	s objx=##class(MX.Setting).%OpenId(setting)
	if (objx.Buckets '= ""){
		;s count = objx.Buckets.Count()
		&sql(SELECT TOP 1 element_key INTO :count FROM Setting_Buckets WHERE Setting=:setting ORDER BY element_key DESC)
		if SQLCODE=100 w "No buckets found for this setting.",!
	}else {s count = 0 }
	w "Existed buckets : ",count,!
	s count=count+1
	
	if IsTrial=1 s folder="jondax-trial/"_serverName
	else  s folder=$replace(companyName," ","")_"0"_count
	
	&sql(INSERT INTO Setting_Buckets (Setting, element_key, Buckets_Name, Buckets_Folder, Buckets_CliProfileName, Buckets_Type, Buckets_CreatedDate) 
    	 VALUES (:setting, :count, :bname, :folder, :pname, :type, :dt))
	i SQLCODE=0 w "Created bucket: ",bname,"/",folder,!
	else  d	
	.w "Error ("_SQLCODE _") in creating buckets: ",bname,",",folder,!
	. &sql(DELETE FROM "USER" WHERE ID=:uid) 
	. &sql(DELETE FROM "Setting" WHERE ID=:setting)
	. &sql(DELETE FROM "Subscription" WHERE ID=:subid)
	. q
CreateS3Buckets
.
	s sts1 = ##class(python.s3Utils).createFolder(pname,bname,folder_"/")
	s sts2 = ##class(python.s3Utils).createFolder(pname,bname,folder_"/Failure/")
	s sts3 = ##class(python.s3Utils).createFolder(pname,bname,folder_"/Completed/")
	s sts4 = ##class(python.s3Utils).createFolder(pname,bname,folder_"/Staging/")
	s sts5 = ##class(python.s3Utils).createFolder(pname,bname,folder_"/In-Process/")
	if ((+sts1=1)!(+sts2=1)!(+sts3=1)!(+sts4=1)!(+sts5=1)) d
	. w "Done creating S3 Bucket: ",bname,"/",folder,!
	. i IsTrial=0 w "Create or Clone template Manually......"
	else  w "Error in creating S3 buckets: ",bname,"/",folder,! q
	q
DeleteTestRecord(uid,IsTrial)
	&sql(DELETE FROM "User_LastLogin" WHERE "USER"=:uid)
	&sql(DELETE FROM Record WHERE Profile=:uid)
.
	if IsTrial=1 &sql(SELECT OCRUnit,TransformationUnit INTO :ocrUnit, :tUnit FROM SubscriptionSetUp WHERE ID=8)
	else  &sql(SELECT OCRUnit,TransformationUnit INTO :ocrUnit, :tUnit FROM SubscriptionSetUp WHERE ID=1)
	
	&sql(UPDATE Subscription SET RemainingTransformationUnit=:tUnit, RemainingOCRUnit=:ocrUnit WHERE Profile=:uid)
	
	i SQLCODE=0 w "Test Records are deleted!",!
	e  w "Records deleting failed!",! 
	q
	
AddNewBucket
	#Import MX	
	s type="Transformation"
	s folder = "jonda-reports-prod-euc1-v1/a119343e-c410-43f5-a3a5-5e5765f929f5"
	s setting = 6
	s bname ="jonda-reports-prod-euc1-v1"
	s dt= $zdatetime($h,3)
	s pname="biolytica4"
	
	w "CliProfileName : ",pname,!
	s objx=##class(MX.Setting).%OpenId(setting)
	if (objx.Buckets '= ""){
		;s count = objx.Buckets.Count()
		&sql(SELECT TOP 1 element_key INTO :count FROM Setting_Buckets WHERE Setting=:setting ORDER BY element_key DESC)
		if SQLCODE=100 w "No buckets found for this setting.",!
	}else {s count = 0 }
	w "Existed buckets : ",count,!
	s count=count+1
	
	&sql(INSERT INTO Setting_Buckets (Setting, element_key, Buckets_Name, Buckets_Folder, Buckets_CliProfileName, Buckets_Type, Buckets_CreatedDate) 
    	 VALUES (:setting, :count, :bname, :folder, :pname, :type, :dt))
	i SQLCODE=0 w "Created bucket: ",bname,"/",folder,!
	else  w "Error ("_SQLCODE _") in creating buckets: ",bname,",",folder,!
	q
.
Clone	; Clone template from existing template
.
	d INIT^CSP999
	#import MX 
	s tempName="biolytica01"		;**Change**
	s setting=6	;**** change setting**** check the setting ID of acc in MX.Setting
	; fetch data from existing template	, change BucketName for desired template
	&sql(DECLARE cClone1 CURSOR FOR
		SELECT BucketName,CreatedDate,DiagnosticTest,Name,Setting,UnitName 
		INTO :r1,:r2,:r3,:r4,:r5,:r6
		FROM Template
		WHERE BucketName='jonda-reports-prod-euc1-v1/808b0661-d9a3-4670-8f4d-67dc9ce5be68' 
	)	; change the BucketName as source template's bucketname
	&sql(OPEN cClone1)
	&sql(FETCH cClone1)
	WHILE SQLCODE=0{
		
		// change bucket to bucket name of new template-> bucketname+"/"+folder
		s bucket="jonda-reports-prod-euc1-v1/a119343e-c410-43f5-a3a5-5e5765f929f5"    ;**Change**
		
		&sql(INSERT INTO "Template" (BucketName,CreatedDate,ModifiedDate,DiagnosticTest,Name,Setting,UnitName,TemplateName) 
			 VALUES (:bucket,:r2,:r2,:r3,:r4,:setting,:r6,:tempName))
		if SQLCODE=0 w "inserted",bucket,!	 
		&sql(FETCH cClone1)
	}
	&sql(CLOSE cClone1)
	q	
.
MatchTemplate
	; Match template given by client to DiagnosticTest.Name or DiagnosticTest.SIName and DiagnosticTest.SIUnit
	; notes:
	;   - csv file should be tab delimited
	;   - file should have no header row
	; Correct any MISSING values
	; Once no MISSING, run ImportTemplate^utilNewAccount 
	#import MX
	s Q=$c(9)
	s fnam="c:\intersystems\template.txt"
	s fout="c:\intersystems\templatex.csv"
	s $ZTRAP="MatchTemplateEnd^utilNewAccount"
	s n=0
	o fnam:"rs"		; read system
	o fout:"wns"	; write new system
MatchTemplate1
	u fnam r rec
	s n=n+1
	s r1=$p(rec,Q,1),r2=$p(rec,Q,2)
	s r3="",r4=""
	&sql(SELECT SIName INTO :r3 FROM DiagnosticTest WHERE Name=:r1 OR SIName=:r1)
	&sql(SELECT SIName INTO :r4 FROM SIUnit WHERE Name=:r2 OR SIName=:r2)
	u fout w r1,Q,r2,Q,r3,Q,r4,!
	i r3="" u 0 w n+1,": ",r1," | ",r2," | MISSING | ",r4,!
	i r4="" u 0 w n+1,": ",r1," | ",r2," | ",r3," | MISSING",!
	g MatchTemplate1
MatchTemplateEnd
	s $ZTRAP=""
	c fnam
	c fout
	w $ZERROR,!
	s $ZERROR=""
	q
	
	
ImportTemplate
	#import MX
	r "Confirm to DELETE Templates and RESET? (Y/N): ",x,!
	i x'="Y" w "Fail to run... quitting...",! q
	s Q=$c(9)
	s rec=""
	s fnam="c:\intersystems\templatex.csv"
	s $ZTRAP="EndImportTemplate^utilNewAccount"
	&sql(DELETE FROM Template WHERE BucketName<>'"jondaxpoc01"')
	s dt=$zdatetime($h,3,1)
	o fnam:"rs"
ImportTemplate1
	u fnam r rec
	f i=1:1:4 s @("r"_i)=$p(rec,Q,i)
	s setting=6
	s bk="jonda-bucket-development/-"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-report-shared-qa"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-report-shared-qa/437bff17-269d-494b-8c28-912bb141848b"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-report-shared-qa/4d82078c-ccbb-4bc5-8c69-d803eeae5d83"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-report-shared-qa/b1ee6502-6a1f-41c7-b70c-a7cd32706c7e"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-report-shared-qa/b3954d8f-cc75-4c40-a286-a9ed6df01a02_qa"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-report-shared-qa/cdce52aa-380d-46af-96e6-716c98bb95b7"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-report-shared-qa/d21b07e1-4c8e-4004-8d09-dbb7c3a9cb68"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-dev-euc1-v1/437bff17-269d-494b-8c28-912bb141848b"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-dev-euc1-v1/4d82078c-ccbb-4bc5-8c69-d803eeae5d83"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-dev-euc1-v1/b1ee6502-6a1f-41c7-b70c-a7cd32706c7e"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-dev-euc1-v1/cdce52aa-380d-46af-96e6-716c98bb95b7"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-dev-euc1-v1/d21b07e1-4c8e-4004-8d09-dbb7c3a9cb68"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-prod-euc1-v1/ac21a65a-6eb2-4d5d-82d8-b747b6196d2e"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-prod-euc1-v1/c5d06c60-ba65-4d82-9ea8-c52280efac14"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-prod-euc1-v1/d92c738a-e94e-4913-be05-13344694bb91"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-prod-euc1-v1/fabc45f3-4e6d-4f3f-b1b2-25fcce74309a"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-qa-euc1-v1/12c383d2-1f96-4d73-81ea-ccc020b9c745"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-qa-euc1-v1/7bd379e8-2925-4213-9c07-1b6091166969"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-qa-euc1-v1/b3954d8f-cc75-4c40-a286-a9ed6df01a02"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-qa-euc1-v1/c8033ab8-dbf7-471b-9998-0fd45d15bbc4"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-qa-euc1-v1/ea294873-8157-400b-b265-80b122bafe4d"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-stage-euc1-v1/1d8e6921-0592-486e-aefb-384177529dda"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-stage-euc1-v1/224053d4-a964-4633-8ac4-bcc00ec0a743"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-stage-euc1-v1/256a24f6-fb3d-4a26-b592-964efc1bc342"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-stage-euc1-v1/26160fe8-884d-4bdc-a5df-1cdda88633e8"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-stage-euc1-v1/2f4400ab-ec2d-483f-bf70-7f0774faf952"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-stage-euc1-v1/7e2d40fa-0b71-4bd9-a80c-e6f651afd6cf"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-stage-euc1-v1/a8712c02-6fbc-45d6-9193-936fa40ff1ae"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s bk="jonda-reports-stage-euc1-v1/dd4c73f2-ae77-4613-a1bd-dad6750c059e"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	s setting=5
	s bk="jondaffr2"
	&sql(INSERT INTO Template (BucketName,CreatedDate,DiagnosticTest,ModifiedDate,Name,Setting,UnitName) VALUES (:bk,:dt,:r3,:dt,:r1,:setting,:r2))
	
	;s bk="jondatesting/-"
	;s bk="nexus-aime"
	;s bk="jondaxpoc01"
	g ImportTemplate1
EndImportTemplate
	c fnam
	s $ZTRAP=""
	u 0 w $ZERROR,!
	
	q

utilNewOCR^MAC^^67264,14006.9921331^0
utilNewOCR
.
Gemini
	s count=0
	s path="C:\InterSystems\Cache\JondaX\file for testing\16012025\ENG"
	set filedir = ##class(%File).NormalizeDirectory(path)
.
	set file=$ZSEARCH(filedir_"*.png")
	while file'="" {
		;s cmd="mogrify -format png """_file_""""
		;w cmd,!
		;s x=$zf(-1,cmd_" && exit")
.
		s fileName=##class(%File).GetFilename(file)	;s fileName=$p(##class(%File).GetFilename(file),".png",1)
		w fileName,!
		d ##class(python.GeminiAi).AiCompletion(file,-1,0)	
		w !
		set file=$ZSEARCH("")
	 }	
	q
.
Visionai
	s count=0
	s path="C:\InterSystems\Cache\JondaX\file for testing\16012025\INDO"
	set filedir = ##class(%File).NormalizeDirectory(path)
.
	set file=$ZSEARCH(filedir_"*.png")
	while file'="" {
		;s cmd="mogrify -format png """_file_""""
		;w cmd,!
		;s x=$zf(-1,cmd_" && exit")
.
		s fileName=##class(%File).GetFilename(file)	;s fileName=$p(##class(%File).GetFilename(file),".png",1)
		w fileName,!
		d ##class(python.GeminiAi).VisionAiCompletion(file)	
		w !
		set file=$ZSEARCH("")
	 }	
	q
	
Folder
	s n=0
	;s docDir="D:\AITraingDataset"
	s docDir="D:\TogetherAI_Avinash_Prompt01"
	set dir = ##class(%File).NormalizeDirectory(docDir)
	set folder=$ZSEARCH(dir_"*")
	while folder'="" {
		;w folder,!
		if ##class(%File).GetDirectoryLength(folder)=3{
		if ##class(%File).DirectoryExists(folder) d
		.;w "This is a folder "_folder,!
		.s fldList(n)=folder
		.s n=n+1
		}
	set folder=$ZSEARCH("")
	}
	q		
pdf2png
	for i=0:1:(n-1) {
		
		set filedir = ##class(%File).NormalizeDirectory(fldList(i))
		set file=$ZSEARCH(filedir_"*.csv")
		while file'="" {
			w file,!
			s fName=$p(##class(%File).GetFilename(file),".pdf",1)
			w fName,!
			;;d ##class(%File).Delete(file)
			;;w "File deleted : ",file,!
			s cmd="win2pdfd pdf2png """_file_""" """_filedir_"\"_fName_"-page"_".png"" 0"
			s x=$zf(-1,cmd) ;_" && exit")
			set file=$ZSEARCH("")
		}
	}	
	
	q	
jpg2png
	for i=0:1:(n-1) {
		
		set filedir = ##class(%File).NormalizeDirectory(fldList(i))
		set file=$ZSEARCH(filedir_"*.jpg")
		while file'="" {
			w file,!
			s cmd="mogrify -format png """_file_""""
			s x=$zf(-1,cmd) ;_" && exit")
			d ##class(%File).Delete(file)
			set file=$ZSEARCH("")
		}
	}	
	d $zf(-1,"exit")
	q	
	
OCRTest
	s count=0
	for i=1:1:(29) {
	set filedir = ##class(%File).NormalizeDirectory(fldList(i))
	s outputPath=fldList(i)_"\"
	;d ##class(%File).CreateDirectory(outputPath)
	;w outputPath,!
	set file=$ZSEARCH(filedir_"*.png")
	while file'="" {
		s tries=0
		;s count=count+1 w file,!
		s fName=$p(##class(%File).GetFilename(file),".png",1)
AiCompletion		
		w !
		s sts = ##class(python.TogetherAI).AiCompletion(file,outputPath)
		i sts=0
		{	
			s tries=tries+1
			w "Capture json failed!, Trying again : ",tries,!
			i (tries > 3){
				w "Exceeded limit! Skip this file : ",file,!,! 
				return ""
			} 
		g AiCompletion
		}	
	set file=$ZSEARCH("")
	}
	}	
	q
	
TextractTest
	s count=0
	for i=6:1:(10) {
	set filedir = ##class(%File).NormalizeDirectory(fldList(i))
	s outputPath=fldList(i)_"\Textract\"
	d ##class(%File).CreateDirectory(outputPath)
	;w outputPath,!
	set file=$ZSEARCH(filedir_"*.png")
	while file'="" {
		s tries=0
		;s count=count+1 w file,!
		s fName=$p(##class(%File).GetFilename(file),".png",1)
		
AiCompletion1		
		s sts=##class(python.textractUtils).GenerateCSVFromBinary(file,outputPath)
		i sts'=1
		{	
			s tries=tries+1
			w "Textract failed!, Trying again : ",tries,!
			i (tries > 3){
				w "Exceeded limit! Skip this file : ",file,! 
				return ""
			} 
		g AiCompletion1
		}	
	set file=$ZSEARCH("")
	}
	}	
	q
	
.
cleanCSV
	s docDir="D:\PaddleOCR"
		
		set filedir = ##class(%File).NormalizeDirectory(docDir)
		set file=$ZSEARCH(filedir_"*.txt")
		while file'="" {
			;w file,!
			d CleanCSV^utilAWS(file)
			set file=$ZSEARCH("")
		}
	
	q			

utilTemplateImport^MAC^^67247,41079.0763254^0
utilTemplateImport
.
Match	; Load test and unit from csv and find match in MX.DiagnosticTest
	s Q=",", K=$c(9)
	s i=1
	s cnt=0	
	// %dev original "Tab" delimited file, fnam for output
	s %dev="C:\InterSystems\Cache\JondaX\file for testing\Onward\Onward Health Research_SGH Template.txt"
	s fnam="C:\InterSystems\Cache\JondaX\file for testing\Onward\Onward Health Research_SGH Template-matched.txt"	
	s $ztrap="EndMatch^utilTemplateImport"
	o %dev
Match1
	u %dev r rec
	s dt=$zdate($h,3,,4)
	
	s d1=$p(rec,"	",1),d2=$p(rec,"	",2)
	s d1=$replace(d1,"	","")
	g:d1="" Match1
	
	s arr(cnt,"Name")=d1
	s arr(cnt,"Unit")=d2
	;u 0 w d1,"  and ",d2,!
	// Searching matches , SIName=jxName, Name= external name
	&sql(SELECT SIName INTO :jxName FROM DiagnosticTest WHERE (Name=:d1 or SIName=:d1) AND ISNUll(DeletedDate,'')='')  
	if d2'="" &sql(SELECT SIName INTO :jxUnit FROM SIUnit WHERE Name=:d2 OR SIName=:d2)
	
	// Store the match, no match =""
	i jxName'="" s arr(cnt,"jxName")=jxName
	e  s arr(cnt,"jxName")=""
	i jxUnit'="" s arr(cnt,"jxUnit")=jxUnit
	e  s arr(cnt,"jxUnit")=""
	
	s cnt=cnt+1
	g Match1
EndMatch
	c %dev
	s $ztrap=""
	// write out "NO	CName	CUnit	jxName" and data to fnam, use TAB delimited for csv and comma for txt
	;u 0 w $ZERROR,!,cnt," records processed",!
	o fnam:"wsn"
	u fnam w "NO	ClientName	ClientUnit	jxName	jxUnit",!	; for csv
	;u fnam w "NO,CName,Cunit,jxName",!			; for txt
	f i=1:1:$o(arr(""),-1) {
		u fnam
		w i,"	",arr(i,"Name"),"	",arr(i,"Unit"),"	",arr(i,"jxName"),"	",arr(i,"jxUnit"),! 	; for csv
		;w i,",",arr(i,"Name"),",",arr(i,"Unit"),",",arr(i,"jxName"),!			; for txt
		
		// highlighting missing match
		 ;Use current device, will output to terminal when run 
		 ;if arr(i,"jxName")="" u 0  w i,", ",arr(i,"Name"),", ",arr(i,"Unit")," Name missing" ,!
		 if arr(i,"jxUnit")="" u 0 w i,", ",arr(i,"Name"),", ",arr(i,"Unit"),",  ",arr(i,"jxName")," Unit missing" ,!
		}
	c fnam
	q
.
.
Import 	; Insert new template into MX.Template after matching is done,after all missing TestNames are added to Data Dictionary
		; NOTE: use TAB delimited to avoid the comma problem with CSV
	#Import MX
	n bucket,setting,uid,bk,bkfd,bucket,cName,cUnit,jxName,dt,fnam,tName
	s Q=$c(9)	;tab
	s uid=32	; ***change UserId***
	s tName="Onward Health Research_SGH"	; ***change Template name***
	s count=0
	&sql(SELECT Setting INTO :setting FROM "User" WHERE ID=:uid)
	&sql(SELECT Buckets_Name,Buckets_Folder INTO :bk,:bkfd FROM Setting_Buckets WHERE Setting=:setting)
	
	if bkfd'["-" s bucket=bk_"/"_bkfd
	e  s bucket=bk
	w bucket,", ",setting,!
	s fnam="C:\InterSystems\Cache\JondaX\file for testing\Onward\Onward Health Research_SGH Template-matched.txt"
	s $ztrap="EndImport^utilTemplateImport"
	o fnam
Import1
	u fnam r rec		; use fnam and read as 'rec'
	s dt=$zdatetime($h,3)
	g:rec="NO	CName	CUnit	jxName" Import1
	
	// put pieces into variables, check in the fnam
	s cName=$p(rec,Q,2),cUnit=$p(rec,Q,3),jxName=$p(rec,Q,4)
	s cName=$zstrip(cName, "<>W")
	s cUnit=$zstrip(cUnit, "<>W")
	s jxName=$zstrip(jxName, "<>W")
	
	g:cName="" Import1
	
	// for debugging
	;if jxName="" u 0 w $p(rec,Q,1),"	",cName,"	",cUnit,"	",jxName,!
	
	// INSERT into MX.Template
	&sql(INSERT INTO "Template" (BucketName,CreatedDate,DiagnosticTest,Name,Setting,UnitName,ModifiedDate,TemplateName) 
		 VALUES (:bucket,:dt,:jxName,:cName,:setting,:cUnit,:dt,:tName))
	if SQLCODE=0  s count=count+1 u 0 w "Inserted!",!
	else  d
	.u 0 w "Error Inserting : ",count,", ",cName,! 
	.&sql(DELETE FROM Template WHERE Setting=:setting AND TemplateName=:tName) 
	.g EndImport
	g Import1
EndImport
	c fnam
	u 0 w count,!
	s $ztrap=""
	q

utilUmlaut^MAC^^67239,16501.2219223^0
utilUmlaut
Replace(rec)		//replace Umlaut character in rec
	#import MX
	n i,Q
	s Q=$c(9)
	f i=1:1:$o(^UMLAUT(""),-1) s rec=$replace(rec,$p(^UMLAUT(i),Q,1),$p(^UMLAUT(i),Q,2))
	q rec
		
Import	; import umlaut characters
	s fnam="c:\intersystems\umlaut.txt"
	s Q=$c(9)	; tab
	k ^UMLAUT
	o fnam:"rs"
A	u fnam r rec
	f i=1:1:3 s @("r"_i)=$p(rec,Q,i)
	s ^UMLAUT(r1)=r2_Q_r3
	g A	
	

xtrialReviewResult^MAC^^67233,10734.4389061^0
trialReviewResult
InitMe
	#import MX
	d INIT1^CSP999
	i ($g(%session.Data("UserID"))=""){
		&js<window.open("cLockdown.csp","_self")>
		q 
	}
	s rid=$g(%session.Data("jxTransform","rid"))
	&js<document.getElementById("trans-id").innerHTML="Transaction ID. #(rid)#";rid=#(rid)#>
	&sql(SELECT Profile,OutputUnit,fExt,TempFile,Type,ReportDate,Profile->ContactPerson,Profile->UserID
		INTO :cID,:tName,:fExt,:tmpname,:reportType,:rReportDate,:cName,:uName
	 	FROM Record 
	 	WHERE ID=:rid)
	&sql(SELECT ID,ReportDate
		INTO :rbt,:rbtReportDate
		FROM ResultBloodTest
		WHERE Record=:rid
	)	
	&js<rbt="#(rbt)#">
	if ($LENGTH(cName)=0){
		s uName=$ZCONVERT($P(uName,"@",1),"s")
		&js<document.getElementById("cName").innerHTML = "#(uName)#">
		&js<document.getElementById("cName1").innerHTML = "#(uName)#">
	}
	else{
		&js<document.getElementById("cName").innerHTML = "#(cName)#">
		&js<document.getElementById("cName1").innerHTML = "#(cName)#">
	}
	&js<document.getElementById("tName").innerHTML = "#(tName)#">
	&js<document.getElementById("tName1").innerHTML = "#(tName)#">
	
	if (reportType=""){
		&js<reportBtn.innerHTML = closeReportSelect();  /*$("#report-select input:checkbox:checked")[0].value+'<img src="./assets/images/dropDownDarkBlue.png" alt="Dropdown">'>//closeReportSelect()*/>
	}
	else{
		&js<reportBtn.innerHTML=`#(reportType)#`+'<img src="./assets/images/dropDownDarkBlue.png" alt="Dropdown">'>
	}
.
	s reportDate=""
	if (rbtReportDate'=""){
		s reportDate=$ZDate(rbtReportDate,3)
	}
	else{
		if (rReportDate'=""){
			s reportDate=$ZDate(rReportDate,3)
		}
	}
	if (reportDate'=""){
		&js<
			document.querySelector("#report-date").value=`#(reportDate)#`;
			let date = new Date("#(reportDate)#");
			document.querySelector(".date-input").innerHTML=date.getDate().toString().padStart(2, '0')+"/"+(date.getMonth()+1).toString().padStart(2, '0')+"/"+date.getFullYear()+calendarText;
		>
	}
	s %session.Data("jxTrial","TempDir")="C:\InterSystems\Cache\jondax-trial\adhoc\"_cID_"\"_tmpname_"."_fExt
	s path="C:\data_transform\AI\"_tmpname_".csv"
	s trc=$g(^Textract(path,"rowCount"))
	&js<document.getElementById('OCRrowCount').innerHTML = ",OCR - " +`#(trc)#`+ " row(s)";>
	s ^LastView("cReviewResults",UserID,rid)="trialReviewResult.csp"
	q
.
WriteResults
	#import MX
	d INIT1^CSP999
	i ($g(%session.Data("UserID"))=""){
		&js<window.open("cLockdown.csp","_self")>
		q 
	}
	s rid=$g(%session.Data("jxTransform","rid"))
	&sql(SELECT ID 
		INTO :rbt
		FROM ResultBloodTest
		WHERE Record=:rid
	)
	s UserID=$g(%session.Data("UserID"))
	s Q=$c(9) ; tab
	n fname,tmp,fext
	&sql(SELECT OrgFile,TempFile,fExt INTO :fname,:tmp,:fext FROM Record WHERE ID=:rid)
	
	s %dev1="C:\data_transform\AI\"_tmp_".csv"
	s fname=$replace(fname,fext,"")
	s %dev="c:\intersystems\cache\csp\jondax\elfieDemo\"_fname_".csv"
	o %dev:"wns"
	s c1="#405470"	; blue
	s c2="#e63876"	; pink
	s c3="#048f2a"	; green
	s row=""
	s trow=1
	n d0,tempName,tempUnit
	s d0=1,tempName="",tempUnit=""
	k ^martin
	s ^martin("NM")=0
	//from ^FormData, elseif ^AICLUDE, ELSE from MX>ResultBloodTest_Tests
	if ($d(^FormData(UserID, rid)) = 10){ 
WriteTable1a
	s row=$o(^FormData(UserID, rid,row)) g:row="" WriteTable1End
	s r0 = $g(^FormData(UserID, rid, row, "testDate"))
	s r1 = $g(^FormData(UserID, rid, row, "testName"))
	s r2 = $g(^FormData(UserID, rid, row, "testUnit"))
	s r3 = $g(^FormData(UserID, rid, row, "testValue"))	
	s r4 = $g(^FormData(UserID, rid, row, "testLoRange"))	
	s r5 = $g(^FormData(UserID, rid, row, "testHiRange"))
.
.
	s r2x=r2
	s trowCount=$g(^Textract(%dev1,"rowCount"))
	s dCount=2*trowCount	
	g:r1="" WriteTable1a
.
	; clean up units
		s r2=$replace(r2,"|","l")
		s r2=$replace(r2," ","")
		s r3=$replace(r3,",",".")
		i $e(r2,$l(r2)-1,$l(r2))="/1" s r2=$replace(r2,"/1","/l")
		i $e(r2,$l(r2))="_" s r2=r2_"l"
		s r2=$replace(r2," / ","/") 
		s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:r2 OR SIName=:r2)
		i x="",(r2["lU")!(r2["Ul") s r2=$replace(r2,"l","I")
		i x="",r2'="" s r2=r2_"/l"	; because of g. ; commented by DW 2024-03-14 ;uncommented by Martin 2024-03-20
		s x1="" &sql(SELECT ID INTO :x1 FROM SIUnit WHERE Name=:r2 OR SIName=:r2) 
		i x1="",r2'="" s r2=$replace(r2,"/l","")
	; end clean up
	; missing units- check textract
	;for unit is misplaced in value eg."0.10 10e9-l" or "H 3.60 mmol/L" by Martin 2024-04-08
	;s ^martin(row,"1")=r3_", "_r2
	i r3[" " { 
		for i = 1:1:$length(r3, " ") 
		{   if $number($piece(r3, " ", i))  d
	    	.if r2="" s r2=$piece(r3, " ", i+1)
	    	.s r3= $piece(r3, " ", i)  
			}
	}
	;s ^martin(row,"2")=r3_", "_r2
	; clean up value and range
		s r3=$replace(r3,",",".")
		s r3=$replace(r3,"*","")
		s r3=$replace(r3," ","")
		s r4=$replace(r4,",",".")
		s r4=$replace(r4," ","")
		i $p(r4,"-",1)'="",$p(r4,"-",2)'="" d	; cater for 1-3
		. s r5=$p(r4,"-",2),r4=$p(r4,"-",1)
		s r5=$replace(r5,",",".")
		s r5=$replace(r5," ","")
		i $p(r5,"-",1)'="",$p(r5,"-",2)'="" d	; cater for 1-3
		. s r4=$p(r5,"-",1),r5=$p(r5,"-",2)
	; end clean up
	;cater for "<", ">" signs column placement
	if (r4["<"),(r5="") s r5=r4 s r4=""
	if (r4=""),(r5[">") s r4=r5 s r5=""
	
	; Compare ^AICLAUDE vs ^Textract
	i trow<=trowCount
	{
		s t1=$p(^Textract(%dev1,trow,"BB"),",",1) ; get testname from ^Textract
		if $e(t1,$l(t1))=" " s t1=$e(t1,1,$l(t1)-1) ;remove trailing space from testname
		;Check r1,r2,r3,r4,r5 all contain in ^Textract(%dev,row,"BB")
		if r1[t1, ^Textract(%dev1,trow,"BB")[r2, ^Textract(%dev1,trow,"BB")[r3, ^Textract(%dev1,trow,"BB")[r4, ^Textract(%dev1,trow,"BB")[r5 
		{	;s ^martin("match",row,trow)=r1_","_r2x_","_r3_" are match with "_^Textract(%dev1,trow,"BB") s ^martin("NM",trow)=0
			s match=1
			s trow=trow+1 }
		else
		{ 	
			if ($g(^FormData(UserID,rid,"rowCount"))=dCount)
			{	//for 2 sets of result
				i r2="" s r2=$g(^FormData(UserID,rid,row-1,"unit"))
				i r4="" s r4=$g(^FormData(UserID,rid,row-1,"loRange"))
				i r5="" s r5=$g(^FormData(UserID,rid,row-1,"hiRange"))
				s r2x=r2
				s match=0
				;s ^martin(row,r2,r4,r5)=$g(^FormData(UserID,rid,row-1,"unit"))_" , "_$g(^FormData(UserID,rid,row-1,"loRange"))_" , "_$g(^FormData(UserID,rid,row-1,"hiRange"))
			    ;s ^martin("NM",trow)=1 s ^martin("not match1",row,trow)=r1_","_r2_","_r3_","_r4_","_r5_" is not match with "_^Textract(%dev1,trow,"BB")
				}
			elseif r1[t1 { s match=0 s trow=trow+1} ;s ^martin("NM")=1   s ^martin("NM",trow)=1 s ^martin("not match2",row,trow)=r1_","_r2_","_r3_","_r4_","_r5_" is not match with "_^Textract(%dev1,trow,"BB") 	
			elseif  trow<trowCount{
				s trow1=trow+1
				s t2=$p(^Textract(%dev1,trow1,"BB"),",",1) ;get next testname from ^Textract
				;s ^martin("tname2",trow1,trow)=t2_r1 ; 
				if $e(t2,$l(t2))=" " s t2=$e(t2,1,$l(t2)-1) ;remove trailing space from testname 
				if r1'=t2 s trow=trow+1 s match=1 ;g WriteTable1a 
				e  d 
				.;s ^martin("row Test",trow)=r1_" , "_t2
				.s match=0 ;s ^martin("NM")=1   s ^martin("NM",trow)=1 s ^martin("not match3",row,trow)=r1_","_r2_","_r3_","_r4_","_r5_" is not match with "_^Textract(%dev1,trow,"BB")
				.s trow=trow1
			
			}else{ s match=0}
		}
	}else { s match=0}
	
	if match=0 w "<tr class='' style='background-color: #F7D896;'>" 
	if match=1 w "<tr class=''>" 
	;END
	&sql(SELECT OutputUnit INTO :bk FROM Record WHERE id=:rid)
.
	w "<td class='actions'><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)' > <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)' >  <img class='add-row-icon' src='./assets/images/row.png' alt='add row' onclick='addNewRow(event)' ></td>"
	w "<td class='date' style='color:"_c1_"'>"_r0_"</td>"
	w "<td class='test-name' onclick='jEditBox(event)'>"_r1_"</td>"
	s x=$$GetSIName^WSP999(r1)
	; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
	if x["#",r2="%" s x=$p(x," ",1)
	
	/*&sql(select ID INTO x2 from TrialTemplate where DiagnosticTest[:x_" #")
	if x2'="",r2'="%" s x=x_" #" */
	
	if $d(^FormData(UserID, rid, row, "TNameEdited")),$g(^FormData(UserID, rid, row, "TNameEdited"))'=""{
		s r1Edited=$g(^FormData(UserID, rid, row, "TNameEdited"))
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM c WHERE Name=:r1Edited AND BucketName=:bk)
		if tempName'="" w "<td class='transformed-name edited' style='color:"_c1_";' title='Edited' ><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1Edited_"'></td>"
		e  w "<td class='transformed-name edited' style='color:"_c2_";'title='No matching Template-Edited'  ><input type='text' style='color:"_c2_";' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1Edited_"'></td>"
		}
	else{	//else1
	s r1a=""
	i x="" {
	 	s IsMatch=0,r1a=r1
		WHILE IsMatch=0&($l(r1a)'=0){
			s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
			i r0'="" s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
		
		i r1a'="" d
		.&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:r1a AND BucketName=:bk)
		.i tempName'="" s r1=tempName w "<td class='transformed-name issue' style='color:"_c2_"' title='No match-Picking closest JX match'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1a
		.e  w "<td class='transformed-name issue' style='color:"_c2_"' title='No match Template:Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>" ;r1a
		e  s tempUnit="" w "<td class='transformed-name issue' style='color:"_c2_";' title='No match JX Name & Template:Using original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
		
	}
	i x'="" {
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x AND BucketName=:bk)
		i tempName'="" d
		.i tempName["(percent)",r2'="%" d
		..s x=x_" #" ;s tempName=$replace(tempName,"(percent)","(Abs)") 
		..&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x AND BucketName=:bk)
		.i $zconvert(tempName,"l")=$zconvert(r1,"l") w "<td class='transformed-name converted' style='color:"_c1_"' title='Converted:Same BB'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>" ;r1	
		.e  s r1=x w "<td class='transformed-name converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>"
		e  w "<td class='transformed-name issue' style='color:"_c2_"; ' title='No matching Template- Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_r1_"'></td>"
		}
	} //end of 	else1
		
	w "<td class='result' onclick='jEditBox(event)'>"_r3_"</td>"
	w "<td class='from-unit' onclick='jEditBox(event)'>"_r2_"</td>"
	if tempUnit'="" {
	s x=$$GetJXUnit^WSP999(r2)
	s r2a=tempUnit
	i x'="" s r2=x 
 
	; more clean up
		i r2="%" d
		. i $l($p(r3,".",1))>3 s r3=$replace(r3,".",""),r3=$e(r3,1,2)_"."_$e(r3,3,999)
		. i $l($p(r4,".",1))>3 s r4=$replace(r4,".",""),r4=$e(r4,1,2)_"."_$e(r4,3,999)
		. i $l($p(r5,".",1))>3 s r5=$replace(r5,".",""),r5=$e(r5,1,2)_"."_$e(r5,3,999)
		 ;end more
		; test if original unit can be converted
		s x="",x=$$U2U^WSP999(r1,r3,r2,r2a)
		;s ^martin("t",row,r1)=r3_","_r2_" ; "_r2a_","_x
		;i x["ERROR" s r2a=tempUnit 
		i x["ERROR" 
	
	 	s r3x=r3,r4x=r4,r5x=r5
		s r3=$$U2U^WSP999(r1,r3,r2,r2a)
		s r4=$$U2U^WSP999(r1,r4,r2,r2a)
		s r5=$$U2U^WSP999(r1,r5,r2,r2a)
		;s ^martin(row,"t2")=r1_r5_r2_r2a
	}else  {s x="ERROR Converting" s r2a=r2,r3x=r3,r4x=r4,r5x=r5  }
	//s r3=$$C2H^WSP999($g(^FormData(UserID, rid, row, "TValue")))
	s r4=$g(^FormData(UserID, rid, row, "TLoRange"))
	s r5=$g(^FormData(UserID, rid, row, "THiRange"))
	s r4Org = $g(^FormData(UserID, rid, row, "testLoRange"))	
	s r5Org = $g(^FormData(UserID, rid, row, "testHiRange"))
.
	s recalc=0
	
	i $d(^FormData(UserID, rid, row, "TUnitEdited")),$g(^FormData(UserID, rid, row, "TUnitEdited"))'="" {
		s r2Edited=$g(^FormData(UserID, rid, row, "TUnitEdited"))
		s r3=$g(^FormData(UserID, rid, row, "TValue"))
		w "<td class='convert-result-unit edited' style='color:"_c1_";' title='Edited' ><div class='dropdown' style='color:"_c1_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2Edited_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>"
		w "<td class='convert-result-val edited' style='color:"_c1_"' title='Edited'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
		w "<td class='l-range' onclick='jEditBox(event)'>"_r4Org_" "_r2x_"</td>",!
		w "<td class='l-result-val' style='color:"_c1_"' title='Edited'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!
		w "<td class='l-result-unit' onclick='jEditBox(event)'>"_r2a_"</td>",!
		w "<td class='u-range' onclick='jEditBox(event)'>"_r5Org_" "_r2x_"</td>",!
		w "<td class='u-result-val' style='color:"_c1_"' title='Edited'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!
		w "<td class='u-result-unit'>"_r2a_"</td>",!
		w "<td class='row-num' style='display:none;'>"_row_"</td>"
		w "</tr>",!
	}
	else{
		i tempUnit="" ,x["ERROR" d
		.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching Template Unit, Using Original : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
		i tempUnit'="" ,x["ERROR" d
		.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching JX Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
		
		i tempUnit'="",x'["ERROR" d
		. i (r2a="")!($zconvert(r2a,"l")=$zconvert(r2x,"l")) w "<td class='convert-result-unit converted' style='color:"_c1_"' title='Converted:Same Unit'><div class='dropdown' style='color:"_c1_";/*border-color:"_c3_"*/'  onclick='openUnitSuggestions(event)' onfocus='saveToGlobals()' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>"
		. e  s recalc=1 s r2=r2a w "<td class='convert-result-unit converted' style='color:"_c3_"' title='Converted'><div class='dropdown' style='color:"_c3_"' onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td></td>" 
	
		i recalc {
			;i recalc d
			i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"   ;_ave_"// " s ave=$$AveRes^WSP999(r1,r3,r2,"")
			i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			
			w "<td class='l-range' onclick='jEditBox(event)'>"_r4Org_" "_r2x_"</td>",!
			if r4["ERROR" {w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4Org_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"}
			elseif (tempUnit="" ){w "<td class='l-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			else  {w "<td class='l-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			w "<td class='l-result-unit'>"_r2a_"</td>",!
			w "<td class='u-range' onclick='jEditBox(event)'>"_r5Org_" "_r2x_"</td>",!
			i r5["ERROR" {w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5Org_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			ELSEIF (tempUnit="") {w "<td class='u-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			else {w "<td class='u-result-val converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			w "<td class='u-result-unit'>"_r2a_"</td>",!
			w "<td class='row-num' style='display:none;'>"_row_"</td>"
			w "</tr>",!
	
		  }else{
		
			i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			e  d
			.i tempUnit="" w "<td class='convert-result-val issue' style='color:"_c1_"' title='No template:Using Original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			.e  s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
.
			w "<td class='l-range' onclick='jEditBox(event)'>"_r4Org_" "_r2x_"</td>",!
			if r4["ERROR" {w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4Org_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"}
			elseif (tempUnit="" ){w "<td class='l-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			else  {w "<td class='l-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>",!}
			w "<td class='l-result-unit' onclick='jEditBox(event)'>"_r2a_"</td>",!
			
			w "<td class='u-range' onclick='jEditBox(event)'>"_r5Org_" "_r2x_"</td>",!
			i r5["ERROR" {w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5Org_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			ELSEIF (tempUnit="") {w "<td class='u-result-val issue' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			else {w "<td class='u-result-val converted' style='color:"_c1_"' title='Converted:Same Unit'><input type='text' style='color:"_c1_"' autocomplete='off' onmouseup='dataChange(event)'  value='"_$s(r5'="":r5,1:"")_"'></td>",!}
			w "<td class='u-result-unit'>"_r2a_"</td>",!
			w "<td class='row-num' style='display:none;'>"_row_"</td>"
			w "</tr>",!
		}
	}  ;end of TUnitEdited else
	u %dev w r0_Q_r1_Q_r2_Q_r3_Q_r4_Q_r5,! u 0
	g WriteTable1a	
WriteTable1End
	c %dev
	u 0
	q
	}
	elseif ($d(^AICLAUDE(rid))){d WriteTable} ;Take Data from ^AICLAUDE
	
	else {  ; From ResultBloodTest_Tests for HL7,Json,xml,xlsx, doesn't compare with textract
		&sql(DECLARE C1 CURSOR FOR
			SELECT COUNT(element_key),element_key,Tests_TestName,Tests_SIUnit,Tests_Result,Tests_LowRange,Tests_HighRange,ResultBloodTest->ReportDate
			INTO :rowkey,:key,:r1,:r2,:r3,:r4,:r5,:r0
			FROM ResultBloodTest_Tests 
			WHERE ResultBloodTest=:rbt
		)
		&sql(OPEN C1)
		&sql(FETCH C1)
		WHILE SQLCODE=0{
WriteTable2a
			s row=key
			s r2x=r2
			s trowCount=$g(^Textract(%dev1,"rowCount"))
			s dCount=2*trowCount	
			g:r1="" WriteTable2End
.
			; clean up units
			s r2=$replace(r2,"|","l")
			s r2=$replace(r2," ","")
			s r3=$replace(r3,",",".")
			i $e(r2,$l(r2)-1,$l(r2))="/1" s r2=$replace(r2,"/1","/l")
			i $e(r2,$l(r2))="_" s r2=r2_"l"
			s r2=$replace(r2," / ","/") 
			s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:r2 OR SIName=:r2)
			i x="",(r2["lU")!(r2["Ul") s r2=$replace(r2,"l","I")
			i x="",r2'="" s r2=r2_"/l"	; because of g. ; commented by DW 2024-03-14 ;uncommented by Martin 2024-03-20
			s x1="" &sql(SELECT ID INTO :x1 FROM SIUnit WHERE Name=:r2 OR SIName=:r2) 
			i x1="",r2'="" s r2=$replace(r2,"/l","")
			i r3[" " { 
				for i = 1:1:$length(r3, " ") 
				{   if $number($piece(r3, " ", i))  d
			    	.if r2="" s r2=$piece(r3, " ", i+1)
			    	.s r3= $piece(r3, " ", i)  
					}
			}
			; clean up value and range
				s r3=$replace(r3,",",".")
				s r3=$replace(r3,"*","")
				s r3=$replace(r3," ","")
				s r4=$replace(r4,",",".")
				s r4=$replace(r4," ","")
				i $p(r4,"-",1)'="",$p(r4,"-",2)'="" d	; cater for 1-3
				. s r5=$p(r4,"-",2),r4=$p(r4,"-",1)
				s r5=$replace(r5,",",".")
				s r5=$replace(r5," ","")
				i $p(r5,"-",1)'="",$p(r5,"-",2)'="" d	; cater for 1-3
				. s r4=$p(r5,"-",1),r5=$p(r5,"-",2)
			; end clean up
			;cater for "<", ">" signs column placement
			if (r4["<"),(r5="") s r5=r4 s r4=""
			if (r4=""),(r5[">") s r4=r5 s r5=""
 
			&sql(SELECT OutputUnit INTO :bk FROM Record WHERE id=:rid)
			w "<tr class=''>"
			w "<td class='actions'><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)' > <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)' >  <img class='add-row-icon' src='./assets/images/row.png' alt='add row' onclick='addNewRow(event)' ></td>"
			w "<td class='date' style='color:"_c1_"'>"_r0_"</td>"
			w "<td class='test-name' onclick='jEditBox(event)'>"_r1_"</td>"
			s x=$$GetSIName^WSP999(r1)
			; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
			if x["#",r2="%" s x=$p(x," ",1)
			
			/*&sql(select ID INTO x2 from TrialTemplate where DiagnosticTest[:x_" #")
			if x2'="",r2'="%" s x=x_" #" */
			s r1a=""
			i x="" {
			 	s IsMatch=0,r1a=r1
				WHILE IsMatch=0&($l(r1a)'=0){
					s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
					i r0'="" s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
					i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
				}
				
				i r1a'="" d
				.&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:r1a AND BucketName=:bk)
				.i tempName'="" w "<td class='transformed-name issue' style='color:"_c2_"' title='No matching JX Name- Picking closest match'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1a
				.e  w "<td class='transformed-name issue' style='color:"_c2_"' title='No matching JX Name & Template -Using Original'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>" ;r1a
				e  s tempUnit="" w "<td class='transformed-name issue' style='color:"_c2_";' title='No matching  Template1- Using original'><input type='text' style='color:"_c1_"; background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>"
				
			}
			i x'="" {
				&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x AND BucketName=:bk)
				i tempName'="" d
				.i tempName["(percent)",r2'="%" d
				..s x=x_" #" ;s tempName=$replace(tempName,"(percent)","(Abs)") 
				..&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x AND BucketName=:bk)
				.i $zconvert(tempName,"l")=$zconvert(r1,"l") w "<td class='transformed-name converted' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1	
				.e  s r1=x w "<td class='transformed-name converted' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>"
				e  w "<td class='transformed-name issue' style='color:"_c2_"; ' title='No matching Template- Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>"
				}
			w "<td class='result' onclick='jEditBox(event)'>"_r3_"</td>"
			w "<td class='from-unit' onclick='jEditBox(event)'>"_r2_"</td>"
			if tempUnit'="" {
			s x=$$GetJXUnit^WSP999(r2)
			s r2a=tempUnit
			i x'="" s r2=x 
		 
			; more clean up
				i r2="%" d
				. i $l($p(r3,".",1))>3 s r3=$replace(r3,".",""),r3=$e(r3,1,2)_"."_$e(r3,3,999)
				. i $l($p(r4,".",1))>3 s r4=$replace(r4,".",""),r4=$e(r4,1,2)_"."_$e(r4,3,999)
				. i $l($p(r5,".",1))>3 s r5=$replace(r5,".",""),r5=$e(r5,1,2)_"."_$e(r5,3,999)
				; test if original unit can be converted
				s x="",x=$$U2U^WSP999(r1,r3,r2,r2a)
				;s ^martin("t",row,r1)=r3_","_r2_" ; "_r2a_","_x
				i x["ERROR" s r2a=tempUnit 
			; end more
			d
			. s r3x=r3,r4x=r4,r5x=r5
			. s r3=$$U2U^WSP999(r1,r3,r2,r2a)
			. s r4=$$U2U^WSP999(r1,r4,r2,r2a)
			. s r5=$$U2U^WSP999(r1,r5,r2,r2a)
			;s ^martin(row,"t2")=r1_r5_r2_r2a
			}else  {s x="ERROR Converting" s r2a=r2,r3x=r3,r4x=r4,r5x=r5  }
			s recalc=0
			i tempUnit="" ,x["ERROR" d
			.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching Template Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
			i tempUnit'="" ,x["ERROR" d
			.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching JX Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
			i x'["ERROR" d
			. i (r2a="")!($zconvert(r2a,"l")=$zconvert(r2,"l")) w "<td class='convert-result-unit' style='color:"_c1_"'><div class='dropdown' style='color:"_c1_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>"
			. e  s recalc=1 s r2=r2a w "<td class='convert-result-unit' style='color:"_c3_"'><div class='dropdown' style='color:"_c3_"' onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td></td>" 
.
			i recalc d
			. i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"   ;_ave_"// " s ave=$$AveRes^WSP999(r1,r3,r2,"")
			. i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			. w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_" "_r2x_"</td>",!
			. i r4'["ERROR" w "<td  class='l-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
			. i r4["ERROR" w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
			. w "<td class='l-result-unit'>"_r2a_"</td>",!
			. w "<td class='u-range' onclick='jEditBox(event)'>"_r5x_" "_r2x_"</td>",!
			. i r5'["ERROR" w "<td class='u-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"
			. i r5["ERROR" w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"
			. w "<td class='u-result-unit'>"_r2a_"</td>",!
			. w "<td class='row-num' style='display:none;'>"_row_"</td>"
			e  d
			. i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			. i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
			. w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_" "_r2x_"</td>",!
			. i r4'["ERROR" w "<td class='l-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
			. i r4["ERROR" w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
			. w "<td class='l-result-unit'>"_r2a_"</td>",!
			. w "<td class='u-range' onclick='jEditBox(event)'>"_r5x_" "_r2x_"</td>",!
			. i r5'["ERROR" w "<td class='u-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"  //"_$s(r5'="":r5,1:"")
			. i r5["ERROR" w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"  //$s(r5'="":r5,1:"")
			. w "<td class='u-result-unit'>"_r2a_"</td>",!
			. w "<td class='row-num' style='display:none;'>"_row_"</td>"
			w "</tr>",!
			
WriteTable2End
			&sql(FETCH C1) 
		}
		&sql(CLOSE C1)
	} // end of else */
.
    q
.
FileStatusChange
	#import MX
	d INIT1^CSP999
	s rid=%session.Data("jxTransform","rid")
	if (d2="Failure"){
		&sql(UPDATE Record SET Note=:d1,Status=:d2,Reason=:d3,ReviewedDate=GETDATE() WHERE ID=:rid)
		
		// must add to error table based on the selection of reasion
		s errCode = "100"
		s errData = "test data"
		s errName = "test error from review"
		//The new errors are not populated yet, thus leads to '' in errCode,errData,errName
		&sql(SELECT Code,Description,Name INTO :errCode,:errData,:errName FROM ErrorCode WHERE FriendlyDescription=:d3)
		
		s dt = $zdatetime($h,3)
		&sql(SELECT BucketName,OrgFile INTO :bk,:fName FROM Record WHERE ID=:rid)
		s errData = $REPLACE(errData,"[yyyy-mm-dd hh:mm]",dt)
		s errData = $REPLACE(errData,"[filename]",fName)
		s errData = $REPLACE(errData,"[bucket]",bk)
		&sql(INSERT INTO MX.Error (Code, Data, Name, CreatedDate, Record, BucketName) VALUES (:errCode, :errData, :errName, :dt, :rid, :bk))
	}
	else{
		&sql(UPDATE Record SET Note=:d1,Status=:d2,Reason=:d3 WHERE ID=:rid)
	}
	
	q
	
ConvertResults
	#import MX
	d INIT1^CSP999
	&sql(SELECT SIName 
	INTO :r1
	FROM DiagnosticTest
	WHERE LOWER(Name)[LOWER(:d1)
	)
	//&js<alert(`#(d2)#`+", "+`#(d3)#`+", "+`#(d4)#`+", "+`#(d5)#`+", "+`#(d6)#`);>
	s cVal = $$U2U^WSP999(r1,d2,d5,d6) ;$$CheckAndConvertNum(r1,d2,d5,d6)  ;changed on 2024-03-26 Martin
	s lVal = $$U2U^WSP999(r1,d3,d5,d6) ;$$CheckAndConvertNum(r1,d3,d5,d6) ;
	s uVal = $$U2U^WSP999(r1,d4,d5,d6) ;$$CheckAndConvertNum(r1,d4,d5,d6) ;
	//&js<alert(`#(cVal)#`+", "+`#(lVal)#`+", "+`#(uVal)#`);>
	&js<unitsCal.push("#($s(cVal="":"",1:$$FormatNumber^cMain(cVal,2)))#","#($s(lVal="":"",1:$$FormatNumber^cMain(lVal,2)))#","#($s(uVal="":"",1:$$FormatNumber^cMain(uVal,2)))#")>
	
	q
.
CheckAndConvertNum(SIName,value,fromUnit,toUnit) ;not use
	n x1,x2,x3,x4,val
	s (x1,x2,x3,x4,val,prefix)=""
	; value is null ;added by Martin 11/3/2024
	i value="" q value 
	; same unit
	i $zconvert(fromUnit,"l")=$zconvert(toUnit,"l") d  q value
	. i value["<=" s prefix="<=",value=$replace(value,"<=","")
	. i value[">=" s prefix=">=",value=$replace(value,">=","")
	. i value["</=" s prefix="</=",value=$replace(value,"</=","")
	. i value[">/=" s prefix=">/=",value=$replace(value,">/=","")
	. i value["<" s prefix="<",value=$replace(value,"<","")
	. i value[">" s prefix=">",value=$replace(value,">","")
	. s value=prefix_$fn(value,,2)
	; branch for Lipoprotein A
	if $zconvert(SIName,"l")="lipoprotein a",value="" q value ;added by Martin 11/3/2024
	if $zconvert(SIName,"l")="lipoprotein a",$zconvert(fromUnit,"l")="g/l",$zconvert(toUnit,"l")="nmol/l" set value=$fn(((value*100)*2.5),,2) quit value
	if $zconvert(SIName,"l")="lipoprotein a",$zconvert(fromUnit,"l")="mg/dl",$zconvert(toUnit,"l")="nmol/l" set value=$fn((value*2.5),,2) quit value
	; branch for HbA1c
	if $zconvert(SIName,"l")="hba1c",$zconvert(fromUnit,"l")="mmol/mol",$zconvert(toUnit,"l")="%" set value=$fn(((value/10.929)+2.15),,2) q value
	n xUnit,xtoUnit
	s xUnit="",xtoUnit=""
	i $zconvert(fromUnit,"l")=$zconvert(toUnit,"l") q value
	&sql(SELECT SIName INTO :xUnit FROM SIUnit WHERE SIName=:fromUnit)
	s xtoUnit=$$GetJXUnit^WSP999(toUnit)
	i xtoUnit="" s xtoUnit=$$GetSIUnit^WSP999(toUnit)
	;b:$g(DW)=1
	i xtoUnit'="" s toUnit=xtoUnit
	i xUnit=""	&sql(SELECT SIName INTO :xUnit FROM SIUnit WHERE Name=:fromUnit)
	i xUnit="" s xUnit=$$GetJXUnit^WSP999(fromUnit)
	i xUnit'="" s fromUnit=xUnit
	if ($ISVALIDNUM(value)){
		i $$U2U^WSP999(SIName,value,fromUnit,toUnit)'="ERROR CONVERTING" q $$U2U^WSP999(SIName,value,fromUnit,toUnit)
		; try getting a different test name
		&sql(SELECT TOP 1 DiagnosticTest INTO :SIName FROM SIUnitConversion WHERE ToUnit=:toUnit AND fromUnit=:fromUnit)	
		q $$U2U^WSP999(SIName,value,fromUnit,toUnit)
	}
	if (value=""){
		q ""
	}
	if ($EXTRACT(value)="<")!($EXTRACT(value)=">"){
		s fChar = $EXTRACT(value)
		q fChar_$$U2U^WSP999(SIName,$P(value,fChar,2),fromUnit,toUnit)
	}
	q value
	
WriteReasons
	#import MX
	d INIT1^CSP999
	&sql(DECLARE C3 CURSOR FOR
		SELECT FriendlyDescription 
		INTO :r1
		FROM ErrorCode
		WHERE IsReason=1
	)
	&sql(OPEN C3)
	&sql(FETCH C3)
	WHILE SQLCODE=0{
		w "<li onclick='selectReason(event)'>"_r1_"</li>"
		&sql(FETCH C3)
	}
	&sql(CLOSE C3)
	q
	
LoadTemplateNames
	#import MX
	d INIT1^CSP999
	;&sql(SELECT Setting INTO :setting FROM "User" WHERE ID=:UserID)
	s rid=$g(%session.Data("jxTransform","rid"))
	&sql(SELECT OutputUnit INTO :bk FROM Record WHERE id=:rid)
	s testNames = ""
	&sql(DECLARE C4 CURSOR FOR
	SELECT DISTINCT %EXACT(name)
	INTO :r1 
	FROM TrialTemplate
	WHERE LOWER(name)[LOWER(:d1)
	AND BucketName=:bk
	ORDER BY name
	)
	&sql(OPEN C4)
	&sql(FETCH C4)
	if SQLCODE=100 s testNames = "<li class='no-result'>No result found</li>"
	WHILE SQLCODE=0{
		s testNames=testNames_"<li onclick='changeTestName(event)' tabIndex='-1'>"_r1_"</li>\n"
		&sql(FETCH C4)
	}
	&sql(CLOSE C4)
	&js<document.querySelector(".testname-dropdown").firstElementChild.innerHTML = "#(testNames)#">
	q
	
BiomarkerTranslation(name,bk)
	n flag
	s tempName=""
	s tempUnit=""
	s siName=""
	s name=$ZCONVERT(name,"l")
	//Rules for Matching Diagnostic Names:
	//1. Check for equals to SIName
	&sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(SIName)=:name AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	s flag=1
	//2. Check for equals to Name
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(Name)=:name AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	.s flag=2
	//name inside brackets
	s name1=$p($p(name,"(",2),")",1)
	
	//5. Check for %STARTSWITH SIName
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(SIName) %STARTSWITH :name AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	.s flag=3
	//6. Check for %STARTSWITH Name
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(Name) %STARTSWITH :name AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	.s flag=4
	//striping brackets,"-",#,trimming
	s name2=$ZSTRIP($REPLACE($REPLACE($REPLACE($REPLACE(name,"(",""),")",""),"-"," "),"#",""),"<>W")
	
	//7. Check for SIName = strip brackets and "-" and #
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(TRIM(REPLACE(REPLACE(REPLACE(REPLACE(SIName,'(',''),')',''),'-',' '),'#',''))) = :name2 AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	.s flag=5
	//8. Check for Name = strip brackets and "-" and #
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(TRIM(REPLACE(REPLACE(REPLACE(REPLACE(Name,'(',''),')',''),'-',' '),'#',''))) = :name2 AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	.s flag=6
	//3. Check for equals to (SIName = anything in bracket)
	//Potential failure for some words like 'PCV' which translates to Packed Cell Volume
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(SIName)=:name1 AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	.s flag=7
	//4. Check for equals to (Name = anything in bracket)
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(Name)=:name1 AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	.s flag=8
	//9. Check for SIName %CONTAINS x
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(SIName)[:name AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	.s flag=9
	//10. Check for Name %CONTAINS x
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE LOWER(Name)[:name AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
	.s flag=10
	/*//11. Check for x %CONTAINS SIName
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE :name[LOWER(SIName) HAVING LENGTH(SIName)>4)
	
	//12. Check for x %CONTAINS Name
	i siName="" d
	. &sql(SELECT SIName INTO :siName FROM DiagnosticTest WHERE :name[LOWER(Name) HAVING LENGTH(Name)>4)*/
	
	i siName'="" &sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:siName AND BucketName=:bk)
	q siName_$c(1)_tempName_$c(1)_tempUnit
	
BiomarkerTranslation1(name,bk)
	s tempName="",tempUnit=""
	s x=$$GetSIName^WSP999(name)
	i x'="" {
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x AND BucketName=:bk )
		}
	q x_$c(1)_tempName_$c(1)_tempUnit
	
ClearTransformedData(userId,rid)
	//d ClearTransformedData^cReviewResultsS2(6,645)
	s count = 1
	while ($d(^FormData(userId, rid, count)) = 10){
		s ^FormData(userId, rid, count, "TName") = ""
		s ^FormData(userId, rid, count, "TValue") = ""
		s ^FormData(userId, rid, count, "TUnit") = ""
		s ^FormData(userId, rid, count, "THiRange") = ""
		s ^FormData(userId, rid, count, "TLoRange") = ""
	    s count = +count + 1
	}
	q
	
WriteTable
	#import MX
	d INIT^WSP999
	s Q=$c(9)	; tab	
	i ($g(%session.Data("UserID"))=""){
		&js<window.open("cLockdown.csp","_self")>
		q 
	}
	s rid=$g(%session.Data("jxTransform","rid"))
	s UserID=$g(%session.Data("UserID"))
	n fname,tmp,fext
	&sql(SELECT OrgFile,TempFile,fExt INTO :fname,:tmp,:fext FROM Record WHERE ID=:rid)
	s %dev1="c:\intersystems\cache\jondax\elfie\ad-hoc\"_tmp_".csv"
	s fname=$replace(fname,fext,"")
	s %dev="c:\intersystems\cache\csp\jondax\elfieDemo\"_fname_".csv"
	o %dev:"wns"
	s c1="#405470"	; blue
	s c2="#e63876"	; pink
	s c3="#048f2a"	; green
	s row=""
	s trow=1
	n d0,tempName,tempUnit
	s d0=1,tempName="",tempUnit=""
	k ^martin
	s ^martin("NM")=0
WriteTableA
	s row=$o(^AICLAUDE(rid,row)) g:row="" WriteTableEnd
	s r0=$g(^AICLAUDE(rid,row,"date"))
	s r1=$g(^AICLAUDE(rid,row,"name"))
	s r2=$g(^AICLAUDE(rid,row,"unit"))
	s r3=$g(^AICLAUDE(rid,row,"value"))
	s r4=$g(^AICLAUDE(rid,row,"loRange"))
	s r5=$g(^AICLAUDE(rid,row,"hiRange"))
	s r2x=r2
	s trowCount=$g(^Textract(%dev1,"rowCount"))
	s dCount=2*trowCount
	; test ^AICLAUDE vs ^AICLAUDE for duplicate rows
	if row>1 
	{	n pRow s pRow= row-1
		s r1p=$g(^AICLAUDE(rid,pRow,"name"))
		if (r1=r1p),($g(^AICLAUDE(rid,"rowCount"))'=dCount) s trow=trow+1  g WriteTableA
		if ^AICLAUDE(rid,row,"row"_row)= ^AICLAUDE(rid,pRow,"row"_pRow) d 
		.s ^AICLAUDE(rid,"rowCount")=$g(^AICLAUDE(rid,"rowCount"))-1 
		.g WriteTableA
		
	} 
	g:r1="" WriteTableA
.
	; clean up units
		s r2=$replace(r2,"|","l")
		s r2=$replace(r2," ","")
		s r3=$replace(r3,",",".")
		i $e(r2,$l(r2)-1,$l(r2))="/1" s r2=$replace(r2,"/1","/l")
		i $e(r2,$l(r2))="_" s r2=r2_"l"
		s r2=$replace(r2," / ","/") 
		s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:r2 OR SIName=:r2)
		i x="",(r2["lU")!(r2["Ul") s r2=$replace(r2,"l","I")
		i x="",r2'="" s r2=r2_"/l"	; because of g. ; commented by DW 2024-03-14 ;uncommented by Martin 2024-03-20
		s x1="" &sql(SELECT ID INTO :x1 FROM SIUnit WHERE Name=:r2 OR SIName=:r2) 
		i x1="",r2'="" s r2=$replace(r2,"/l","")
	; end clean up
	; missing units- check textract
	;for unit is misplaced in value eg."0.10 10e9-l" or "H 3.60 mmol/L" by Martin 2024-04-08
	;s ^martin(row,"1")=r3_", "_r2
	i r3[" " { 
		for i = 1:1:$length(r3, " ") 
		{   if $number($piece(r3, " ", i))  d
	    	.if r2="" s r2=$piece(r3, " ", i+1)
	    	.s r3= $piece(r3, " ", i)  
			}
	}
	;s ^martin(row,"2")=r3_", "_r2
	; clean up value and range
		s r3=$replace(r3,",",".")
		s r3=$replace(r3,"*","")
		s r3=$replace(r3," ","")
		s r4=$replace(r4,",",".")
		s r4=$replace(r4," ","")
		i $p(r4,"-",1)'="",$p(r4,"-",2)'="" d	; cater for 1-3
		. s r5=$p(r4,"-",2),r4=$p(r4,"-",1)
		s r5=$replace(r5,",",".")
		s r5=$replace(r5," ","")
		i $p(r5,"-",1)'="",$p(r5,"-",2)'="" d	; cater for 1-3
		. s r4=$p(r5,"-",1),r5=$p(r5,"-",2)
	; end clean up
	;cater for "<", ">" signs column placement
	if (r4["<"),(r5="") s r5=r4 s r4=""
	if (r4=""),(r5[">") s r4=r5 s r5=""
	
	; Compare ^AICLAUDE vs ^Textract
	i trow<=trowCount
	{
		s t1=$p(^Textract(%dev1,trow,"BB"),",",1) ; get testname from ^Textract
		if $e(t1,$l(t1))=" " s t1=$e(t1,1,$l(t1)-1) ;remove trailing space from testname
		;Check r1,r2,r3,r4,r5 all contain in ^Textract(%dev,row,"BB")
		if r1[t1, ^Textract(%dev1,trow,"BB")[r2, ^Textract(%dev1,trow,"BB")[r3, ^Textract(%dev1,trow,"BB")[r4, ^Textract(%dev1,trow,"BB")[r5 
		{	;s ^martin("match",row,trow)=r1_","_r2x_","_r3_" are match with "_^Textract(%dev1,trow,"BB") s ^martin("NM",trow)=0
			s match=1
			s trow=trow+1 }
		else
		{ 	
			if ($g(^AICLAUDE(rid,"rowCount"))=dCount)
			{	//for 2 sets of result
				i r2="" s r2=$g(^AICLAUDE(rid,row-1,"unit"))
				i r4="" s r4=$g(^AICLAUDE(rid,row-1,"loRange"))
				i r5="" s r5=$g(^AICLAUDE(rid,row-1,"hiRange"))
				s r2x=r2
				s match=0
				;s ^martin(row,r2,r4,r5)=$g(^AICLAUDE(rid,row-1,"unit"))_" , "_$g(^AICLAUDE(rid,row-1,"loRange"))_" , "_$g(^AICLAUDE(rid,row-1,"hiRange"))
			    ;s ^martin("NM",trow)=1 s ^martin("not match1",row,trow)=r1_","_r2_","_r3_","_r4_","_r5_" is not match with "_^Textract(%dev1,trow,"BB")
				}
			elseif r1[t1 { s match=0 s trow=trow+1} ;s ^martin("NM")=1   s ^martin("NM",trow)=1 s ^martin("not match2",row,trow)=r1_","_r2_","_r3_","_r4_","_r5_" is not match with "_^Textract(%dev1,trow,"BB") 	
			elseif  trow<trowCount{
				s trow1=trow+1
				s t2=$p(^Textract(%dev1,trow1,"BB"),",",1) ;get next testname from ^Textract
				;s ^martin("tname2",trow1,trow)=t2_r1 ; 
				if $e(t2,$l(t2))=" " s t2=$e(t2,1,$l(t2)-1) ;remove trailing space from testname 
				if r1'=t2 s trow=trow+1 s match=1 ;g WriteTable1a 
				e  d 
				.;s ^martin("row Test",trow)=r1_" , "_t2
				.s match=0 ;s ^martin("NM")=1   s ^martin("NM",trow)=1 s ^martin("not match3",row,trow)=r1_","_r2_","_r3_","_r4_","_r5_" is not match with "_^Textract(%dev1,trow,"BB")
				.s trow=trow1
			
			}else{ s match=0}
		}
	}else { s match=0}
	
	if match=0 w "<tr class='' style='background-color: #F7D896;'>" 
	if match=1 w "<tr class=''>" 
	;END
.
	&sql(SELECT OutputUnit INTO :bk FROM Record WHERE id=:rid)
	
	w "<td class='actions'><img class='duplicate-icon' src='./assets/images/duplicate.png' alt='Duplicate' onclick='duplicateRow(event)' > <img src='./assets/images/delete.png' alt='Delete' onclick='deleteRow(event)' >  <img class='add-row-icon' src='./assets/images/row.png' alt='add row' onclick='addNewRow(event)' ></td>"
	w "<td class='date' style='color:"_c1_"'>"_r0_"</td>"
	w "<td class='test-name' onclick='jEditBox(event)'>"_r1_"</td>"
	s x=$$GetSIName^WSP999(r1)
	; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
	if x["#",r2="%" s x=$p(x," ",1)
	
	/*&sql(select ID INTO x2 from TrialTemplate where DiagnosticTest[:x_" #")
	if x2'="",r2'="%" s x=x_" #" */ 
	s r1a=""
	i x="" {
	 	s IsMatch=0,r1a=r1
		WHILE IsMatch=0&($l(r1a)'=0){
			s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'' AND ModifiedDate<=ApprovedDate)
			i r0'="" s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
		
		i r1a'="" d
		.&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:r1a AND BucketName=:bk)
		.i tempName'="" s r1=tempName w "<td class='transformed-name issue' style='color:"_c2_"' title='No matching JX Name- Picking closest match'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1a
		.e  w "<td class='transformed-name issue' style='color:"_c2_"' title='No matching JX Name & Template -Using Original'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>" ;r1a
		e  s tempUnit="" w "<td class='transformed-name issue' style='color:"_c2_";' title='No matching  Template1- Using original'><input type='text' style='color:"_c1_"; background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>"
		
	}
	i x'="" {
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x AND BucketName=:bk)
		i tempName'="" d
		.i tempName["(percent)",r2'="%" d
		..s x=x_" #" ;s tempName=$replace(tempName,"(percent)","(Abs)") 
		..&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x AND BucketName=:bk)
		.i $zconvert(tempName,"l")=$zconvert(r1,"l") w "<td class='transformed-name converted' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" ;r1	
		.e  s r1=x w "<td class='transformed-name converted' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>"
		e  w "<td class='transformed-name issue' style='color:"_c2_"; ' title='No matching Template- Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_r1_"'></td>"
		}
	w "<td class='result' onclick='jEditBox(event)'>"_r3_"</td>"
	w "<td class='from-unit' onclick='jEditBox(event)'>"_r2_"</td>"
	if tempUnit'="" {
	s x=$$GetJXUnit^WSP999(r2)
	s r2a=tempUnit
	i x'="" s r2=x 
 
	; more clean up
		i r2="%" d
		. i $l($p(r3,".",1))>3 s r3=$replace(r3,".",""),r3=$e(r3,1,2)_"."_$e(r3,3,999)
		. i $l($p(r4,".",1))>3 s r4=$replace(r4,".",""),r4=$e(r4,1,2)_"."_$e(r4,3,999)
		. i $l($p(r5,".",1))>3 s r5=$replace(r5,".",""),r5=$e(r5,1,2)_"."_$e(r5,3,999)
		; test if original unit can be converted
		s x="",x=$$U2U^WSP999(r1,r3,r2,r2a)
		;s ^martin("t",row,r1)=r3_","_r2_" ; "_r2a_","_x
		i x["ERROR" s r2a=tempUnit 
	; end more
	d
	. s r3x=r3,r4x=r4,r5x=r5
	. ;i tempName'="" s r1x=tempName e  s r1x=r1
	. s r1x=r1
	. s r3=$$U2U^WSP999(r1x,r3,r2,r2a)
	. s r4=$$U2U^WSP999(r1x,r4,r2,r2a)
	. s r5=$$U2U^WSP999(r1x,r5,r2,r2a)
	;s ^martin(row,"t2")=r3_r1x_r2_r2a
	}else  {s x="ERROR Converting" s r2a=r2,r3x=r3,r4x=r4,r5x=r5  }
	s recalc=0
	i tempUnit="" ,x["ERROR" d
	.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching Template Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
	i tempUnit'="" ,x["ERROR" d
	.w "<td class='convert-result-unit issue' style='color:"_c2_"' title='No matching JX Unit : "_r2x_"'><div class='dropdown' style='color:"_c2_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>" ;r2
	i x'["ERROR" d
	. i (r2a="")!($zconvert(r2a,"l")=$zconvert(r2x,"l")) w "<td class='convert-result-unit' style='color:"_c1_"'><div class='dropdown' style='color:"_c1_"'  onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td>"
	. e  s recalc=1 s r2=r2a w "<td class='convert-result-unit' style='color:"_c3_"'><div class='dropdown' style='color:"_c3_"' onclick='openUnitSuggestions(event)' tabindex='-1'>"_r2a_" <img src='./assets/images/dropDownDarkBlue.png' alt='Dropdown'></div></td></td>" 
.
	i recalc d
	. i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"   ;_ave_"// " s ave=$$AveRes^WSP999(r1,r3,r2,"")
	. i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
	. w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_" "_r2x_"</td>",!
	. i r4'["ERROR" w "<td  class='l-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
	. i r4["ERROR" w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
	. w "<td class='l-result-unit'>"_r2a_"</td>",!
	. w "<td class='u-range ' onclick='jEditBox(event)'>"_r5x_" "_r2x_"</td>",!
	. i r5'["ERROR" w "<td class='u-result-val' style='color:"_c3_"'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"
	. i r5["ERROR" w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"
	. w "<td class='u-result-unit'>"_r2a_"</td>",!
	.w "<td class='row-num' style='display:none;'>"_row_"</td>"
	e  d
	. i r3'["ERROR" s ave=$$AveRes^WSP999(r1,r3,r2,"") w "<td class='convert-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
	. i r3["ERROR" w "<td class='convert-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r3x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r3'="":r3,1:"")_"'></td>"
	. w "<td class='l-range' onclick='jEditBox(event)'>"_r4x_" "_r2x_"</td>",!
	. i r4'["ERROR" w "<td class='l-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
	. i r4["ERROR" w "<td class='l-result-val issue' style='color:"_c2_"' title='No matching JXConversion : "_r4x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r4'="":r4,1:"")_"'></td>"
	. w "<td class='l-result-unit'>"_r2a_"</td>",!
	. w "<td class='u-range' onclick='jEditBox(event)'>"_r5x_" "_r2x_"</td>",!
	. i r5'["ERROR" w "<td class='u-result-val' style='color:"_c1_"'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"  //"_$s(r5'="":r5,1:"")
	. i r5["ERROR" w "<td class='u-result-val issue' style='color:"_c2_"' title='No matching JXConversion :"_r5x_"'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' value='"_$s(r5'="":r5,1:"")_"'></td>"  //$s(r5'="":r5,1:"")
	. w "<td class='u-result-unit'>"_r2a_"</td>",!
	. w "<td class='row-num' style='display:none;'>"_row_"</td>"
	w "</tr>",!
	u %dev w r0_Q_r1_Q_r2_Q_r3_Q_r4_Q_r5,! u 0
	g WriteTableA	
WriteTableEnd
	c %dev
	u 0
	q	
		
.
.
PopOriginal
	
	#import MX
	d INIT1^CSP999
	n extIndex
	s rid=%session.Data("jxTransform","rid")	
	s r1="",r2="",r3=""
	&sql(SELECT OrgFile,TempFile,Profile INTO :r1,:r2,:r3 FROM Record WHERE ID=:rid)
	s extIndex=$LENGTH(r1)+3-$FIND($REVERSE(r1),$REVERSE("."))
	s fileExt= $p(r1,".",*) ;$e(r1,extIndex,$l(r1))
	s temp=r2_"."_fileExt
	s ffile=$g(%session.Data("jxTrial","TempDir"))
	s reviewFile="C:\InterSystems\Cache\CSP\JondaX-Trials\"
	s status= ##class(%File).CopyFile(ffile,reviewFile)
	
	i status=0{ &js<alert("File not found!")>}
	else {
		s file="../JondaX-Trials/"_temp
		s fileExt=$zconvert(fileExt,"l")
		
		;i r2="heic"!(r2="webp")!(r2="avif")!(r2="jpg")!(r2="jpeg") d	
		i fileExt="heic"!(fileExt="webp")!(fileExt="avif") d
		. s cmd="mogrify -resize 50% -format png "_ffile
		. s x=$zf(-1,cmd_" && exit")
		. s fileExt="PNG"
		. s file="../JondaX-Trials/"_rid_"/"_r2_"."_fileExt
		
		//html result
		i fileExt="html" d
		. s file="../JondaX-Trials/"_r2_"."_fileExt
		
		s %session.Data("jxTrialPreview","File")="C:\InterSystems\Cache\CSP\JondaX-Trials\"_temp
		
		&js<window.open("#(file)#","_blank")>
		
		}
	;d ##class(%File).Delete(^INST("CSPDir")_"\"_^INST("NS")_"\"_file)
	q
WriteResultTypes
	s rid=%session.Data("jxTransform","rid")
	&sql(SELECT Type
		INTO :reportType
	 	FROM MX.Record 
	 	WHERE ID=:rid)
	&sql(DECLARE C2 CURSOR FOR
		SELECT DISTINCT %EXACT(ResultType)
		INTO :r1
		FROM MX.DiagnosticType
		WHERE DeletedDate IS NULL
	)
	&sql(OPEN C2)
	&sql(FETCH C2)
	s num=1
	WHILE SQLCODE=0{
		w "<div class='report-item'>",!
        w "<div class='round'>",!
        w "<input autocomplete='off' name='report' id='C"_num_"' type='checkbox' value='"_r1_"'"
	 	if (reportType=r1) || (num=1){
		 	w " checked"
	 	}
        w ">",!
        w "<label for='C"_num_"'></label>",!
        w "</div>",!
        w "<p>"_r1_"</p>",!
        w "</div>",!
        s num=num+1
        &sql(FETCH C2)
	}
	&sql(CLOSE C2)
	q	
	
SaveReport
	#import MX
	s rid=$g(%session.Data("jxTransform","rid"))
	s sid=$g(%session.Data("SessionId"))
	i sid'="",rid="" s rid=$g(^jxTransform(sid,"trialReviewResults"))
	;&sql(SELECT ID INTO :rbt FROM ResultBloodTest Where Record=:rid)
	&sql(UPDATE Record SET Type=:d1,ReportDate=Date(:d2) WHERE ID=:rid)
	&sql(UPDATE ResultBloodTest SET ReportDate=DATE(:d2) WHERE ID=:rbt)
	q	
	
SaveReportDate
	q
	#import MX
.
	;s date=$zdateh(d1)
	;s date2=$zdatetimeh(d1,1)
	&sql(UPDATE Record SET ReportDate=DATE(:d1) WHERE ID=:rid) //DATE(:d1
	;&sql(UPDATE ResultBloodTest SET ReportDate=DATE(:d1) WHERE ID=:rbt)
	q	
LoadJXNames(d1)
	#import MX
	s UserID=$g(%session.Data("UserID"))
	&sql(SELECT Setting INTO :setting FROM "User" WHERE ID=:UserID)
	s rid=$g(%session.Data("jxTransform","rid"))
	&sql(SELECT OutputUnit INTO :bk FROM Record WHERE id=:rid)
	n tempName,tempUnit,IsMatch,ro,r1,r1a
	s testName = ""
	s cTestName=$$GetSIName^WSP999(d1)
	; for biomarkers xxx#(JXName) from % to another 2024-05-15 martin
	;if cTestName["#",r2="%" s cTestName=$p(cTestName," ",1)
	s r1a=""
	i cTestName="" {
	 	s IsMatch=0,r1a=d1
		WHILE IsMatch=0&($l(r1a)'=0){
			s r0="" &sql(SELECT ID INTO :r0 FROM DiagnosticTest WHERE (Name=:r1a OR SIName=:r1a) AND IsNull(DeletedDate,'')='' AND IsNull(ApprovedDate,'')<>'')
			i r0'="" s IsMatch=1 &sql(SELECT SIName INTO :r1a FROM DiagnosticTest  WHERE ID=:r0)
			i 'IsMatch s r1a=$e(r1a,1,$l(r1a)-1)
		}
		i r1a'="" d
		.&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:r1a AND BucketName=:bk)
		.i tempName'="" d
		..s testName=tempName 
		..s testName="<td class='transformed-name issue' style='color:"_c2_"' title='No match-Picking closest JX match'><input type='text' style='color:"_c2_"' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_tempName_"'></td>" 
		.e  d 
		..s testName=r1a 
		..s testName="<td class='transformed-name issue' style='color:"_c2_"' title='No match Template:Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onfocus='saveToGlobals()' value='"_d1_"'></td>"
		e  d
		.s tempUnit="" s testName=d1 
		.s testName="<td class='transformed-name issue' style='color:"_c2_";' title='No match JX Name & Template:Using original'><input type='text' style='color:"_c1_";' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_d1_"'></td>"
		&js<newTestname=`#(testName)#`>
	}
	i cTestName'="" {
		&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:cTestName AND BucketName=:bk)
		i tempName'="" d
		.;i tempName["(percent)",r2'="%" d
		..;s x1=cTestName_" #" 
		..;&sql(SELECT Name,UnitName INTO :tempName,:tempUnit FROM TrialTemplate WHERE DiagnosticTest=:x1 AND BucketName=:bk)
		.i $zconvert(tempName,"l")=$zconvert(d1,"l") s testName="<td class='transformed-name converted' style='color:"_c1_"' title='Converted:Same BB'><input type='text' style='color:"_c1_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>"
		.e  s d1=cTestName s testName= "<td class='transformed-name converted' style='color:"_c3_"' title='Converted'><input type='text' style='color:"_c3_"' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_tempName_"'></td>"
		e  s testName=d1  s testName="<td class='transformed-name issue' style='color:"_c2_"; ' title='No matching Template- Using original'><input type='text' style='color:"_c1_";background-color: #e6f796;' autocomplete='off' onkeyup='dataChange(event)' onblur='debounceInput(event)' value='"_d1_"'></td>"
		&js<newTestname=`#(testName)#`>
		}
	q testName
	
LoadUnitsBasedOnName
	s units=""
	s rid=$g(%session.Data("jxTransform","rid"))
	&sql(SELECT OutputUnit INTO :bk FROM Record WHERE id=:rid)
	&sql(SELECT UnitName 
	INTO :r1
	FROM TrialTemplate
	WHERE LOWER(Name)=LOWER(:d1)
	AND BucketName=:bk
	)
	if (SQLCODE=0){
		s units="<li onclick='changeUnit(event)' tabindex='-1'>"_r1_"</li>\n"
	}
	if (d2="") {
		s units = units_"<li onclick='changeUnit(event)' tabindex='-1'><br></li>\n"
	}
	if (r1'=d2){
		;s units="<li onclick='changeUnit(event)' tabindex='-1'>"_r1_"</li>\n"
		s units = units_"<li onclick='changeUnit(event)' tabindex='-1'>"_d2_"</li>\n"
	}
	&js<document.querySelector(".unit-dropdown").firstElementChild.innerHTML = "#(units)#">
	
	q
unitCleanUp
	n x,x1,d1x,x2
	s d1x=d1
	s rid=$g(%session.Data("jxTransform","rid"))
.
	s d1=$replace(d1," / ","/")
	s d1=$replace(d1,"|","l")
	s d1=$replace(d1," ","")
	s d1=$replace(d1,".","")
    i $e(d1,$l(d1))="_" s d1=d1_"l"  ;for "g_"
    i $e(d1,$l(d1)-1,$l(d1))="/1" s d1=$replace(d1,"/1","/l")
	s x="" &sql(SELECT ID INTO :x FROM SIUnit WHERE Name=:d1 OR SIName=:d1)
	i x="",(d1["lU")!(d1["Ul") s d1=$replace(d1,"l","I")
	i x="",d1'="" s d1=d1_"/l"	; because of g. ; commented by DW 2024-03-14 ;uncommented by Martin 2024-03-20
	s x1="" &sql(SELECT ID INTO :x1 FROM SIUnit WHERE Name=:d1 OR SIName=:d1) 
	i x1="",d1'="" s d1=$replace(d1,"/l","")
	i x'="" &sql(SELECT SIName INTO :x2 FROM SIUnit WHERE ID=:x) s d1=x2
	i x1'="" &sql(SELECT SIName INTO :x2 FROM SIUnit WHERE ID=:x1) s d1=x2
	if d1'=d1x &js<newFromUnit1= "#(d1)#">
	e  &js<newFromUnit1= "#(d1x)#">
	q	
.
.
ConvertNewResults
	#import MX
	d INIT1^CSP999
	s rid=$g(%session.Data("jxTransform","rid"))
	&sql(SELECT OutputUnit INTO :bk FROM Record WHERE ID=:rid)
	&sql(SELECT DiagnosticTest 
	INTO :r1
	FROM TrialTemplate
	WHERE LOWER(Name)[LOWER(:d1) AND BucketName=:bk
	)
	;&js<alert(`#(r1)#`+`#(d1)#`+`#(d4)#`+`#(d2)#`+`#(d3)#`)>
	;&js<console.log(`#(r1)#`+", "+`#(d1)#`+`#(d4)#`+`#(d2)#`+`#(d3)#`)>
	s cVal = $$U2U^WSP999(r1,d2,d5,d6) ;$$CheckAndConvertNum(r1,d2,d5,d6)  ;changed on 2024-03-26 Martin
	s lVal = $$U2U^WSP999(r1,d3,d5,d6) ;$$CheckAndConvertNum(r1,d3,d5,d6) ;
	s uVal = $$U2U^WSP999(r1,d4,d5,d6) ;$$CheckAndConvertNum(r1,d4,d5,d6) ;
	&js<unitsCal.push("#($s(cVal="":"",1:$$FormatNumber^cMain(cVal,2)))#","#($s(lVal="":"",1:$$FormatNumber^cMain(lVal,2)))#","#($s(uVal="":"",1:$$FormatNumber^cMain(uVal,2)))#")>
	q		



